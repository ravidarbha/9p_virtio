cscope 15 $HOME/rdarbha/9p_virtio               0000811101
	@9p.h

5 #i‚de‡
NET_P9_H


6 
	#NET_P9_H


	)

8 
	~<sys/ty≥s.h
>

10 
	ep9_msg_t
 {

11 
	mP9_TLERROR
 = 6,

12 
	mP9_RLERROR
,

13 
	mP9_TSTATFS
 = 8,

14 
	mP9_RSTATFS
,

15 
	mP9_TLOPEN
 = 12,

16 
	mP9_RLOPEN
,

17 
	mP9_TLCREATE
 = 14,

18 
	mP9_RLCREATE
,

19 
	mP9_TSYMLINK
 = 16,

20 
	mP9_RSYMLINK
,

21 
	mP9_TMKNOD
 = 18,

22 
	mP9_RMKNOD
,

23 
	mP9_TRENAME
 = 20,

24 
	mP9_RRENAME
,

25 
	mP9_TREADLINK
 = 22,

26 
	mP9_RREADLINK
,

27 
	mP9_TGETATTR
 = 24,

28 
	mP9_RGETATTR
,

29 
	mP9_TSETATTR
 = 26,

30 
	mP9_RSETATTR
,

31 
	mP9_TXATTRWALK
 = 30,

32 
	mP9_RXATTRWALK
,

33 
	mP9_TXATTRCREATE
 = 32,

34 
	mP9_RXATTRCREATE
,

35 
	mP9_TREADDIR
 = 40,

36 
	mP9_RREADDIR
,

37 
	mP9_TFSYNC
 = 50,

38 
	mP9_RFSYNC
,

39 
	mP9_TLOCK
 = 52,

40 
	mP9_RLOCK
,

41 
	mP9_TGETLOCK
 = 54,

42 
	mP9_RGETLOCK
,

43 
	mP9_TLINK
 = 70,

44 
	mP9_RLINK
,

45 
	mP9_TMKDIR
 = 72,

46 
	mP9_RMKDIR
,

47 
	mP9_TRENAMEAT
 = 74,

48 
	mP9_RRENAMEAT
,

49 
	mP9_TUNLINKAT
 = 76,

50 
	mP9_RUNLINKAT
,

51 
	mP9_TVERSION
 = 100,

52 
	mP9_RVERSION
,

53 
	mP9_TAUTH
 = 102,

54 
	mP9_RAUTH
,

55 
	mP9_TATTACH
 = 104,

56 
	mP9_RATTACH
,

57 
	mP9_TERROR
 = 106,

58 
	mP9_RERROR
,

59 
	mP9_TFLUSH
 = 108,

60 
	mP9_RFLUSH
,

61 
	mP9_TWALK
 = 110,

62 
	mP9_RWALK
,

63 
	mP9_TOPEN
 = 112,

64 
	mP9_ROPEN
,

65 
	mP9_TCREATE
 = 114,

66 
	mP9_RCREATE
,

67 
	mP9_TREAD
 = 116,

68 
	mP9_RREAD
,

69 
	mP9_TWRITE
 = 118,

70 
	mP9_RWRITE
,

71 
	mP9_TCLUNK
 = 120,

72 
	mP9_RCLUNK
,

73 
	mP9_TREMOVE
 = 122,

74 
	mP9_RREMOVE
,

75 
	mP9_TSTAT
 = 124,

76 
	mP9_RSTAT
,

77 
	mP9_TWSTAT
 = 126,

78 
	mP9_RWSTAT
,

81 
	ep9_›í_mode_t
 {

82 
	mP9_OREAD
 = 0x00,

83 
	mP9_OWRITE
 = 0x01,

84 
	mP9_ORDWR
 = 0x02,

85 
	mP9_OEXEC
 = 0x03,

86 
	mP9_OTRUNC
 = 0x10,

87 
	mP9_OREXEC
 = 0x20,

88 
	mP9_ORCLOSE
 = 0x40,

89 
	mP9_OAPPEND
 = 0x80,

90 
	mP9_OEXCL
 = 0x1000,

93 
	ep9_≥rm_t
 {

94 
	mP9_DMDIR
 = 0x80000000,

95 
	mP9_DMAPPEND
 = 0x40000000,

96 
	mP9_DMEXCL
 = 0x20000000,

97 
	mP9_DMMOUNT
 = 0x10000000,

98 
	mP9_DMAUTH
 = 0x08000000,

99 
	mP9_DMTMP
 = 0x04000000,

101 
	mP9_DMSYMLINK
 = 0x02000000,

102 
	mP9_DMLINK
 = 0x01000000,

103 
	mP9_DMDEVICE
 = 0x00800000,

104 
	mP9_DMNAMEDPIPE
 = 0x00200000,

105 
	mP9_DMSOCKET
 = 0x00100000,

106 
	mP9_DMSETUID
 = 0x00080000,

107 
	mP9_DMSETGID
 = 0x00040000,

108 
	mP9_DMSETVTX
 = 0x00010000,

112 
	#P9_DOTL_RDONLY
 00000000

	)

113 
	#P9_DOTL_WRONLY
 00000001

	)

114 
	#P9_DOTL_RDWR
 00000002

	)

115 
	#P9_DOTL_NOACCESS
 00000003

	)

116 
	#P9_DOTL_CREATE
 00000100

	)

117 
	#P9_DOTL_EXCL
 00000200

	)

118 
	#P9_DOTL_NOCTTY
 00000400

	)

119 
	#P9_DOTL_TRUNC
 00001000

	)

120 
	#P9_DOTL_APPEND
 00002000

	)

121 
	#P9_DOTL_NONBLOCK
 00004000

	)

122 
	#P9_DOTL_DSYNC
 00010000

	)

123 
	#P9_DOTL_FASYNC
 00020000

	)

124 
	#P9_DOTL_DIRECT
 00040000

	)

125 
	#P9_DOTL_LARGEFILE
 00100000

	)

126 
	#P9_DOTL_DIRECTORY
 00200000

	)

127 
	#P9_DOTL_NOFOLLOW
 00400000

	)

128 
	#P9_DOTL_NOATIME
 01000000

	)

129 
	#P9_DOTL_CLOEXEC
 02000000

	)

130 
	#P9_DOTL_SYNC
 04000000

	)

133 
	#P9_DOTL_AT_REMOVEDIR
 0x200

	)

136 
	#P9_LOCK_TYPE_RDLCK
 0

	)

137 
	#P9_LOCK_TYPE_WRLCK
 1

	)

138 
	#P9_LOCK_TYPE_UNLCK
 2

	)

140 
	ep9_qid_t
 {

141 
	mP9_QTDIR
 = 0x80,

142 
	mP9_QTAPPEND
 = 0x40,

143 
	mP9_QTEXCL
 = 0x20,

144 
	mP9_QTMOUNT
 = 0x10,

145 
	mP9_QTAUTH
 = 0x08,

146 
	mP9_QTTMP
 = 0x04,

147 
	mP9_QTSYMLINK
 = 0x02,

148 
	mP9_QTLINK
 = 0x01,

149 
	mP9_QTFILE
 = 0x00,

153 
	#P9_NOTAG
 (
uöt16_t
)(~0)

	)

154 
	#P9_NOFID
 (
uöt32_t
)(~0)

	)

155 
	#P9_MAXWELEM
 16

	)

157 
	sp9_qid
 {

158 
uöt8_t
 
	mty≥
;

159 
uöt32_t
 
	mvîsi⁄
;

160 
uöt64_t
 
	m∑th
;

163 
	sp9_w°©
 {

164 
uöt16_t
 
	msize
;

165 
uöt16_t
 
	mty≥
;

166 
uöt32_t
 
	mdev
;

167 
p9_qid
 
	mqid
;

168 
uöt32_t
 
	mmode
;

169 
uöt32_t
 
	m©ime
;

170 
uöt32_t
 
	mmtime
;

171 
uöt64_t
 
	mÀngth
;

172 *
	m«me
;

173 *
	muid
;

174 *
	mgid
;

175 *
	mmuid
;

176 *
	mexãnsi⁄
;

177 
uid_t
 
	mn_uid
;

178 
gid_t
 
	mn_gid
;

179 
uid_t
 
	mn_muid
;

182 
	sp9_°©_dŸl
 {

183 
uöt64_t
 
	m°_ªsu…_mask
;

184 
p9_qid
 
	mqid
;

185 
uöt32_t
 
	m°_mode
;

186 
uid_t
 
	m°_uid
;

187 
gid_t
 
	m°_gid
;

188 
uöt64_t
 
	m°_∆ök
;

189 
uöt64_t
 
	m°_rdev
;

190 
uöt64_t
 
	m°_size
;

191 
uöt64_t
 
	m°_blksize
;

192 
uöt64_t
 
	m°_blocks
;

193 
uöt64_t
 
	m°_©ime_£c
;

194 
uöt64_t
 
	m°_©ime_n£c
;

195 
uöt64_t
 
	m°_mtime_£c
;

196 
uöt64_t
 
	m°_mtime_n£c
;

197 
uöt64_t
 
	m°_˘ime_£c
;

198 
uöt64_t
 
	m°_˘ime_n£c
;

199 
uöt64_t
 
	m°_btime_£c
;

200 
uöt64_t
 
	m°_btime_n£c
;

201 
uöt64_t
 
	m°_gí
;

202 
uöt64_t
 
	m°_d©a_vîsi⁄
;

205 
	#P9_STATS_MODE
 0x00000001ULL

	)

206 
	#P9_STATS_NLINK
 0x00000002ULL

	)

207 
	#P9_STATS_UID
 0x00000004ULL

	)

208 
	#P9_STATS_GID
 0x00000008ULL

	)

209 
	#P9_STATS_RDEV
 0x00000010ULL

	)

210 
	#P9_STATS_ATIME
 0x00000020ULL

	)

211 
	#P9_STATS_MTIME
 0x00000040ULL

	)

212 
	#P9_STATS_CTIME
 0x00000080ULL

	)

213 
	#P9_STATS_INO
 0x00000100ULL

	)

214 
	#P9_STATS_SIZE
 0x00000200ULL

	)

215 
	#P9_STATS_BLOCKS
 0x00000400ULL

	)

217 
	#P9_STATS_BTIME
 0x00000800ULL

	)

218 
	#P9_STATS_GEN
 0x00001000ULL

	)

219 
	#P9_STATS_DATA_VERSION
 0x00002000ULL

	)

221 
	#P9_STATS_BASIC
 0x000007ffULL

	)

222 
	#P9_STATS_ALL
 0x00003fffULL

	)

224 
	sp9_üâr_dŸl
 {

225 
uöt32_t
 
	mvÆid
;

226 
uöt32_t
 
	mmode
;

227 
uid_t
 
	muid
;

228 
gid_t
 
	mgid
;

229 
uöt64_t
 
	msize
;

230 
uöt64_t
 
	m©ime_£c
;

231 
uöt64_t
 
	m©ime_n£c
;

232 
uöt64_t
 
	mmtime_£c
;

233 
uöt64_t
 
	mmtime_n£c
;

237 
	sp9_r°©fs
 {

238 
uöt32_t
 
	mty≥
;

239 
uöt32_t
 
	mbsize
;

240 
uöt64_t
 
	mblocks
;

241 
uöt64_t
 
	mb‰ì
;

242 
uöt64_t
 
	mbavaû
;

243 
uöt64_t
 
	mfûes
;

244 
uöt64_t
 
	mf‰ì
;

245 
uöt64_t
 
	mfsid
;

246 
uöt32_t
 
	m«mñí
;

249 
	sp9_fˇŒ
 {

250 
uöt32_t
 
	msize
;

251 
uöt8_t
 
	mid
;

252 
uöt16_t
 
	mèg
;

254 
size_t
 
	moff£t
;

255 
size_t
 
	mˇ∑côy
;

257 
uöt8_t
 *
	msd©a
;

261 
p9_îr°r2î∫o
(*
îr°r
, 
Àn
);

263 
p9_îr‹_öô
();

264 
p9_å™s_fd_öô
();

265 
p9_å™s_fd_exô
();

	@9p_fs/mount_p9fs/mount_p9fs.c

33 
	~<sys/cdefs.h
>

34 
__FBSDID
("$FreeBSD$");

36 
	~<sys/∑øm.h
>

37 
	~<sys/lökî.h
>

38 
	~<sys/moduÀ.h
>

39 
	~<sys/mou¡.h
>

40 
	~<sys/sockë.h
>

41 
	~<sys/°©.h
>

42 
	~<sys/sy¶og.h
>

43 
	~<sys/uio.h
>

44 
	~<sys/î∫o.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√töë/ö.h
>

49 
	~<˘y≥.h
>

50 
	~<îr.h
>

51 
	~<f˙é.h
>

52 
	~<√tdb.h
>

53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~<°rög.h
>

56 
	~<°rögs.h
>

57 
	~<sy£xôs.h
>

58 
	~<uni°d.h
>

59 
	~<°d¨g.h
>

61 
	~"m¡›ts.h
"

64 
	$ußge
(
exôcode
, c⁄° *
îrfmt
, ...)

66 i‡(
exôcode
 > 1)

67 
	`Ârötf
(
°dîr
, "%s\n", 
	`°ªº‹
(
exôcode
));

69 i‡(
îrfmt
 !
NULL
) {

70 
va_li°
 
≠
;

72 
	`va_°¨t
(
≠
, 
îrfmt
);

73 
	`vÂrötf
(
°dîr
, 
îrfmt
, 
≠
);

74 
	`va_íd
(
≠
);

75 
	`Ârötf
(
°dîr
, "\n");

78 
	`Ârötf
(
°dîr
, "Usage: %s [-o option=value]Öathspec mntpt\n",

79 
	`gë¥og«me
());

80 
	`exô
(
exôcode
);

81 
	}
}

83 
	sm¡_c⁄ãxt
 {

84 
iovec
 *
	miov
;

85 
sockaddr
 
	mßddr
;

86 
	miovÀn
;

87 
	msockty≥
;

88 
	mîrmsg
[256];

89 *
	m∑th
;

93 
	$∑r£_›t_o
(
m¡_c⁄ãxt
 *
˘x
)

95 *
›t
, *
vÆ
;

97 
›t
 = 
	`°rchr
(
›èrg
, '=');

98 i‡(
›t
 =
NULL
)

99 
	`ußge
(1, "Invalid -o");

100 *
›t
 = '\0';

101 
vÆ
 = 
›t
 + 1;

102 
›t
 = 
›èrg
;

103 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, 
›t
,

104 
	`__DECONST
(*, 
vÆ
), 
	`°æí
(val) + 1);

106 i‡(
	`°rcmp
(
›t
, "proto") == 0) {

107 i‡(
	`°rˇ£cmp
(
vÆ
, "tcp") == 0)

108 
˘x
->
sockty≥
 = 
SOCK_STREAM
;

110 
˘x
->
sockty≥
 = 
SOCK_DGRAM
;

112 
	}
}

115 
	$exåa˘_addröfo
(
addröfo
 *
ai
, *
Ámûy
, *
hn
, *
¢
)

117 
sockaddr_ö
 *
sö
;

118 
sockaddr_ö6
 *
sö6
;

120 *
Ámûy
 = 
ai
->
ai_addr
->
ß_Ámûy
;

121 (Ë
	`gë«meöfo
(
ai
->
ai_addr
,ái->
ai_addæí
, 
hn
, 
NI_MAXHOST
,

122 
¢
, 
NI_MAXSERV
, 
NI_NUMERICHOST
 | 
NI_NUMERICSERV
);

123 
	}
}

132 
	$åy_addröfo
(
m¡_c⁄ãxt
 *
˘x
, 
addröfo
 *
ai
)

134 
îr‹
, 
s
;

135 *
addr
;

138 
Ámûy
, 
p‹t
;

139 
ho°«me
[
NI_MAXHOST
], 
£rv«me
[
NI_MAXSERV
];

141 
	`exåa˘_addröfo
(
ai
, &
Ámûy
, 
ho°«me
, 
£rv«me
);

142 
	`¥ötf
("Tryög famûy %dáà%†£rvi˚ %†...\n", 
Ámûy
,

143 
ho°«me
, 
£rv«me
);

146 
s
 = 
	`sockë
(
ai
->
ai_Ámûy
,ái->
ai_sockty≥
,ái->
ai_¥Ÿocﬁ
);

147 i‡(
s
 == -1) {

149 
î∫o
) {

150 
EACCES
:

151 
EAFNOSUPPORT
:

154  (
î∫o
);

157 
îr‹
 = 
	`c⁄√˘
(
s
, 
ai
->
ai_addr
,ái->
ai_addæí
);

158 
	`˛o£
(
s
);

159 i‡(
îr‹
 == -1) {

160 
î∫o
) {

161 
ECONNREFUSED
:

162 
ECONNRESET
:

163 
ENETUNREACH
:

164 
EHOSTUNREACH
:

165 
ETIMEDOUT
:

168  (
î∫o
);

172 
	`bc›y
(
ai
->
ai_addr
, &
˘x
->
ßddr
,ái->
ai_addæí
);

173 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, "addr", &˘x->
ßddr
, 
ai
->
ai_addæí
);

175 
	}
}

178 
	$∑r£_ªquúed_¨gs
(
m¡_c⁄ãxt
 *
˘x
, **
¨gv
)

180 *
∑th
;

181 
addæí
, 
îr‹
;

182 
addröfo
 *
ai
, *
ªs
;

183 
addröfo
 
höts
 = { 0 };

184 
sockaddr
 *
addr
;

187 
˘x
->
∑th
 = 
	`°rchr
(
¨gv
[0], ':');

188 i‡(
˘x
->
∑th
 =
NULL
)

189 
	`ußge
(1, "Pathspec doesÇot follow host:path format");

190 *
˘x
->
∑th
++ = '\0';

192 
höts
.
ai_Êags
 = 
AI_NUMERICHOST
;

193 
höts
.
ai_sockty≥
 = 
˘x
->
sockty≥
 =0 ? 
SOCK_STREAM
 : ctx->socktype;

194 
îr‹
 = 
	`gëaddröfo
(
¨gv
[0], "9pfs", &
höts
, &
ªs
);

195 i‡(
îr‹
 != 0) {

197 
höts
.
ai_Êags
 = 
AI_CANONNAME
;

198 
îr‹
 = 
	`gëaddröfo
(
¨gv
[0], "9pfs", &
höts
, &
ªs
);

200 i‡(
îr‹
 != 0)

201 
	`îrx
(
îr‹
, "U«bÀÅÿlooku∞%s: %s", 
¨gv
[0],

202 
	`gai_°ªº‹
(
îr‹
));

205 
îr‹
 = -1;

206 
ai
 = 
ªs
; 
îr‹
 =-1 &&áò!
NULL
;áòai->
ai_√xt
)

207 
îr‹
 = 
	`åy_addröfo
(
˘x
, 
ai
);

208 
	`‰ìaddröfo
(
ªs
);

209 i‡(
îr‹
 > 0)

210 
	`îr
(
îr‹
, "U«bÀÅÿc⁄√˘Åÿ%s", 
¨gv
[0]);

211 i‡(
˘x
->
ßddr
.
ß_Ámûy
 == 0)

212 
	`îrx
(1, "Nÿw‹kögáddªs†found f‹ %s", 
¨gv
[0]);

214 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, "f°y≥", "p9fs", (
size_t
)-1);

215 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, "ho°«me", 
¨gv
[0], (
size_t
)-1);

216 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, "f•©h", 
¨gv
[1], (
size_t
)-1);

217 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, "∑th", ctx->
∑th
, (
size_t
)-1);

218 
	`buûd_iovec
(&
˘x
->
iov
, &˘x->
iovÀn
, "îrmsg", ctx->
îrmsg
,

219  (
˘x
->
îrmsg
));

220 
	}
}

223 
	$maö
(
¨gc
, **
¨gv
)

225 
ch
;

226 
m¡_c⁄ãxt
 
˘x
 = { 0 };

227 c⁄° *
›t°r
 = "o:";

229 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›t°r
)) != -1) {

230 
ch
) {

232 
	`∑r£_›t_o
(&
˘x
);

239 
¨gc
 -
›töd
;

240 
¨gv
 +
›töd
;

242 i‡(
¨gc
 != 2)

243 
	`ußge
(1, "Must specifyÑequiredárguments");

245 
	`∑r£_ªquúed_¨gs
(&
˘x
, 
¨gv
);

246 i‡(
	`modföd
("p9fs") < 0) {

247 i‡(
	`kldlﬂd
("p9fs") < 0)

248 
	`îr
(1, "p9fs couldÇot beÜoaded inÅhe kernel");

249 i‡(
	`modföd
("p9fs") < 0)

250 
	`îr
(1, "p9fs isÇot inÅhe kernel");

253 i‡(
	`nmou¡
(
˘x
.
iov
, ctx.
iovÀn
, 0) == -1) {

254 i‡(
˘x
.
îrmsg
[0] != '\0')

255 
	`îrx
(1, "Mounting %s:%sát %s: %s",

256 
¨gv
[0], 
˘x
.
∑th
,árgv[1], ctx.
îrmsg
);

258 
	`îr
(1, "Mou¡ög %†© %s", 
¨gv
[0],árgv[1]);

262 
	}
}

	@9p_fs/p9fs.ko/virtfs.h

2 #i‚de‡
__VIRTFS__


3 
	#__VIRTFS__


	)

5 
	ev9s_°©e
 {

6 
	mV9S_INIT
,

7 
	mV9S_RUNNING
,

8 
	mV9S_CLOSING
,

9 
	mV9S_CLOSED
,

12 
	gvútfs_£ssi⁄
;

17 
	svútfs_öode
 {

20 
uöt64_t
 
	mi_blocks
;

21 
uöt64_t
 
	mi_size
;

22 
uöt64_t
 
	mi_˘ime
;

23 
uöt64_t
 
	mi_mtime
;

24 
uöt32_t
 
	mi_uid
;

25 
uöt32_t
 
	mi_gid
;

26 
uöt16_t
 
	mi_mode
;

27 
uöt32_t
 
	mi_Êags
;

31 
	svútfs_node
 {

32 
p9_fid
 *
	mvfid
;

33 
p9_fid
 *
	mvofid
;

34 
uöt32_t
 
	mv_›ís
;

35 
vútfs_qid
 
	mvqid
;

36 
vnode
 *
	mv_node
;

37 
vútfs_öode
 
	möode
;

38 
vútfs_£ssi⁄
 *
	mvútfs_£s
;

41 
	#MAXUNAMELEN
 32

	)

44 
	svútfs_£ssi⁄
 {

46 
	mÊags
;

47 
mou¡
 *
	mvútfs_mou¡
;

48 
vútfs_node
 
	m∫p
;

49 
	mmaxd©a
;

50 
uid_t
 
	muid
;

51 
p9_˛õ¡
 *
	m˛¡
;

52 
mtx
 
	mvútfs_lock
;

55 
	svútfs_mou¡
 {

56 
	mvút_debug
;

57 
vútfs_£ssi⁄
 
	mvútfs_£ssi⁄
;

58 
mou¡
 *
	mvútfs_mou¡p
;

61 
	#VFSTOP9
(
mp
Ë((mp)->
m¡_d©a
)

	)

64 
	evút_£ssi⁄_Êags
 {

65 
	mVIRTFS_PROTO_2000U
 = 0x01,

66 
	mVIRTFS_PROTO_2000L
 = 0x02,

72 
vútfs_°©_vnode_dŸl
(*
°
, 
vnode
 *
vp
);

73 
vútfs_¥Ÿo_dŸl
(
vútfs_£ssi⁄
 *
vútfss
);

74 
p9_fid
 *
vútfs_öô_£ssi⁄
(
mou¡
 *
mp
);

75 
vútfs_˛o£_£ssi⁄
(
mou¡
 *
mp
);

77 
p9_debug
;

79 
	#P9_DEBUG_TRANS
 0x0001

	)

80 
	#P9_DEBUG_SUBR
 0x0002

	)

81 
	#P9_DEBUG_LOCK
 0x0004

	)

82 
	#P9_DEBUG_LOOKUP
 0x0008

	)

83 
	#P9_DEBUG_VOPS
 0x0010

	)

84 
	#P9_DEBUG_COMPONENTNAME
 0x0020

	)

85 
	#P9_DEBUG_VNODE
 0x0040

	)

86 
	#P9_DEBUG_DIR
 0x0080

	)

87 
	#P9_DEBUG_NAMECACHE
 0x0100

	)

88 
	#P9_DEBUG_NODE
 0x0200

	)

90 
	#p9_debug
(
ˇãg‹y
, 
fmt
, ...) \

92 i‡((
p9_debug
 & 
P9_DEBUG_
##
ˇãg‹y
) != 0) \

93 
	`¥ötf
(
fmt
, ##
__VA_ARGS__
); \

94 } 0)

	)

	@9p_fs/p9fs.ko/virtfs_proto.h

9 #i‚def 
__VIRTFS_PROTO_H__


10 
	#__VIRTFS_PROTO_H__


	)

12 
	~"../../9p.h
"

16 
	evútfs_msg_ty≥
 {

17 
	mTvîsi⁄
 = 100,

18 
	mRvîsi⁄
,

19 
	mTauth
,

20 
	mRauth
,

21 
	mT©èch
,

22 
	mR©èch
,

24 
	mRîr‹
 = 107,

25 
	mTÊush
,

26 
	mRÊush
,

27 
	mTwÆk
,

28 
	mRwÆk
,

29 
	mT›í
,

30 
	mR›í
,

31 
	mT¸óã
,

32 
	mR¸óã
,

33 
	mTªad
,

34 
	mRªad
,

35 
	mTwrôe
,

36 
	mRwrôe
,

37 
	mT˛unk
,

38 
	mR˛unk
,

39 
	mTªmove
,

40 
	mRªmove
,

41 
	mT°©
,

42 
	mR°©
,

43 
	mTw°©
,

45 
	mRw°©
,

53 
	svútfs_qid
 {

54 
uöt8_t
 
	mqid_mode
;

55 
uöt32_t
 
	mqid_vîsi⁄
;

56 
uöt64_t
 
	mqid_∑th
;

57 } 
__©åibuã__
((
∑cked
));

59 
	evútfs_qid_ty≥
 {

60 
	mQTDIR
 = 0x80,

61 
	mQTAPPEND
 = 0x40,

62 
	mQTEXCL
 = 0x20,

63 
	mQTMOUNT
 = 0x10,

64 
	mQTAUTH
 = 0x08,

65 
	mQTTMP
 = 0x04,

66 
	mQTLINK
 = 0x02,

67 
	mQTFILE
 = 0x00,

71 
	evútfs_mode
 {

72 
	mDMDIR
 = 0x80000000,

73 
	mDMAPPEND
 = 0x40000000,

74 
	mDMEXCL
 = 0x20000000,

75 
	mDMMOUNT
 = 0x10000000,

76 
	mDMAUTH
 = 0x08000000,

77 
	mDMTMP
 = 0x04000000,

78 
	mDMSYMLINK
 = 0x02000000,

80 
	mDMDEVICE
 = 0x00800000,

81 
	mDMNAMEDPIPE
 = 0x00200000,

82 
	mDMSOCKET
 = 0x00100000,

83 
	mDMSETUID
 = 0x00080000,

84 
	mDMSETGID
 = 0x00040000,

87 
	mP9MODEUPPER
 = 0xffff0000,

91 
	svútfs_°©
 {

92 
uöt16_t
 
	m°©_size
;

93 
uöt16_t
 
	m°©_ty≥
;

94 
uöt32_t
 
	m°©_dev
;

95 
vútfs_qid
 
	m°©_qid
;

96 
uöt32_t
 
	m°©_mode
;

97 
uöt32_t
 
	m°©_©ime
;

98 
uöt32_t
 
	m°©_mtime
;

99 
uöt64_t
 
	m°©_Àngth
;

104 } 
__©åibuã__
((
∑cked
));

106 
	#OREAD
 0

	)

107 
	#OWRITE
 1

	)

108 
	#ORDWR
 2

	)

109 
	#OEXEC
 3

	)

110 
	#OTRUNC
 0x10

	)

	@9p_fs/p9fs.ko/virtfs_subr.c

7 
	~<sys/cdefs.h
>

8 
__FBSDID
("$FreeBSD$");

10 
	~<sys/∑øm.h
>

11 
	~<sys/sy°m.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/lock.h
>

14 
	~<sys/muãx.h
>

15 
	~<sys/¥oc.h
>

16 
	~<sys/uio.h
>

17 
	~<sys/kî√l.h
>

18 
	~<sys/mÆloc.h
>

19 
	~<sys/mou¡.h
>

20 
	~<sys/limôs.h
>

21 
	~<sys/vnode.h
>

23 
	~"vútfs_¥Ÿo.h
"

24 
	~"../../˛õ¡.h
"

25 
	~"../../¥Ÿocﬁ.h
"

26 
	~"../../9p.h
"

27 
	~"vútfs.h
"

29 
MALLOC_DEFINE
(
M_P9REQ
, "virtfsreq", "Request structures for virtfs");

37 
	$vútfs_¥Ÿo_dŸl
(
vútfs_£ssi⁄
 *
v£s
)

39  (
v£s
->
Êags
 & 
VIRTFS_PROTO_2000L
);

40 
	}
}

42 
p9_fid
 *

43 
	$vútfs_öô_£ssi⁄
(
mou¡
 *
mp
)

45 
p9_fid
 *
fid
;

46 
vútfs_£ssi⁄
 *
v£s
;

47 
vútfs_mou¡
 *
vútmp
;

48 
rc
 = -
ENOMEM
;

50 
vútmp
 = 
mp
->
m¡_d©a
;

51 
v£s
 = &
vútmp
->
vútfs_£ssi⁄
;

52 
v£s
->
uid
 = 0;

54 
v£s
->
˛¡
 = 
	`p9_˛õ¡_¸óã
(
mp
);

56 i‡(
rc
) {

57 
	`p9_debug
(
SUBR
, "problem initializing 9p client\n");

58 
Áû
;

62 i‡(
	`p9_is_¥Ÿo_dŸl
(
v£s
->
˛¡
)) {

63 
v£s
->
Êags
 |
VIRTFS_PROTO_2000L
;

65 } i‡(
	`p9_is_¥Ÿo_dŸu
(
v£s
->
˛¡
)) {

66 
v£s
->
Êags
 |
VIRTFS_PROTO_2000U
;

70 
v£s
->
maxd©a
 = v£s->
˛¡
->
msize
;

73 
fid
 = 
	`p9_˛õ¡_©èch
(
v£s
->
˛¡
);

75 i‡(
fid
 =
NULL
) {

77 
rc
 = -
ENOMEM
;

78 
	`p9_debug
(
SUBR
, "cannotáttach\n");

80 
Áû
;

83 
fid
->
uid
 = 
v£s
->uid;

85  
fid
;

87 
Áû
:

89 i‡(
v£s
->
˛¡
)

90 
	`p9_˛õ¡_de°roy
(
v£s
->
˛¡
);

92  
NULL
;

93 
	}
}

97 
	$vútfs_˛o£_£ssi⁄
(
mou¡
 *
mp
)

99 
vútfs_£ssi⁄
 *
v£s
;

100 
vútfs_mou¡
 *
vútfsmp
;

102 
vútfsmp
 = 
	`VFSTOP9
(
mp
);

103 
v£s
 = &
vútfsmp
->
vútfs_£ssi⁄
;

107 
	`p9_˛õ¡_dëach
(
v£s
->
∫p
.
vfid
);

109 
	`p9_˛õ¡_de°roy
(
v£s
->
˛¡
);

111 
	`‰ì
(
vútfsmp
, 
M_TEMP
);

112 
	`p9_debug
(
SUBR
, " Clean close session .\n");

113 
	}
}

	@9p_fs/p9fs.ko/virtfs_vfops.c

7 
	~<sys/cdefs.h
>

8 
__FBSDID
("$FreeBSD$");

10 
	~<sys/ty≥s.h
>

11 
	~<sys/sy°m.h
>

12 
	~<sys/mou¡.h
>

13 
	~<sys/kî√l.h
>

14 
	~<sys/mÆloc.h
>

15 
	~<sys/muãx.h
>

16 
	~<sys/¥Ÿosw.h
>

17 
	~<sys/sock›t.h
>

18 
	~<sys/sockëv¨.h
>

19 
	~<sys/p˝u.h
>

20 
	~<sys/¥oc.h
>

21 
	~<sys/vnode.h
>

22 
	~<sys/‚v_hash.h
>

23 
	~<sys/f˙é.h
>

24 
	~<sys/¥iv.h
>

25 
	~<geom/geom.h
>

26 
	~<geom/geom_vfs.h
>

27 
	~<sys/«mei.h
>

29 
	~"vútfs_¥Ÿo.h
"

30 
	~"../../˛õ¡.h
"

31 
	~"../../9p.h
"

32 
	~"vútfs.h
"

34 c⁄° *
	gp9_›ts
[] = {

39 
NULL


42 
MALLOC_DEFINE
(
M_P9MNT
, "virtfs_mount", "Mount structures for virtfs");

45 
	$vútfs_unmou¡
(
mou¡
 *
mp
, 
m¡Êags
)

47 
vútfs_mou¡
 *
vmp
 = 
	`VFSTOP9
(
mp
);

48 
îr‹
, 
Êags
, 
i
;

50 
îr‹
 = 0;

51 
Êags
 = 0;

52 i‡(
vmp
 =
NULL
)

55 i‡(
m¡Êags
 & 
MNT_FORCE
)

56 
Êags
 |
FORCECLOSE
;

58 
i
 = 0; i < 10; i++) {

61 
îr‹
 = 
	`vÊush
(
mp
, 0, 
Êags
, 
cuπhªad
);

62 i‡(
îr‹
 =0 || (
m¡Êags
 & 
MNT_FORCE
) == 0)

65 
îr‹
 = 
	`t¶ìp
(&îr‹, 
PSOCK
, "p9unmnt", 1);

66 i‡(
îr‹
 =
EINTR
)

68 
îr‹
 = 
EBUSY
;

70 i‡(
îr‹
 != 0)

71 
out
;

73 
	`vútfs_˛o£_£ssi⁄
(
mp
);

74 
	`‰ì
(
vmp
, 
M_P9MNT
);

75 
mp
->
m¡_d©a
 = 
NULL
;

77 
out
:

78  (
îr‹
);

79 
	}
}

82 
v›_ve˘‹
 
vútfs_vn›s
;

85 
	svútfs_mou¡
 {

86 
	mp9_debugÀvñ
;

87 
vútfs_£ssi⁄
 
	mvútfs_£ssi⁄
;

88 
mou¡
 *
	mvútfs_mou¡
;

89 
	mp9_ho°«me
[256];

92 
	svútfs_node
 {

93 
uöt32_t
 
	mp9n_fid
;

94 
uöt32_t
 
	mp9n_ofid
;

95 
uöt32_t
 
	mp9n_›ís
;

96 
vútfs_qid
 
	mvqid
;

97 
vnode
 *
	mv_node
;

98 
vútfs_£ssi⁄
 *
	mp9n_£ssi⁄
;

101 
	#MAXUNAMELEN
 32

	)

102 
	svútfs_£ssi⁄
 {

104 
	mÊags
;

105 
	mnodev
;

106 
	mdebug
;

107 
	mafid
;

108 
	mˇche
;

110 
mou¡
 *
	mp9s_mou¡
;

111 
vútfs_node
 
	mp9s_roŸ≈
;

112 *
	mu«me
;

113 *
	m™ame
;

114 
	mmaxd©a
;

115 
kuid_t
 
	mdÊtuid
;

116 
kgid_t
 
	mdÊtgid
;

117 
kuid_t
 
	muid
;

118 
p9_˛õ¡
 *
	m˛¡
;

119 
li°_hód
 
	m¶i°
;

120 
mtx_lock
 
	mp9s_lock
;

128 
vútfs_vgë
(
mp
, 
öo
, 
Êags
, 
vµ
)

129 
mou¡
 *
	mmp
;

130 
öo_t
 
	möo
;

131 
	mÊags
;

132 
vnode
 **
	mvµ
;

134 
vútfs_mou¡
 *
	mvmp
;

135 
vútfs_node
 *
	mp9_node
;

136 
vútfs_£ssi⁄
 *
	mp9s
;

137 
vnode
 *
	mvp
;

139 
thªad
 *
	mtd
;

140 
p9_°©_dŸl
 *
	m°
 = 
NULL
;

141 
p9_fid
 *
	mfid
 = 
NULL
;

142 
	mîr‹
;

144 
	mtd
 = 
cuπhªad
;

145 
	mîr‹
 = 
vfs_hash_gë
(
mp
, 
öo
, 
Êags
, 
td
, 
vµ
, 
NULL
, NULL);

146 i‡(
	mîr‹
 || *
	mvµ
 !
NULL
)

147  (
îr‹
);

153 i‡((
	mÊags
 & 
	mLK_TYPE_MASK
Ë=
LK_SHARED
) {

154 
Êags
 &~
LK_TYPE_MASK
;

155 
	mÊags
 |
LK_EXCLUSIVE
;

158 
	mvmp
 = 
VFSTOP9
(
mp
);

161 i‡((
	mîr‹
 = 
gë√wvnode
("vútfs", 
mp
, &
vútfs_vn›s
, &
vp
)) != 0) {

162 *
vµ
 = 
NULLVP
;

163  (
	mîr‹
);

166 
	mp9s
 = &
vmp
->
vútfs_£ssi⁄
;

167 
	mp9_node
 = 
mÆloc
((
vútfs_node
), 
M_TEMP
,

168 
M_WAITOK
 | 
M_ZERO
);

169 
	mvp
->
	mv_d©a
 = 
p9_node
;

172 
	mp9_node
->
	mv_node
 = 
vp
;

173 
	mp9_node
->
	mvútfs_£s
 = 
p9s
;

175 
lockmgr
(
vp
->
v_v∆ock
, 
LK_EXCLUSIVE
, 
NULL
);

176 
	mîr‹
 = 
ösm¡que
(
vp
, 
mp
);

177 i‡(
	mîr‹
 != 0) {

178 
‰ì
(
p9_node
, 
M_TEMP
);

179 *
	mvµ
 = 
NULLVP
;

180  (
	mîr‹
);

182 
	mîr‹
 = 
vfs_hash_ö£π
(
vp
, 
öo
, 
Êags
, 
td
, 
vµ
, 
NULL
, NULL);

183 i‡(
	mîr‹
 || *
	mvµ
 !
NULL
)

184  (
îr‹
);

189 i‡(
vútfs_¥Ÿo_dŸl
(
p9s
)) {

190 
	m°
 = 
p9_˛õ¡_gë©å_dŸl
(
fid
, 
P9_STATS_BASIC
);

191 i‡(
	m°
 =
NULL
) {

192 
îr‹
 = -
ENOMEM
;

193 
	mout
;

198 
mem˝y
(&
p9_node
->
vqid
, &
°
->
qid
, (st->qid));

201 
vútfs_°©_vnode_dŸl
(
°
, 
vp
);

202 
p9_‰ì
(
°
, (*st));

205 
p9_w°©
 *
	m°
 = 
NULL
;

206 
	m°
 = 
p9_˛õ¡_°©
(
fid
);

207 i‡(
	m°
 =
NULL
) {

208 
îr‹
 = -
ENOMEM
;

209 
	mout
;

213 
mem˝y
(&
p9_node
->
vqid
, &
°
->
qid
, (st->qid));

217 
vútfs_°©_vnode_dŸl
(
°
, 
vp
);

218 
p9_‰ì
(
°
, (*st));

221 *
	mvµ
 = 
vp
;

223 
	mout
:

224  
îr‹
;

229 
p9_mou¡
(
vnode
 *
devvp
, 
mou¡
 *
mp
)

231 
p9_fid
 *
	mfid
;

232 
vútfs_mou¡
 *
	mvmp
 = 
NULL
;

233 
vútfs_£ssi⁄
 *
	mp9s
;

234 
cdev
 *
	mdev
;

235 
vútfs_node
 *
	mroŸ
;

236 
	mîr‹
 = 
EINVAL
;

237 
g_c⁄sumî
 *
	m˝
;

239 
	mdev
 = 
devvp
->
v_rdev
;

240 
dev_ªf
(
dev
);

241 
g_t›ﬁogy_lock
();

242 
	mîr‹
 = 
g_vfs_›í
(
devvp
, &
˝
, "virtfs", 0);

243 
g_t›ﬁogy_u∆ock
();

244 
VOP_UNLOCK
(
devvp
, 0);

246 i‡(
	mîr‹
)

247 
	mout
;

248 i‡(
	mdevvp
->
	mv_rdev
->
	msi_iosize_max
 != 0)

249 
mp
->
m¡_iosize_max
 = 
devvp
->
v_rdev
->
si_iosize_max
;

250 i‡(
	mmp
->
	mm¡_iosize_max
 > 
	mMAXPHYS
)

251 
	mmp
->
	mm¡_iosize_max
 = 
MAXPHYS
;

254 
	mvmp
 = 
mÆloc
( (
vútfs_mou¡
), 
M_TEMP
, 
M_WAITOK
 | 
M_ZERO
);

255 
	mmp
->
	mm¡_d©a
 = 
vmp
;

256 
	mvmp
->
	mvútfs_mou¡p
 = 
mp
;

257 
	mp9s
 = &
vmp
->
vútfs_£ssi⁄
;

258 
	mp9s
->
	mvútfs_mou¡
 = 
mp
;

259 
	mroŸ
 = &
p9s
->
∫p
;

261 
	mfid
 = 
vútfs_öô_£ssi⁄
(
mp
);

262 
	mroŸ
->
	mv_node
 = 
devvp
;

263 
	mroŸ
->
	mvfid
 = 
fid
;

264 
	mroŸ
->
	mvútfs_£s
 = 
p9s
;

266 
p9_°©_dŸl
 *
	m°
 = 
NULL
;

269 i‡(
vútfs_¥Ÿo_dŸl
(
p9s
)) {

270 
	m°
 = 
p9_˛õ¡_gë©å_dŸl
(
fid
, 
P9_STATS_BASIC
);

271 i‡(
	m°
 =
NULL
) {

272 
îr‹
 = -
ENOMEM
;

273 
	mout
;

275 
mem˝y
(&
roŸ
->
vqid
, &
°
->
qid
, (st->qid));

277 
vútfs_°©_vnode_dŸl
(
°
, 
roŸ
->
v_node
);

278 
p9_‰ì
(
°
, (*st));

280 
p9_w°©
 *
	m°
 = 
NULL
;

281 
	m°
 = 
p9_˛õ¡_°©
(
fid
);

282 i‡(
	m°
 =
NULL
) {

283 
îr‹
 = -
ENOMEM
;

284 
	mout
;

287 
mem˝y
(&
roŸ
->
vqid
, &
°
->
qid
, (st->qid));

289 
vútfs_°©_vnode_dŸl
(
°
, 
roŸ
->
v_node
);

290 
p9_‰ì
(
°
, (*st));

293 
	mmp
->
	mm¡_°©
.
	mf_fsid
.
	mvÆ
[0] = 
dev2udev
(
dev
);

294 
	mmp
->
	mm¡_°©
.
	mf_fsid
.
	mvÆ
[1] = 
mp
->
m¡_vfc
->
vfc_ty≥num
;

295 
	mmp
->
	mm¡_maxsymlökÀn
 = 0;

296 
MNT_ILOCK
(
mp
);

297 
	mmp
->
	mm¡_Êag
 |
MNT_LOCAL
;

298 
	mmp
->
	mm¡_kîn_Êag
 |
MNTK_LOOKUP_SHARED
 | 
MNTK_EXTENDED_SHARED
;

299 
MNT_IUNLOCK
(
mp
);

303 
	mout
:

304 i‡(
˝
 !
NULL
) {

305 
g_t›ﬁogy_lock
();

306 
g_vfs_˛o£
(
˝
);

307 
g_t›ﬁogy_u∆ock
();

309 i‡(
	mvmp
) {

310 
‰ì
(
vmp
, 
M_TEMP
);

311 
	mmp
->
	mm¡_d©a
 = 
NULL
;

313 
dev_ªl
(
dev
);

314  
	mîr‹
;

318 
	svútfs_mou¡
 {

319 
	mp9_debugÀvñ
;

320 
vútfs_£ssi⁄
 
	mvútfs_£ssi⁄
;

321 
mou¡
 *
	mvútfs_mou¡
;

322 
	mp9_ho°«me
[256];

326 
	svútfs_node
 {

327 
uöt32_t
 
	mp9n_fid
;

328 
uöt32_t
 
	mp9n_ofid
;

329 
uöt32_t
 
	mp9n_›ís
;

330 
vútfs_qid
 
	mvqid
;

331 
vnode
 *
	mv_node
;

332 
vútfs_£ssi⁄
 *
	mp9n_£ssi⁄
;

335 
	#MAXUNAMELEN
 32

	)

336 
	svútfs_£ssi⁄
 {

338 
	mÊags
;

339 
	mnodev
;

340 
	mdebug
;

341 
	mafid
;

342 
	mˇche
;

343 
mou¡
 *
	mp9s_mou¡
;

344 
vútfs_node
 
	mp9s_roŸ≈
;

345 
	mmaxd©a
;

346 
uid_t
 
	muid
;

347 
p9_˛õ¡
 *
	m˛¡
;

348 
mtx_lock
 
	mp9s_lock
;

356 
vútfs_mou¡
(
mou¡
 *
mp
)

358 
	mîr‹
 = 0;

359 
vnode
 *
	mdevvp
;

360 
thªad
 *
	mtd
;

361 *
	mf•ec
;

362 
	mÊags
;

363 
«meid©a
 
	mndp
;

366 i‡(
	mmp
->
	mm¡_Êag
 & 
	mMNT_UPDATE
)

367  
	mEOPNOTSUPP
;

369 i‡(
vfs_fûãr›t
(
mp
->
m¡_›äew
, 
p9_›ts
))

370 
	mout
;

372 
	mf•ec
 = 
vfs_gë›ts
(
mp
->
m¡_›äew
, "‰om", &
îr‹
);

373 i‡(
	mîr‹
)

374  (
	mîr‹
);

376 
	mtd
 = 
cuπhªad
;

382 
NDINIT
(&
ndp
, 
LOOKUP
, 
FOLLOW
 | 
LOCKLEAF
, 
UIO_SYSSPACE
, 
f•ec
, 
td
);

383 i‡((
	mîr‹
 = 
«mei
(&
ndp
)) != 0)

384  (
îr‹
);

385 
NDFREE
(&
ndp
, 
NDF_ONLY_PNBUF
);

386 
	mdevvp
 = 
ndp
.
ni_vp
;

387 i‡(!
vn_isdisk
(
devvp
, &
îr‹
)) {

388 
vput
(
devvp
);

389  (
	mîr‹
);

391 
	mÊags
 = 
FREAD
;

398 i‡(
	mdevvp
->
	mv_ty≥
 =
VREG
) {

399 
DROP_GIANT
();

400 
	mîr‹
 = 
vn_›í_vnode
(
devvp
, 
Êags
, 
td
->
td_u¸ed
,Åd, 
NULL
);

401 
PICKUP_GIANT
();

402 } i‡(
vn_isdisk
(
devvp
, &
îr‹
) == 0) {

403 
îr‹
 = 
VOP_ACCESS
(
devvp
, 
VREAD
, 
td
->
td_u¸ed
,Åd);

404 i‡(
	mîr‹
 != 0)

405 
îr‹
 = 
¥iv_check
(
td
, 
PRIV_VFS_MOUNT_PERM
);

407 i‡(
	mîr‹
 != 0) {

408 
vput
(
devvp
);

409  
	mîr‹
;

412 i‡((
	mîr‹
 = 
p9_mou¡
(
devvp
, 
mp
)))

414 
vªÀ
(
devvp
);

415  
	mîr‹
;

419 
	mout
:

420 i‡(
îr‹
 != 0)

421 (Ë
vútfs_unmou¡
(
mp
, 
MNT_FORCE
);

422  (
	mîr‹
);

426 
vútfs_roŸ
(
mou¡
 *
mp
, 
lkÊags
, 
vnode
 **
vµ
)

428 
vútfs_mou¡
 *
	mvmp
 = 
VFSTOP9
(
mp
);

429 
vútfs_node
 *
	m≈
 = &
vmp
->
vútfs_£ssi⁄
.
∫p
;

431 *
	mvµ
 = 
≈
->
v_node
;

432 
vªf
(*
vµ
);

433 
vn_lock
(*
vµ
, 
lkÊags
);

439 
vútfs_°©fs
(
mou¡
 *
mp
, 
°©fs
 *
sbp
)

445 
vútfs_fhtovp
(
mou¡
 *
mp
, 
fid
 *
fhp
, 
Êags
, 
vnode
 **
vµ
)

447  (
	mEINVAL
);

451 
vútfs_sync
(
mou¡
 *
mp
, 
waôf‹
)

456 
vfs›s
 
	mvútfs_vfs›s
 = {

457 .
vfs_mou¡
 = 
vútfs_mou¡
,

458 .
	mvfs_unmou¡
 = 
vútfs_unmou¡
,

459 .
	mvfs_roŸ
 = 
vútfs_roŸ
,

460 .
	mvfs_°©fs
 = 
vútfs_°©fs
,

461 .
	mvfs_fhtovp
 = 
vútfs_fhtovp
,

462 .
	mvfs_sync
 = 
vútfs_sync
,

463 .
	mvfs_vgë
 = 
vútfs_vgë
,

465 
VFS_SET
(
vútfs_vfs›s
, 
vútfs
, 
VFCF_JAIL
);

	@9p_fs/p9fs.ko/virtfs_vnops.c

2 
	~<sys/cdefs.h
>

3 
__FBSDID
("$FreeBSD$");

5 
	~<sys/∑øm.h
>

6 
	~<sys/vnode.h
>

7 
	~<sys/mou¡.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/mÆloc.h
>

10 
	~<sys/kî√l.h
>

11 
	~<sys/sy°m.h
>

12 
	~<sys/dúít.h
>

13 
	~<sys/«mei.h
>

15 
	~"vútfs_¥Ÿo.h
"

17 
v›_ve˘‹
 
	gvútfs_vn›s
;

18 
MALLOC_DEFINE
(
M_P9NODE
, "virtfs_node", "virtfsÇode structures");

21 
	$vútfs_lookup
(
v›_ˇchedlookup_¨gs
 *
≠
)

24 
vnode
 *
dvp
 = 
≠
->
a_dvp
;

25 
vnode
 **
vµ
 = 
≠
->
a_vµ
, *
vp
;

26 
comp⁄íäame
 *
˙p
 = 
≠
->
a_˙p
;

27 
vútfs_node
 *
d≈
 = 
dvp
->
v_d©a
;

28 
vútfs_£ssi⁄
 *
p9s
 = 
d≈
->
p9n_£ssi⁄
;

29 
vútfs_node
 *
≈
 = 
NULL
;

30 
mou¡
 *
mp
 = 
p9s
->
p9s_mou¡
;

31 
vútfs_qid
 
qid
;

32 
uöt32_t
 
√wfid
;

33 
îr‹
;

35 *
vµ
 = 
NULL
;

38 i‡(
˙p
->
˙_«mñí
 =1 && *˙p->
˙_«mïå
 == '.') {

39 *
vµ
 = 
dvp
;

40 
	`vªf
(*
vµ
);

45 
îr‹
 = 
	`p9_˛õ¡_wÆk
(
d≈
->
p9n_fid
,

46 
˙p
->
˙_«mñí
, &˙p->
˙_«mïå
, 1);

47 i‡(
îr‹
 == 0) {

48 
…y≥
 = 0;

50 i‡(
˙p
->
˙_Êags
 & 
ISDOTDOT
) {

51 
…y≥
 = 
	`VOP_ISLOCKED
(
dvp
);

52 
	`VOP_UNLOCK
(
dvp
, 0);

55 
îr‹
 = 
	`vútfs_vgë
(
mp
, 
√wfid
, 
˙p
->
˙_lkÊags
, &
vp
);

56 i‡(
˙p
->
˙_Êags
 & 
ISDOTDOT
)

57 
	`vn_lock
(
dvp
, 
…y≥
 | 
LK_RETRY
);

59 i‡(
îr‹
 == 0) {

60 *
vµ
 = 
vp
;

61 
	`vªf
(*
vµ
);

63 
	`vútfs_ªlfid
(
p9s
, 
√wfid
);

65  (
îr‹
);

66 
	}
}

70 
	$vútfs_¸óã
(
v›_¸óã_¨gs
 *
≠
)

72 
	}
}

75 
	$vútfs_mknod
(
v›_mknod_¨gs
 *
≠
)

77 
	}
}

80 
	$vútfs_›í
(
v›_›í_¨gs
 *
≠
)

82 
îr‹
;

83 
vútfs_node
 *
≈
 = 
≠
->
a_vp
->
v_d©a
;

84 
p9_fid
 *
fid
 = 
≈
->
p9n_fid
;

85 
p9_w°©
 *
°©
;

87 i‡(
≈
->
p9n_›ís
 > 0) {

88 
≈
->
p9n_›ís
++;

92 
°©
 = 
	`p9_˛õ¡_°©
(
≈
->
p9n_fid
);

93 i‡(
îr‹
 != 0)

94  (
îr‹
);

104 i‡(
≠
->
a_vp
->
v_ty≥
 =
VDIR
) {

105 i‡(
≈
->
p9n_ofid
 =
NULL
) {

109 
≈
->
p9n_ofid
 = 
	`p9_˛õ¡_wÆk
“p->
p9n_fid
,

110 0, 
NULL
, 1);

111 i‡(
îr‹
 != 0) {

112 
≈
->
p9n_ofid
 = 
NULL
;

113  (
îr‹
);

116 
fid
 = 
≈
->
p9n_ofid
;

120 
îr‹
 = 
	`p9_˛õ¡_›í
(
fid
, 
≠
->
a_mode
);

121 i‡(
îr‹
 == 0) {

122 
≈
->
p9n_›ís
 = 1;

123 
	`vnode_¸óã_vobje˘
(
≠
->
a_vp
, 
v©å
.
va_byãs
,áp->
a_td
);

126  (
îr‹
);

127 
	}
}

130 
	$vútfs_˛o£
(
v›_˛o£_¨gs
 *
≠
)

132 
vútfs_node
 *
≈
 = 
≠
->
a_vp
->
v_d©a
;

134 
	`¥ötf
("%s(fid %d ofid %d o≥n†%d)\n", 
__func__
,

135 
≈
->
p9n_fid
,Çp->
p9n_ofid
,Çp->
p9n_›ís
);

136 
≈
->
p9n_›ís
--;

137 i‡(
≈
->
p9n_›ís
 == 0) {

138 
	`vútfs_ªlfid
(
≈
->
p9n_£ssi⁄
,Çp->
p9n_ofid
);

139 
≈
->
p9n_ofid
 = 0;

149 
	}
}

152 
	$vútfs_gë©å
(
v›_gë©å_¨gs
 *
≠
)

154 
vútfs_node
 *
≈
 = 
≠
->
a_vp
->
v_d©a
;

155 
≠
->
a_v≠
 = 
	`p9_˛õ¡_°©
(
≈
->
p9n_fid
,áp->a_vap);

158 
	}
}

161 
	$vútfs_°©_vnode_dŸl
(*
°
, 
vnode
 *
vp
)

163 
vútfs_node
 = 
vp
->
v_d©a
;

164 
vútfs_öode
 *
öode
 = 
vútfs_node
->inode;

166 i‡(
	`vútfs_¥Ÿo_dŸl
(
p9s
)) {

167 
p9_°©_dŸl
 *
°©
 = (p9_°©_dŸ»*)
°
;

170 
öode
->
i_mtime
 = 
°©
->
°_mtime_£c
;

171 
öode
->
i_mtime_n£c
 = 
°©
->
°_mtime_n£c
;

172 
öode
->
i_˘ime
 = 
°©
->
°_˘ime_£c
;

173 
öode
->
i_˘ime_n£c
 = 
°©
->
°_˘ime_n£c
;

174 
öode
->
i_uid
 = 
°©
->
°_uid
;

175 
öode
->
i_gid
 = 
°©
->
°_gid
;

176 
öode
->
i_blocks
 = 
°©
->
°_blocks
;

177 
öode
->
i_mode
 = 
°©
->
°_mode
;

181 
p9_w°©
 *
°©
 = (p9_w°© *)
°
;

182 
	`¥ötf
(" We still dont supportÅhis version ");

185 
vnode
->
v_ty≥
 = 
°
->
mode
;

186 
	}
}

189 
	$vútfs_£èâr
(
v›_£èâr_¨gs
 *
≠
)

192 
	}
}

195 
	$vútfs_ªad
(
v›_ªad_¨gs
 *
≠
)

198 
	}
}

201 
	$vútfs_wrôe
(
v›_wrôe_¨gs
 *
≠
)

204 
	}
}

207 
	$vútfs_fsync
(
v›_fsync_¨gs
 *
≠
)

210 
	}
}

213 
	$vútfs_ªmove
(
v›_ªmove_¨gs
 *
≠
)

216 
	}
}

219 
	$vútfs_lök
(
v›_lök_¨gs
 *
≠
)

222 
	}
}

225 
	$vútfs_ª«me
(
v›_ª«me_¨gs
 *
≠
)

228 
	}
}

231 
	$vútfs_mkdú
(
v›_mkdú_¨gs
 *
≠
)

234 
	}
}

237 
	$vútfs_rmdú
(
v›_rmdú_¨gs
 *
≠
)

240 
	}
}

243 
	$vútfs_symlök
(
v›_symlök_¨gs
 *
≠
)

246 
	}
}

252 
	#DIRENT_MIN_LEN
 (
	`off£tof
(
dúít
, 
d_«me
Ë+ 2)

	)

255 
	$vútfs_ªaddú
(
v›_ªaddú_¨gs
 *
≠
)

257 
uio
 *uiÿ
≠
->
a_uio
;

258 
vnode
 *
vp
 = 
≠
->
a_vp
;

259 
p9_dúít
 *
curdúít
;

260 
dúít
 dirent;

261 
uöt64_t
 
fûe_size
, 
dúoff£t
, 
å™soff£t
, 
blkoff
;

262 
uöt8_t
 *
pos
, 
«me_Àn
;

263 
vútfs_node
 *
≈
 = 
≠
->
a_vp
->
v_d©a
;

264 
îr‹
 = 0;

266 i‡(
≠
->
a_uio
->
uio_iov
->
iov_Àn
 <= 0)

267  (
EINVAL
);

269 i‡(
vp
->
v_ty≥
 !
VDIR
)

270  (
ENOTDIR
);

273 
fûe_size
 = 
node
->
p9_öode
.
i_size
;

276 
îr‹
 = 0;

277 i‡((
uio
->
uio_off£t
 < 
fûe_size
) &&

278 (
uio
->
uio_ªsid
 >(
dúít
))) {

279 
dúoff£t
 = 
uio
->
uio_off£t
;

280 
å™soff£t
 = 
dúoff£t
;

288 i‡(
îr‹
) {

289  (
EIO
);

293 
	sp9_dúít
 {

294 
p9_qid
 
qid
;

295 
uöt64_t
 
d_off
;

296 
d_ty≥
;

297 
d_«me
[256];

301 
off£t
 = 0;

302 
dúoff£t
 < 
fûe_size
) {

307 
îr
 = 
	`p9dúít_ªad
(
fid
->
˛¡
, 
d©a
 + 
off£t
,

308 (
curdúít
),

309 &
curdúít
);

310 i‡(
îr
 < 0) {

311 
	`p9_debug
(
P9_DEBUG_VFS
, "ªtu∫ed %d\n", 
îr
);

312  -
EIO
;

315 
«me_Àn
 = 
curdúít
->name_len;

316 
	`mem£t
(&
dúít
, 0, (dirent));

317 
	`mem˝y
(&
dúít
.
d_fûío
, &
curdúít
->
qid
, (curdirent->qid));

318 i‡(
dúít
.
d_fûío
) {

319 
dúít
.
d_ty≥
 = 
curdúít
->
fûe_ty≥
;

320 
dúít
.
d_«mÀn
 = 
«me_Àn
;

321 
	`°∫˝y
(
dúít
.
d_«me
, 
curdúít
->
«me
, 
«me_Àn
);

322 
dúít
.
d_ª˛í
 = 
	`GENERIC_DIRSIZ
(&dirent);

329 i‡(
uio
->
uio_ªsid
 < 
	`GENERIC_DIRSIZ
(&
dúít
))

333 i‡(
dúít
.
d_fûío
)

334 
	`uiomove
(&
dúít
, 
	`GENERIC_DIRSIZ
(&dúít), 
uio
);

337 
dúoff£t
 +
curdúít
->
ªc_Àn
;

338 
off£t
 +
curdúít
->
ªc_Àn
;

340 
å™soff£t
 = 
dúoff£t
;

344 
uio
->
uio_off£t
 = 
å™soff£t
;

345 
	}
}

347 i‡(
	g≠
->
	ga_eofÊag
)

348 *
	g≠
->
	ga_eofÊag
 = (
uio
->
uio_off£t
 >
fûe_size
);

350  (
	gîr‹
);

354 
	$vútfs_ªadlök
(
v›_ªadlök_¨gs
 *
≠
)

356 
VNOP_UNIMPLEMENTED
;

357 
	}
}

360 
	$vútfs_öa˘ive
(
v›_öa˘ive_¨gs
 *
≠
)

363 
	}
}

365 
v›_ve˘‹
 
	gvútfs_vn›s
 = {

366 .
v›_deÁu…
 = &
deÁu…_vnode›s
,

367 .
	gv›_lookup
 = 
vfs_ˇche_lookup
,

368 .
	gv›_ˇchedlookup
 = 
vútfs_lookup
,

369 .
	gv›_›í
 = 
vútfs_›í
,

370 .
	gv›_˛o£
 = 
vútfs_˛o£
,

371 .
	gv›_gë©å
 = 
vútfs_gë©å
,

372 .
	gv›_£èâr
 = 
vútfs_£èâr
,

373 .
	gv›_ªaddú
 = 
vútfs_ªaddú
,

375 .
	gv›_¸óã
 = 
vútfs_¸óã
,

376 .
	gv›_mknod
 = 
vútfs_mknod
,

377 .
	gv›_ac˚ss
 = 
vútfs_ac˚ss
,

378 .
	gv›_ªad
 = 
vútfs_ªad
,

379 .
	gv›_wrôe
 = 
vútfs_wrôe
,

380 .
	gv›_fsync
 = 
vútfs_fsync
,

381 .
	gv›_ªmove
 = 
vútfs_ªmove
,

382 .
	gv›_lök
 = 
vútfs_lök
,

383 .
	gv›_ª«me
 = 
vútfs_ª«me
,

384 .
	gv›_mkdú
 = 
vútfs_mkdú
,

385 .
	gv›_rmdú
 = 
vútfs_rmdú
,

386 .
	gv›_symlök
 = 
vútfs_symlök
,

387 .
	gv›_ªadlök
 = 
vútfs_ªadlök
,

388 .
	gv›_öa˘ive
 = 
vútfs_öa˘ive
,

	@9p_fs/p9fs.ko/vnode_if.h

8 
vnode›_desc
 
v›_deÁu…_desc
;

9 
	~"vnode_if_ty≥def.h
"

10 
	~"vnode_if_√w¥Ÿo.h
"

11 
	sv›_i¶ocked_¨gs
 {

12 
v›_gíîic_¨gs
 
	ma_gí
;

13 
vnode
 *
	ma_vp
;

16 
vnode›_desc
 
v›_i¶ocked_desc
;

18 
VOP_ISLOCKED_AP
(
v›_i¶ocked_¨gs
 *);

19 
VOP_ISLOCKED_APV
(
v›_ve˘‹
 *
v›
, 
v›_i¶ocked_¨gs
 *);

21 
__ölöe
 
	$VOP_ISLOCKED
(

22 
vnode
 *
vp
)

24 
v›_i¶ocked_¨gs
 
a
;

26 
a
.
a_gí
.
a_desc
 = &
v›_i¶ocked_desc
;

27 
a
.
a_vp
 = 
vp
;

28  (
	`VOP_ISLOCKED_APV
(
vp
->
v_›
, &
a
));

29 
	}
}

31 
	sv›_lookup_¨gs
 {

32 
v›_gíîic_¨gs
 
	ma_gí
;

33 
vnode
 *
	ma_dvp
;

34 
vnode
 **
	ma_vµ
;

35 
comp⁄íäame
 *
	ma_˙p
;

38 
vnode›_desc
 
v›_lookup_desc
;

40 
VOP_LOOKUP_AP
(
v›_lookup_¨gs
 *);

41 
VOP_LOOKUP_APV
(
v›_ve˘‹
 *
v›
, 
v›_lookup_¨gs
 *);

43 
__ölöe
 
	$VOP_LOOKUP
(

44 
vnode
 *
dvp
,

45 
vnode
 **
vµ
,

46 
comp⁄íäame
 *
˙p
)

48 
v›_lookup_¨gs
 
a
;

50 
a
.
a_gí
.
a_desc
 = &
v›_lookup_desc
;

51 
a
.
a_dvp
 = 
dvp
;

52 
a
.
a_vµ
 = 
vµ
;

53 
a
.
a_˙p
 = 
˙p
;

54  (
	`VOP_LOOKUP_APV
(
dvp
->
v_›
, &
a
));

55 
	}
}

57 
	sv›_ˇchedlookup_¨gs
 {

58 
v›_gíîic_¨gs
 
	ma_gí
;

59 
vnode
 *
	ma_dvp
;

60 
vnode
 **
	ma_vµ
;

61 
comp⁄íäame
 *
	ma_˙p
;

64 
vnode›_desc
 
v›_ˇchedlookup_desc
;

66 
VOP_CACHEDLOOKUP_AP
(
v›_ˇchedlookup_¨gs
 *);

67 
VOP_CACHEDLOOKUP_APV
(
v›_ve˘‹
 *
v›
, 
v›_ˇchedlookup_¨gs
 *);

69 
__ölöe
 
	$VOP_CACHEDLOOKUP
(

70 
vnode
 *
dvp
,

71 
vnode
 **
vµ
,

72 
comp⁄íäame
 *
˙p
)

74 
v›_ˇchedlookup_¨gs
 
a
;

76 
a
.
a_gí
.
a_desc
 = &
v›_ˇchedlookup_desc
;

77 
a
.
a_dvp
 = 
dvp
;

78 
a
.
a_vµ
 = 
vµ
;

79 
a
.
a_˙p
 = 
˙p
;

80  (
	`VOP_CACHEDLOOKUP_APV
(
dvp
->
v_›
, &
a
));

81 
	}
}

83 
	sv›_¸óã_¨gs
 {

84 
v›_gíîic_¨gs
 
	ma_gí
;

85 
vnode
 *
	ma_dvp
;

86 
vnode
 **
	ma_vµ
;

87 
comp⁄íäame
 *
	ma_˙p
;

88 
v©å
 *
	ma_v≠
;

91 
vnode›_desc
 
v›_¸óã_desc
;

93 
VOP_CREATE_AP
(
v›_¸óã_¨gs
 *);

94 
VOP_CREATE_APV
(
v›_ve˘‹
 *
v›
, 
v›_¸óã_¨gs
 *);

96 
__ölöe
 
	$VOP_CREATE
(

97 
vnode
 *
dvp
,

98 
vnode
 **
vµ
,

99 
comp⁄íäame
 *
˙p
,

100 
v©å
 *
v≠
)

102 
v›_¸óã_¨gs
 
a
;

104 
a
.
a_gí
.
a_desc
 = &
v›_¸óã_desc
;

105 
a
.
a_dvp
 = 
dvp
;

106 
a
.
a_vµ
 = 
vµ
;

107 
a
.
a_˙p
 = 
˙p
;

108 
a
.
a_v≠
 = 
v≠
;

109  (
	`VOP_CREATE_APV
(
dvp
->
v_›
, &
a
));

110 
	}
}

112 
	sv›_whôeout_¨gs
 {

113 
v›_gíîic_¨gs
 
	ma_gí
;

114 
vnode
 *
	ma_dvp
;

115 
comp⁄íäame
 *
	ma_˙p
;

116 
	ma_Êags
;

119 
vnode›_desc
 
v›_whôeout_desc
;

121 
VOP_WHITEOUT_AP
(
v›_whôeout_¨gs
 *);

122 
VOP_WHITEOUT_APV
(
v›_ve˘‹
 *
v›
, 
v›_whôeout_¨gs
 *);

124 
__ölöe
 
	$VOP_WHITEOUT
(

125 
vnode
 *
dvp
,

126 
comp⁄íäame
 *
˙p
,

127 
Êags
)

129 
v›_whôeout_¨gs
 
a
;

131 
a
.
a_gí
.
a_desc
 = &
v›_whôeout_desc
;

132 
a
.
a_dvp
 = 
dvp
;

133 
a
.
a_˙p
 = 
˙p
;

134 
a
.
a_Êags
 = 
Êags
;

135  (
	`VOP_WHITEOUT_APV
(
dvp
->
v_›
, &
a
));

136 
	}
}

138 
	sv›_mknod_¨gs
 {

139 
v›_gíîic_¨gs
 
	ma_gí
;

140 
vnode
 *
	ma_dvp
;

141 
vnode
 **
	ma_vµ
;

142 
comp⁄íäame
 *
	ma_˙p
;

143 
v©å
 *
	ma_v≠
;

146 
vnode›_desc
 
v›_mknod_desc
;

148 
VOP_MKNOD_AP
(
v›_mknod_¨gs
 *);

149 
VOP_MKNOD_APV
(
v›_ve˘‹
 *
v›
, 
v›_mknod_¨gs
 *);

151 
__ölöe
 
	$VOP_MKNOD
(

152 
vnode
 *
dvp
,

153 
vnode
 **
vµ
,

154 
comp⁄íäame
 *
˙p
,

155 
v©å
 *
v≠
)

157 
v›_mknod_¨gs
 
a
;

159 
a
.
a_gí
.
a_desc
 = &
v›_mknod_desc
;

160 
a
.
a_dvp
 = 
dvp
;

161 
a
.
a_vµ
 = 
vµ
;

162 
a
.
a_˙p
 = 
˙p
;

163 
a
.
a_v≠
 = 
v≠
;

164  (
	`VOP_MKNOD_APV
(
dvp
->
v_›
, &
a
));

165 
	}
}

167 
	sv›_›í_¨gs
 {

168 
v›_gíîic_¨gs
 
	ma_gí
;

169 
vnode
 *
	ma_vp
;

170 
	ma_mode
;

171 
u¸ed
 *
	ma_¸ed
;

172 
thªad
 *
	ma_td
;

173 
fûe
 *
	ma_Â
;

176 
vnode›_desc
 
v›_›í_desc
;

178 
VOP_OPEN_AP
(
v›_›í_¨gs
 *);

179 
VOP_OPEN_APV
(
v›_ve˘‹
 *
v›
, 
v›_›í_¨gs
 *);

181 
__ölöe
 
	$VOP_OPEN
(

182 
vnode
 *
vp
,

183 
mode
,

184 
u¸ed
 *
¸ed
,

185 
thªad
 *
td
,

186 
fûe
 *
Â
)

188 
v›_›í_¨gs
 
a
;

190 
a
.
a_gí
.
a_desc
 = &
v›_›í_desc
;

191 
a
.
a_vp
 = 
vp
;

192 
a
.
a_mode
 = 
mode
;

193 
a
.
a_¸ed
 = 
¸ed
;

194 
a
.
a_td
 = 
td
;

195 
a
.
a_Â
 = 
Â
;

196  (
	`VOP_OPEN_APV
(
vp
->
v_›
, &
a
));

197 
	}
}

199 
	sv›_˛o£_¨gs
 {

200 
v›_gíîic_¨gs
 
	ma_gí
;

201 
vnode
 *
	ma_vp
;

202 
	ma_fÊag
;

203 
u¸ed
 *
	ma_¸ed
;

204 
thªad
 *
	ma_td
;

207 
vnode›_desc
 
v›_˛o£_desc
;

209 
VOP_CLOSE_AP
(
v›_˛o£_¨gs
 *);

210 
VOP_CLOSE_APV
(
v›_ve˘‹
 *
v›
, 
v›_˛o£_¨gs
 *);

212 
__ölöe
 
	$VOP_CLOSE
(

213 
vnode
 *
vp
,

214 
fÊag
,

215 
u¸ed
 *
¸ed
,

216 
thªad
 *
td
)

218 
v›_˛o£_¨gs
 
a
;

220 
a
.
a_gí
.
a_desc
 = &
v›_˛o£_desc
;

221 
a
.
a_vp
 = 
vp
;

222 
a
.
a_fÊag
 = 
fÊag
;

223 
a
.
a_¸ed
 = 
¸ed
;

224 
a
.
a_td
 = 
td
;

225  (
	`VOP_CLOSE_APV
(
vp
->
v_›
, &
a
));

226 
	}
}

228 
	sv›_ac˚ss_¨gs
 {

229 
v›_gíîic_¨gs
 
	ma_gí
;

230 
vnode
 *
	ma_vp
;

231 
accmode_t
 
	ma_accmode
;

232 
u¸ed
 *
	ma_¸ed
;

233 
thªad
 *
	ma_td
;

236 
vnode›_desc
 
v›_ac˚ss_desc
;

238 
VOP_ACCESS_AP
(
v›_ac˚ss_¨gs
 *);

239 
VOP_ACCESS_APV
(
v›_ve˘‹
 *
v›
, 
v›_ac˚ss_¨gs
 *);

241 
__ölöe
 
	$VOP_ACCESS
(

242 
vnode
 *
vp
,

243 
accmode_t
 
accmode
,

244 
u¸ed
 *
¸ed
,

245 
thªad
 *
td
)

247 
v›_ac˚ss_¨gs
 
a
;

249 
a
.
a_gí
.
a_desc
 = &
v›_ac˚ss_desc
;

250 
a
.
a_vp
 = 
vp
;

251 
a
.
a_accmode
 = 
accmode
;

252 
a
.
a_¸ed
 = 
¸ed
;

253 
a
.
a_td
 = 
td
;

254  (
	`VOP_ACCESS_APV
(
vp
->
v_›
, &
a
));

255 
	}
}

257 
	sv›_ac˚ssx_¨gs
 {

258 
v›_gíîic_¨gs
 
	ma_gí
;

259 
vnode
 *
	ma_vp
;

260 
accmode_t
 
	ma_accmode
;

261 
u¸ed
 *
	ma_¸ed
;

262 
thªad
 *
	ma_td
;

265 
vnode›_desc
 
v›_ac˚ssx_desc
;

267 
VOP_ACCESSX_AP
(
v›_ac˚ssx_¨gs
 *);

268 
VOP_ACCESSX_APV
(
v›_ve˘‹
 *
v›
, 
v›_ac˚ssx_¨gs
 *);

270 
__ölöe
 
	$VOP_ACCESSX
(

271 
vnode
 *
vp
,

272 
accmode_t
 
accmode
,

273 
u¸ed
 *
¸ed
,

274 
thªad
 *
td
)

276 
v›_ac˚ssx_¨gs
 
a
;

278 
a
.
a_gí
.
a_desc
 = &
v›_ac˚ssx_desc
;

279 
a
.
a_vp
 = 
vp
;

280 
a
.
a_accmode
 = 
accmode
;

281 
a
.
a_¸ed
 = 
¸ed
;

282 
a
.
a_td
 = 
td
;

283  (
	`VOP_ACCESSX_APV
(
vp
->
v_›
, &
a
));

284 
	}
}

286 
	sv›_gë©å_¨gs
 {

287 
v›_gíîic_¨gs
 
	ma_gí
;

288 
vnode
 *
	ma_vp
;

289 
v©å
 *
	ma_v≠
;

290 
u¸ed
 *
	ma_¸ed
;

293 
vnode›_desc
 
v›_gë©å_desc
;

295 
VOP_GETATTR_AP
(
v›_gë©å_¨gs
 *);

296 
VOP_GETATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë©å_¨gs
 *);

298 
__ölöe
 
	$VOP_GETATTR
(

299 
vnode
 *
vp
,

300 
v©å
 *
v≠
,

301 
u¸ed
 *
¸ed
)

303 
v›_gë©å_¨gs
 
a
;

305 
a
.
a_gí
.
a_desc
 = &
v›_gë©å_desc
;

306 
a
.
a_vp
 = 
vp
;

307 
a
.
a_v≠
 = 
v≠
;

308 
a
.
a_¸ed
 = 
¸ed
;

309  (
	`VOP_GETATTR_APV
(
vp
->
v_›
, &
a
));

310 
	}
}

312 
	sv›_£èâr_¨gs
 {

313 
v›_gíîic_¨gs
 
	ma_gí
;

314 
vnode
 *
	ma_vp
;

315 
v©å
 *
	ma_v≠
;

316 
u¸ed
 *
	ma_¸ed
;

319 
vnode›_desc
 
v›_£èâr_desc
;

321 
VOP_SETATTR_AP
(
v›_£èâr_¨gs
 *);

322 
VOP_SETATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_£èâr_¨gs
 *);

324 
__ölöe
 
	$VOP_SETATTR
(

325 
vnode
 *
vp
,

326 
v©å
 *
v≠
,

327 
u¸ed
 *
¸ed
)

329 
v›_£èâr_¨gs
 
a
;

331 
a
.
a_gí
.
a_desc
 = &
v›_£èâr_desc
;

332 
a
.
a_vp
 = 
vp
;

333 
a
.
a_v≠
 = 
v≠
;

334 
a
.
a_¸ed
 = 
¸ed
;

335  (
	`VOP_SETATTR_APV
(
vp
->
v_›
, &
a
));

336 
	}
}

338 
	sv›_m¨k©ime_¨gs
 {

339 
v›_gíîic_¨gs
 
	ma_gí
;

340 
vnode
 *
	ma_vp
;

343 
vnode›_desc
 
v›_m¨k©ime_desc
;

345 
VOP_MARKATIME_AP
(
v›_m¨k©ime_¨gs
 *);

346 
VOP_MARKATIME_APV
(
v›_ve˘‹
 *
v›
, 
v›_m¨k©ime_¨gs
 *);

348 
__ölöe
 
	$VOP_MARKATIME
(

349 
vnode
 *
vp
)

351 
v›_m¨k©ime_¨gs
 
a
;

353 
a
.
a_gí
.
a_desc
 = &
v›_m¨k©ime_desc
;

354 
a
.
a_vp
 = 
vp
;

355  (
	`VOP_MARKATIME_APV
(
vp
->
v_›
, &
a
));

356 
	}
}

358 
	sv›_ªad_¨gs
 {

359 
v›_gíîic_¨gs
 
	ma_gí
;

360 
vnode
 *
	ma_vp
;

361 
uio
 *
	ma_uio
;

362 
	ma_ioÊag
;

363 
u¸ed
 *
	ma_¸ed
;

366 
vnode›_desc
 
v›_ªad_desc
;

368 
VOP_READ_AP
(
v›_ªad_¨gs
 *);

369 
VOP_READ_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªad_¨gs
 *);

371 
__ölöe
 
	$VOP_READ
(

372 
vnode
 *
vp
,

373 
uio
 *uio,

374 
ioÊag
,

375 
u¸ed
 *
¸ed
)

377 
v›_ªad_¨gs
 
a
;

379 
a
.
a_gí
.
a_desc
 = &
v›_ªad_desc
;

380 
a
.
a_vp
 = 
vp
;

381 
a
.
a_uio
 = 
uio
;

382 
a
.
a_ioÊag
 = 
ioÊag
;

383 
a
.
a_¸ed
 = 
¸ed
;

384  (
	`VOP_READ_APV
(
vp
->
v_›
, &
a
));

385 
	}
}

387 
	sv›_wrôe_¨gs
 {

388 
v›_gíîic_¨gs
 
	ma_gí
;

389 
vnode
 *
	ma_vp
;

390 
uio
 *
	ma_uio
;

391 
	ma_ioÊag
;

392 
u¸ed
 *
	ma_¸ed
;

395 
vnode›_desc
 
v›_wrôe_desc
;

397 
VOP_WRITE_AP
(
v›_wrôe_¨gs
 *);

398 
VOP_WRITE_APV
(
v›_ve˘‹
 *
v›
, 
v›_wrôe_¨gs
 *);

400 
__ölöe
 
	$VOP_WRITE
(

401 
vnode
 *
vp
,

402 
uio
 *uio,

403 
ioÊag
,

404 
u¸ed
 *
¸ed
)

406 
v›_wrôe_¨gs
 
a
;

408 
a
.
a_gí
.
a_desc
 = &
v›_wrôe_desc
;

409 
a
.
a_vp
 = 
vp
;

410 
a
.
a_uio
 = 
uio
;

411 
a
.
a_ioÊag
 = 
ioÊag
;

412 
a
.
a_¸ed
 = 
¸ed
;

413  (
	`VOP_WRITE_APV
(
vp
->
v_›
, &
a
));

414 
	}
}

416 
	sv›_io˘l_¨gs
 {

417 
v›_gíîic_¨gs
 
	ma_gí
;

418 
vnode
 *
	ma_vp
;

419 
u_l⁄g
 
	ma_comm™d
;

420 *
	ma_d©a
;

421 
	ma_fÊag
;

422 
u¸ed
 *
	ma_¸ed
;

423 
thªad
 *
	ma_td
;

426 
vnode›_desc
 
v›_io˘l_desc
;

428 
VOP_IOCTL_AP
(
v›_io˘l_¨gs
 *);

429 
VOP_IOCTL_APV
(
v›_ve˘‹
 *
v›
, 
v›_io˘l_¨gs
 *);

431 
__ölöe
 
	$VOP_IOCTL
(

432 
vnode
 *
vp
,

433 
u_l⁄g
 
comm™d
,

434 *
d©a
,

435 
fÊag
,

436 
u¸ed
 *
¸ed
,

437 
thªad
 *
td
)

439 
v›_io˘l_¨gs
 
a
;

441 
a
.
a_gí
.
a_desc
 = &
v›_io˘l_desc
;

442 
a
.
a_vp
 = 
vp
;

443 
a
.
a_comm™d
 = 
comm™d
;

444 
a
.
a_d©a
 = 
d©a
;

445 
a
.
a_fÊag
 = 
fÊag
;

446 
a
.
a_¸ed
 = 
¸ed
;

447 
a
.
a_td
 = 
td
;

448  (
	`VOP_IOCTL_APV
(
vp
->
v_›
, &
a
));

449 
	}
}

451 
	sv›_pﬁl_¨gs
 {

452 
v›_gíîic_¨gs
 
	ma_gí
;

453 
vnode
 *
	ma_vp
;

454 
	ma_evíts
;

455 
u¸ed
 *
	ma_¸ed
;

456 
thªad
 *
	ma_td
;

459 
vnode›_desc
 
v›_pﬁl_desc
;

461 
VOP_POLL_AP
(
v›_pﬁl_¨gs
 *);

462 
VOP_POLL_APV
(
v›_ve˘‹
 *
v›
, 
v›_pﬁl_¨gs
 *);

464 
__ölöe
 
	$VOP_POLL
(

465 
vnode
 *
vp
,

466 
evíts
,

467 
u¸ed
 *
¸ed
,

468 
thªad
 *
td
)

470 
v›_pﬁl_¨gs
 
a
;

472 
a
.
a_gí
.
a_desc
 = &
v›_pﬁl_desc
;

473 
a
.
a_vp
 = 
vp
;

474 
a
.
a_evíts
 = 
evíts
;

475 
a
.
a_¸ed
 = 
¸ed
;

476 
a
.
a_td
 = 
td
;

477  (
	`VOP_POLL_APV
(
vp
->
v_›
, &
a
));

478 
	}
}

480 
	sv›_kqfûãr_¨gs
 {

481 
v›_gíîic_¨gs
 
	ma_gí
;

482 
vnode
 *
	ma_vp
;

483 
knŸe
 *
	ma_kn
;

486 
vnode›_desc
 
v›_kqfûãr_desc
;

488 
VOP_KQFILTER_AP
(
v›_kqfûãr_¨gs
 *);

489 
VOP_KQFILTER_APV
(
v›_ve˘‹
 *
v›
, 
v›_kqfûãr_¨gs
 *);

491 
__ölöe
 
	$VOP_KQFILTER
(

492 
vnode
 *
vp
,

493 
knŸe
 *
kn
)

495 
v›_kqfûãr_¨gs
 
a
;

497 
a
.
a_gí
.
a_desc
 = &
v›_kqfûãr_desc
;

498 
a
.
a_vp
 = 
vp
;

499 
a
.
a_kn
 = 
kn
;

500  (
	`VOP_KQFILTER_APV
(
vp
->
v_›
, &
a
));

501 
	}
}

503 
	sv›_ªvoke_¨gs
 {

504 
v›_gíîic_¨gs
 
	ma_gí
;

505 
vnode
 *
	ma_vp
;

506 
	ma_Êags
;

509 
vnode›_desc
 
v›_ªvoke_desc
;

511 
VOP_REVOKE_AP
(
v›_ªvoke_¨gs
 *);

512 
VOP_REVOKE_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªvoke_¨gs
 *);

514 
__ölöe
 
	$VOP_REVOKE
(

515 
vnode
 *
vp
,

516 
Êags
)

518 
v›_ªvoke_¨gs
 
a
;

520 
a
.
a_gí
.
a_desc
 = &
v›_ªvoke_desc
;

521 
a
.
a_vp
 = 
vp
;

522 
a
.
a_Êags
 = 
Êags
;

523  (
	`VOP_REVOKE_APV
(
vp
->
v_›
, &
a
));

524 
	}
}

526 
	sv›_fsync_¨gs
 {

527 
v›_gíîic_¨gs
 
	ma_gí
;

528 
vnode
 *
	ma_vp
;

529 
	ma_waôf‹
;

530 
thªad
 *
	ma_td
;

533 
vnode›_desc
 
v›_fsync_desc
;

535 
VOP_FSYNC_AP
(
v›_fsync_¨gs
 *);

536 
VOP_FSYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_fsync_¨gs
 *);

538 
__ölöe
 
	$VOP_FSYNC
(

539 
vnode
 *
vp
,

540 
waôf‹
,

541 
thªad
 *
td
)

543 
v›_fsync_¨gs
 
a
;

545 
a
.
a_gí
.
a_desc
 = &
v›_fsync_desc
;

546 
a
.
a_vp
 = 
vp
;

547 
a
.
a_waôf‹
 = 
waôf‹
;

548 
a
.
a_td
 = 
td
;

549  (
	`VOP_FSYNC_APV
(
vp
->
v_›
, &
a
));

550 
	}
}

552 
	sv›_ªmove_¨gs
 {

553 
v›_gíîic_¨gs
 
	ma_gí
;

554 
vnode
 *
	ma_dvp
;

555 
vnode
 *
	ma_vp
;

556 
comp⁄íäame
 *
	ma_˙p
;

559 
vnode›_desc
 
v›_ªmove_desc
;

561 
VOP_REMOVE_AP
(
v›_ªmove_¨gs
 *);

562 
VOP_REMOVE_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªmove_¨gs
 *);

564 
__ölöe
 
	$VOP_REMOVE
(

565 
vnode
 *
dvp
,

566 
vnode
 *
vp
,

567 
comp⁄íäame
 *
˙p
)

569 
v›_ªmove_¨gs
 
a
;

571 
a
.
a_gí
.
a_desc
 = &
v›_ªmove_desc
;

572 
a
.
a_dvp
 = 
dvp
;

573 
a
.
a_vp
 = 
vp
;

574 
a
.
a_˙p
 = 
˙p
;

575  (
	`VOP_REMOVE_APV
(
dvp
->
v_›
, &
a
));

576 
	}
}

578 
	sv›_lök_¨gs
 {

579 
v›_gíîic_¨gs
 
	ma_gí
;

580 
vnode
 *
	ma_tdvp
;

581 
vnode
 *
	ma_vp
;

582 
comp⁄íäame
 *
	ma_˙p
;

585 
vnode›_desc
 
v›_lök_desc
;

587 
VOP_LINK_AP
(
v›_lök_¨gs
 *);

588 
VOP_LINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_lök_¨gs
 *);

590 
__ölöe
 
	$VOP_LINK
(

591 
vnode
 *
tdvp
,

592 
vnode
 *
vp
,

593 
comp⁄íäame
 *
˙p
)

595 
v›_lök_¨gs
 
a
;

597 
a
.
a_gí
.
a_desc
 = &
v›_lök_desc
;

598 
a
.
a_tdvp
 = 
tdvp
;

599 
a
.
a_vp
 = 
vp
;

600 
a
.
a_˙p
 = 
˙p
;

601  (
	`VOP_LINK_APV
(
tdvp
->
v_›
, &
a
));

602 
	}
}

604 
	sv›_ª«me_¨gs
 {

605 
v›_gíîic_¨gs
 
	ma_gí
;

606 
vnode
 *
	ma_fdvp
;

607 
vnode
 *
	ma_fvp
;

608 
comp⁄íäame
 *
	ma_f˙p
;

609 
vnode
 *
	ma_tdvp
;

610 
vnode
 *
	ma_tvp
;

611 
comp⁄íäame
 *
	ma_t˙p
;

614 
vnode›_desc
 
v›_ª«me_desc
;

616 
VOP_RENAME_AP
(
v›_ª«me_¨gs
 *);

617 
VOP_RENAME_APV
(
v›_ve˘‹
 *
v›
, 
v›_ª«me_¨gs
 *);

619 
__ölöe
 
	$VOP_RENAME
(

620 
vnode
 *
fdvp
,

621 
vnode
 *
fvp
,

622 
comp⁄íäame
 *
f˙p
,

623 
vnode
 *
tdvp
,

624 
vnode
 *
tvp
,

625 
comp⁄íäame
 *
t˙p
)

627 
v›_ª«me_¨gs
 
a
;

629 
a
.
a_gí
.
a_desc
 = &
v›_ª«me_desc
;

630 
a
.
a_fdvp
 = 
fdvp
;

631 
a
.
a_fvp
 = 
fvp
;

632 
a
.
a_f˙p
 = 
f˙p
;

633 
a
.
a_tdvp
 = 
tdvp
;

634 
a
.
a_tvp
 = 
tvp
;

635 
a
.
a_t˙p
 = 
t˙p
;

636  (
	`VOP_RENAME_APV
(
fdvp
->
v_›
, &
a
));

637 
	}
}

639 
	sv›_mkdú_¨gs
 {

640 
v›_gíîic_¨gs
 
	ma_gí
;

641 
vnode
 *
	ma_dvp
;

642 
vnode
 **
	ma_vµ
;

643 
comp⁄íäame
 *
	ma_˙p
;

644 
v©å
 *
	ma_v≠
;

647 
vnode›_desc
 
v›_mkdú_desc
;

649 
VOP_MKDIR_AP
(
v›_mkdú_¨gs
 *);

650 
VOP_MKDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_mkdú_¨gs
 *);

652 
__ölöe
 
	$VOP_MKDIR
(

653 
vnode
 *
dvp
,

654 
vnode
 **
vµ
,

655 
comp⁄íäame
 *
˙p
,

656 
v©å
 *
v≠
)

658 
v›_mkdú_¨gs
 
a
;

660 
a
.
a_gí
.
a_desc
 = &
v›_mkdú_desc
;

661 
a
.
a_dvp
 = 
dvp
;

662 
a
.
a_vµ
 = 
vµ
;

663 
a
.
a_˙p
 = 
˙p
;

664 
a
.
a_v≠
 = 
v≠
;

665  (
	`VOP_MKDIR_APV
(
dvp
->
v_›
, &
a
));

666 
	}
}

668 
	sv›_rmdú_¨gs
 {

669 
v›_gíîic_¨gs
 
	ma_gí
;

670 
vnode
 *
	ma_dvp
;

671 
vnode
 *
	ma_vp
;

672 
comp⁄íäame
 *
	ma_˙p
;

675 
vnode›_desc
 
v›_rmdú_desc
;

677 
VOP_RMDIR_AP
(
v›_rmdú_¨gs
 *);

678 
VOP_RMDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_rmdú_¨gs
 *);

680 
__ölöe
 
	$VOP_RMDIR
(

681 
vnode
 *
dvp
,

682 
vnode
 *
vp
,

683 
comp⁄íäame
 *
˙p
)

685 
v›_rmdú_¨gs
 
a
;

687 
a
.
a_gí
.
a_desc
 = &
v›_rmdú_desc
;

688 
a
.
a_dvp
 = 
dvp
;

689 
a
.
a_vp
 = 
vp
;

690 
a
.
a_˙p
 = 
˙p
;

691  (
	`VOP_RMDIR_APV
(
dvp
->
v_›
, &
a
));

692 
	}
}

694 
	sv›_symlök_¨gs
 {

695 
v›_gíîic_¨gs
 
	ma_gí
;

696 
vnode
 *
	ma_dvp
;

697 
vnode
 **
	ma_vµ
;

698 
comp⁄íäame
 *
	ma_˙p
;

699 
v©å
 *
	ma_v≠
;

700 *
	ma_èrgë
;

703 
vnode›_desc
 
v›_symlök_desc
;

705 
VOP_SYMLINK_AP
(
v›_symlök_¨gs
 *);

706 
VOP_SYMLINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_symlök_¨gs
 *);

708 
__ölöe
 
	$VOP_SYMLINK
(

709 
vnode
 *
dvp
,

710 
vnode
 **
vµ
,

711 
comp⁄íäame
 *
˙p
,

712 
v©å
 *
v≠
,

713 *
èrgë
)

715 
v›_symlök_¨gs
 
a
;

717 
a
.
a_gí
.
a_desc
 = &
v›_symlök_desc
;

718 
a
.
a_dvp
 = 
dvp
;

719 
a
.
a_vµ
 = 
vµ
;

720 
a
.
a_˙p
 = 
˙p
;

721 
a
.
a_v≠
 = 
v≠
;

722 
a
.
a_èrgë
 = 
èrgë
;

723  (
	`VOP_SYMLINK_APV
(
dvp
->
v_›
, &
a
));

724 
	}
}

726 
	sv›_ªaddú_¨gs
 {

727 
v›_gíîic_¨gs
 
	ma_gí
;

728 
vnode
 *
	ma_vp
;

729 
uio
 *
	ma_uio
;

730 
u¸ed
 *
	ma_¸ed
;

731 *
	ma_eofÊag
;

732 *
	ma_ncookõs
;

733 
u_l⁄g
 **
	ma_cookõs
;

736 
vnode›_desc
 
v›_ªaddú_desc
;

738 
VOP_READDIR_AP
(
v›_ªaddú_¨gs
 *);

739 
VOP_READDIR_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªaddú_¨gs
 *);

741 
__ölöe
 
	$VOP_READDIR
(

742 
vnode
 *
vp
,

743 
uio
 *uio,

744 
u¸ed
 *
¸ed
,

745 *
eofÊag
,

746 *
ncookõs
,

747 
u_l⁄g
 **
cookõs
)

749 
v›_ªaddú_¨gs
 
a
;

751 
a
.
a_gí
.
a_desc
 = &
v›_ªaddú_desc
;

752 
a
.
a_vp
 = 
vp
;

753 
a
.
a_uio
 = 
uio
;

754 
a
.
a_¸ed
 = 
¸ed
;

755 
a
.
a_eofÊag
 = 
eofÊag
;

756 
a
.
a_ncookõs
 = 
ncookõs
;

757 
a
.
a_cookõs
 = 
cookõs
;

758  (
	`VOP_READDIR_APV
(
vp
->
v_›
, &
a
));

759 
	}
}

761 
	sv›_ªadlök_¨gs
 {

762 
v›_gíîic_¨gs
 
	ma_gí
;

763 
vnode
 *
	ma_vp
;

764 
uio
 *
	ma_uio
;

765 
u¸ed
 *
	ma_¸ed
;

768 
vnode›_desc
 
v›_ªadlök_desc
;

770 
VOP_READLINK_AP
(
v›_ªadlök_¨gs
 *);

771 
VOP_READLINK_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªadlök_¨gs
 *);

773 
__ölöe
 
	$VOP_READLINK
(

774 
vnode
 *
vp
,

775 
uio
 *uio,

776 
u¸ed
 *
¸ed
)

778 
v›_ªadlök_¨gs
 
a
;

780 
a
.
a_gí
.
a_desc
 = &
v›_ªadlök_desc
;

781 
a
.
a_vp
 = 
vp
;

782 
a
.
a_uio
 = 
uio
;

783 
a
.
a_¸ed
 = 
¸ed
;

784  (
	`VOP_READLINK_APV
(
vp
->
v_›
, &
a
));

785 
	}
}

787 
	sv›_öa˘ive_¨gs
 {

788 
v›_gíîic_¨gs
 
	ma_gí
;

789 
vnode
 *
	ma_vp
;

790 
thªad
 *
	ma_td
;

793 
vnode›_desc
 
v›_öa˘ive_desc
;

795 
VOP_INACTIVE_AP
(
v›_öa˘ive_¨gs
 *);

796 
VOP_INACTIVE_APV
(
v›_ve˘‹
 *
v›
, 
v›_öa˘ive_¨gs
 *);

798 
__ölöe
 
	$VOP_INACTIVE
(

799 
vnode
 *
vp
,

800 
thªad
 *
td
)

802 
v›_öa˘ive_¨gs
 
a
;

804 
a
.
a_gí
.
a_desc
 = &
v›_öa˘ive_desc
;

805 
a
.
a_vp
 = 
vp
;

806 
a
.
a_td
 = 
td
;

807  (
	`VOP_INACTIVE_APV
(
vp
->
v_›
, &
a
));

808 
	}
}

810 
	sv›_ª˛aim_¨gs
 {

811 
v›_gíîic_¨gs
 
	ma_gí
;

812 
vnode
 *
	ma_vp
;

813 
thªad
 *
	ma_td
;

816 
vnode›_desc
 
v›_ª˛aim_desc
;

818 
VOP_RECLAIM_AP
(
v›_ª˛aim_¨gs
 *);

819 
VOP_RECLAIM_APV
(
v›_ve˘‹
 *
v›
, 
v›_ª˛aim_¨gs
 *);

821 
__ölöe
 
	$VOP_RECLAIM
(

822 
vnode
 *
vp
,

823 
thªad
 *
td
)

825 
v›_ª˛aim_¨gs
 
a
;

827 
a
.
a_gí
.
a_desc
 = &
v›_ª˛aim_desc
;

828 
a
.
a_vp
 = 
vp
;

829 
a
.
a_td
 = 
td
;

830  (
	`VOP_RECLAIM_APV
(
vp
->
v_›
, &
a
));

831 
	}
}

833 
	sv›_lock1_¨gs
 {

834 
v›_gíîic_¨gs
 
	ma_gí
;

835 
vnode
 *
	ma_vp
;

836 
	ma_Êags
;

837 *
	ma_fûe
;

838 
	ma_löe
;

841 
vnode›_desc
 
v›_lock1_desc
;

843 
VOP_LOCK1_AP
(
v›_lock1_¨gs
 *);

844 
VOP_LOCK1_APV
(
v›_ve˘‹
 *
v›
, 
v›_lock1_¨gs
 *);

846 
__ölöe
 
	$VOP_LOCK1
(

847 
vnode
 *
vp
,

848 
Êags
,

849 *
fûe
,

850 
löe
)

852 
v›_lock1_¨gs
 
a
;

854 
a
.
a_gí
.
a_desc
 = &
v›_lock1_desc
;

855 
a
.
a_vp
 = 
vp
;

856 
a
.
a_Êags
 = 
Êags
;

857 
a
.
a_fûe
 = 
fûe
;

858 
a
.
a_löe
 = 
löe
;

859  (
	`VOP_LOCK1_APV
(
vp
->
v_›
, &
a
));

860 
	}
}

862 
	sv›_u∆ock_¨gs
 {

863 
v›_gíîic_¨gs
 
	ma_gí
;

864 
vnode
 *
	ma_vp
;

865 
	ma_Êags
;

868 
vnode›_desc
 
v›_u∆ock_desc
;

870 
VOP_UNLOCK_AP
(
v›_u∆ock_¨gs
 *);

871 
VOP_UNLOCK_APV
(
v›_ve˘‹
 *
v›
, 
v›_u∆ock_¨gs
 *);

873 
__ölöe
 
	$VOP_UNLOCK
(

874 
vnode
 *
vp
,

875 
Êags
)

877 
v›_u∆ock_¨gs
 
a
;

879 
a
.
a_gí
.
a_desc
 = &
v›_u∆ock_desc
;

880 
a
.
a_vp
 = 
vp
;

881 
a
.
a_Êags
 = 
Êags
;

882  (
	`VOP_UNLOCK_APV
(
vp
->
v_›
, &
a
));

883 
	}
}

885 
	sv›_bm≠_¨gs
 {

886 
v›_gíîic_¨gs
 
	ma_gí
;

887 
vnode
 *
	ma_vp
;

888 
daddr_t
 
	ma_bn
;

889 
bufobj
 **
	ma_b›
;

890 
daddr_t
 *
	ma_b≈
;

891 *
	ma_ru≈
;

892 *
	ma_runb
;

895 
vnode›_desc
 
v›_bm≠_desc
;

897 
VOP_BMAP_AP
(
v›_bm≠_¨gs
 *);

898 
VOP_BMAP_APV
(
v›_ve˘‹
 *
v›
, 
v›_bm≠_¨gs
 *);

900 
__ölöe
 
	$VOP_BMAP
(

901 
vnode
 *
vp
,

902 
daddr_t
 
bn
,

903 
bufobj
 **
b›
,

904 
daddr_t
 *
b≈
,

905 *
ru≈
,

906 *
runb
)

908 
v›_bm≠_¨gs
 
a
;

910 
a
.
a_gí
.
a_desc
 = &
v›_bm≠_desc
;

911 
a
.
a_vp
 = 
vp
;

912 
a
.
a_bn
 = 
bn
;

913 
a
.
a_b›
 = 
b›
;

914 
a
.
a_b≈
 = 
b≈
;

915 
a
.
a_ru≈
 = 
ru≈
;

916 
a
.
a_runb
 = 
runb
;

917  (
	`VOP_BMAP_APV
(
vp
->
v_›
, &
a
));

918 
	}
}

920 
	sv›_°øãgy_¨gs
 {

921 
v›_gíîic_¨gs
 
	ma_gí
;

922 
vnode
 *
	ma_vp
;

923 
buf
 *
	ma_bp
;

926 
vnode›_desc
 
v›_°øãgy_desc
;

928 
VOP_STRATEGY_AP
(
v›_°øãgy_¨gs
 *);

929 
VOP_STRATEGY_APV
(
v›_ve˘‹
 *
v›
, 
v›_°øãgy_¨gs
 *);

931 
__ölöe
 
	$VOP_STRATEGY
(

932 
vnode
 *
vp
,

933 
buf
 *
bp
)

935 
v›_°øãgy_¨gs
 
a
;

937 
a
.
a_gí
.
a_desc
 = &
v›_°øãgy_desc
;

938 
a
.
a_vp
 = 
vp
;

939 
a
.
a_bp
 = 
bp
;

940  (
	`VOP_STRATEGY_APV
(
vp
->
v_›
, &
a
));

941 
	}
}

943 
	sv›_gëwrôemou¡_¨gs
 {

944 
v›_gíîic_¨gs
 
	ma_gí
;

945 
vnode
 *
	ma_vp
;

946 
mou¡
 **
	ma_mµ
;

949 
vnode›_desc
 
v›_gëwrôemou¡_desc
;

951 
VOP_GETWRITEMOUNT_AP
(
v›_gëwrôemou¡_¨gs
 *);

952 
VOP_GETWRITEMOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëwrôemou¡_¨gs
 *);

954 
__ölöe
 
	$VOP_GETWRITEMOUNT
(

955 
vnode
 *
vp
,

956 
mou¡
 **
mµ
)

958 
v›_gëwrôemou¡_¨gs
 
a
;

960 
a
.
a_gí
.
a_desc
 = &
v›_gëwrôemou¡_desc
;

961 
a
.
a_vp
 = 
vp
;

962 
a
.
a_mµ
 = 
mµ
;

963  (
	`VOP_GETWRITEMOUNT_APV
(
vp
->
v_›
, &
a
));

964 
	}
}

966 
	sv›_¥öt_¨gs
 {

967 
v›_gíîic_¨gs
 
	ma_gí
;

968 
vnode
 *
	ma_vp
;

971 
vnode›_desc
 
v›_¥öt_desc
;

973 
VOP_PRINT_AP
(
v›_¥öt_¨gs
 *);

974 
VOP_PRINT_APV
(
v›_ve˘‹
 *
v›
, 
v›_¥öt_¨gs
 *);

976 
__ölöe
 
	$VOP_PRINT
(

977 
vnode
 *
vp
)

979 
v›_¥öt_¨gs
 
a
;

981 
a
.
a_gí
.
a_desc
 = &
v›_¥öt_desc
;

982 
a
.
a_vp
 = 
vp
;

983  (
	`VOP_PRINT_APV
(
vp
->
v_›
, &
a
));

984 
	}
}

986 
	sv›_∑thc⁄f_¨gs
 {

987 
v›_gíîic_¨gs
 
	ma_gí
;

988 
vnode
 *
	ma_vp
;

989 
	ma_«me
;

990 
ªgi°î_t
 *
	ma_ªtvÆ
;

993 
vnode›_desc
 
v›_∑thc⁄f_desc
;

995 
VOP_PATHCONF_AP
(
v›_∑thc⁄f_¨gs
 *);

996 
VOP_PATHCONF_APV
(
v›_ve˘‹
 *
v›
, 
v›_∑thc⁄f_¨gs
 *);

998 
__ölöe
 
	$VOP_PATHCONF
(

999 
vnode
 *
vp
,

1000 
«me
,

1001 
ªgi°î_t
 *
ªtvÆ
)

1003 
v›_∑thc⁄f_¨gs
 
a
;

1005 
a
.
a_gí
.
a_desc
 = &
v›_∑thc⁄f_desc
;

1006 
a
.
a_vp
 = 
vp
;

1007 
a
.
a_«me
 = 
«me
;

1008 
a
.
a_ªtvÆ
 = 
ªtvÆ
;

1009  (
	`VOP_PATHCONF_APV
(
vp
->
v_›
, &
a
));

1010 
	}
}

1012 
	sv›_advlock_¨gs
 {

1013 
v›_gíîic_¨gs
 
	ma_gí
;

1014 
vnode
 *
	ma_vp
;

1015 *
	ma_id
;

1016 
	ma_›
;

1017 
Êock
 *
	ma_Ê
;

1018 
	ma_Êags
;

1021 
vnode›_desc
 
v›_advlock_desc
;

1023 
VOP_ADVLOCK_AP
(
v›_advlock_¨gs
 *);

1024 
VOP_ADVLOCK_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlock_¨gs
 *);

1026 
__ölöe
 
	$VOP_ADVLOCK
(

1027 
vnode
 *
vp
,

1028 *
id
,

1029 
›
,

1030 
Êock
 *
Ê
,

1031 
Êags
)

1033 
v›_advlock_¨gs
 
a
;

1035 
a
.
a_gí
.
a_desc
 = &
v›_advlock_desc
;

1036 
a
.
a_vp
 = 
vp
;

1037 
a
.
a_id
 = 
id
;

1038 
a
.
a_›
 = 
›
;

1039 
a
.
a_Ê
 = 
Ê
;

1040 
a
.
a_Êags
 = 
Êags
;

1041  (
	`VOP_ADVLOCK_APV
(
vp
->
v_›
, &
a
));

1042 
	}
}

1044 
	sv›_advlockasync_¨gs
 {

1045 
v›_gíîic_¨gs
 
	ma_gí
;

1046 
vnode
 *
	ma_vp
;

1047 *
	ma_id
;

1048 
	ma_›
;

1049 
Êock
 *
	ma_Ê
;

1050 
	ma_Êags
;

1051 
èsk
 *
	ma_èsk
;

1052 **
	ma_cookõp
;

1055 
vnode›_desc
 
v›_advlockasync_desc
;

1057 
VOP_ADVLOCKASYNC_AP
(
v›_advlockasync_¨gs
 *);

1058 
VOP_ADVLOCKASYNC_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlockasync_¨gs
 *);

1060 
__ölöe
 
	$VOP_ADVLOCKASYNC
(

1061 
vnode
 *
vp
,

1062 *
id
,

1063 
›
,

1064 
Êock
 *
Ê
,

1065 
Êags
,

1066 
èsk
 *task,

1067 **
cookõp
)

1069 
v›_advlockasync_¨gs
 
a
;

1071 
a
.
a_gí
.
a_desc
 = &
v›_advlockasync_desc
;

1072 
a
.
a_vp
 = 
vp
;

1073 
a
.
a_id
 = 
id
;

1074 
a
.
a_›
 = 
›
;

1075 
a
.
a_Ê
 = 
Ê
;

1076 
a
.
a_Êags
 = 
Êags
;

1077 
a
.
a_èsk
 = 
èsk
;

1078 
a
.
a_cookõp
 = 
cookõp
;

1079  (
	`VOP_ADVLOCKASYNC_APV
(
vp
->
v_›
, &
a
));

1080 
	}
}

1082 
	sv›_advlockpurge_¨gs
 {

1083 
v›_gíîic_¨gs
 
	ma_gí
;

1084 
vnode
 *
	ma_vp
;

1087 
vnode›_desc
 
v›_advlockpurge_desc
;

1089 
VOP_ADVLOCKPURGE_AP
(
v›_advlockpurge_¨gs
 *);

1090 
VOP_ADVLOCKPURGE_APV
(
v›_ve˘‹
 *
v›
, 
v›_advlockpurge_¨gs
 *);

1092 
__ölöe
 
	$VOP_ADVLOCKPURGE
(

1093 
vnode
 *
vp
)

1095 
v›_advlockpurge_¨gs
 
a
;

1097 
a
.
a_gí
.
a_desc
 = &
v›_advlockpurge_desc
;

1098 
a
.
a_vp
 = 
vp
;

1099  (
	`VOP_ADVLOCKPURGE_APV
(
vp
->
v_›
, &
a
));

1100 
	}
}

1102 
	sv›_ªÆlocblks_¨gs
 {

1103 
v›_gíîic_¨gs
 
	ma_gí
;

1104 
vnode
 *
	ma_vp
;

1105 
˛u°î_ßve
 *
	ma_buÊi°
;

1108 
vnode›_desc
 
v›_ªÆlocblks_desc
;

1110 
VOP_REALLOCBLKS_AP
(
v›_ªÆlocblks_¨gs
 *);

1111 
VOP_REALLOCBLKS_APV
(
v›_ve˘‹
 *
v›
, 
v›_ªÆlocblks_¨gs
 *);

1113 
__ölöe
 
	$VOP_REALLOCBLKS
(

1114 
vnode
 *
vp
,

1115 
˛u°î_ßve
 *
buÊi°
)

1117 
v›_ªÆlocblks_¨gs
 
a
;

1119 
a
.
a_gí
.
a_desc
 = &
v›_ªÆlocblks_desc
;

1120 
a
.
a_vp
 = 
vp
;

1121 
a
.
a_buÊi°
 = 
buÊi°
;

1122  (
	`VOP_REALLOCBLKS_APV
(
vp
->
v_›
, &
a
));

1123 
	}
}

1125 
	sv›_gë∑ges_¨gs
 {

1126 
v›_gíîic_¨gs
 
	ma_gí
;

1127 
vnode
 *
	ma_vp
;

1128 
vm_∑ge_t
 *
	ma_m
;

1129 
	ma_cou¡
;

1130 
	ma_ªq∑ge
;

1131 
vm_ooff£t_t
 
	ma_off£t
;

1134 
vnode›_desc
 
v›_gë∑ges_desc
;

1136 
VOP_GETPAGES_AP
(
v›_gë∑ges_¨gs
 *);

1137 
VOP_GETPAGES_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë∑ges_¨gs
 *);

1139 
__ölöe
 
	$VOP_GETPAGES
(

1140 
vnode
 *
vp
,

1141 
vm_∑ge_t
 *
m
,

1142 
cou¡
,

1143 
ªq∑ge
,

1144 
vm_ooff£t_t
 
off£t
)

1146 
v›_gë∑ges_¨gs
 
a
;

1148 
a
.
a_gí
.
a_desc
 = &
v›_gë∑ges_desc
;

1149 
a
.
a_vp
 = 
vp
;

1150 
a
.
a_m
 = 
m
;

1151 
a
.
a_cou¡
 = 
cou¡
;

1152 
a
.
a_ªq∑ge
 = 
ªq∑ge
;

1153 
a
.
a_off£t
 = 
off£t
;

1154  (
	`VOP_GETPAGES_APV
(
vp
->
v_›
, &
a
));

1155 
	}
}

1157 
	sv›_puçages_¨gs
 {

1158 
v›_gíîic_¨gs
 
	ma_gí
;

1159 
vnode
 *
	ma_vp
;

1160 
vm_∑ge_t
 *
	ma_m
;

1161 
	ma_cou¡
;

1162 
	ma_sync
;

1163 *
	ma_πvÆs
;

1164 
vm_ooff£t_t
 
	ma_off£t
;

1167 
vnode›_desc
 
v›_puçages_desc
;

1169 
VOP_PUTPAGES_AP
(
v›_puçages_¨gs
 *);

1170 
VOP_PUTPAGES_APV
(
v›_ve˘‹
 *
v›
, 
v›_puçages_¨gs
 *);

1172 
__ölöe
 
	$VOP_PUTPAGES
(

1173 
vnode
 *
vp
,

1174 
vm_∑ge_t
 *
m
,

1175 
cou¡
,

1176 
sync
,

1177 *
πvÆs
,

1178 
vm_ooff£t_t
 
off£t
)

1180 
v›_puçages_¨gs
 
a
;

1182 
a
.
a_gí
.
a_desc
 = &
v›_puçages_desc
;

1183 
a
.
a_vp
 = 
vp
;

1184 
a
.
a_m
 = 
m
;

1185 
a
.
a_cou¡
 = 
cou¡
;

1186 
a
.
a_sync
 = 
sync
;

1187 
a
.
a_πvÆs
 = 
πvÆs
;

1188 
a
.
a_off£t
 = 
off£t
;

1189  (
	`VOP_PUTPAGES_APV
(
vp
->
v_›
, &
a
));

1190 
	}
}

1192 
	sv›_gëa˛_¨gs
 {

1193 
v›_gíîic_¨gs
 
	ma_gí
;

1194 
vnode
 *
	ma_vp
;

1195 
a˛_ty≥_t
 
	ma_ty≥
;

1196 
a˛
 *
	ma_a˛p
;

1197 
u¸ed
 *
	ma_¸ed
;

1198 
thªad
 *
	ma_td
;

1201 
vnode›_desc
 
v›_gëa˛_desc
;

1203 
VOP_GETACL_AP
(
v›_gëa˛_¨gs
 *);

1204 
VOP_GETACL_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëa˛_¨gs
 *);

1206 
__ölöe
 
	$VOP_GETACL
(

1207 
vnode
 *
vp
,

1208 
a˛_ty≥_t
 
ty≥
,

1209 
a˛
 *
a˛p
,

1210 
u¸ed
 *
¸ed
,

1211 
thªad
 *
td
)

1213 
v›_gëa˛_¨gs
 
a
;

1215 
a
.
a_gí
.
a_desc
 = &
v›_gëa˛_desc
;

1216 
a
.
a_vp
 = 
vp
;

1217 
a
.
a_ty≥
 = 
ty≥
;

1218 
a
.
a_a˛p
 = 
a˛p
;

1219 
a
.
a_¸ed
 = 
¸ed
;

1220 
a
.
a_td
 = 
td
;

1221  (
	`VOP_GETACL_APV
(
vp
->
v_›
, &
a
));

1222 
	}
}

1224 
	sv›_£è˛_¨gs
 {

1225 
v›_gíîic_¨gs
 
	ma_gí
;

1226 
vnode
 *
	ma_vp
;

1227 
a˛_ty≥_t
 
	ma_ty≥
;

1228 
a˛
 *
	ma_a˛p
;

1229 
u¸ed
 *
	ma_¸ed
;

1230 
thªad
 *
	ma_td
;

1233 
vnode›_desc
 
v›_£è˛_desc
;

1235 
VOP_SETACL_AP
(
v›_£è˛_¨gs
 *);

1236 
VOP_SETACL_APV
(
v›_ve˘‹
 *
v›
, 
v›_£è˛_¨gs
 *);

1238 
__ölöe
 
	$VOP_SETACL
(

1239 
vnode
 *
vp
,

1240 
a˛_ty≥_t
 
ty≥
,

1241 
a˛
 *
a˛p
,

1242 
u¸ed
 *
¸ed
,

1243 
thªad
 *
td
)

1245 
v›_£è˛_¨gs
 
a
;

1247 
a
.
a_gí
.
a_desc
 = &
v›_£è˛_desc
;

1248 
a
.
a_vp
 = 
vp
;

1249 
a
.
a_ty≥
 = 
ty≥
;

1250 
a
.
a_a˛p
 = 
a˛p
;

1251 
a
.
a_¸ed
 = 
¸ed
;

1252 
a
.
a_td
 = 
td
;

1253  (
	`VOP_SETACL_APV
(
vp
->
v_›
, &
a
));

1254 
	}
}

1256 
	sv›_a˛check_¨gs
 {

1257 
v›_gíîic_¨gs
 
	ma_gí
;

1258 
vnode
 *
	ma_vp
;

1259 
a˛_ty≥_t
 
	ma_ty≥
;

1260 
a˛
 *
	ma_a˛p
;

1261 
u¸ed
 *
	ma_¸ed
;

1262 
thªad
 *
	ma_td
;

1265 
vnode›_desc
 
v›_a˛check_desc
;

1267 
VOP_ACLCHECK_AP
(
v›_a˛check_¨gs
 *);

1268 
VOP_ACLCHECK_APV
(
v›_ve˘‹
 *
v›
, 
v›_a˛check_¨gs
 *);

1270 
__ölöe
 
	$VOP_ACLCHECK
(

1271 
vnode
 *
vp
,

1272 
a˛_ty≥_t
 
ty≥
,

1273 
a˛
 *
a˛p
,

1274 
u¸ed
 *
¸ed
,

1275 
thªad
 *
td
)

1277 
v›_a˛check_¨gs
 
a
;

1279 
a
.
a_gí
.
a_desc
 = &
v›_a˛check_desc
;

1280 
a
.
a_vp
 = 
vp
;

1281 
a
.
a_ty≥
 = 
ty≥
;

1282 
a
.
a_a˛p
 = 
a˛p
;

1283 
a
.
a_¸ed
 = 
¸ed
;

1284 
a
.
a_td
 = 
td
;

1285  (
	`VOP_ACLCHECK_APV
(
vp
->
v_›
, &
a
));

1286 
	}
}

1288 
	sv›_˛o£exèâr_¨gs
 {

1289 
v›_gíîic_¨gs
 
	ma_gí
;

1290 
vnode
 *
	ma_vp
;

1291 
	ma_commô
;

1292 
u¸ed
 *
	ma_¸ed
;

1293 
thªad
 *
	ma_td
;

1296 
vnode›_desc
 
v›_˛o£exèâr_desc
;

1298 
VOP_CLOSEEXTATTR_AP
(
v›_˛o£exèâr_¨gs
 *);

1299 
VOP_CLOSEEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_˛o£exèâr_¨gs
 *);

1301 
__ölöe
 
	$VOP_CLOSEEXTATTR
(

1302 
vnode
 *
vp
,

1303 
commô
,

1304 
u¸ed
 *
¸ed
,

1305 
thªad
 *
td
)

1307 
v›_˛o£exèâr_¨gs
 
a
;

1309 
a
.
a_gí
.
a_desc
 = &
v›_˛o£exèâr_desc
;

1310 
a
.
a_vp
 = 
vp
;

1311 
a
.
a_commô
 = 
commô
;

1312 
a
.
a_¸ed
 = 
¸ed
;

1313 
a
.
a_td
 = 
td
;

1314  (
	`VOP_CLOSEEXTATTR_APV
(
vp
->
v_›
, &
a
));

1315 
	}
}

1317 
	sv›_gëexèâr_¨gs
 {

1318 
v›_gíîic_¨gs
 
	ma_gí
;

1319 
vnode
 *
	ma_vp
;

1320 
	ma_©å«me•a˚
;

1321 c⁄° *
	ma_«me
;

1322 
uio
 *
	ma_uio
;

1323 
size_t
 *
	ma_size
;

1324 
u¸ed
 *
	ma_¸ed
;

1325 
thªad
 *
	ma_td
;

1328 
vnode›_desc
 
v›_gëexèâr_desc
;

1330 
VOP_GETEXTATTR_AP
(
v›_gëexèâr_¨gs
 *);

1331 
VOP_GETEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_gëexèâr_¨gs
 *);

1333 
__ölöe
 
	$VOP_GETEXTATTR
(

1334 
vnode
 *
vp
,

1335 
©å«me•a˚
,

1336 c⁄° *
«me
,

1337 
uio
 *uio,

1338 
size_t
 *
size
,

1339 
u¸ed
 *
¸ed
,

1340 
thªad
 *
td
)

1342 
v›_gëexèâr_¨gs
 
a
;

1344 
a
.
a_gí
.
a_desc
 = &
v›_gëexèâr_desc
;

1345 
a
.
a_vp
 = 
vp
;

1346 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1347 
a
.
a_«me
 = 
«me
;

1348 
a
.
a_uio
 = 
uio
;

1349 
a
.
a_size
 = 
size
;

1350 
a
.
a_¸ed
 = 
¸ed
;

1351 
a
.
a_td
 = 
td
;

1352  (
	`VOP_GETEXTATTR_APV
(
vp
->
v_›
, &
a
));

1353 
	}
}

1355 
	sv›_li°exèâr_¨gs
 {

1356 
v›_gíîic_¨gs
 
	ma_gí
;

1357 
vnode
 *
	ma_vp
;

1358 
	ma_©å«me•a˚
;

1359 
uio
 *
	ma_uio
;

1360 
size_t
 *
	ma_size
;

1361 
u¸ed
 *
	ma_¸ed
;

1362 
thªad
 *
	ma_td
;

1365 
vnode›_desc
 
v›_li°exèâr_desc
;

1367 
VOP_LISTEXTATTR_AP
(
v›_li°exèâr_¨gs
 *);

1368 
VOP_LISTEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_li°exèâr_¨gs
 *);

1370 
__ölöe
 
	$VOP_LISTEXTATTR
(

1371 
vnode
 *
vp
,

1372 
©å«me•a˚
,

1373 
uio
 *uio,

1374 
size_t
 *
size
,

1375 
u¸ed
 *
¸ed
,

1376 
thªad
 *
td
)

1378 
v›_li°exèâr_¨gs
 
a
;

1380 
a
.
a_gí
.
a_desc
 = &
v›_li°exèâr_desc
;

1381 
a
.
a_vp
 = 
vp
;

1382 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1383 
a
.
a_uio
 = 
uio
;

1384 
a
.
a_size
 = 
size
;

1385 
a
.
a_¸ed
 = 
¸ed
;

1386 
a
.
a_td
 = 
td
;

1387  (
	`VOP_LISTEXTATTR_APV
(
vp
->
v_›
, &
a
));

1388 
	}
}

1390 
	sv›_›íexèâr_¨gs
 {

1391 
v›_gíîic_¨gs
 
	ma_gí
;

1392 
vnode
 *
	ma_vp
;

1393 
u¸ed
 *
	ma_¸ed
;

1394 
thªad
 *
	ma_td
;

1397 
vnode›_desc
 
v›_›íexèâr_desc
;

1399 
VOP_OPENEXTATTR_AP
(
v›_›íexèâr_¨gs
 *);

1400 
VOP_OPENEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_›íexèâr_¨gs
 *);

1402 
__ölöe
 
	$VOP_OPENEXTATTR
(

1403 
vnode
 *
vp
,

1404 
u¸ed
 *
¸ed
,

1405 
thªad
 *
td
)

1407 
v›_›íexèâr_¨gs
 
a
;

1409 
a
.
a_gí
.
a_desc
 = &
v›_›íexèâr_desc
;

1410 
a
.
a_vp
 = 
vp
;

1411 
a
.
a_¸ed
 = 
¸ed
;

1412 
a
.
a_td
 = 
td
;

1413  (
	`VOP_OPENEXTATTR_APV
(
vp
->
v_›
, &
a
));

1414 
	}
}

1416 
	sv›_dñëìxèâr_¨gs
 {

1417 
v›_gíîic_¨gs
 
	ma_gí
;

1418 
vnode
 *
	ma_vp
;

1419 
	ma_©å«me•a˚
;

1420 c⁄° *
	ma_«me
;

1421 
u¸ed
 *
	ma_¸ed
;

1422 
thªad
 *
	ma_td
;

1425 
vnode›_desc
 
v›_dñëìxèâr_desc
;

1427 
VOP_DELETEEXTATTR_AP
(
v›_dñëìxèâr_¨gs
 *);

1428 
VOP_DELETEEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_dñëìxèâr_¨gs
 *);

1430 
__ölöe
 
	$VOP_DELETEEXTATTR
(

1431 
vnode
 *
vp
,

1432 
©å«me•a˚
,

1433 c⁄° *
«me
,

1434 
u¸ed
 *
¸ed
,

1435 
thªad
 *
td
)

1437 
v›_dñëìxèâr_¨gs
 
a
;

1439 
a
.
a_gí
.
a_desc
 = &
v›_dñëìxèâr_desc
;

1440 
a
.
a_vp
 = 
vp
;

1441 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1442 
a
.
a_«me
 = 
«me
;

1443 
a
.
a_¸ed
 = 
¸ed
;

1444 
a
.
a_td
 = 
td
;

1445  (
	`VOP_DELETEEXTATTR_APV
(
vp
->
v_›
, &
a
));

1446 
	}
}

1448 
	sv›_£ãxèâr_¨gs
 {

1449 
v›_gíîic_¨gs
 
	ma_gí
;

1450 
vnode
 *
	ma_vp
;

1451 
	ma_©å«me•a˚
;

1452 c⁄° *
	ma_«me
;

1453 
uio
 *
	ma_uio
;

1454 
u¸ed
 *
	ma_¸ed
;

1455 
thªad
 *
	ma_td
;

1458 
vnode›_desc
 
v›_£ãxèâr_desc
;

1460 
VOP_SETEXTATTR_AP
(
v›_£ãxèâr_¨gs
 *);

1461 
VOP_SETEXTATTR_APV
(
v›_ve˘‹
 *
v›
, 
v›_£ãxèâr_¨gs
 *);

1463 
__ölöe
 
	$VOP_SETEXTATTR
(

1464 
vnode
 *
vp
,

1465 
©å«me•a˚
,

1466 c⁄° *
«me
,

1467 
uio
 *uio,

1468 
u¸ed
 *
¸ed
,

1469 
thªad
 *
td
)

1471 
v›_£ãxèâr_¨gs
 
a
;

1473 
a
.
a_gí
.
a_desc
 = &
v›_£ãxèâr_desc
;

1474 
a
.
a_vp
 = 
vp
;

1475 
a
.
a_©å«me•a˚
 = 
©å«me•a˚
;

1476 
a
.
a_«me
 = 
«me
;

1477 
a
.
a_uio
 = 
uio
;

1478 
a
.
a_¸ed
 = 
¸ed
;

1479 
a
.
a_td
 = 
td
;

1480  (
	`VOP_SETEXTATTR_APV
(
vp
->
v_›
, &
a
));

1481 
	}
}

1483 
	sv›_£éabñ_¨gs
 {

1484 
v›_gíîic_¨gs
 
	ma_gí
;

1485 
vnode
 *
	ma_vp
;

1486 
œbñ
 *
	ma_œbñ
;

1487 
u¸ed
 *
	ma_¸ed
;

1488 
thªad
 *
	ma_td
;

1491 
vnode›_desc
 
v›_£éabñ_desc
;

1493 
VOP_SETLABEL_AP
(
v›_£éabñ_¨gs
 *);

1494 
VOP_SETLABEL_APV
(
v›_ve˘‹
 *
v›
, 
v›_£éabñ_¨gs
 *);

1496 
__ölöe
 
	$VOP_SETLABEL
(

1497 
vnode
 *
vp
,

1498 
œbñ
 *label,

1499 
u¸ed
 *
¸ed
,

1500 
thªad
 *
td
)

1502 
v›_£éabñ_¨gs
 
a
;

1504 
a
.
a_gí
.
a_desc
 = &
v›_£éabñ_desc
;

1505 
a
.
a_vp
 = 
vp
;

1506 
a
.
a_œbñ
 = 
œbñ
;

1507 
a
.
a_¸ed
 = 
¸ed
;

1508 
a
.
a_td
 = 
td
;

1509  (
	`VOP_SETLABEL_APV
(
vp
->
v_›
, &
a
));

1510 
	}
}

1512 
	sv›_v±ofh_¨gs
 {

1513 
v›_gíîic_¨gs
 
	ma_gí
;

1514 
vnode
 *
	ma_vp
;

1515 
fid
 *
	ma_fhp
;

1518 
vnode›_desc
 
v›_v±ofh_desc
;

1520 
VOP_VPTOFH_AP
(
v›_v±ofh_¨gs
 *);

1521 
VOP_VPTOFH_APV
(
v›_ve˘‹
 *
v›
, 
v›_v±ofh_¨gs
 *);

1523 
__ölöe
 
	$VOP_VPTOFH
(

1524 
vnode
 *
vp
,

1525 
fid
 *
fhp
)

1527 
v›_v±ofh_¨gs
 
a
;

1529 
a
.
a_gí
.
a_desc
 = &
v›_v±ofh_desc
;

1530 
a
.
a_vp
 = 
vp
;

1531 
a
.
a_fhp
 = 
fhp
;

1532  (
	`VOP_VPTOFH_APV
(
vp
->
v_›
, &
a
));

1533 
	}
}

1535 
	sv›_v±o˙p_¨gs
 {

1536 
v›_gíîic_¨gs
 
	ma_gí
;

1537 
vnode
 *
	ma_vp
;

1538 
vnode
 **
	ma_vµ
;

1539 
u¸ed
 *
	ma_¸ed
;

1540 *
	ma_buf
;

1541 *
	ma_buÊí
;

1544 
vnode›_desc
 
v›_v±o˙p_desc
;

1546 
VOP_VPTOCNP_AP
(
v›_v±o˙p_¨gs
 *);

1547 
VOP_VPTOCNP_APV
(
v›_ve˘‹
 *
v›
, 
v›_v±o˙p_¨gs
 *);

1549 
__ölöe
 
	$VOP_VPTOCNP
(

1550 
vnode
 *
vp
,

1551 
vnode
 **
vµ
,

1552 
u¸ed
 *
¸ed
,

1553 *
buf
,

1554 *
buÊí
)

1556 
v›_v±o˙p_¨gs
 
a
;

1558 
a
.
a_gí
.
a_desc
 = &
v›_v±o˙p_desc
;

1559 
a
.
a_vp
 = 
vp
;

1560 
a
.
a_vµ
 = 
vµ
;

1561 
a
.
a_¸ed
 = 
¸ed
;

1562 
a
.
a_buf
 = 
buf
;

1563 
a
.
a_buÊí
 = 
buÊí
;

1564  (
	`VOP_VPTOCNP_APV
(
vp
->
v_›
, &
a
));

1565 
	}
}

1567 
	sv›_Æloˇã_¨gs
 {

1568 
v›_gíîic_¨gs
 
	ma_gí
;

1569 
vnode
 *
	ma_vp
;

1570 
off_t
 *
	ma_off£t
;

1571 
off_t
 *
	ma_Àn
;

1574 
vnode›_desc
 
v›_Æloˇã_desc
;

1576 
VOP_ALLOCATE_AP
(
v›_Æloˇã_¨gs
 *);

1577 
VOP_ALLOCATE_APV
(
v›_ve˘‹
 *
v›
, 
v›_Æloˇã_¨gs
 *);

1579 
__ölöe
 
	$VOP_ALLOCATE
(

1580 
vnode
 *
vp
,

1581 
off_t
 *
off£t
,

1582 
off_t
 *
Àn
)

1584 
v›_Æloˇã_¨gs
 
a
;

1586 
a
.
a_gí
.
a_desc
 = &
v›_Æloˇã_desc
;

1587 
a
.
a_vp
 = 
vp
;

1588 
a
.
a_off£t
 = 
off£t
;

1589 
a
.
a_Àn
 = 
Àn
;

1590  (
	`VOP_ALLOCATE_APV
(
vp
->
v_›
, &
a
));

1591 
	}
}

1593 
	sv›_advi£_¨gs
 {

1594 
v›_gíîic_¨gs
 
	ma_gí
;

1595 
vnode
 *
	ma_vp
;

1596 
off_t
 
	ma_°¨t
;

1597 
off_t
 
	ma_íd
;

1598 
	ma_advi˚
;

1601 
vnode›_desc
 
v›_advi£_desc
;

1603 
VOP_ADVISE_AP
(
v›_advi£_¨gs
 *);

1604 
VOP_ADVISE_APV
(
v›_ve˘‹
 *
v›
, 
v›_advi£_¨gs
 *);

1606 
__ölöe
 
	$VOP_ADVISE
(

1607 
vnode
 *
vp
,

1608 
off_t
 
°¨t
,

1609 
off_t
 
íd
,

1610 
advi˚
)

1612 
v›_advi£_¨gs
 
a
;

1614 
a
.
a_gí
.
a_desc
 = &
v›_advi£_desc
;

1615 
a
.
a_vp
 = 
vp
;

1616 
a
.
a_°¨t
 = 
°¨t
;

1617 
a
.
a_íd
 = 
íd
;

1618 
a
.
a_advi˚
 = 
advi˚
;

1619  (
	`VOP_ADVISE_APV
(
vp
->
v_›
, &
a
));

1620 
	}
}

1622 
	sv›_u≈_böd_¨gs
 {

1623 
v›_gíîic_¨gs
 
	ma_gí
;

1624 
vnode
 *
	ma_vp
;

1625 
sockë
 *
	ma_sockë
;

1628 
vnode›_desc
 
v›_u≈_böd_desc
;

1630 
VOP_UNP_BIND_AP
(
v›_u≈_böd_¨gs
 *);

1631 
VOP_UNP_BIND_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_böd_¨gs
 *);

1633 
__ölöe
 
	$VOP_UNP_BIND
(

1634 
vnode
 *
vp
,

1635 
sockë
 *socket)

1637 
v›_u≈_böd_¨gs
 
a
;

1639 
a
.
a_gí
.
a_desc
 = &
v›_u≈_böd_desc
;

1640 
a
.
a_vp
 = 
vp
;

1641 
a
.
a_sockë
 = 
sockë
;

1642  (
	`VOP_UNP_BIND_APV
(
vp
->
v_›
, &
a
));

1643 
	}
}

1645 
	sv›_u≈_c⁄√˘_¨gs
 {

1646 
v›_gíîic_¨gs
 
	ma_gí
;

1647 
vnode
 *
	ma_vp
;

1648 
sockë
 **
	ma_sockë
;

1651 
vnode›_desc
 
v›_u≈_c⁄√˘_desc
;

1653 
VOP_UNP_CONNECT_AP
(
v›_u≈_c⁄√˘_¨gs
 *);

1654 
VOP_UNP_CONNECT_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_c⁄√˘_¨gs
 *);

1656 
__ölöe
 
	$VOP_UNP_CONNECT
(

1657 
vnode
 *
vp
,

1658 
sockë
 **socket)

1660 
v›_u≈_c⁄√˘_¨gs
 
a
;

1662 
a
.
a_gí
.
a_desc
 = &
v›_u≈_c⁄√˘_desc
;

1663 
a
.
a_vp
 = 
vp
;

1664 
a
.
a_sockë
 = 
sockë
;

1665  (
	`VOP_UNP_CONNECT_APV
(
vp
->
v_›
, &
a
));

1666 
	}
}

1668 
	sv›_u≈_dëach_¨gs
 {

1669 
v›_gíîic_¨gs
 
	ma_gí
;

1670 
vnode
 *
	ma_vp
;

1673 
vnode›_desc
 
v›_u≈_dëach_desc
;

1675 
VOP_UNP_DETACH_AP
(
v›_u≈_dëach_¨gs
 *);

1676 
VOP_UNP_DETACH_APV
(
v›_ve˘‹
 *
v›
, 
v›_u≈_dëach_¨gs
 *);

1678 
__ölöe
 
	$VOP_UNP_DETACH
(

1679 
vnode
 *
vp
)

1681 
v›_u≈_dëach_¨gs
 
a
;

1683 
a
.
a_gí
.
a_desc
 = &
v›_u≈_dëach_desc
;

1684 
a
.
a_vp
 = 
vp
;

1685  (
	`VOP_UNP_DETACH_APV
(
vp
->
v_›
, &
a
));

1686 
	}
}

1688 
	sv›_is_ãxt_¨gs
 {

1689 
v›_gíîic_¨gs
 
	ma_gí
;

1690 
vnode
 *
	ma_vp
;

1693 
vnode›_desc
 
v›_is_ãxt_desc
;

1695 
VOP_IS_TEXT_AP
(
v›_is_ãxt_¨gs
 *);

1696 
VOP_IS_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_is_ãxt_¨gs
 *);

1698 
__ölöe
 
	$VOP_IS_TEXT
(

1699 
vnode
 *
vp
)

1701 
v›_is_ãxt_¨gs
 
a
;

1703 
a
.
a_gí
.
a_desc
 = &
v›_is_ãxt_desc
;

1704 
a
.
a_vp
 = 
vp
;

1705  (
	`VOP_IS_TEXT_APV
(
vp
->
v_›
, &
a
));

1706 
	}
}

1708 
	sv›_£t_ãxt_¨gs
 {

1709 
v›_gíîic_¨gs
 
	ma_gí
;

1710 
vnode
 *
	ma_vp
;

1713 
vnode›_desc
 
v›_£t_ãxt_desc
;

1715 
VOP_SET_TEXT_AP
(
v›_£t_ãxt_¨gs
 *);

1716 
VOP_SET_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_£t_ãxt_¨gs
 *);

1718 
__ölöe
 
	$VOP_SET_TEXT
(

1719 
vnode
 *
vp
)

1721 
v›_£t_ãxt_¨gs
 
a
;

1723 
a
.
a_gí
.
a_desc
 = &
v›_£t_ãxt_desc
;

1724 
a
.
a_vp
 = 
vp
;

1725  (
	`VOP_SET_TEXT_APV
(
vp
->
v_›
, &
a
));

1726 
	}
}

1728 
	sv›_un£t_ãxt_¨gs
 {

1729 
v›_gíîic_¨gs
 
	ma_gí
;

1730 
vnode
 *
	ma_vp
;

1733 
vnode›_desc
 
v›_un£t_ãxt_desc
;

1735 
VOP_UNSET_TEXT_AP
(
v›_un£t_ãxt_¨gs
 *);

1736 
VOP_UNSET_TEXT_APV
(
v›_ve˘‹
 *
v›
, 
v›_un£t_ãxt_¨gs
 *);

1738 
__ölöe
 
	$VOP_UNSET_TEXT
(

1739 
vnode
 *
vp
)

1741 
v›_un£t_ãxt_¨gs
 
a
;

1743 
a
.
a_gí
.
a_desc
 = &
v›_un£t_ãxt_desc
;

1744 
a
.
a_vp
 = 
vp
;

1745  (
	`VOP_UNSET_TEXT_APV
(
vp
->
v_›
, &
a
));

1746 
	}
}

1748 
	sv›_gë_wrôecou¡_¨gs
 {

1749 
v›_gíîic_¨gs
 
	ma_gí
;

1750 
vnode
 *
	ma_vp
;

1751 *
	ma_wrôecou¡
;

1754 
vnode›_desc
 
v›_gë_wrôecou¡_desc
;

1756 
VOP_GET_WRITECOUNT_AP
(
v›_gë_wrôecou¡_¨gs
 *);

1757 
VOP_GET_WRITECOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_gë_wrôecou¡_¨gs
 *);

1759 
__ölöe
 
	$VOP_GET_WRITECOUNT
(

1760 
vnode
 *
vp
,

1761 *
wrôecou¡
)

1763 
v›_gë_wrôecou¡_¨gs
 
a
;

1765 
a
.
a_gí
.
a_desc
 = &
v›_gë_wrôecou¡_desc
;

1766 
a
.
a_vp
 = 
vp
;

1767 
a
.
a_wrôecou¡
 = 
wrôecou¡
;

1768  (
	`VOP_GET_WRITECOUNT_APV
(
vp
->
v_›
, &
a
));

1769 
	}
}

1771 
	sv›_add_wrôecou¡_¨gs
 {

1772 
v›_gíîic_¨gs
 
	ma_gí
;

1773 
vnode
 *
	ma_vp
;

1774 
	ma_öc
;

1777 
vnode›_desc
 
v›_add_wrôecou¡_desc
;

1779 
VOP_ADD_WRITECOUNT_AP
(
v›_add_wrôecou¡_¨gs
 *);

1780 
VOP_ADD_WRITECOUNT_APV
(
v›_ve˘‹
 *
v›
, 
v›_add_wrôecou¡_¨gs
 *);

1782 
__ölöe
 
	$VOP_ADD_WRITECOUNT
(

1783 
vnode
 *
vp
,

1784 
öc
)

1786 
v›_add_wrôecou¡_¨gs
 
a
;

1788 
a
.
a_gí
.
a_desc
 = &
v›_add_wrôecou¡_desc
;

1789 
a
.
a_vp
 = 
vp
;

1790 
a
.
a_öc
 = 
öc
;

1791  (
	`VOP_ADD_WRITECOUNT_APV
(
vp
->
v_›
, &
a
));

1792 
	}
}

1794 
	sv›_•¨e1_¨gs
 {

1795 
v›_gíîic_¨gs
 
	ma_gí
;

1796 
vnode
 *
	ma_vp
;

1799 
vnode›_desc
 
v›_•¨e1_desc
;

1801 
VOP_SPARE1_AP
(
v›_•¨e1_¨gs
 *);

1802 
VOP_SPARE1_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e1_¨gs
 *);

1804 
__ölöe
 
	$VOP_SPARE1
(

1805 
vnode
 *
vp
)

1807 
v›_•¨e1_¨gs
 
a
;

1809 
a
.
a_gí
.
a_desc
 = &
v›_•¨e1_desc
;

1810 
a
.
a_vp
 = 
vp
;

1811  (
	`VOP_SPARE1_APV
(
vp
->
v_›
, &
a
));

1812 
	}
}

1814 
	sv›_•¨e2_¨gs
 {

1815 
v›_gíîic_¨gs
 
	ma_gí
;

1816 
vnode
 *
	ma_vp
;

1819 
vnode›_desc
 
v›_•¨e2_desc
;

1821 
VOP_SPARE2_AP
(
v›_•¨e2_¨gs
 *);

1822 
VOP_SPARE2_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e2_¨gs
 *);

1824 
__ölöe
 
	$VOP_SPARE2
(

1825 
vnode
 *
vp
)

1827 
v›_•¨e2_¨gs
 
a
;

1829 
a
.
a_gí
.
a_desc
 = &
v›_•¨e2_desc
;

1830 
a
.
a_vp
 = 
vp
;

1831  (
	`VOP_SPARE2_APV
(
vp
->
v_›
, &
a
));

1832 
	}
}

1834 
	sv›_•¨e3_¨gs
 {

1835 
v›_gíîic_¨gs
 
	ma_gí
;

1836 
vnode
 *
	ma_vp
;

1839 
vnode›_desc
 
v›_•¨e3_desc
;

1841 
VOP_SPARE3_AP
(
v›_•¨e3_¨gs
 *);

1842 
VOP_SPARE3_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e3_¨gs
 *);

1844 
__ölöe
 
	$VOP_SPARE3
(

1845 
vnode
 *
vp
)

1847 
v›_•¨e3_¨gs
 
a
;

1849 
a
.
a_gí
.
a_desc
 = &
v›_•¨e3_desc
;

1850 
a
.
a_vp
 = 
vp
;

1851  (
	`VOP_SPARE3_APV
(
vp
->
v_›
, &
a
));

1852 
	}
}

1854 
	sv›_•¨e4_¨gs
 {

1855 
v›_gíîic_¨gs
 
	ma_gí
;

1856 
vnode
 *
	ma_vp
;

1859 
vnode›_desc
 
v›_•¨e4_desc
;

1861 
VOP_SPARE4_AP
(
v›_•¨e4_¨gs
 *);

1862 
VOP_SPARE4_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e4_¨gs
 *);

1864 
__ölöe
 
	$VOP_SPARE4
(

1865 
vnode
 *
vp
)

1867 
v›_•¨e4_¨gs
 
a
;

1869 
a
.
a_gí
.
a_desc
 = &
v›_•¨e4_desc
;

1870 
a
.
a_vp
 = 
vp
;

1871  (
	`VOP_SPARE4_APV
(
vp
->
v_›
, &
a
));

1872 
	}
}

1874 
	sv›_•¨e5_¨gs
 {

1875 
v›_gíîic_¨gs
 
	ma_gí
;

1876 
vnode
 *
	ma_vp
;

1879 
vnode›_desc
 
v›_•¨e5_desc
;

1881 
VOP_SPARE5_AP
(
v›_•¨e5_¨gs
 *);

1882 
VOP_SPARE5_APV
(
v›_ve˘‹
 *
v›
, 
v›_•¨e5_¨gs
 *);

1884 
__ölöe
 
	$VOP_SPARE5
(

1885 
vnode
 *
vp
)

1887 
v›_•¨e5_¨gs
 
a
;

1889 
a
.
a_gí
.
a_desc
 = &
v›_•¨e5_desc
;

1890 
a
.
a_vp
 = 
vp
;

1891  (
	`VOP_SPARE5_APV
(
vp
->
v_›
, &
a
));

1892 
	}
}

	@9p_fs/p9fs.ko/vnode_if_newproto.h

9 
	sv›_ve˘‹
 {

10 
v›_ve˘‹
 *
	mv›_deÁu…
;

11 
v›_by∑ss_t
 *
	mv›_by∑ss
;

12 
v›_i¶ocked_t
 *
	mv›_i¶ocked
;

13 
v›_lookup_t
 *
	mv›_lookup
;

14 
v›_ˇchedlookup_t
 *
	mv›_ˇchedlookup
;

15 
v›_¸óã_t
 *
	mv›_¸óã
;

16 
v›_whôeout_t
 *
	mv›_whôeout
;

17 
v›_mknod_t
 *
	mv›_mknod
;

18 
v›_›í_t
 *
	mv›_›í
;

19 
v›_˛o£_t
 *
	mv›_˛o£
;

20 
v›_ac˚ss_t
 *
	mv›_ac˚ss
;

21 
v›_ac˚ssx_t
 *
	mv›_ac˚ssx
;

22 
v›_gë©å_t
 *
	mv›_gë©å
;

23 
v›_£èâr_t
 *
	mv›_£èâr
;

24 
v›_m¨k©ime_t
 *
	mv›_m¨k©ime
;

25 
v›_ªad_t
 *
	mv›_ªad
;

26 
v›_wrôe_t
 *
	mv›_wrôe
;

27 
v›_io˘l_t
 *
	mv›_io˘l
;

28 
v›_pﬁl_t
 *
	mv›_pﬁl
;

29 
v›_kqfûãr_t
 *
	mv›_kqfûãr
;

30 
v›_ªvoke_t
 *
	mv›_ªvoke
;

31 
v›_fsync_t
 *
	mv›_fsync
;

32 
v›_ªmove_t
 *
	mv›_ªmove
;

33 
v›_lök_t
 *
	mv›_lök
;

34 
v›_ª«me_t
 *
	mv›_ª«me
;

35 
v›_mkdú_t
 *
	mv›_mkdú
;

36 
v›_rmdú_t
 *
	mv›_rmdú
;

37 
v›_symlök_t
 *
	mv›_symlök
;

38 
v›_ªaddú_t
 *
	mv›_ªaddú
;

39 
v›_ªadlök_t
 *
	mv›_ªadlök
;

40 
v›_öa˘ive_t
 *
	mv›_öa˘ive
;

41 
v›_ª˛aim_t
 *
	mv›_ª˛aim
;

42 
v›_lock1_t
 *
	mv›_lock1
;

43 
v›_u∆ock_t
 *
	mv›_u∆ock
;

44 
v›_bm≠_t
 *
	mv›_bm≠
;

45 
v›_°øãgy_t
 *
	mv›_°øãgy
;

46 
v›_gëwrôemou¡_t
 *
	mv›_gëwrôemou¡
;

47 
v›_¥öt_t
 *
	mv›_¥öt
;

48 
v›_∑thc⁄f_t
 *
	mv›_∑thc⁄f
;

49 
v›_advlock_t
 *
	mv›_advlock
;

50 
v›_advlockasync_t
 *
	mv›_advlockasync
;

51 
v›_advlockpurge_t
 *
	mv›_advlockpurge
;

52 
v›_ªÆlocblks_t
 *
	mv›_ªÆlocblks
;

53 
v›_gë∑ges_t
 *
	mv›_gë∑ges
;

54 
v›_puçages_t
 *
	mv›_puçages
;

55 
v›_gëa˛_t
 *
	mv›_gëa˛
;

56 
v›_£è˛_t
 *
	mv›_£è˛
;

57 
v›_a˛check_t
 *
	mv›_a˛check
;

58 
v›_˛o£exèâr_t
 *
	mv›_˛o£exèâr
;

59 
v›_gëexèâr_t
 *
	mv›_gëexèâr
;

60 
v›_li°exèâr_t
 *
	mv›_li°exèâr
;

61 
v›_›íexèâr_t
 *
	mv›_›íexèâr
;

62 
v›_dñëìxèâr_t
 *
	mv›_dñëìxèâr
;

63 
v›_£ãxèâr_t
 *
	mv›_£ãxèâr
;

64 
v›_£éabñ_t
 *
	mv›_£éabñ
;

65 
v›_v±ofh_t
 *
	mv›_v±ofh
;

66 
v›_v±o˙p_t
 *
	mv›_v±o˙p
;

67 
v›_Æloˇã_t
 *
	mv›_Æloˇã
;

68 
v›_advi£_t
 *
	mv›_advi£
;

69 
v›_u≈_böd_t
 *
	mv›_u≈_böd
;

70 
v›_u≈_c⁄√˘_t
 *
	mv›_u≈_c⁄√˘
;

71 
v›_u≈_dëach_t
 *
	mv›_u≈_dëach
;

72 
v›_is_ãxt_t
 *
	mv›_is_ãxt
;

73 
v›_£t_ãxt_t
 *
	mv›_£t_ãxt
;

74 
v›_un£t_ãxt_t
 *
	mv›_un£t_ãxt
;

75 
v›_gë_wrôecou¡_t
 *
	mv›_gë_wrôecou¡
;

76 
v›_add_wrôecou¡_t
 *
	mv›_add_wrôecou¡
;

77 
v›_•¨e1_t
 *
	mv›_•¨e1
;

78 
v›_•¨e2_t
 *
	mv›_•¨e2
;

79 
v›_•¨e3_t
 *
	mv›_•¨e3
;

80 
v›_•¨e4_t
 *
	mv›_•¨e4
;

81 
v›_•¨e5_t
 *
	mv›_•¨e5
;

	@9p_fs/p9fs.ko/vnode_if_typedef.h

9 
	gv›_i¶ocked_¨gs
;

10 
	tv›_i¶ocked_t
(
	tv›_i¶ocked_¨gs
 *);

12 
	gv›_lookup_¨gs
;

13 
	tv›_lookup_t
(
	tv›_lookup_¨gs
 *);

15 
	gv›_ˇchedlookup_¨gs
;

16 
	tv›_ˇchedlookup_t
(
	tv›_ˇchedlookup_¨gs
 *);

18 
	gv›_¸óã_¨gs
;

19 
	tv›_¸óã_t
(
	tv›_¸óã_¨gs
 *);

21 
	gv›_whôeout_¨gs
;

22 
	tv›_whôeout_t
(
	tv›_whôeout_¨gs
 *);

24 
	gv›_mknod_¨gs
;

25 
	tv›_mknod_t
(
	tv›_mknod_¨gs
 *);

27 
	gv›_›í_¨gs
;

28 
	tv›_›í_t
(
	tv›_›í_¨gs
 *);

30 
	gv›_˛o£_¨gs
;

31 
	tv›_˛o£_t
(
	tv›_˛o£_¨gs
 *);

33 
	gv›_ac˚ss_¨gs
;

34 
	tv›_ac˚ss_t
(
	tv›_ac˚ss_¨gs
 *);

36 
	gv›_ac˚ssx_¨gs
;

37 
	tv›_ac˚ssx_t
(
	tv›_ac˚ssx_¨gs
 *);

39 
	gv›_gë©å_¨gs
;

40 
	tv›_gë©å_t
(
	tv›_gë©å_¨gs
 *);

42 
	gv›_£èâr_¨gs
;

43 
	tv›_£èâr_t
(
	tv›_£èâr_¨gs
 *);

45 
	gv›_m¨k©ime_¨gs
;

46 
	tv›_m¨k©ime_t
(
	tv›_m¨k©ime_¨gs
 *);

48 
	gv›_ªad_¨gs
;

49 
	tv›_ªad_t
(
	tv›_ªad_¨gs
 *);

51 
	gv›_wrôe_¨gs
;

52 
	tv›_wrôe_t
(
	tv›_wrôe_¨gs
 *);

54 
	gv›_io˘l_¨gs
;

55 
	tv›_io˘l_t
(
	tv›_io˘l_¨gs
 *);

57 
	gv›_pﬁl_¨gs
;

58 
	tv›_pﬁl_t
(
	tv›_pﬁl_¨gs
 *);

60 
	gv›_kqfûãr_¨gs
;

61 
	tv›_kqfûãr_t
(
	tv›_kqfûãr_¨gs
 *);

63 
	gv›_ªvoke_¨gs
;

64 
	tv›_ªvoke_t
(
	tv›_ªvoke_¨gs
 *);

66 
	gv›_fsync_¨gs
;

67 
	tv›_fsync_t
(
	tv›_fsync_¨gs
 *);

69 
	gv›_ªmove_¨gs
;

70 
	tv›_ªmove_t
(
	tv›_ªmove_¨gs
 *);

72 
	gv›_lök_¨gs
;

73 
	tv›_lök_t
(
	tv›_lök_¨gs
 *);

75 
	gv›_ª«me_¨gs
;

76 
	tv›_ª«me_t
(
	tv›_ª«me_¨gs
 *);

78 
	gv›_mkdú_¨gs
;

79 
	tv›_mkdú_t
(
	tv›_mkdú_¨gs
 *);

81 
	gv›_rmdú_¨gs
;

82 
	tv›_rmdú_t
(
	tv›_rmdú_¨gs
 *);

84 
	gv›_symlök_¨gs
;

85 
	tv›_symlök_t
(
	tv›_symlök_¨gs
 *);

87 
	gv›_ªaddú_¨gs
;

88 
	tv›_ªaddú_t
(
	tv›_ªaddú_¨gs
 *);

90 
	gv›_ªadlök_¨gs
;

91 
	tv›_ªadlök_t
(
	tv›_ªadlök_¨gs
 *);

93 
	gv›_öa˘ive_¨gs
;

94 
	tv›_öa˘ive_t
(
	tv›_öa˘ive_¨gs
 *);

96 
	gv›_ª˛aim_¨gs
;

97 
	tv›_ª˛aim_t
(
	tv›_ª˛aim_¨gs
 *);

99 
	gv›_lock1_¨gs
;

100 
	tv›_lock1_t
(
	tv›_lock1_¨gs
 *);

102 
	gv›_u∆ock_¨gs
;

103 
	tv›_u∆ock_t
(
	tv›_u∆ock_¨gs
 *);

105 
	gv›_bm≠_¨gs
;

106 
	tv›_bm≠_t
(
	tv›_bm≠_¨gs
 *);

108 
	gv›_°øãgy_¨gs
;

109 
	tv›_°øãgy_t
(
	tv›_°øãgy_¨gs
 *);

111 
	gv›_gëwrôemou¡_¨gs
;

112 
	tv›_gëwrôemou¡_t
(
	tv›_gëwrôemou¡_¨gs
 *);

114 
	gv›_¥öt_¨gs
;

115 
	tv›_¥öt_t
(
	tv›_¥öt_¨gs
 *);

117 
	gv›_∑thc⁄f_¨gs
;

118 
	tv›_∑thc⁄f_t
(
	tv›_∑thc⁄f_¨gs
 *);

120 
	gv›_advlock_¨gs
;

121 
	tv›_advlock_t
(
	tv›_advlock_¨gs
 *);

123 
	gv›_advlockasync_¨gs
;

124 
	tv›_advlockasync_t
(
	tv›_advlockasync_¨gs
 *);

126 
	gv›_advlockpurge_¨gs
;

127 
	tv›_advlockpurge_t
(
	tv›_advlockpurge_¨gs
 *);

129 
	gv›_ªÆlocblks_¨gs
;

130 
	tv›_ªÆlocblks_t
(
	tv›_ªÆlocblks_¨gs
 *);

132 
	gv›_gë∑ges_¨gs
;

133 
	tv›_gë∑ges_t
(
	tv›_gë∑ges_¨gs
 *);

135 
	gv›_puçages_¨gs
;

136 
	tv›_puçages_t
(
	tv›_puçages_¨gs
 *);

138 
	gv›_gëa˛_¨gs
;

139 
	tv›_gëa˛_t
(
	tv›_gëa˛_¨gs
 *);

141 
	gv›_£è˛_¨gs
;

142 
	tv›_£è˛_t
(
	tv›_£è˛_¨gs
 *);

144 
	gv›_a˛check_¨gs
;

145 
	tv›_a˛check_t
(
	tv›_a˛check_¨gs
 *);

147 
	gv›_˛o£exèâr_¨gs
;

148 
	tv›_˛o£exèâr_t
(
	tv›_˛o£exèâr_¨gs
 *);

150 
	gv›_gëexèâr_¨gs
;

151 
	tv›_gëexèâr_t
(
	tv›_gëexèâr_¨gs
 *);

153 
	gv›_li°exèâr_¨gs
;

154 
	tv›_li°exèâr_t
(
	tv›_li°exèâr_¨gs
 *);

156 
	gv›_›íexèâr_¨gs
;

157 
	tv›_›íexèâr_t
(
	tv›_›íexèâr_¨gs
 *);

159 
	gv›_dñëìxèâr_¨gs
;

160 
	tv›_dñëìxèâr_t
(
	tv›_dñëìxèâr_¨gs
 *);

162 
	gv›_£ãxèâr_¨gs
;

163 
	tv›_£ãxèâr_t
(
	tv›_£ãxèâr_¨gs
 *);

165 
	gv›_£éabñ_¨gs
;

166 
	tv›_£éabñ_t
(
	tv›_£éabñ_¨gs
 *);

168 
	gv›_v±ofh_¨gs
;

169 
	tv›_v±ofh_t
(
	tv›_v±ofh_¨gs
 *);

171 
	gv›_v±o˙p_¨gs
;

172 
	tv›_v±o˙p_t
(
	tv›_v±o˙p_¨gs
 *);

174 
	gv›_Æloˇã_¨gs
;

175 
	tv›_Æloˇã_t
(
	tv›_Æloˇã_¨gs
 *);

177 
	gv›_advi£_¨gs
;

178 
	tv›_advi£_t
(
	tv›_advi£_¨gs
 *);

180 
	gv›_u≈_böd_¨gs
;

181 
	tv›_u≈_böd_t
(
	tv›_u≈_böd_¨gs
 *);

183 
	gv›_u≈_c⁄√˘_¨gs
;

184 
	tv›_u≈_c⁄√˘_t
(
	tv›_u≈_c⁄√˘_¨gs
 *);

186 
	gv›_u≈_dëach_¨gs
;

187 
	tv›_u≈_dëach_t
(
	tv›_u≈_dëach_¨gs
 *);

189 
	gv›_is_ãxt_¨gs
;

190 
	tv›_is_ãxt_t
(
	tv›_is_ãxt_¨gs
 *);

192 
	gv›_£t_ãxt_¨gs
;

193 
	tv›_£t_ãxt_t
(
	tv›_£t_ãxt_¨gs
 *);

195 
	gv›_un£t_ãxt_¨gs
;

196 
	tv›_un£t_ãxt_t
(
	tv›_un£t_ãxt_¨gs
 *);

198 
	gv›_gë_wrôecou¡_¨gs
;

199 
	tv›_gë_wrôecou¡_t
(
	tv›_gë_wrôecou¡_¨gs
 *);

201 
	gv›_add_wrôecou¡_¨gs
;

202 
	tv›_add_wrôecou¡_t
(
	tv›_add_wrôecou¡_¨gs
 *);

204 
	gv›_•¨e1_¨gs
;

205 
	tv›_•¨e1_t
(
	tv›_•¨e1_¨gs
 *);

207 
	gv›_•¨e2_¨gs
;

208 
	tv›_•¨e2_t
(
	tv›_•¨e2_¨gs
 *);

210 
	gv›_•¨e3_¨gs
;

211 
	tv›_•¨e3_t
(
	tv›_•¨e3_¨gs
 *);

213 
	gv›_•¨e4_¨gs
;

214 
	tv›_•¨e4_t
(
	tv›_•¨e4_¨gs
 *);

216 
	gv›_•¨e5_¨gs
;

217 
	tv›_•¨e5_t
(
	tv›_•¨e5_¨gs
 *);

	@9p_net/bus_if.h

20 #i‚de‡
_bus_if_h_


21 
	#_bus_if_h_


	)

24 
kobj›_desc
 
bus_¥öt_chûd_desc
;

26 
	tbus_¥öt_chûd_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

42 
__ölöe
 
	$BUS_PRINT_CHILD
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

44 
kobj›_t
 
_m
;

45 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_¥öt_chûd
);

46  ((
bus_¥öt_chûd_t
 *Ë
_m
)(
_dev
, 
_chûd
);

47 
	}
}

50 
kobj›_desc
 
bus_¥obe_nom©ch_desc
;

52 
	tbus_¥obe_nom©ch_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

63 
__ölöe
 
	$BUS_PROBE_NOMATCH
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

65 
kobj›_t
 
_m
;

66 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_¥obe_nom©ch
);

67 ((
bus_¥obe_nom©ch_t
 *Ë
_m
)(
_dev
, 
_chûd
);

68 
	}
}

71 
kobj›_desc
 
bus_ªad_iv¨_desc
;

73 
	tbus_ªad_iv¨_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ödex
,

74 
	tuöçå_t
 *
	t_ªsu…
);

103 
__ölöe
 
	$BUS_READ_IVAR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ödex
,

104 
uöçå_t
 *
_ªsu…
)

106 
kobj›_t
 
_m
;

107 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªad_iv¨
);

108  ((
bus_ªad_iv¨_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ödex
, 
_ªsu…
);

109 
	}
}

112 
kobj›_desc
 
bus_wrôe_iv¨_desc
;

114 
	tbus_wrôe_iv¨_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ödx
,

115 
	tuöçå_t
 
	t_vÆue
);

134 
__ölöe
 
	$BUS_WRITE_IVAR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ödx
,

135 
uöçå_t
 
_vÆue
)

137 
kobj›_t
 
_m
;

138 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_wrôe_iv¨
);

139  ((
bus_wrôe_iv¨_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ödx
, 
_vÆue
);

140 
	}
}

143 
kobj›_desc
 
bus_chûd_dñëed_desc
;

145 
	tbus_chûd_dñëed_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

156 
__ölöe
 
	$BUS_CHILD_DELETED
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

158 
kobj›_t
 
_m
;

159 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_dñëed
);

160 ((
bus_chûd_dñëed_t
 *Ë
_m
)(
_dev
, 
_chûd
);

161 
	}
}

164 
kobj›_desc
 
bus_chûd_dëached_desc
;

166 
	tbus_chûd_dëached_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

177 
__ölöe
 
	$BUS_CHILD_DETACHED
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

179 
kobj›_t
 
_m
;

180 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_dëached
);

181 ((
bus_chûd_dëached_t
 *Ë
_m
)(
_dev
, 
_chûd
);

182 
	}
}

185 
kobj›_desc
 
bus_drivî_added_desc
;

187 
	tbus_drivî_added_t
(
	tdevi˚_t
 
	t_dev
, 
	tdrivî_t
 *
	t_drivî
);

200 
__ölöe
 
	$BUS_DRIVER_ADDED
(
devi˚_t
 
_dev
, 
drivî_t
 *
_drivî
)

202 
kobj›_t
 
_m
;

203 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_drivî_added
);

204 ((
bus_drivî_added_t
 *Ë
_m
)(
_dev
, 
_drivî
);

205 
	}
}

208 
kobj›_desc
 
bus_add_chûd_desc
;

210 
devi˚_t
 
	tbus_add_chûd_t
(
	tdevi˚_t
 
	t_dev
, 
	tu_öt
 
	t_‹dî
, c⁄° *
	t_«me
,

211 
	t_unô
);

232 
__ölöe
 
devi˚_t
 
	$BUS_ADD_CHILD
(
devi˚_t
 
_dev
, 
u_öt
 
_‹dî
,

233 c⁄° *
_«me
, 
_unô
)

235 
kobj›_t
 
_m
;

236 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_add_chûd
);

237  ((
bus_add_chûd_t
 *Ë
_m
)(
_dev
, 
_‹dî
, 
_«me
, 
_unô
);

238 
	}
}

241 
kobj›_desc
 
bus_Æloc_ªsour˚_desc
;

243 
ªsour˚
 * 
	tbus_Æloc_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

244 
	t_ty≥
, *
	t_rid
,

245 
	tu_l⁄g
 
	t_°¨t
, u_l⁄g 
	t_íd
,

246 
	tu_l⁄g
 
	t_cou¡
, 
	tu_öt
 
	t_Êags
);

276 
__ölöe
 
ªsour˚
 * 
	$BUS_ALLOC_RESOURCE
(
devi˚_t
 
_dev
,

277 
devi˚_t
 
_chûd
, 
_ty≥
,

278 *
_rid
, 
u_l⁄g
 
_°¨t
,

279 
u_l⁄g
 
_íd
, u_l⁄g 
_cou¡
,

280 
u_öt
 
_Êags
)

282 
kobj›_t
 
_m
;

283 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_Æloc_ªsour˚
);

284  ((
bus_Æloc_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨t
, 
_íd
, 
_cou¡
, 
_Êags
);

285 
	}
}

288 
kobj›_desc
 
bus_a˘iv©e_ªsour˚_desc
;

290 
	tbus_a˘iv©e_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

291 
	t_rid
, 
	tªsour˚
 *
	t_r
);

306 
__ölöe
 
	$BUS_ACTIVATE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

307 
_ty≥
, 
_rid
,

308 
ªsour˚
 *
_r
)

310 
kobj›_t
 
_m
;

311 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_a˘iv©e_ªsour˚
);

312  ((
bus_a˘iv©e_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_r
);

313 
	}
}

316 
kobj›_desc
 
bus_dó˘iv©e_ªsour˚_desc
;

318 
	tbus_dó˘iv©e_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

319 
	t_rid
, 
	tªsour˚
 *
	t_r
);

334 
__ölöe
 
	$BUS_DEACTIVATE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

335 
_ty≥
, 
_rid
,

336 
ªsour˚
 *
_r
)

338 
kobj›_t
 
_m
;

339 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_dó˘iv©e_ªsour˚
);

340  ((
bus_dó˘iv©e_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_r
);

341 
	}
}

344 
kobj›_desc
 
bus_adju°_ªsour˚_desc
;

346 
	tbus_adju°_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

347 
	tªsour˚
 *
	t_ªs
, 
	tu_l⁄g
 
	t_°¨t
,

348 
	tu_l⁄g
 
	t_íd
);

365 
__ölöe
 
	$BUS_ADJUST_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

366 
_ty≥
, 
ªsour˚
 *
_ªs
,

367 
u_l⁄g
 
_°¨t
, u_l⁄g 
_íd
)

369 
kobj›_t
 
_m
;

370 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_adju°_ªsour˚
);

371  ((
bus_adju°_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_ªs
, 
_°¨t
, 
_íd
);

372 
	}
}

375 
kobj›_desc
 
bus_ªÀa£_ªsour˚_desc
;

377 
	tbus_ªÀa£_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

378 
	t_rid
, 
	tªsour˚
 *
	t_ªs
);

393 
__ölöe
 
	$BUS_RELEASE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

394 
_ty≥
, 
_rid
,

395 
ªsour˚
 *
_ªs
)

397 
kobj›_t
 
_m
;

398 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªÀa£_ªsour˚
);

399  ((
bus_ªÀa£_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_ªs
);

400 
	}
}

403 
kobj›_desc
 
bus_£tup_öå_desc
;

405 
	tbus_£tup_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

406 
	tªsour˚
 *
	t_úq
, 
	t_Êags
,

407 
	tdrivî_fûãr_t
 *
	t_fûãr
, 
	tdrivî_öå_t
 *
	t_öå
,

408 *
	t_¨g
, **
	t_cookõp
);

433 
__ölöe
 
	$BUS_SETUP_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

434 
ªsour˚
 *
_úq
, 
_Êags
,

435 
drivî_fûãr_t
 *
_fûãr
,

436 
drivî_öå_t
 *
_öå
, *
_¨g
,

437 **
_cookõp
)

439 
kobj›_t
 
_m
;

440 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_£tup_öå
);

441  ((
bus_£tup_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_Êags
, 
_fûãr
, 
_öå
, 
_¨g
, 
_cookõp
);

442 
	}
}

445 
kobj›_desc
 
bus_ã¨down_öå_desc
;

447 
	tbus_ã¨down_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

448 
	tªsour˚
 *
	t_úq
, *
	t_cookõ
);

463 
__ölöe
 
	$BUS_TEARDOWN_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

464 
ªsour˚
 *
_úq
, *
_cookõ
)

466 
kobj›_t
 
_m
;

467 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ã¨down_öå
);

468  ((
bus_ã¨down_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_cookõ
);

469 
	}
}

472 
kobj›_desc
 
bus_£t_ªsour˚_desc
;

474 
	tbus_£t_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

475 
	t_rid
, 
	tu_l⁄g
 
	t_°¨t
, u_l⁄g 
	t_cou¡
);

494 
__ölöe
 
	$BUS_SET_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

495 
_rid
, 
u_l⁄g
 
_°¨t
, u_l⁄g 
_cou¡
)

497 
kobj›_t
 
_m
;

498 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_£t_ªsour˚
);

499  ((
bus_£t_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨t
, 
_cou¡
);

500 
	}
}

503 
kobj›_desc
 
bus_gë_ªsour˚_desc
;

505 
	tbus_gë_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

506 
	t_rid
, 
	tu_l⁄g
 *
	t_°¨ç
, u_l⁄g *
	t_cou¡p
);

523 
__ölöe
 
	$BUS_GET_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
_ty≥
,

524 
_rid
, 
u_l⁄g
 *
_°¨ç
, u_l⁄g *
_cou¡p
)

526 
kobj›_t
 
_m
;

527 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_ªsour˚
);

528  ((
bus_gë_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
, 
_°¨ç
, 
_cou¡p
);

529 
	}
}

532 
kobj›_desc
 
bus_dñëe_ªsour˚_desc
;

534 
	tbus_dñëe_ªsour˚_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	t_ty≥
,

535 
	t_rid
);

548 
__ölöe
 
	$BUS_DELETE_RESOURCE
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

549 
_ty≥
, 
_rid
)

551 
kobj›_t
 
_m
;

552 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_dñëe_ªsour˚
);

553 ((
bus_dñëe_ªsour˚_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_ty≥
, 
_rid
);

554 
	}
}

557 
kobj›_desc
 
bus_gë_ªsour˚_li°_desc
;

559 
ªsour˚_li°
 * 
	tbus_gë_ªsour˚_li°_t
(
	tdevi˚_t
 
	t_dev
,

560 
	tdevi˚_t
 
	t_chûd
);

572 
__ölöe
 
ªsour˚_li°
 * 
	$BUS_GET_RESOURCE_LIST
(
devi˚_t
 
_dev
,

573 
devi˚_t
 
_chûd
)

575 
kobj›_t
 
_m
;

576 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_ªsour˚_li°
);

577  ((
bus_gë_ªsour˚_li°_t
 *Ë
_m
)(
_dev
, 
_chûd
);

578 
	}
}

581 
kobj›_desc
 
bus_chûd_¥e£¡_desc
;

583 
	tbus_chûd_¥e£¡_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

600 
__ölöe
 
	$BUS_CHILD_PRESENT
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

602 
kobj›_t
 
_m
;

603 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_¥e£¡
);

604  ((
bus_chûd_¥e£¡_t
 *Ë
_m
)(
_dev
, 
_chûd
);

605 
	}
}

608 
kobj›_desc
 
bus_chûd_≤pöfo_°r_desc
;

610 
	tbus_chûd_≤pöfo_°r_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_buf
,

611 
	tsize_t
 
	t_buÊí
);

625 
__ölöe
 
	$BUS_CHILD_PNPINFO_STR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

626 *
_buf
, 
size_t
 
_buÊí
)

628 
kobj›_t
 
_m
;

629 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_≤pöfo_°r
);

630  ((
bus_chûd_≤pöfo_°r_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_buf
, 
_buÊí
);

631 
	}
}

634 
kobj›_desc
 
bus_chûd_loˇti⁄_°r_desc
;

636 
	tbus_chûd_loˇti⁄_°r_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_buf
,

637 
	tsize_t
 
	t_buÊí
);

651 
__ölöe
 
	$BUS_CHILD_LOCATION_STR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

652 *
_buf
, 
size_t
 
_buÊí
)

654 
kobj›_t
 
_m
;

655 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_chûd_loˇti⁄_°r
);

656  ((
bus_chûd_loˇti⁄_°r_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_buf
, 
_buÊí
);

657 
	}
}

660 
kobj›_desc
 
bus_böd_öå_desc
;

662 
	tbus_böd_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

663 
	tªsour˚
 *
	t_úq
, 
	t_˝u
);

674 
__ölöe
 
	$BUS_BIND_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

675 
ªsour˚
 *
_úq
, 
_˝u
)

677 
kobj›_t
 
_m
;

678 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_böd_öå
);

679  ((
bus_böd_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_˝u
);

680 
	}
}

683 
kobj›_desc
 
bus_c⁄fig_öå_desc
;

685 
	tbus_c⁄fig_öå_t
(
	tdevi˚_t
 
	t_dev
, 
	t_úq
, 
	töå_åiggî
 
	t_åig
,

686 
	töå_pﬁ¨ôy
 
	t_pﬁ
);

697 
__ölöe
 
	$BUS_CONFIG_INTR
(
devi˚_t
 
_dev
, 
_úq
,

698 
öå_åiggî
 
_åig
,

699 
öå_pﬁ¨ôy
 
_pﬁ
)

701 
kobj›_t
 
_m
;

702 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_c⁄fig_öå
);

703  ((
bus_c⁄fig_öå_t
 *Ë
_m
)(
_dev
, 
_úq
, 
_åig
, 
_pﬁ
);

704 
	}
}

707 
kobj›_desc
 
bus_des¸ibe_öå_desc
;

709 
	tbus_des¸ibe_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

710 
	tªsour˚
 *
	t_úq
, *
	t_cookõ
,

711 c⁄° *
	t_des¸
);

724 
__ölöe
 
	$BUS_DESCRIBE_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

725 
ªsour˚
 *
_úq
, *
_cookõ
,

726 c⁄° *
_des¸
)

728 
kobj›_t
 
_m
;

729 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_des¸ibe_öå
);

730  ((
bus_des¸ibe_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
, 
_cookõ
, 
_des¸
);

731 
	}
}

734 
kobj›_desc
 
bus_höãd_chûd_desc
;

736 
	tbus_höãd_chûd_t
(
	tdevi˚_t
 
	t_dev
, c⁄° *
	t_d«me
, 
	t_dunô
);

754 
__ölöe
 
	$BUS_HINTED_CHILD
(
devi˚_t
 
_dev
, c⁄° *
_d«me
,

755 
_dunô
)

757 
kobj›_t
 
_m
;

758 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_höãd_chûd
);

759 ((
bus_höãd_chûd_t
 *Ë
_m
)(
_dev
, 
_d«me
, 
_dunô
);

760 
	}
}

763 
kobj›_desc
 
bus_gë_dma_èg_desc
;

765 
bus_dma_èg_t
 
	tbus_gë_dma_èg_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
);

773 
__ölöe
 
bus_dma_èg_t
 
	$BUS_GET_DMA_TAG
(
devi˚_t
 
_dev
, devi˚_à
_chûd
)

775 
kobj›_t
 
_m
;

776 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_dma_èg
);

777  ((
bus_gë_dma_èg_t
 *Ë
_m
)(
_dev
, 
_chûd
);

778 
	}
}

781 
kobj›_desc
 
bus_höt_devi˚_unô_desc
;

783 
	tbus_höt_devi˚_unô_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
,

784 c⁄° *
	t_«me
, *
	t_unôp
);

794 
__ölöe
 
	$BUS_HINT_DEVICE_UNIT
(
devi˚_t
 
_dev
, devi˚_à
_chûd
,

795 c⁄° *
_«me
, *
_unôp
)

797 
kobj›_t
 
_m
;

798 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_höt_devi˚_unô
);

799 ((
bus_höt_devi˚_unô_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_«me
, 
_unôp
);

800 
	}
}

803 
kobj›_desc
 
bus_√w_∑ss_desc
;

805 
	tbus_√w_∑ss_t
(
	tdevi˚_t
 
	t_dev
);

812 
__ölöe
 
	$BUS_NEW_PASS
(
devi˚_t
 
_dev
)

814 
kobj›_t
 
_m
;

815 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_√w_∑ss
);

816 ((
bus_√w_∑ss_t
 *Ë
_m
)(
_dev
);

817 
	}
}

820 
kobj›_desc
 
bus_ªm≠_öå_desc
;

822 
	tbus_ªm≠_öå_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, 
	tu_öt
 
	t_úq
);

831 
__ölöe
 
	$BUS_REMAP_INTR
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, 
u_öt
 
_úq
)

833 
kobj›_t
 
_m
;

834 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_ªm≠_öå
);

835  ((
bus_ªm≠_öå_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_úq
);

836 
	}
}

839 
kobj›_desc
 
bus_gë_domaö_desc
;

841 
	tbus_gë_domaö_t
(
	tdevi˚_t
 
	t_dev
, devi˚_à
	t_chûd
, *
	t_domaö
);

850 
__ölöe
 
	$BUS_GET_DOMAIN
(
devi˚_t
 
_dev
, devi˚_à
_chûd
, *
_domaö
)

852 
kobj›_t
 
_m
;

853 
	`KOBJOPLOOKUP
(((
kobj_t
)
_dev
)->
›s
,
bus_gë_domaö
);

854  ((
bus_gë_domaö_t
 *Ë
_m
)(
_dev
, 
_chûd
, 
_domaö
);

855 
	}
}

	@9p_net/client.c

10 
	~"../˛õ¡.h
"

11 
	~"../å™•‹t.h
"

12 
	~"../¥Ÿocﬁ.h
"

14 
p9_ªq_t
 *
gë_ªque°
();

16 
ölöe
 
	$p9_is_¥Ÿo_dŸl
(
p9_˛õ¡
 *
˛¡
)

18  
˛¡
->
¥Ÿo_vîsi⁄
 =
p9_¥Ÿo_2000L
;

19 
	}
}

21 
ölöe
 
	$p9_is_¥Ÿo_dŸu
(
p9_˛õ¡
 *
˛¡
)

23  
˛¡
->
¥Ÿo_vîsi⁄
 =
p9_¥Ÿo_2000u
;

24 
	}
}

34 
	$∑r£_›ts
(
mou¡
 *
mp
, 
p9_˛õ¡
 *
˛¡
)

36 *
å™s
;

37 
îr‹
 = 0;

39 
˛¡
->
¥Ÿo_vîsi⁄
 = 
p9_¥Ÿo_2000L
;

40 
˛¡
->
msize
 = 8192;

42 
å™s
 = 
	`vfs_gë›ts
(
mp
->
m¡_›äew
, "å™s", &
îr‹
);

43 i‡(
îr‹
)

44  (
îr‹
);

49 
˛¡
->
å™s_mod
 = 
	`v9fs_gë_å™s_by_«me
(
å™s
);

50 i‡(
˛¡
->
å™s_mod
 =
NULL
) {

51 
	`¥ötf
("CouldÇŸ födÑeque°Åøn•‹t: %s\n",
å™s
);

52 
îr‹
 = -
EINVAL
;

54  
îr‹
;

55 
	}
}

57 
p9_fˇŒ
 *
	$p9_fˇŒ_Æloc
(
Æloc_msize
)

59 
p9_fˇŒ
 *
fc
;

60 
fc
 = 
	`p9_mÆloc
((
p9_fˇŒ
Ë+ 
Æloc_msize
);

61 i‡(!
fc
)

62  
NULL
;

63 
fc
->
ˇ∑côy
 = 
Æloc_msize
;

64 
fc
->
sd©a
 = (*Ëf¯+ (
p9_fˇŒ
);

65  
fc
;

66 
	}
}

68 
	$p9_‰ì_ªq
(
p9_ªq_t
 *
r
)

71 
	`‰ì
(
r
, 
M_TEMP
);

72 
	}
}

80 
	$p9_˛õ¡_cb
(
p9_˛õ¡
 *
c
, 
p9_ªq_t
 *
ªq
)

96 
	`wakeup
(&
ªq
);

97 
	}
}

99 
p9_ªq_t
 *

100 
p9_˛õ¡_Ωc
(
p9_˛õ¡
 *
c
, 
öt8_t
 
ty≥
, c⁄° *
fmt
, ...);

104 
p9_ªq_t
 *
	$gë_ªque°
()

106 
p9_ªq_t
 *
ªq
;

107 
Æloc_msize
 = 8192;

109 
ªq
 = 
	`p9_mÆloc
((*req));

110 i‡(
ªq
 =
NULL
)  NULL;

111 i‡(!
ªq
->
tc
)

112 
ªq
->
tc
 = 
	`p9_fˇŒ_Æloc
(
Æloc_msize
);

113 i‡(!
ªq
->
rc
)

114 
ªq
->
rc
 = 
	`p9_fˇŒ_Æloc
(
Æloc_msize
);

116 i‡(
ªq
->
tc
 =
NULL
 ||Ñeq->
rc
 == NULL)

117  
NULL
;

118  
ªq
;

119 
	}
}

121 
p9_ªq_t
 *
	$p9_˛õ¡_¥ï¨e_ªq
(
p9_˛õ¡
 *
c
,

122 
öt8_t
 
ty≥
, 
ªq_size
,

123 c⁄° *
fmt
, 
__va_li°
 
≠
)

125 
îr
;

126 
p9_ªq_t
 *
ªq
;

128 
	`p9_debug
(
TRANS
, "˛õ¡ %∞› %d\n", 
c
, 
ty≥
);

131 i‡(
c
->
°©us
 =
Disc⁄√˘ed
)

132  
NULL
;

135 i‡((
c
->
°©us
 =
BegöDisc⁄√˘
Ë&& (
ty≥
 !
P9_TCLUNK
))

136  
NULL
;

139 
ªq
 = 
	`gë_ªque°
();

140 i‡(
ªq
 =
NULL
)

142  
NULL
;

146 
	`p9pdu_¥ï¨e
(
ªq
->
tc
, 
ty≥
);

147 
îr
 = 
	`p9pdu_vwrôef
(
ªq
->
tc
, 
c
->
¥Ÿo_vîsi⁄
, 
fmt
, 
≠
);

148 i‡(
îr
)

149 
ªãº
;

150 
	`p9pdu_föÆize
(
c
, 
ªq
->
tc
);

151  
ªq
;

152 
ªãº
:

153 
	`p9_‰ì_ªq
(
ªq
);

154  
NULL
;

155 
	}
}

166 
mtx
 
	gªq_mtx
;

167 
p9_ªq_t
 *

168 
	$p9_˛õ¡_Ωc
(
p9_˛õ¡
 *
c
, 
öt8_t
 
ty≥
, c⁄° *
fmt
, ...)

170 
va_li°
 
≠
;

171 
îr
;

172 
p9_ªq_t
 *
ªq
;

174 
	`va_°¨t
(
≠
, 
fmt
);

177 
ªq
 = 
	`p9_˛õ¡_¥ï¨e_ªq
(
c
, 
ty≥
, c->
msize
, 
fmt
, 
≠
);

178 
	`va_íd
(
≠
);

179 i‡(
ªq
 =
NULL
)

180  
NULL
;

182 
îr
 = 
c
->
å™s_mod
->
	`ªque°
(c, 
ªq
);

183 i‡(
îr
 < 0) {

184 i‡(
îr
 !-
ERESTARTSYS
 &&Éº !-
EFAULT
)

185 
c
->
°©us
 = 
Disc⁄√˘ed
;

186 
ªãº
;

188 
agaö
:

190 
îr
 = 
	`m¶ìp
(&
ªq
, &
ªq_mtx
,

191 
PRIBIO
, "p9_virtio", 0);

193 i‡((
îr
 =-
ERESTARTSYS
Ë&& (
c
->
°©us
 =
C⁄√˘ed
)

194 && (
ty≥
 =
P9_TFLUSH
)) {

195 
agaö
;

198 i‡(
ªq
->
°©us
 =
REQ_STATUS_ERROR
) {

199 
	`p9_debug
(
TRANS
, "ªq_°©u†îr‹ %d\n", 
ªq
->
t_îr
);

200 
îr
 = 
ªq
->
t_îr
;

202 i‡((
îr
 =-
ERESTARTSYS
Ë&& (
c
->
°©us
 =
C⁄√˘ed
)) {

203 
	`p9_debug
(
TRANS
, "flushing\n");

210 i‡(
ªq
->
°©us
 =
REQ_STATUS_RCVD
)

211 
îr
 = 0;

213 i‡(
îr
 < 0)

214 
ªãº
;

216 i‡(!
îr
)

217  
ªq
;

218 
ªãº
:

219 
	`p9_‰ì_ªq
(
ªq
);

220  
NULL
;

221 
	}
}

228 
p9_fid
 *
	$p9_fid_¸óã
(
p9_˛õ¡
 *
˛¡
)

230 
p9_fid
 *
fid
;

232 
	`p9_debug
(
P9
+
DEBUG_TRANS_FID
, "˛¡ %p\n", 
˛¡
);

233 
fid
 = 
	`p9_mÆloc
((
p9_fid
));

235 i‡(!
fid
)

236  
NULL
;

239 
fid
->fid = 
	`Æloc_uƒ
(
˛¡
->
fidpoﬁ
);

241 
	`mem£t
(&
fid
->
qid
, 0, (
p9_qid
));

242 
fid
->
mode
 = -1;

243 
fid
->
uid
 = 0;

244 
fid
->
˛¡
 = clnt;

245 
fid
->
rdú
 = 
NULL
;

247  
fid
;

249 
	}
}

251 
	$p9_fid_de°roy
(
p9_fid
 *
fid
)

253 
p9_˛õ¡
 *
˛¡
;

255 
	`p9_debug
(
P9
+
DEBUG_TRANS_FID
, "fid %d\n", 
fid
->fid);

256 
˛¡
 = 
fid
->clnt;

257 
	`‰ì
(
fid
, 
M_TEMP
);

258 
	}
}

261 
	$p9_˛õ¡_vîsi⁄
(
p9_˛õ¡
 *
c
)

263 
îr
 = 0;

264 
p9_ªq_t
 *
ªq
;

265 *
vîsi⁄
;

266 
msize
;

268 
	`p9_debug
(
TRANS
, ">>> TVERSION msize %dÖrotocol %d\n",

269 
c
->
msize
, c->
¥Ÿo_vîsi⁄
);

271 
c
->
¥Ÿo_vîsi⁄
) {

272 
p9_¥Ÿo_2000L
:

273 
ªq
 = 
	`p9_˛õ¡_Ωc
(
c
, 
P9_TVERSION
, "ds",

274 
c
->
msize
, "9P2000.L");

276 
p9_¥Ÿo_2000u
:

277 
ªq
 = 
	`p9_˛õ¡_Ωc
(
c
, 
P9_TVERSION
, "ds",

278 
c
->
msize
, "9P2000.u");

280 
p9_¥Ÿo_Àgacy
:

281 
ªq
 = 
	`p9_˛õ¡_Ωc
(
c
, 
P9_TVERSION
, "ds",

282 
c
->
msize
, "9P2000");

285  -
EINVAL
;

288 i‡(
ªq
 =
NULL
)

289  -
ENOMEM
;

291 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
c
->
¥Ÿo_vîsi⁄
, "ds", &
msize
, &
vîsi⁄
);

292 i‡(
îr
) {

293 
	`p9_debug
(
TRANS
, "vîsi⁄Éº‹ %d\n", 
îr
);

294 
îr‹
;

297 
	`p9_debug
(
TRANS
, "<<< RVERSION msizê%d %s\n", 
msize
, 
vîsi⁄
);

298 i‡(!
	`°∫cmp
(
vîsi⁄
, "9P2000.L", 8))

299 
c
->
¥Ÿo_vîsi⁄
 = 
p9_¥Ÿo_2000L
;

300 i‡(!
	`°∫cmp
(
vîsi⁄
, "9P2000.u", 8))

301 
c
->
¥Ÿo_vîsi⁄
 = 
p9_¥Ÿo_2000u
;

302 i‡(!
	`°∫cmp
(
vîsi⁄
, "9P2000", 6))

303 
c
->
¥Ÿo_vîsi⁄
 = 
p9_¥Ÿo_Àgacy
;

305 
îr
 = -
ENOMEM
;

306 
îr‹
;

309 i‡(
msize
 < 
c
->msize)

310 
c
->
msize
 = msize;

312 
îr‹
:

313 
	`‰ì
(
vîsi⁄
, 
M_TEMP
);

314 
	`p9_‰ì_ªq
(
ªq
);

316  
îr
;

317 
	}
}

319 
	#INT_MAX
 1024

320 

	)

321 
p9_˛õ¡
 *

322 
	$p9_˛õ¡_¸óã
(
mou¡
 *
mp
)

324 
îr
 = 0;

325 
p9_˛õ¡
 *
˛¡
;

327 
˛¡
 = 
	`p9_mÆloc
((
p9_˛õ¡
));

328 i‡(!
˛¡
)

329 
baû_out
;

331 
˛¡
->
å™s_mod
 = 
NULL
;

332 
˛¡
->
å™s
 = 
NULL
;

334 
	`mtx_öô
(&
˛¡
->
lock
, "˛¡-•ö", 
NULL
, 
MTX_SPIN
);

337 
îr
 = 
	`∑r£_›ts
(
mp
, 
˛¡
);

338 i‡(
îr
 < 0)

339 
baû_out
;

341 i‡(!
˛¡
->
å™s_mod
)

342 
˛¡
->
å™s_mod
 = 
	`v9fs_gë_deÁu…_å™s
();

344 i‡(
˛¡
->
å™s_mod
 =
NULL
) {

345 
îr
 = -
EPROTONOSUPPORT
;

346 
	`p9_debug
(
P9
+
DEBUG_TRANS_ERROR
,

348 
baû_out
;

354 
˛¡
->
fidpoﬁ
 = 
	`√w_uƒhdr
(2, 
INT_MAX
, 
NULL
);

355 i‡(!(
˛¡
->
fidpoﬁ
)) {

356 
îr
 = -
ENOMEM
;

357 
baû_out
;

360 
	`p9_debug
(
P9
+
DEBUG_TRANS_MUX
, "clnt %pÅrans %p msize %dÖrotocol %d\n",

361 
˛¡
, c t->
å™s_mod
, c t->
msize
, c t->
¥Ÿo_vîsi⁄
);

364 
îr
 = 
˛¡
->
å™s_mod
->
	`¸óã
(clnt);

365 i‡(
îr
) {

366 
îr
 = -
NOCLIENT_ERROR
;

367 
baû_out
;

369 i‡(
˛¡
->
msize
 > c t->
å™s_mod
->
maxsize
)

370 
˛¡
->
msize
 = c t->
å™s_mod
->
maxsize
;

372 
îr
 = 
	`p9_˛õ¡_vîsi⁄
(
˛¡
);

373 i‡(
îr
)

374 
baû_out
;

376  
˛¡
;

378 
baû_out
:

379 i‡(
îr
 =-
NOCLIENT_ERROR
)

380 
˛¡
->
å™s_mod
->
	`˛o£
(clnt);

381 i‡(
˛¡
)

382 
	`‰ì
(
˛¡
, 
M_TEMP
);

384  
NULL
;

385 
	}
}

387 
	$p9_˛õ¡_de°roy
(
p9_˛õ¡
 *
˛¡
)

389 
	`p9_debug
(
P9
+
DEBUG_TRANS_MUX
, "˛¡ %p\n", 
˛¡
);

391 i‡(
˛¡
->
å™s_mod
)

392 
˛¡
->
å™s_mod
->
	`˛o£
(clnt);

394 
	`v9fs_put_å™s
(
˛¡
->
å™s_mod
);

396 i‡(
˛¡
->
fidpoﬁ
)

397 
	`dñëe_uƒhdr
(
˛¡
->
fidpoﬁ
);

399 
	`‰ì
(
˛¡
 ,
M_TEMP
);

400 
	}
}

402 
	$p9_˛õ¡_disc⁄√˘
(
p9_˛õ¡
 *
˛¡
)

404 
	`p9_debug
(
TRANS
, "˛¡ %p\n", 
˛¡
);

405 
˛¡
->
°©us
 = 
Disc⁄√˘ed
;

406 
	}
}

408 
	$p9_˛õ¡_begö_disc⁄√˘
(
p9_˛õ¡
 *
˛¡
)

410 
	`p9_debug
(
TRANS
, "˛¡ %p\n", 
˛¡
);

411 
˛¡
->
°©us
 = 
BegöDisc⁄√˘
;

412 
	}
}

417 
p9_fid
 *
	$p9_˛õ¡_©èch
(
p9_˛õ¡
 *
˛¡
)

419 
îr
 = 0;

420 
p9_ªq_t
 *
ªq
;

421 
p9_fid
 *
fid
 = 
NULL
;

422 
p9_qid
 
qid
;

424 
	`p9_debug
(
TRANS
, ">>> TATTACH \n");

425 
fid
 = 
	`p9_fid_¸óã
(
˛¡
);

426 i‡(
fid
 =
NULL
) {

427 
îr
 = -
ENOMEM
;

428 
fid
 = 
NULL
;

429 
îr‹
;

431 
fid
->
uid
 = 0;

435 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TATTACH
, "ddss?u", 
fid
->fid,

436 
P9_NOFID
, 0, 
NULL
, 0);

437 i‡(
ªq
 =
NULL
) {

438 
îr‹
;

441 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "Q", &
qid
);

442 i‡(
îr
) {

443 
	`p9_‰ì_ªq
(
ªq
);

444 
îr‹
;

447 
	`p9_debug
(
TRANS
, "<<< RATTACH qid %x.%llx.%x\n",

448 
qid
.
ty≥
, ()qid.
∑th
, qid.
vîsi⁄
);

450 
	`memmove
(&
fid
->
qid
, &qid, (
p9_qid
));

452 
	`p9_‰ì_ªq
(
ªq
);

453  
fid
;

455 
îr‹
:

456 i‡(
fid
)

457 
	`p9_fid_de°roy
(
fid
);

458  
NULL
;

459 
	}
}

462 
	$p9_˛õ¡_dëach
(
p9_fid
 *
fid
)

464 
îr
;

465 
p9_˛õ¡
 *
˛¡
;

466 
p9_ªq_t
 *
ªq
;

468 
	`p9_debug
(
TRANS
, ">>> TREMOVE fid %d\n", 
fid
->fid);

469 
îr
 = 0;

470 
˛¡
 = 
fid
->clnt;

472 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TREMOVE
, "d", 
fid
->fid);

473 i‡(
ªq
 =
NULL
) {

474 
îr
 = -
ENOMEM
;

475 
îr‹
;

478 
	`p9_debug
(
TRANS
, "<<< RREMOVE fid %d\n", 
fid
->fid);

480 
	`p9_‰ì_ªq
(
ªq
);

481 
îr‹
:

482 i‡(
îr
 =-
ERESTARTSYS
)

483 
	`p9_˛õ¡_˛unk
(
fid
);

485 
	`p9_fid_de°roy
(
fid
);

486  
îr
;

487 
	}
}

490 
p9_fid
 *
	$p9_˛õ¡_wÆk
(
p9_fid
 *
ﬁdfid
, 
uöt16_t
 
nw«me
,

491 **
w«mes
, 
˛⁄e
)

493 
îr
;

494 
p9_˛õ¡
 *
˛¡
;

495 
p9_fid
 *
fid
;

496 
p9_qid
 *
wqids
;

497 
p9_ªq_t
 *
ªq
;

498 
uöt16_t
 
nwqids
, 
cou¡
;

500 
îr
 = 0;

501 
wqids
 = 
NULL
;

502 
˛¡
 = 
ﬁdfid
->clnt;

503 i‡(
˛⁄e
) {

504 
fid
 = 
	`p9_fid_¸óã
(
˛¡
);

505 i‡(
fid
 =
NULL
) {

506 
îr
 = -
ENOMEM
;

507 
fid
 = 
NULL
;

508 
îr‹
;

511 
fid
->
uid
 = 
ﬁdfid
->uid;

513 
fid
 = 
ﬁdfid
;

515 
	`p9_debug
(
TRANS
, ">>> TWALK fids %d,%dÇwname %ud wname[0] %s\n",

516 
ﬁdfid
->
fid
, fid->fid, 
nw«me
, 
w«mes
 ? w«mes[0] : 
NULL
);

518 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TWALK
, "ddT", 
ﬁdfid
->
fid
, fid->fid,

519 
nw«me
, 
w«mes
);

520 i‡(
ªq
 =
NULL
) {

521 
îr
 = -
ENOMEM
;

522 
îr‹
;

525 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "R", &
nwqids
, &
wqids
);

526 i‡(
îr
) {

527 
	`p9_‰ì_ªq
(
ªq
);

528 
˛unk_fid
;

530 
	`p9_‰ì_ªq
(
ªq
);

532 
	`p9_debug
(
TRANS
, "<<< RWALKÇwqid %d:\n", 
nwqids
);

534 i‡(
nwqids
 !
nw«me
) {

535 
îr
 = -
ENOENT
;

536 
˛unk_fid
;

539 
cou¡
 = 0; cou¡ < 
nwqids
; count++)

540 
	`p9_debug
(
TRANS
, "<<< [%d] %x.%llx.%x\n",

541 
cou¡
, 
wqids
[cou¡].
ty≥
,

542 ()
wqids
[
cou¡
].
∑th
,

543 
wqids
[
cou¡
].
vîsi⁄
);

545 i‡(
nw«me
)

546 
	`memmove
(&
fid
->
qid
, &
wqids
[
nwqids
 - 1], (
p9_qid
));

548 
fid
->
qid
 = 
ﬁdfid
->qid;

550 
	`p9_‰ì
(
wqids
, 
nwqids
 * (
p9_qid
));

551  
fid
;

553 
˛unk_fid
:

554 
	`p9_‰ì
(
wqids
, 
	`°æí
(wqids));

555 
	`p9_˛õ¡_˛unk
(
fid
);

556 
fid
 = 
NULL
;

558 
îr‹
:

559 i‡(
fid
 && (fid !
ﬁdfid
))

560 
	`p9_fid_de°roy
(
fid
);

562  
NULL
;

563 
	}
}

566 
	$p9_˛õ¡_›í
(
p9_fid
 *
fid
, 
mode
)

568 
îr
;

569 
p9_˛õ¡
 *
˛¡
;

570 
p9_ªq_t
 *
ªq
;

571 
p9_qid
 
qid
;

572 
iounô
;

574 
˛¡
 = 
fid
->clnt;

575 
	`p9_debug
(
TRANS
, ">>> %s fid %d mode %d\n",

576 
	`p9_is_¥Ÿo_dŸl
(
˛¡
Ë? "TLOPEN" : "TOPEN", 
fid
->fid, 
mode
);

577 
îr
 = 0;

579 i‡(
fid
->
mode
 != -1)

580  -
EINVAL
;

582 i‡(
	`p9_is_¥Ÿo_dŸl
(
˛¡
))

583 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TLOPEN
, "dd", 
fid
->fid, 
mode
);

585 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TOPEN
, "db", 
fid
->fid, 
mode
);

586 i‡(
ªq
 =
NULL
) {

587  -
ENOMEM
;

590 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "Qd", &
qid
, &
iounô
);

591 i‡(
îr
) {

592 
îr
 = -
EINVAL
;

593 
‰ì_™d_îr‹
;

596 
	`p9_debug
(
TRANS
, "<<< %s qid %x.%llx.%x iounit %x\n",

597 
	`p9_is_¥Ÿo_dŸl
(
˛¡
Ë? "RLOPEN" : "ROPEN", 
qid
.
ty≥
,

598 ()
qid
.
∑th
, qid.
vîsi⁄
, 
iounô
);

600 
fid
->
mode
 = mode;

601 
fid
->
iounô
 = iounit;

603 
	`mem˝y
(&
fid
->
qid
, &qid, (qid));

605 
‰ì_™d_îr‹
:

606 
	`p9_‰ì_ªq
(
ªq
);

607  
îr
;

608 
	}
}

610 
p9_w°©
 *
	$p9_˛õ¡_°©
(
p9_fid
 *
fid
)

612 
îr
;

613 
p9_˛õ¡
 *
˛¡
;

614 
p9_w°©
 *
ªt
 = 
	`p9_mÆloc
((p9_wstat));

615 
p9_ªq_t
 *
ªq
;

616 
uöt16_t
 
ign‹ed
;

618 
	`p9_debug
(
TRANS
, ">>> TSTAT fid %d\n", 
fid
->fid);

620 
îr
 = 0;

621 
˛¡
 = 
fid
->clnt;

623 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TSTAT
, "d", 
fid
->fid);

624 i‡(
ªq
 =
NULL
) {

625 
îr‹
;

628 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "wS", &
ign‹ed
, 
ªt
);

629 i‡(
îr
) {

630 
	`p9_‰ì_ªq
–
ªq
);

631 
îr‹
;

634 
	`p9_‰ì_ªq
(
ªq
);

635  
ªt
;

637 
îr‹
:

638 
	`‰ì
(
ªq
, 
M_TEMP
);

639  
NULL
;

640 
	}
}

643 
p9_°©_dŸl
 *
	$p9_˛õ¡_gë©å_dŸl
(
p9_fid
 *
fid
,

644 
uöt64_t
 
ªque°_mask
)

646 
îr
;

647 
p9_˛õ¡
 *
˛¡
;

648 
p9_°©_dŸl
 *
ªt
 = 
	`p9_mÆloc
((p9_stat_dotl));

649 
p9_ªq_t
 *
ªq
;

651 
	`p9_debug
(
TRANS
, ">>> TGETATTR fid %d,Ñequest_mask %ld\n",

652 
fid
->fid, 
ªque°_mask
);

653 i‡(!
ªt
)

654  
NULL
;

656 
îr
 = 0;

657 
˛¡
 = 
fid
->clnt;

659 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TGETATTR
, "dq", 
fid
->fid, 
ªque°_mask
);

660 i‡(
ªq
 =
NULL
) {

661 
îr
 =-
ENOMEM
;

662 
îr‹
;

665 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "A", 
ªt
);

666 i‡(
îr
) {

667 
	`p9_‰ì_ªq
(
ªq
);

668 
îr‹
;

671 
	`p9_debug
(
TRANS
,

681 
ªt
->
°_ªsu…_mask
,Ñë->
qid
.
ty≥
,Ñë->qid.
∑th
,

682 
ªt
->
qid
.
vîsi⁄
,Ñë->
°_mode
,Ñë->
°_∆ök
,

683 
ªt
->
°_rdev
,Ñë->
°_size
,Ñë->
°_blksize
,

684 
ªt
->
°_blocks
,Ñë->
°_©ime_£c
,Ñë->
°_©ime_n£c
,

685 
ªt
->
°_mtime_£c
,Ñë->
°_mtime_n£c
,Ñë->
°_˘ime_£c
,

686 
ªt
->
°_˘ime_n£c
,Ñë->
°_btime_£c
,Ñë->
°_btime_n£c
,

687 
ªt
->
°_gí
,Ñë->
°_d©a_vîsi⁄
);

689 
	`p9_‰ì_ªq
(
ªq
);

690  
ªt
;

692 
îr‹
:

693 
	`p9_‰ì
(
ªt
, (*ret));

694  
NULL
;

695 
	}
}

697 
	$p9_˛õ¡_°©size
(
p9_w°©
 *
w°
, 
¥Ÿo_vîsi⁄
)

699 
ªt
;

705 
ªt
 = 2+4+13+4+4+4+8+2+2+2+2;

707 i‡(
w°
->
«me
)

708 
ªt
 +
	`°æí
(
w°
->
«me
);

709 i‡(
w°
->
uid
)

710 
ªt
 +
	`°æí
(
w°
->
uid
);

711 i‡(
w°
->
gid
)

712 
ªt
 +
	`°æí
(
w°
->
gid
);

713 i‡(
w°
->
muid
)

714 
ªt
 +
	`°æí
(
w°
->
muid
);

716 i‡((
¥Ÿo_vîsi⁄
 =
p9_¥Ÿo_2000u
) ||

717 (
¥Ÿo_vîsi⁄
 =
p9_¥Ÿo_2000L
)) {

718 
ªt
 += 2+4+4+4;

719 i‡(
w°
->
exãnsi⁄
)

720 
ªt
 +
	`°æí
(
w°
->
exãnsi⁄
);

723  
ªt
;

724 
	}
}

726 
	$p9_˛õ¡_w°©
(
p9_fid
 *
fid
, 
p9_w°©
 *
w°
)

728 
îr
;

729 
p9_ªq_t
 *
ªq
;

730 
p9_˛õ¡
 *
˛¡
;

732 
îr
 = 0;

733 
˛¡
 = 
fid
->clnt;

734 
w°
->
size
 = 
	`p9_˛õ¡_°©size
(w°, 
˛¡
->
¥Ÿo_vîsi⁄
);

736 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TWSTAT
, "dwS", 
fid
->fid, 
w°
->
size
+2, wst);

737 i‡(
ªq
 =
NULL
) {

738 
îr
 = -
ENOMEM
;

739 
îr‹
;

742 
	`p9_‰ì_ªq
(
ªq
);

743 
îr‹
:

744  
îr
;

745 
	}
}

747 
	$p9_˛õ¡_£èâr
(
p9_fid
 *
fid
, 
p9_üâr_dŸl
 *
p9©å
)

749 
îr
;

750 
p9_ªq_t
 *
ªq
;

751 
p9_˛õ¡
 *
˛¡
;

753 
îr
 = 0;

754 
˛¡
 = 
fid
->clnt;

755 
	`p9_debug
(
TRANS
, ">>> TSETATTR fid %d\n", 
fid
->fid);

756 
	`p9_debug
(
TRANS
,

760 
p9©å
->
vÆid
,Ö9©å->
mode
,

761 
p9©å
->
size
,Ö9©å->
©ime_£c
,Ö9©å->
©ime_n£c
,

762 
p9©å
->
mtime_£c
,Ö9©å->
mtime_n£c
);

764 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TSETATTR
, "dI", 
fid
->fid, 
p9©å
);

766 i‡(
ªq
 =
NULL
) {

767 
îr
 = -
ENOMEM
;

768 
îr‹
;

770 
	`p9_debug
(
TRANS
, "<<< RSETATTR fid %d\n", 
fid
->fid);

771 
	`p9_‰ì_ªq
(
ªq
);

772 
îr‹
:

773  
îr
;

774 
	}
}

776 
	$p9_˛õ¡_°©fs
(
p9_fid
 *
fid
, 
p9_r°©fs
 *
sb
)

778 
îr
;

779 
p9_ªq_t
 *
ªq
;

780 
p9_˛õ¡
 *
˛¡
;

782 
îr
 = 0;

783 
˛¡
 = 
fid
->clnt;

785 
	`p9_debug
(
TRANS
, ">>> TSTATFS fid %d\n", 
fid
->fid);

787 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TSTATFS
, "d", 
fid
->fid);

788 i‡(
ªq
 =
NULL
) {

789 
îr
 = -
ENOMEM
;

790 
îr‹
;

793 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "ddqqqqqqd", &
sb
->
ty≥
,

794 &
sb
->
bsize
, &sb->
blocks
, &sb->
b‰ì
, &sb->
bavaû
,

795 &
sb
->
fûes
, &sb->
f‰ì
, &sb->
fsid
, &sb->
«mñí
);

796 i‡(
îr
) {

797 
	`p9_‰ì_ªq
(
ªq
);

798 
îr‹
;

801 
	`p9_debug
(
TRANS
, "<<< RSTATFS fid %dÅype 0x%lx bsize %ld "

804 
fid
->fid, ()
sb
->
ty≥
, ()sb->
bsize
,

805 
sb
->
blocks
, sb->
b‰ì
, sb->
bavaû
, sb->
fûes
, sb->
f‰ì
,

806 
sb
->
fsid
, ()sb->
«mñí
);

808 
	`p9_‰ì_ªq
(
ªq
);

809 
îr‹
:

810  
îr
;

811 
	}
}

814 
	$p9_˛õ¡_ªaddú
(
p9_fid
 *
fid
, *
d©a
, 
uöt32_t
 
cou¡
, 
uöt64_t
 
off£t
)

816 
îr
, 
rsize
;

817 
p9_˛õ¡
 *
˛¡
;

818 
p9_ªq_t
 *
ªq
 = 
NULL
;

819 *
d©≠å
;

821 
	`p9_debug
(
TRANS
, ">>> TREADDIR fid %d offset %llu count %d\n",

822 
fid
->fid, (Ë
off£t
, 
cou¡
);

824 
îr
 = 0;

825 
˛¡
 = 
fid
->clnt;

827 
rsize
 = 
fid
->
iounô
;

828 i‡(!
rsize
 ||Ñsizê> 
˛¡
->
msize
-
P9_READDIRHDRSZ
)

829 
rsize
 = 
˛¡
->
msize
 - 
P9_READDIRHDRSZ
;

831 i‡(
cou¡
 < 
rsize
)

832 
rsize
 = 
cou¡
;

834 
ªq
 = 
	`p9_˛õ¡_Ωc
(
˛¡
, 
P9_TREADDIR
, "dqd", 
fid
->fid,

835 
off£t
, 
rsize
);

836 i‡(
ªq
 =
NULL
) {

837 
îr
 = -
ENOMEM
;

838 
îr‹
;

841 
îr
 = 
	`p9pdu_ªadf
(
ªq
->
rc
, 
˛¡
->
¥Ÿo_vîsi⁄
, "D", &
cou¡
, &
d©≠å
);

842 i‡(
îr
) {

843 
‰ì_™d_îr‹
;

846 
	`p9_debug
(
TRANS
, "<<< RREADDIR cou¡ %d\n", 
cou¡
);

849 
	`memmove
(
d©a
, 
d©≠å
, 
cou¡
);

851 
	`p9_‰ì_ªq
(
ªq
);

852  
cou¡
;

854 
‰ì_™d_îr‹
:

855 
	`p9_‰ì_ªq
(
ªq
);

856 
îr‹
:

857  
îr
;

858 
	}
}

	@9p_net/device_if.h

23 #i‚de‡
_devi˚_if_h_


24 
	#_devi˚_if_h_


	)

27 
kobj›_desc
 
devi˚_¥obe_desc
;

29 
	tdevi˚_¥obe_t
(
	tdevi˚_t
 
	tdev
);

104 
__ölöe
 
	$DEVICE_PROBE
(
devi˚_t
 
dev
)

106 
kobj›_t
 
_m
;

107 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_¥obe
);

108  ((
devi˚_¥obe_t
 *Ë
_m
)(
dev
);

109 
	}
}

112 
kobj›_desc
 
devi˚_idítify_desc
;

114 
	tdevi˚_idítify_t
(
	tdrivî_t
 *
	tdrivî
, 
	tdevi˚_t
 
	t∑ª¡
);

141 
__ölöe
 
	$DEVICE_IDENTIFY
(
drivî_t
 *
drivî
, 
devi˚_t
 
∑ª¡
)

143 
kobj›_t
 
_m
;

144 
	`KOBJOPLOOKUP
(
drivî
->
›s
,
devi˚_idítify
);

145 ((
devi˚_idítify_t
 *Ë
_m
)(
drivî
, 
∑ª¡
);

146 
	}
}

149 
kobj›_desc
 
devi˚_©èch_desc
;

151 
	tdevi˚_©èch_t
(
	tdevi˚_t
 
	tdev
);

176 
__ölöe
 
	$DEVICE_ATTACH
(
devi˚_t
 
dev
)

178 
kobj›_t
 
_m
;

179 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_©èch
);

180  ((
devi˚_©èch_t
 *Ë
_m
)(
dev
);

181 
	}
}

184 
kobj›_desc
 
devi˚_dëach_desc
;

186 
	tdevi˚_dëach_t
(
	tdevi˚_t
 
	tdev
);

210 
__ölöe
 
	$DEVICE_DETACH
(
devi˚_t
 
dev
)

212 
kobj›_t
 
_m
;

213 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_dëach
);

214  ((
devi˚_dëach_t
 *Ë
_m
)(
dev
);

215 
	}
}

218 
kobj›_desc
 
devi˚_shutdown_desc
;

220 
	tdevi˚_shutdown_t
(
	tdevi˚_t
 
	tdev
);

236 
__ölöe
 
	$DEVICE_SHUTDOWN
(
devi˚_t
 
dev
)

238 
kobj›_t
 
_m
;

239 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_shutdown
);

240  ((
devi˚_shutdown_t
 *Ë
_m
)(
dev
);

241 
	}
}

244 
kobj›_desc
 
devi˚_su•íd_desc
;

246 
	tdevi˚_su•íd_t
(
	tdevi˚_t
 
	tdev
);

271 
__ölöe
 
	$DEVICE_SUSPEND
(
devi˚_t
 
dev
)

273 
kobj›_t
 
_m
;

274 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_su•íd
);

275  ((
devi˚_su•íd_t
 *Ë
_m
)(
dev
);

276 
	}
}

279 
kobj›_desc
 
devi˚_ªsume_desc
;

281 
	tdevi˚_ªsume_t
(
	tdevi˚_t
 
	tdev
);

301 
__ölöe
 
	$DEVICE_RESUME
(
devi˚_t
 
dev
)

303 
kobj›_t
 
_m
;

304 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_ªsume
);

305  ((
devi˚_ªsume_t
 *Ë
_m
)(
dev
);

306 
	}
}

309 
kobj›_desc
 
devi˚_quõs˚_desc
;

311 
	tdevi˚_quõs˚_t
(
	tdevi˚_t
 
	tdev
);

335 
__ölöe
 
	$DEVICE_QUIESCE
(
devi˚_t
 
dev
)

337 
kobj›_t
 
_m
;

338 
	`KOBJOPLOOKUP
(((
kobj_t
)
dev
)->
›s
,
devi˚_quõs˚
);

339  ((
devi˚_quõs˚_t
 *Ë
_m
)(
dev
);

340 
	}
}

	@9p_net/opt_cam.h

	@9p_net/protocol.c

10 
	~<sys/ty≥s.h
>

11 
	~"../9p.h
"

12 
	~"../˛õ¡.h
"

13 
	~"../¥Ÿocﬁ.h
"

15 
	#˝u_to_À16
(
x
Ë
	`ht⁄s
(x)

	)

16 
	#˝u_to_À32
(
x
Ë
	`ht⁄l
(x)

	)

17 
	#˝u_to_À64
(
x
Ë(x)

	)

18 
	#À16_to_˝u
(
x
Ë
	`¡ohs
(x)

	)

19 
	#À32_to_˝u
(
x
Ë
	`¡ohl
(x)

	)

20 
	#À64_to_˝u
(
x
Ë(x)

	)

23 
p9pdu_wrôef
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
, ...);

24 
p9°©_p9_‰ì
(
p9_w°©
 *
°buf
);

26 
	$p9°©_p9_‰ì
(
p9_w°©
 *
°buf
)

28 
	`p9_‰ì
(
°buf
->
«me
, 
	`°æí
(stbuf->name));

29 
	`p9_‰ì
(
°buf
->
uid
, (stbuf->uid));

30 
	`p9_‰ì
(
°buf
->
gid
, (stbuf->gid));

31 
	`p9_‰ì
(
°buf
->
muid
, (stbuf->muid));

32 
	`p9_‰ì
(
°buf
->
exãnsi⁄
, (stbuf->extension));

33 
	}
}

35 
size_t
 
	$pdu_ªad
(
p9_fˇŒ
 *
pdu
, *
d©a
, 
size_t
 
size
)

37 
size_t
 
Àn
 = 
	`mö
(
pdu
->
size
 -Ödu->
off£t
, size);

38 
	`mem˝y
(
d©a
, &
pdu
->
sd©a
[pdu->
off£t
], 
Àn
);

39 
pdu
->
off£t
 +
Àn
;

40  
size
 - 
Àn
;

41 
	}
}

43 
size_t
 
	$pdu_wrôe
(
p9_fˇŒ
 *
pdu
, c⁄° *
d©a
, 
size_t
 
size
)

45 
size_t
 
Àn
 = 
	`mö
(
pdu
->
ˇ∑côy
 -Ödu->
size
, size);

46 
	`mem˝y
(&
pdu
->
sd©a
[pdu->
size
], 
d©a
, 
Àn
);

47 
pdu
->
size
 +
Àn
;

48  
size
 - 
Àn
;

49 
	}
}

70 
	$p9pdu_vªadf
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
,

71 
va_li°
 
≠
)

73 c⁄° *
±r
;

74 
îrcode
 = 0;

76 
±r
 = 
fmt
; *ptr;Ötr++) {

77 *
±r
) {

79 
öt8_t
 *
vÆ
 = 
	`va_¨g
(
≠
, int8_t *);

80 i‡(
	`pdu_ªad
(
pdu
, 
vÆ
, (*val))) {

81 
îrcode
 = -
EFAULT
;

87 
öt16_t
 *
vÆ
 = 
	`va_¨g
(
≠
, int16_t *);

88 
öt16_t
 
À_vÆ
;

89 i‡(
	`pdu_ªad
(
pdu
, &
À_vÆ
, (le_val))) {

90 
îrcode
 = -
EFAULT
;

93 *
vÆ
 = 
	`À16_to_˝u
(
À_vÆ
);

97 
öt32_t
 *
vÆ
 = 
	`va_¨g
(
≠
, int32_t *);

98 
öt32_t
 
À_vÆ
;

99 i‡(
	`pdu_ªad
(
pdu
, &
À_vÆ
, (le_val))) {

100 
îrcode
 = -
EFAULT
;

103 *
vÆ
 = 
	`À32_to_˝u
(
À_vÆ
);

107 
öt64_t
 *
vÆ
 = 
	`va_¨g
(
≠
, int64_t *);

108 
öt64_t
 
À_vÆ
;

109 i‡(
	`pdu_ªad
(
pdu
, &
À_vÆ
, (le_val))) {

110 
îrcode
 = -
EFAULT
;

113 *
vÆ
 = 
	`À64_to_˝u
(
À_vÆ
);

117 **
•å
 = 
	`va_¨g
(
≠
, **);

118 
uöt16_t
 
Àn
;

120 
îrcode
 = 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
,

121 "w", &
Àn
);

122 i‡(
îrcode
)

125 *
•å
 = 
	`p9_mÆloc
(
Àn
 + 1);

126 i‡(*
•å
 =
NULL
) {

127 
îrcode
 = -
EFAULT
;

130 i‡(
	`pdu_ªad
(
pdu
, *
•å
, 
Àn
)) {

131 
îrcode
 = -
EFAULT
;

132 
	`p9_‰ì
(*
•å
, (*sptr));

133 *
•å
 = 
NULL
;

135 (*
•å
)[
Àn
] = 0;

139 
p9_qid
 *
qid
 =

140 
	`va_¨g
(
≠
, 
p9_qid
 *);

142 
îrcode
 = 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
, "bdq",

143 &
qid
->
ty≥
, &qid->
vîsi⁄
,

144 &
qid
->
∑th
);

148 
p9_w°©
 *
°buf
 =

149 
	`va_¨g
(
≠
, 
p9_w°©
 *);

151 
	`mem£t
(
°buf
, 0, (
p9_w°©
));

152 
°buf
->
n_uid
 = stbuf->
n_muid
 = 0;

153 
°buf
->
n_gid
 = 0;

155 
îrcode
 =

156 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
,

158 &
°buf
->
size
, &°buf->
ty≥
,

159 &
°buf
->
dev
, &°buf->
qid
,

160 &
°buf
->
mode
, &°buf->
©ime
,

161 &
°buf
->
mtime
, &°buf->
Àngth
,

162 &
°buf
->
«me
, &°buf->
uid
,

163 &
°buf
->
gid
, &°buf->
muid
,

164 &
°buf
->
exãnsi⁄
,

165 &
°buf
->
n_uid
, &°buf->
n_gid
,

166 &
°buf
->
n_muid
);

167 i‡(
îrcode
)

168 
	`p9°©_p9_‰ì
(
°buf
);

172 
uöt32_t
 *
cou¡
 = 
	`va_¨g
(
≠
, uint32_t *);

173 **
d©a
 = 
	`va_¨g
(
≠
, **);

175 
îrcode
 =

176 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
, "d", 
cou¡
);

177 i‡(!
îrcode
) {

178 *
cou¡
 = 
	`MIN
(*count,

179 
pdu
->
size
 -Ödu->
off£t
);

180 *
d©a
 = &
pdu
->
sd©a
[pdu->
off£t
];

185 
uöt16_t
 *
nw«me
 = 
	`va_¨g
(
≠
, uint16_t *);

186 ***
w«mes
 = 
	`va_¨g
(
≠
, ***);

188 
îrcode
 = 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
,

189 "w", 
nw«me
);

190 i‡(!
îrcode
) {

191 *
w«mes
 = 
	`p9_mÆloc
((*Ë* *
nw«me
);

192 i‡(!*
w«mes
)

193 
îrcode
 = -
ENOMEM
;

196 i‡(!
îrcode
) {

197 
i
;

199 
i
 = 0; i < *
nw«me
; i++) {

200 
îrcode
 =

201 
	`p9pdu_ªadf
(
pdu
,

202 
¥Ÿo_vîsi⁄
,

204 &(*
w«mes
)[
i
]);

205 i‡(
îrcode
)

210 i‡(
îrcode
) {

211 i‡(*
w«mes
) {

212 
i
;

214 
i
 = 0; i < *
nw«me
; i++)

215 
	`p9_‰ì
((*
w«mes
)[
i
], (*wnames[i]));

217 
	`p9_‰ì
(*
w«mes
, (*wnames));

218 *
w«mes
 = 
NULL
;

223 
uöt16_t
 *
nwqid
 = 
	`va_¨g
(
≠
, uint16_t *);

224 
p9_qid
 **
wqids
 =

225 
	`va_¨g
(
≠
, 
p9_qid
 **);

227 *
wqids
 = 
NULL
;

229 
îrcode
 =

230 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
, "w", 
nwqid
);

231 i‡(!
îrcode
) {

232 *
wqids
 =

233 
	`p9_mÆloc
(*
nwqid
 *

234 (
p9_qid
));

235 i‡(*
wqids
 =
NULL
)

236 
îrcode
 = -
ENOMEM
;

239 i‡(!
îrcode
) {

240 
i
;

242 
i
 = 0; i < *
nwqid
; i++) {

243 
îrcode
 =

244 
	`p9pdu_ªadf
(
pdu
,

245 
¥Ÿo_vîsi⁄
,

247 &(*
wqids
)[
i
]);

248 i‡(
îrcode
)

253 i‡(
îrcode
) {

254 
	`p9_‰ì
(*
wqids
, (*wqids));

255 *
wqids
 = 
NULL
;

260 
p9_°©_dŸl
 *
°buf
 =

261 
	`va_¨g
(
≠
, 
p9_°©_dŸl
 *);

263 
	`mem£t
(
°buf
, 0, (
p9_°©_dŸl
));

264 
îrcode
 =

265 
	`p9pdu_ªadf
(
pdu
, 
¥Ÿo_vîsi⁄
,

267 &
°buf
->
°_ªsu…_mask
,

268 &
°buf
->
qid
,

269 &
°buf
->
°_mode
,

270 &
°buf
->
°_uid
, &°buf->
°_gid
,

271 &
°buf
->
°_∆ök
,

272 &
°buf
->
°_rdev
, &°buf->
°_size
,

273 &
°buf
->
°_blksize
, &°buf->
°_blocks
,

274 &
°buf
->
°_©ime_£c
,

275 &
°buf
->
°_©ime_n£c
,

276 &
°buf
->
°_mtime_£c
,

277 &
°buf
->
°_mtime_n£c
,

278 &
°buf
->
°_˘ime_£c
,

279 &
°buf
->
°_˘ime_n£c
,

280 &
°buf
->
°_btime_£c
,

281 &
°buf
->
°_btime_n£c
,

282 &
°buf
->
°_gí
,

283 &
°buf
->
°_d©a_vîsi⁄
);

287 i‡((
¥Ÿo_vîsi⁄
 !
p9_¥Ÿo_2000u
) &&

288 (
¥Ÿo_vîsi⁄
 !
p9_¥Ÿo_2000L
))

295 i‡(
îrcode
)

299  
îrcode
;

300 
	}
}

303 
	$p9pdu_vwrôef
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
,

304 
va_li°
 
≠
)

306 c⁄° *
±r
;

307 
îrcode
 = 0;

309 
±r
 = 
fmt
; *ptr;Ötr++) {

310 *
±r
) {

312 
öt8_t
 
vÆ
 = 
	`va_¨g
(
≠
, );

313 i‡(
	`pdu_wrôe
(
pdu
, &
vÆ
, (val)))

314 
îrcode
 = -
EFAULT
;

318 
öt16_t
 
vÆ
 = 
	`˝u_to_À16
(
	`va_¨g
(
≠
, ));

319 i‡(
	`pdu_wrôe
(
pdu
, &
vÆ
, (val)))

320 
îrcode
 = -
EFAULT
;

324 
öt32_t
 
vÆ
 = 
	`˝u_to_À32
(
	`va_¨g
(
≠
, int32_t));

325 i‡(
	`pdu_wrôe
(
pdu
, &
vÆ
, (val)))

326 
îrcode
 = -
EFAULT
;

330 
öt64_t
 
vÆ
 = 
	`˝u_to_À64
(
	`va_¨g
(
≠
, int64_t));

331 i‡(
	`pdu_wrôe
(
pdu
, &
vÆ
, (val)))

332 
îrcode
 = -
EFAULT
;

336 c⁄° *
•å
 = 
	`va_¨g
(
≠
, const *);

337 
uöt16_t
 
Àn
 = 0;

338 i‡(
•å
)

339 
Àn
 = 
	`MIN
(
	`°æí
(
•å
), 16);

341 
îrcode
 = 
	`p9pdu_wrôef
(
pdu
, 
¥Ÿo_vîsi⁄
,

342 "w", 
Àn
);

343 i‡(!
îrcode
 && 
	`pdu_wrôe
(
pdu
, 
•å
, 
Àn
))

344 
îrcode
 = -
EFAULT
;

348 c⁄° 
p9_qid
 *
qid
 =

349 
	`va_¨g
(
≠
, c⁄° 
p9_qid
 *);

350 
îrcode
 =

351 
	`p9pdu_wrôef
(
pdu
, 
¥Ÿo_vîsi⁄
, "bdq",

352 
qid
->
ty≥
, qid->
vîsi⁄
,

353 
qid
->
∑th
);

356 c⁄° 
p9_w°©
 *
°buf
 =

357 
	`va_¨g
(
≠
, c⁄° 
p9_w°©
 *);

358 
îrcode
 =

359 
	`p9pdu_wrôef
(
pdu
, 
¥Ÿo_vîsi⁄
,

361 
°buf
->
size
, stbuf->
ty≥
,

362 
°buf
->
dev
, &°buf->
qid
,

363 
°buf
->
mode
, stbuf->
©ime
,

364 
°buf
->
mtime
, stbuf->
Àngth
,

365 
°buf
->
«me
, stbuf->
uid
,

366 
°buf
->
gid
, stbuf->
muid
,

367 
°buf
->
exãnsi⁄
, stbuf->
n_uid
,

368 
°buf
->
n_gid
, stbuf->
n_muid
);

371 
uöt16_t
 
nw«me
 = 
	`va_¨g
(
≠
, );

372 c⁄° **
w«mes
 = 
	`va_¨g
(
≠
, const **);

374 
îrcode
 = 
	`p9pdu_wrôef
(
pdu
, 
¥Ÿo_vîsi⁄
, "w",

375 
nw«me
);

376 i‡(!
îrcode
) {

377 
i
;

379 
i
 = 0; i < 
nw«me
; i++) {

380 
îrcode
 =

381 
	`p9pdu_wrôef
(
pdu
,

382 
¥Ÿo_vîsi⁄
,

384 
w«mes
[
i
]);

385 i‡(
îrcode
)

392 
uöt16_t
 
nwqid
 = 
	`va_¨g
(
≠
, );

393 
p9_qid
 *
wqids
 =

394 
	`va_¨g
(
≠
, 
p9_qid
 *);

396 
îrcode
 = 
	`p9pdu_wrôef
(
pdu
, 
¥Ÿo_vîsi⁄
, "w",

397 
nwqid
);

398 i‡(!
îrcode
) {

399 
i
;

401 
i
 = 0; i < 
nwqid
; i++) {

402 
îrcode
 =

403 
	`p9pdu_wrôef
(
pdu
,

404 
¥Ÿo_vîsi⁄
,

406 &
wqids
[
i
]);

407 i‡(
îrcode
)

414 
p9_üâr_dŸl
 *
p9©å
 = 
	`va_¨g
(
≠
,

415 
p9_üâr_dŸl
 *);

417 
îrcode
 = 
	`p9pdu_wrôef
(
pdu
, 
¥Ÿo_vîsi⁄
,

419 
p9©å
->
vÆid
,

420 
p9©å
->
mode
,

421 
p9©å
->
uid
,

422 
p9©å
->
gid
,

423 
p9©å
->
size
,

424 
p9©å
->
©ime_£c
,

425 
p9©å
->
©ime_n£c
,

426 
p9©å
->
mtime_£c
,

427 
p9©å
->
mtime_n£c
);

431 i‡((
¥Ÿo_vîsi⁄
 !
p9_¥Ÿo_2000u
) &&

432 (
¥Ÿo_vîsi⁄
 !
p9_¥Ÿo_2000L
))

439 i‡(
îrcode
)

443  
îrcode
;

444 
	}
}

446 
	$p9pdu_ªadf
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
, ...)

448 
va_li°
 
≠
;

449 
ªt
;

451 
	`va_°¨t
(
≠
, 
fmt
);

452 
ªt
 = 
	`p9pdu_vªadf
(
pdu
, 
¥Ÿo_vîsi⁄
, 
fmt
, 
≠
);

453 
	`va_íd
(
≠
);

455  
ªt
;

456 
	}
}

459 
	$p9pdu_wrôef
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
, ...)

461 
va_li°
 
≠
;

462 
ªt
;

464 
	`va_°¨t
(
≠
, 
fmt
);

465 
ªt
 = 
	`p9pdu_vwrôef
(
pdu
, 
¥Ÿo_vîsi⁄
, 
fmt
, 
≠
);

466 
	`va_íd
(
≠
);

468  
ªt
;

469 
	}
}

471 
	$p9°©_ªad
(
p9_˛õ¡
 *
˛¡
, *
buf
, 
Àn
, 
p9_w°©
 *
°
)

473 
p9_fˇŒ
 
Áke_pdu
;

474 
ªt
;

476 
Áke_pdu
.
size
 = 
Àn
;

477 
Áke_pdu
.
ˇ∑côy
 = 
Àn
;

478 
Áke_pdu
.
sd©a
 = 
buf
;

479 
Áke_pdu
.
off£t
 = 0;

481 
ªt
 = 
	`p9pdu_ªadf
(&
Áke_pdu
, 
˛¡
->
¥Ÿo_vîsi⁄
, "S", 
°
);

482 i‡(
ªt
) {

483 
	`p9_debug
(
P9_DEBUG_9P
, "<<<Ö9°©_ªad faûed: %d\n", 
ªt
);

486  
ªt
;

487 
	}
}

489 
	$p9pdu_¥ï¨e
(
p9_fˇŒ
 *
pdu
, 
öt8_t
 
ty≥
)

491 
pdu
->
id
 = 
ty≥
;

492  
	`p9pdu_wrôef
(
pdu
, 0, "dbw", 0, 
ty≥
);

493 
	}
}

495 
	$p9pdu_föÆize
(
p9_˛õ¡
 *
˛¡
, 
p9_fˇŒ
 *
pdu
)

497 
size
 = 
pdu
->size;

498 
îr
;

500 
pdu
->
size
 = 0;

501 
îr
 = 
	`p9pdu_wrôef
(
pdu
, 0, "d", 
size
);

502 
pdu
->
size
 = size;

504 
	`p9_debug
(
P9_DEBUG_9P
, ">>> size=%dÅype: %dÅag: %d\n",

505 
pdu
->
size
,Ödu->
id
,Ödu->
èg
);

507  
îr
;

508 
	}
}

510 
	$p9pdu_ª£t
(
p9_fˇŒ
 *
pdu
)

512 
pdu
->
off£t
 = 0;

513 
pdu
->
size
 = 0;

514 
	}
}

518 
	$p9dúít_ªad
(
p9_˛õ¡
 *
˛¡
, *
buf
, 
Àn
,

519 
p9_dúít
 *
dúít
)

521 
p9_fˇŒ
 
Áke_pdu
;

522 
ªt
;

523 *
«mïå
;

525 
Áke_pdu
.
size
 = 
Àn
;

526 
Áke_pdu
.
ˇ∑côy
 = 
Àn
;

527 
Áke_pdu
.
sd©a
 = 
buf
;

528 
Áke_pdu
.
off£t
 = 0;

530 
ªt
 = 
	`p9pdu_ªadf
(&
Áke_pdu
, 
˛¡
->
¥Ÿo_vîsi⁄
, "Qqbs", &
dúít
->
qid
,

531 &
dúít
->
d_off
, &dúít->
d_ty≥
, &
«mïå
);

532 i‡(
ªt
) {

533 
	`p9_debug
(
P9_DEBUG_9P
, "<<<Ö9dúít_ªad faûed: %d\n", 
ªt
);

534 
out
;

537 
	`°r˝y
(
dúít
->
d_«me
, 
«mïå
);

538 
	`p9_‰ì
(
«mïå
, (*nameptr));

540 
out
:

541  
Áke_pdu
.
off£t
;

542 
	}
}

	@9p_net/protocol.h

7 
p9pdu_vwrôef
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
,

8 
va_li°
 
≠
);

9 
p9pdu_ªadf
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
, ...);

10 
p9pdu_¥ï¨e
(
p9_fˇŒ
 *
pdu
, 
öt16_t
 
èg
, 
öt8_t
 
ty≥
);

11 
p9pdu_föÆize
(
p9_˛õ¡
 *
˛¡
, 
p9_fˇŒ
 *
pdu
);

12 
p9pdu_ª£t
(
p9_fˇŒ
 *
pdu
);

13 
size_t
 
pdu_ªad
(
p9_fˇŒ
 *
pdu
, *
d©a
, size_à
size
);

	@9p_net/test_cases.c

3 
	$maö
() {

5 
	`p9_˛õ¡_¸óã
();

10 
	}
}

	@9p_net/trans_virtio.c

5 
	~<sys/î∫o.h
>

6 
	~"../9p.h
"

7 
	~"../˛õ¡.h
"

8 
	~"../å™•‹t.h
"

9 
	~"../¥Ÿocﬁ.h
"

11 
	~<sys/moduÀ.h
>

12 
	~<sys/sgli°.h
>

13 
	~<sys/queue.h
>

14 
	~<machöe/bus.h
>

15 
	~<sys/bus.h
>

17 
	~"../../vútfs_bhyve/sys/dev/vútio/vútio.h
"

18 
	~"../../vútfs_bhyve/sys/dev/vútio/vútqueue.h
"

21 
	~<sys/c⁄dv¨.h
>

23 
	#VIRTQUEUE_NUM
 128

	)

26 
mtx
 
	gvútio_9p_lock
;

44 
	svch™_so·c
 {

45 
	möu£
;

46 
mtx
 
	mlock
;

47 
cv
 
	msubmô_cv
;

48 
mtx
 
	msubmô_cv_lock
;

49 
p9_˛õ¡
 *
	m˛õ¡
;

50 
devi˚_t
 
	mvdev
;

51 
vútqueue
 *
	mvq
;

52 
	mrög_bufs_avaû
;

53 
	mmax_n£gs
;

54 
sgli°
 *
	msg
;

56 
	mch™_«me_Àn
;

57 *
	mch™_«me
;

63 
	$p9_vútio_˛o£
(
p9_˛õ¡
 *
˛õ¡
)

65 
vch™_so·c
 *
ch™
 = 
˛õ¡
->
å™s
;

67 
	`mtx_lock
(&
vútio_9p_lock
);

68 i‡(
ch™
)

69 
ch™
->
öu£
 = 
Ál£
;

71 
	`mtx_u∆ock
(&
vútio_9p_lock
);

72 
	}
}

75 
	$p9_vútio_ˇn˚l
(
p9_˛õ¡
 *
˛õ¡
, 
p9_ªq_t
 *
ªq
)

78 
	}
}

88 
	$p9_vútio_ªque°
(
p9_˛õ¡
 *
˛õ¡
, 
p9_ªq_t
 *
ªq
)

90 
îr
, 
out
, 
ö
;

91 
vch™_so·c
 *
ch™
 = 
˛õ¡
->
å™s
;

93 
	`p9_debug
(
P9_DEBUG_TRANS
, "9p debug: virtioÑequest\n");

95 
ªq
->
°©us
 = 
REQ_STATUS_SENT
;

96 
ªq_ªåy
:

97 
	`mtx_lock_•ö
(&
ch™
->
lock
);

100 
out
 = 
	`sgli°_≠≥nd
(
ch™
->
sg
, 
ªq
->
tc
->
sd©a
,Ñeq->tc->
size
);

102 
ö
 = 
	`sgli°_≠≥nd
(
ch™
->
sg
, 
ªq
->
rc
->
sd©a
,Ñeq->rc->
ˇ∑côy
);

104 
îr
 = 
	`vútqueue_íqueue
(
ch™
->
vq
, 
ªq
, ch™->
sg
, 
ö
, 
out
);

110 i‡(
îr
 < 0) {

111 i‡(
îr
 =-
ENOSPC
) {

112 
ch™
->
rög_bufs_avaû
 = 0;

113 
	`mtx_u∆ock_•ö
(&
ch™
->
lock
);

115 
	`cv_waô
(&
ch™
->
submô_cv
, &ch™->
submô_cv_lock
);

116 
	`p9_debug
(
P9_DEBUG_TRANS
, "Retry virtioÑequest\n");

117 
ªq_ªåy
;

119 
	`mtx_u∆ock_•ö
(&
ch™
->
lock
);

120 
	`p9_debug
(
P9_DEBUG_TRANS
,

122  -
EIO
;

126 
	`p9_debug
(
P9_DEBUG_TRANS
, "virtioÑequest kicked\n");

129 
	}
}

133 
	$p9_öå_com∂ëe
(*
xsc
)

135 
vch™_so·c
 *
ch™
;

136 
vútqueue
 *
vq
;

137 
p9_ªq_t
 *
ªq
;

140 
ch™
 = (
vch™_so·c
 *)
xsc
;

141 
vq
 = 
ch™
->vq;

144 
	`mtx_lock_•ö
(&
ch™
->
lock
);

145 
ªq
 = 
	`vútqueue_dequeue
(
ch™
->
vq
, 
NULL
);

146 i‡(
ªq
 =
NULL
) {

147 
	`mtx_u∆ock_•ö
(&
ch™
->
lock
);

151 
ch™
->
rög_bufs_avaû
 = 1;

152 
	`mtx_u∆ock_•ö
(&
ch™
->
lock
);

154 
	`cv_sig«l
(&
ch™
->
submô_cv
);

155 
	`p9_˛õ¡_cb
(
ch™
->
˛õ¡
, 
ªq
);

156 
	}
}

160 
	ggaö
:

163 
p9_˛õ¡_cb
(
ch™
, 
ªq
);

165 i‡(
vútqueue_íabÀ_öå
(
vq
) != 0) {

166 
vútqueue_dißbÀ_öå
(
vq
);

167 
	gagaö
;

176 
	$vútio_Æloc_queue
(
vch™_so·c
 *
sc
)

178 
vq_Æloc_öfo
 
vq_öfo
;

179 
devi˚_t
 
dev
 = 
sc
->
vdev
;

181 
	`VQ_ALLOC_INFO_INIT
(&
vq_öfo
, 
sc
->
max_n£gs
,

182 
p9_öå_com∂ëe
, 
sc
, &sc->
vq
,

183 "%†ªque°", 
	`devi˚_gë_«meunô
(
dev
));

185  (
	`vútio_Æloc_vútqueues
(
dev
, 0, 1, &
vq_öfo
));

186 
	}
}

196 
	$p9_vútio_¥obe
(
devi˚_t
 
dev
)

198 i‡(
	`vútio_gë_devi˚_ty≥
(
dev
) != 0x09)

199  (
ENXIO
);

200 
	`devi˚_£t_desc
(
dev
, "VirtIO Trans FS ");

202  (
BUS_PROBE_DEFAULT
);

203 
	}
}

205 
vch™_so·c
 *
	gglobÆ_˘x
;

206 
	$p9_vútio_©èch
(
devi˚_t
 
dev
)

208 
uöt16_t
 
«me_Àn
;

209 
îr
;

210 
vch™_so·c
 *
ch™
;

212 
ch™
 = 
	`devi˚_gë_so·c
(
dev
);

213 
ch™
->
vdev
 = 
dev
;

216 
îr
 = 
	`vútio_Æloc_queue
(
ch™
);

218 i‡(
îr
 < 0) {

219 
out_p9_‰ì_vq
;

222 
	`mtx_öô
(&
ch™
->
lock
, "ch™_lock", 
NULL
, 
MTX_SPIN
);

224 
ch™
->
sg
 = 
	`sgli°_Æloc
(
VIRTQUEUE_NUM
, 
M_NOWAIT
);

226 i‡(
ch™
->
sg
 =
NULL
) {

227 
îr
 = 
ENOMEM
;

228 
	`¥ötf
("cannotállocate sglist\n");

229 
out_p9_‰ì_vq
;

232 
ch™
->
öu£
 = 
Ál£
;

239 
«me_Àn
 = 
	`°æí
("hostshare");

240 
ch™
->
ch™_«me
 = 
	`p9_mÆloc
(
«me_Àn
);

241 i‡(!
ch™
->
ch™_«me
) {

242 
îr
 = -
ENOMEM
;

243 
out_p9_‰ì_vq
;

246 
ch™
->
ch™_«me_Àn
 = 
«me_Àn
;

247 
ch™
->
ch™_«me
 ="hostshare";

251 
ch™
->
rög_bufs_avaû
 = 1;

254 
	`mtx_lock
(&
vútio_9p_lock
);

256 
	`mtx_u∆ock
(&
vútio_9p_lock
);

258 
îr
 = 
	`vútio_£tup_öå
(
dev
, 
INTR_ENTROPY
);

259 i‡(
îr
) {

260 
	`¥ötf
("cannot setup virtqueue interrupt\n");

261 
out_p9_‰ì_vq
;

263 
	`vútqueue_íabÀ_öå
(
ch™
->
vq
);

264 
globÆ_˘x
 = 
ch™
;

267 
out_p9_‰ì_vq
:

268 
	`p9_‰ì
(
ch™
->
ch™_«me
, 
«me_Àn
);

270 
	`p9_‰ì
(
ch™
, (*chan));

271  
îr
;

272 
	}
}

290 
	$p9_vútio_¸óã
(
p9_˛õ¡
 *
˛õ¡
)

292 
vch™_so·c
 *
ch™
;

293 
ªt
 = -
ENOENT
;

294 
found
 = 0;

296 
	`mtx_lock
(&
vútio_9p_lock
);

309 i‡(
globÆ_˘x
)

310 
ch™
 = 
globÆ_˘x
;

312 
	`mtx_u∆ock
(&
vútio_9p_lock
);

314 i‡(!
found
) {

315 
	`¥ötf
("nÿch™√l†avaûabÀ f‹ devi˚ %s\n", 
dev«me
);

316  
ªt
;

319 
˛õ¡
->
å™s
 = (*)
ch™
;

320 
˛õ¡
->
°©us
 = 
C⁄√˘ed
;

321 
ch™
->
˛õ¡
 = client;

324 
	}
}

332 
	$p9_vútio_ªmove
(
devi˚_t
 
vdev
)

334 
vch™_so·c
 *
ch™
 = 
	`devi˚_gë_so·c
(
vdev
);

336 
	`mtx_lock
(&
vútio_9p_lock
);

348 
ch™
->
öu£
 = 
Ál£
;

349 
	`mtx_u∆ock
(&
vútio_9p_lock
);

353 
	`p9_‰ì
(
ch™
->
ch™_«me
, 
	`°æí
(chan->chan_name));

355 
	}
}

357 
p9_å™s_moduÀ
 
	gp9_vútio_å™s
 = {

358 .
«me
 = "virtio",

359 .
	g¸óã
 = 
p9_vútio_¸óã
,

360 .
	g˛o£
 = 
p9_vútio_˛o£
,

361 .
	gªque°
 = 
p9_vútio_ªque°
,

362 .
	gˇn˚l
 = 
p9_vútio_ˇn˚l
,

363 .
	gdef
 = 1,

367 
p9_å™s_moduÀ
 *
	$v9fs_gë_å™s_by_«me
(*
s
)

372 ()
s
;

382  &
p9_vútio_å™s
;

384 
	}
}

386 
devi˚_mëhod_t
 
	gp9_vútio_mthds
[] = {

388 
DEVMETHOD
(
devi˚_¥obe
, 
p9_vútio_¥obe
),

389 
DEVMETHOD
(
devi˚_©èch
, 
p9_vútio_©èch
),

390 
DEVMETHOD
(
devi˚_dëach
, 
p9_vútio_ªmove
),

391 
DEVMETHOD_END


394 
drivî_t
 
	gp9_vútio_drv
 = {

396 
p9_vútio_mthds
,

397 (
vch™_so·c
)

399 
dev˛ass_t
 
	gp9_vútio_˛ass
;

402 
	$vútio_9p_modevít
(
moduÀ_t
 
mod
, 
ty≥
, *
unu£d
)

405 
îr‹
;

406 
îr‹
 = 0;

408 
ty≥
) {

409 
MOD_LOAD
: {

414 
MOD_UNLOAD
: {

418 
MOD_SHUTDOWN
:

421 
îr‹
 = 
EOPNOTSUPP
;

424  (
îr‹
);

425 
	}
}

427 
DRIVER_MODULE
(
vútio_blk
, 
vútio_pci
, 
p9_vútio_drv
, 
p9_vútio_˛ass
,

428 
vútio_9p_modevít
, 0);

429 
MODULE_VERSION
(
p9_vútio
, 1);

430 
MODULE_DEPEND
(
p9_vútio
, 
vútio
, 1, 1, 1);

	@client.h

2 #i‚de‡
NET_9P_CLIENT_H


3 
	#NET_9P_CLIENT_H


	)

5 
	#MAX_ERRNO
 30

	)

7 
	~<sys/∑øm.h
>

8 
	~<sys/î∫o.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/lock.h
>

11 
	~<sys/muãx.h
>

12 
	~<sys/c⁄dv¨.h
>

13 
	~<sys/queue.h
>

14 
	~<sys/sy°m.h
>

15 
	~<sys/mou¡.h
>

16 
	~<sys/∑øm.h
>

17 
	~<sys/mÆloc.h
>

18 
	~<sys/kî√l.h
>

19 
	~<sys/¥oc.h
>

20 
	~<machöe/°d¨g.h
>

22 
	~"9p.h
"

24 
	ep9_¥Ÿo_vîsi⁄s
{

25 
	mp9_¥Ÿo_Àgacy
,

26 
	mp9_¥Ÿo_2000u
,

27 
	mp9_¥Ÿo_2000L
,

30 
	ep9_å™s_°©us
 {

31 
	mC⁄√˘ed
,

32 
	mBegöDisc⁄√˘
,

33 
	mDisc⁄√˘ed
,

34 
	mHung
,

37 
	ep9_ªq_°©us_t
 {

38 
	mREQ_STATUS_IDLE
,

39 
	mREQ_STATUS_ALLOC
,

40 
	mREQ_STATUS_UNSENT
,

41 
	mREQ_STATUS_SENT
,

42 
	mREQ_STATUS_RCVD
,

43 
	mREQ_STATUS_FLSHD
,

44 
	mREQ_STATUS_ERROR
,

47 
	sp9_ªq_t
 {

48 
	m°©us
;

49 
	mt_îr
;

50 
p9_fˇŒ
 *
	mtc
;

51 
p9_fˇŒ
 *
	mrc
;

52 *
	maux
;

56 
	sp9_˛õ¡
 {

57 
mtx
 
	mlock
;

58 
cv
 
	mªq_cv
;

59 
	mmsize
;

60 
	m¥Ÿo_vîsi⁄
;

61 
p9_å™s_moduÀ
 *
	må™s_mod
;

62 
p9_å™s_°©us
 
	m°©us
;

63 *
	må™s
;

65 
uƒhdr
 *
	mfidpoﬁ
;

71 
	m«me
[32];

75 
	sp9_fid
 {

76 
p9_˛õ¡
 *
	m˛¡
;

77 
uöt32_t
 
	mfid
;

78 
	mmode
;

79 
p9_qid
 
	mqid
;

80 
uöt32_t
 
	miounô
;

81 
uid_t
 
	muid
;

82 *
	mrdú
;

91 
	sp9_dúít
 {

92 
p9_qid
 
	mqid
;

93 
uöt64_t
 
	md_off
;

94 
	md_ty≥
;

95 
	md_«me
[256];

100 
p9_˛õ¡
 *
p9_˛õ¡_¸óã
(
mou¡
 *
mp
);

101 
p9_˛õ¡_de°roy
(
p9_˛õ¡
 *
˛¡
);

102 
p9_fid
 *
p9_˛õ¡_©èch
(
p9_˛õ¡
 *
˛¡
);

103 
p9_˛õ¡_dëach
(
p9_fid
 *
fid
);

108 
p9_˛õ¡_›í
(
p9_fid
 *
fid
, 
mode
);

109 
p9_˛õ¡_˛o£
(
p9_fid
 *
fid
);

110 
p9_fid
 *
p9_˛õ¡_wÆk
(p9_fid *
ﬁdfid
, 
uöt16_t
 
nw«me
,

111 **
w«mes
, 
˛⁄e
);

113 
p9_˛õ¡_°©fs
(
p9_fid
 *
fid
, 
p9_r°©fs
 *
sb
);

115 
p9_˛õ¡_vîsi⁄
(
p9_˛õ¡
 *
˛¡
);

116 
p9_˛õ¡_ªaddú
(
p9_fid
 *
fid
, *
d©a
, 
uöt32_t
 
cou¡
, 
uöt64_t
 
off£t
);

117 
p9dúít_ªad
(
p9_˛õ¡
 *
˛¡
, *
buf
, 
Àn
,

118 
p9_dúít
 *
dúít
);

119 
p9_w°©
 *
p9_˛õ¡_°©
(
p9_fid
 *
fid
);

120 
p9_˛õ¡_w°©
(
p9_fid
 *
fid
, 
p9_w°©
 *
w°
);

121 
p9_˛õ¡_£èâr
(
p9_fid
 *
fid
, 
p9_üâr_dŸl
 *
©å
);

123 
p9_°©_dŸl
 *
p9_˛õ¡_gë©å
(
p9_fid
 *
fid
,

125 
uöt64_t
 
ªque°_mask
);

127 
p9_°©_dŸl
 *
p9_˛õ¡_gë©å
(
p9_fid
 *
fid
, 
uöt64_t
 
ªque°_mask
);

128 
p9_is_¥Ÿo_dŸu
(
p9_˛õ¡
 *
˛¡
);

129 
p9_is_¥Ÿo_dŸl
(
p9_˛õ¡
 *
˛¡
);

130 
p9_˛õ¡_vîsi⁄
(
p9_˛õ¡
 *
c
);

	@protocol.h

2 
	#p9_mÆloc
(
size
Ë
	`mÆloc
(size, 
M_TEMP
, 
M_NOWAIT
)

3 
	#p9_‰ì
(
±r
,
size
Ë
	`‰ì
’å, 
M_TEMP
)

4 
	#ERESTARTSYS
 10

	)

5 
	#NOCLIENT_ERROR
 12

	)

7 
p9pdu_vwrôef
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
,

8 
__va_li°
 
≠
);

9 
p9pdu_ªadf
(
p9_fˇŒ
 *
pdu
, 
¥Ÿo_vîsi⁄
, c⁄° *
fmt
, ...);

10 
p9pdu_¥ï¨e
(
p9_fˇŒ
 *
pdu
, 
öt8_t
 
ty≥
);

11 
p9pdu_föÆize
(
p9_˛õ¡
 *
˛¡
, 
p9_fˇŒ
 *
pdu
);

12 
p9pdu_ª£t
(
p9_fˇŒ
 *
pdu
);

13 
size_t
 
pdu_ªad
(
p9_fˇŒ
 *
pdu
, *
d©a
, size_à
size
);

15 
p9dúít_ªad
(
p9_˛õ¡
 *
˛¡
, *
buf
, 
Àn
,

16 
p9_dúít
 *
dúít
);

	@transport.h

2 #i‚de‡
NET_9P_TRANSPORT_H


3 
	#NET_9P_TRANSPORT_H


	)

5 
	sp9_å™s_moduÀ
 {

6 
SLIST_ENTRY
(
p9_å™s_moduÀ
Ë
	mli°
;

7 *
	m«me
;

8 
	mmaxsize
;

9 
	mdef
;

10 (*
	m¸óã
)(
	mp9_˛õ¡
 *);

11 (*
	m˛o£
Ë(
	mp9_˛õ¡
 *);

12 (*
	mªque°
Ë(
	mp9_˛õ¡
 *, 
p9_ªq_t
 *
	mªq
);

13 (*
	mˇn˚l
Ë(
	mp9_˛õ¡
 *, 
p9_ªq_t
 *
	mªq
);

14 (*
	mˇn˚Œed
)(
	mp9_˛õ¡
 *, 
p9_ªq_t
 *
	mªq
);

15 (*
	mzc_ªque°
)(
	mp9_˛õ¡
 *, 
	mp9_ªq_t
 *,

16 
	miov_ôî
 *, iov_iter *, , , );

19 
	gvútfs_£ssi⁄
;

20 
vútfs_ªgi°î_å™s
(
p9_å™s_moduÀ
 *
m
);

21 
vútfs_uƒegi°î_å™s
(
p9_å™s_moduÀ
 *
m
);

22 
vútfs_¥Ÿo_dŸl
(
vútfs_£ssi⁄
 *
p9s
);

23 
p9_å™s_moduÀ
 *
vútfs_gë_å™s_by_«me
(*
s
);

24 
p9_å™s_moduÀ
 *
vútfs_gë_deÁu…_å™s
();

25 
vútfs_put_å™s
(
p9_å™s_moduÀ
 *
m
);

	@/usr/include/arpa/inet.h

58 #i‚de‡
_ARPA_INET_H_


59 
	#_ARPA_INET_H_


	)

63 
	~<sys/cdefs.h
>

64 
	~<sys/_ty≥s.h
>

67 
	~<machöe/ídün.h
>

69 
	#INET_ADDRSTRLEN
 16

	)

70 
	#INET6_ADDRSTRLEN
 46

	)

72 #i‚de‡
_UINT16_T_DECLARED


73 
__uöt16_t
 
	tuöt16_t
;

74 
	#_UINT16_T_DECLARED


	)

77 #i‚de‡
_UINT32_T_DECLARED


78 
__uöt32_t
 
	tuöt32_t
;

79 
	#_UINT32_T_DECLARED


	)

82 #i‚de‡
_IN_ADDR_T_DECLARED


83 
uöt32_t
 
	tö_addr_t
;

84 
	#_IN_ADDR_T_DECLARED


	)

87 #i‚de‡
_IN_PORT_T_DECLARED


88 
uöt16_t
 
	tö_p‹t_t
;

89 
	#_IN_PORT_T_DECLARED


	)

92 #i‡
__BSD_VISIBLE


93 #i‚de‡
_SIZE_T_DECLARED


94 
__size_t
 
	tsize_t
;

95 
	#_SIZE_T_DECLARED


	)

103 #i‚de‡
_SOCKLEN_T_DECLARED


104 
__sockÀn_t
 
	tsockÀn_t
;

105 
	#_SOCKLEN_T_DECLARED


	)

108 #i‚de‡
_STRUCT_IN_ADDR_DECLARED


109 
	sö_addr
 {

110 
ö_addr_t
 
	ms_addr
;

112 
	#_STRUCT_IN_ADDR_DECLARED


	)

116 #i‡
__BSD_VISIBLE


117 
	#öë_addr
 
__öë_addr


	)

118 
	#öë_©⁄
 
__öë_©⁄


	)

119 
	#öë_ aof
 
__öë_ aof


	)

120 
	#öë_makóddr
 
__öë_makóddr


	)

121 
	#öë_√è
 
__öë_√è


	)

122 
	#öë_√tof
 
__öë_√tof


	)

123 
	#öë_√tw‹k
 
__öë_√tw‹k


	)

124 
	#öë_√t_¡›
 
__öë_√t_¡›


	)

125 
	#öë_√t_±⁄
 
__öë_√t_±⁄


	)

126 
	#öë_cidr_¡›
 
__öë_cidr_¡›


	)

127 
	#öë_cidr_±⁄
 
__öë_cidr_±⁄


	)

128 
	#öë_¡ﬂ
 
__öë_¡ﬂ


	)

129 
	#öë_¡ﬂ_r
 
__öë_¡ﬂ_r


	)

130 
	#öë_±⁄
 
__öë_±⁄


	)

131 
	#öë_¡›
 
__öë_¡›


	)

132 
	#öë_nßp_addr
 
__öë_nßp_addr


	)

133 
	#öë_nßp_¡ﬂ
 
__öë_nßp_¡ﬂ


	)

136 
	g__BEGIN_DECLS


137 #i‚de‡
_BYTEORDER_PROTOTYPED


138 
	#_BYTEORDER_PROTOTYPED


	)

139 
uöt32_t
 
ht⁄l
(uint32_t);

140 
uöt16_t
 
ht⁄s
(uint16_t);

141 
uöt32_t
 
¡ohl
(uint32_t);

142 
uöt16_t
 
¡ohs
(uint16_t);

145 
ö_addr_t
 
öë_addr
(const *);

146  *
öë_¡ﬂ
(
ö_addr
);

147 c⁄° *
öë_¡›
(, c⁄° * 
__ª°ri˘
, * __restrict,

148 
sockÀn_t
);

149 
öë_±⁄
(, c⁄° * 
__ª°ri˘
, * __restrict);

151 #i‡
__BSD_VISIBLE


152 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

153 
ö_addr_t
 
öë_ aof
(
ö_addr
);

154 
ö_addr
 
öë_makóddr
(
ö_addr_t
, in_addr_t);

155 * 
öë_√è
(
ö_addr_t
, *, 
size_t
);

156 
ö_addr_t
 
öë_√tof
(
ö_addr
);

157 
ö_addr_t
 
öë_√tw‹k
(const *);

158 *
öë_√t_¡›
(, c⁄° *, , *, 
size_t
);

159 
öë_√t_±⁄
(, c⁄° *, *, 
size_t
);

160 *
öë_¡ﬂ_r
(
ö_addr
, *
buf
, 
sockÀn_t
 
size
);

161 *
öë_cidr_¡›
(, c⁄° *, , *, 
size_t
);

162 
öë_cidr_±⁄
(, const *, *, *);

163 
öë_nßp_addr
(const *, *, );

164 *
öë_nßp_¡ﬂ
(, const *, *);

166 
	g__END_DECLS


168 #i‚de‡
_BYTEORDER_FUNC_DEFINED


169 
	#_BYTEORDER_FUNC_DEFINED


	)

170 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

171 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

172 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

173 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

	@/usr/include/ctype.h

41 #i‚de‡
_CTYPE_H_


42 
	#_CTYPE_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/_ty≥s.h
>

46 
	~<_˘y≥.h
>

48 
__BEGIN_DECLS


49 
iß um
();

50 
ißÕha
();

51 
is˙ål
();

52 
isdigô
();

53 
isgøph
();

54 
i¶owî
();

55 
i•röt
();

56 
i•un˘
();

57 
is•a˚
();

58 
isuµî
();

59 
isxdigô
();

60 
tﬁowî
();

61 
touµî
();

63 #i‡
__XSI_VISIBLE


64 
ißscii
();

65 
tﬂscii
();

68 #i‡
__ISO_C_VISIBLE
 >= 1999

69 
isbœnk
();

72 #i‡
__BSD_VISIBLE


73 
digôtoöt
();

74 
ishexnumbî
();

75 
isideogøm
();

76 
i¢umbî
();

77 
i•h⁄ogøm
();

78 
i§u√
();

79 
is•ecül
();

82 #i‡
__POSIX_VISIBLE
 >200809 || 
deföed
(
_XLOCALE_H_
)

83 
	~<xloˇÀ/_˘y≥.h
>

85 
	g__END_DECLS


87 #i‚de‡
__˝lu•lus


88 
	#iß um
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
|
_CTYPE_D
)

	)

89 
	#ißÕha
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_A
)

	)

90 
	#is˙ål
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_C
)

	)

91 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_D
Ë

	)

92 
	#isgøph
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_G
)

	)

93 
	#i¶owî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_L
)

	)

94 
	#i•röt
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_R
)

	)

95 
	#i•un˘
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_P
)

	)

96 
	#is•a˚
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_S
)

	)

97 
	#isuµî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_U
)

	)

98 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_CTYPE_X
Ë

	)

99 
	#tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

100 
	#touµî
(
c
Ë
	`__sbtouµî
(c)

	)

103 #i‡
__XSI_VISIBLE


115 
	#_tﬁowî
(
c
Ë
	`__sbtﬁowî
(c)

	)

116 
	#_touµî
(
c
Ë
	`__sbtouµî
(c)

	)

117 
	#ißscii
(
c
Ë(((cË& ~0x7FË=0)

	)

118 
	#tﬂscii
(
c
Ë((cË& 0x7F)

	)

121 #i‡
__ISO_C_VISIBLE
 >1999 && !
deföed
(
__˝lu•lus
)

122 
	#isbœnk
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_B
)

	)

125 #i‡
__BSD_VISIBLE


126 
	#digôtoöt
(
c
Ë
	`__sbmaskru√
((c), 0xFF)

	)

127 
	#ishexnumbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_X
)

	)

128 
	#isideogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_I
)

	)

129 
	#i¢umbî
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_D
)

	)

130 
	#i•h⁄ogøm
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_Q
)

	)

131 
	#i§u√
(
c
Ë
	`__sbi°y≥
((c), 0xFFFFFF00L)

	)

132 
	#is•ecül
(
c
Ë
	`__sbi°y≥
((c), 
_CTYPE_T
)

	)

	@/usr/include/err.h

33 #i‚de‡
_ERR_H_


34 
	#_ERR_H_


	)

43 
	~<sys/cdefs.h
>

44 
	~<sys/_ty≥s.h
>

46 
__BEGIN_DECLS


47 
	$îr
(, c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(2, 3);

48 
	$vîr
(, c⁄° *, 
__va_li°
Ë
__dód2
 
	`__¥ötf0like
(2, 0);

49 
	$îrc
(, , c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(3, 4);

50 
	$vîrc
(, , c⁄° *, 
__va_li°
Ë
__dód2


51 
	`__¥ötf0like
(3, 0);

52 
	$îrx
(, c⁄° *, ...Ë
__dód2
 
	`__¥ötf0like
(2, 3);

53 
	$vîrx
(, c⁄° *, 
__va_li°
Ë
__dód2
 
	`__¥ötf0like
(2, 0);

54 
	$w¨n
(c⁄° *, ...Ë
	`__¥ötf0like
(1, 2);

55 
	$vw¨n
(c⁄° *, 
__va_li°
Ë
	`__¥ötf0like
(1, 0);

56 
	$w¨nc
(, c⁄° *, ...Ë
	`__¥ötf0like
(2, 3);

57 
	$vw¨nc
(, c⁄° *, 
__va_li°
Ë
	`__¥ötf0like
(2, 0);

58 
	$w¨nx
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

59 
	$vw¨nx
(c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

60 
	`îr_£t_fûe
(*);

61 
	`îr_£t_exô
((*)());

62 
__END_DECLS


	@/usr/include/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__POSIX_VISIBLE
 >= 200809

100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

117 #i‡
__POSIX_VISIBLE
 >= 200809

118 
	#O_DIRECTORY
 0x00020000

	)

119 
	#O_EXEC
 0x00040000

	)

121 #ifdef 
_KERNEL


122 
	#FEXEC
 
O_EXEC


	)

125 #i‡
__POSIX_VISIBLE
 >= 200809

127 
	#O_TTY_INIT
 0x00080000

	)

129 
	#O_CLOEXEC
 0x00100000

	)

136 #ifde‡
_KERNEL


138 
	#FFLAGS
(
oÊags
Ë((oÊagsË& 
O_EXEC
 ? (oÊagsË: (oÊagsË+ 1)

	)

139 
	#OFLAGS
(
fÊags
Ë((fÊagsË& 
O_EXEC
 ? (fÊagsË: (fÊagsË- 1)

	)

142 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

144 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

146 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

147 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

153 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

154 #unde‡
FCNTLFLAGS


155 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

156 
O_DIRECT
)

	)

165 #i‡
__BSD_VISIBLE


166 
	#FAPPEND
 
O_APPEND


	)

167 
	#FASYNC
 
O_ASYNC


	)

168 
	#FFSYNC
 
O_FSYNC


	)

169 
	#FNONBLOCK
 
O_NONBLOCK


	)

170 
	#FNDELAY
 
O_NONBLOCK


	)

171 
	#O_NDELAY
 
O_NONBLOCK


	)

180 #i‡
__BSD_VISIBLE


182 
	#FRDAHEAD
 
O_CREAT


	)

185 #i‡
__POSIX_VISIBLE
 >= 200809

191 
	#AT_FDCWD
 -100

	)

196 
	#AT_EACCESS
 0x100

	)

197 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

198 
	#AT_SYMLINK_FOLLOW
 0x400

	)

199 
	#AT_REMOVEDIR
 0x800

	)

207 
	#F_DUPFD
 0

	)

208 
	#F_GETFD
 1

	)

209 
	#F_SETFD
 2

	)

210 
	#F_GETFL
 3

	)

211 
	#F_SETFL
 4

	)

212 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

213 
	#F_GETOWN
 5

	)

214 
	#F_SETOWN
 6

	)

216 #i‡
__BSD_VISIBLE


217 
	#F_OGETLK
 7

	)

218 
	#F_OSETLK
 8

	)

219 
	#F_OSETLKW
 9

	)

220 
	#F_DUP2FD
 10

	)

222 
	#F_GETLK
 11

	)

223 
	#F_SETLK
 12

	)

224 
	#F_SETLKW
 13

	)

225 #i‡
__BSD_VISIBLE


226 
	#F_SETLK_REMOTE
 14

	)

227 
	#F_READAHEAD
 15

	)

228 
	#F_RDAHEAD
 16

	)

230 #i‡
__POSIX_VISIBLE
 >= 200809

231 
	#F_DUPFD_CLOEXEC
 17

	)

233 #i‡
__BSD_VISIBLE


234 
	#F_DUP2FD_CLOEXEC
 18

	)

238 
	#FD_CLOEXEC
 1

	)

241 
	#F_RDLCK
 1

	)

242 
	#F_UNLCK
 2

	)

243 
	#F_WRLCK
 3

	)

244 #i‡
__BSD_VISIBLE


245 
	#F_UNLCKSYS
 4

	)

246 
	#F_CANCEL
 5

	)

248 #ifde‡
_KERNEL


249 
	#F_WAIT
 0x010

	)

250 
	#F_FLOCK
 0x020

	)

251 
	#F_POSIX
 0x040

	)

252 
	#F_REMOTE
 0x080

	)

253 
	#F_NOINTR
 0x100

	)

260 
	sÊock
 {

261 
off_t
 
l_°¨t
;

262 
off_t
 
l_Àn
;

263 
pid_t
 
l_pid
;

264 
l_ty≥
;

265 
l_whí˚
;

266 
l_sysid
;

269 #i‡
__BSD_VISIBLE


274 
	s__oÊock
 {

275 
off_t
 
l_°¨t
;

276 
off_t
 
l_Àn
;

277 
pid_t
 
l_pid
;

278 
l_ty≥
;

279 
l_whí˚
;

283 #i‡
__BSD_VISIBLE


285 
	#LOCK_SH
 0x01

	)

286 
	#LOCK_EX
 0x02

	)

287 
	#LOCK_NB
 0x04

	)

288 
	#LOCK_UN
 0x08

	)

291 #i‡
__POSIX_VISIBLE
 >= 200112

295 
	#POSIX_FADV_NORMAL
 0

	)

296 
	#POSIX_FADV_RANDOM
 1

	)

297 
	#POSIX_FADV_SEQUENTIAL
 2

	)

298 
	#POSIX_FADV_WILLNEED
 3

	)

299 
	#POSIX_FADV_DONTNEED
 4

	)

300 
	#POSIX_FADV_NOREUSE
 5

	)

303 #i‚de‡
_KERNEL


304 
__BEGIN_DECLS


305 
	`›í
(const *, , ...);

306 
	`¸ót
(c⁄° *, 
mode_t
);

307 
	`f˙é
(, , ...);

308 #i‡
__BSD_VISIBLE


309 
	`Êock
(, );

311 #i‡
__POSIX_VISIBLE
 >= 200809

312 
	`›í©
(, const *, , ...);

314 #i‡
__POSIX_VISIBLE
 >= 200112

315 
	`posix_Ádvi£
(, 
off_t
, off_t, );

316 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

318 
__END_DECLS


	@/usr/include/geom/geom.h

38 #i‚de‡
_GEOM_GEOM_H_


39 
	#_GEOM_GEOM_H_


	)

41 
	~<sys/lock.h
>

42 
	~<sys/muãx.h
>

43 
	~<sys/sx.h
>

44 
	~<sys/queue.h
>

45 
	~<sys/ioccom.h
>

46 
	~<sys/c⁄f.h
>

47 
	~<sys/moduÀ.h
>

49 
	gg_˛ass
;

50 
	gg_geom
;

51 
	gg_c⁄sumî
;

52 
	gg_¥ovidî
;

53 
	gg_°©
;

54 
	gthªad
;

55 
	gbio
;

56 
	gsbuf
;

57 
	gg˘l_ªq
;

58 
	gg_c⁄fig¨gs
;

60 
	tg_c⁄fig_t
 (
	tg_c⁄fig¨gs
 *
	tˇ
);

61 
	tg_˘l_ªq_t
 (
	tg˘l_ªq
 *, 
	tg_˛ass
 *
	t˝
, c⁄° *
	tvîb
);

62 
	tg_˘l_¸óã_geom_t
 (
	tg˘l_ªq
 *, 
	tg_˛ass
 *
	t˝
, 
	tg_¥ovidî
 *
	tµ
);

63 
	tg_˘l_de°roy_geom_t
 (
	tg˘l_ªq
 *, 
	tg_˛ass
 *
	t˝
, 
	tg_geom
 *
	tgp
);

64 
	tg_˘l_c⁄fig_geom_t
 (
	tg˘l_ªq
 *, 
	tg_geom
 *
	tgp
, c⁄° *
	tvîb
);

65 
	tg_öô_t
 (
	tg_˛ass
 *
	tmp
);

66 
	tg_föi_t
 (
	tg_˛ass
 *
	tmp
);

67 
g_geom
 * 
	tg_è°e_t
 (
	tg_˛ass
 *, 
	tg_¥ovidî
 *, 
	tÊags
);

68 
	tg_io˘l_t
(
	tg_¥ovidî
 *
	tµ
, 
	tu_l⁄g
 
	tcmd
, *
	td©a
, 
	tfÊag
, 
	tthªad
 *
	ttd
);

69 
	#G_TF_NORMAL
 0

	)

70 
	#G_TF_INSIST
 1

	)

71 
	#G_TF_TRANSPARENT
 2

	)

72 
	tg_ac˚ss_t
 (
	tg_¥ovidî
 *, , , );

74 
	tg_‹ph™_t
 (
	tg_c⁄sumî
 *);

76 
	tg_°¨t_t
 (
	tbio
 *);

77 
	tg_•oûed_t
 (
	tg_c⁄sumî
 *);

78 
	tg_©åch™ged_t
 (
	tg_c⁄sumî
 *, c⁄° *
	t©å
);

79 
	tg_¥ovg⁄e_t
 (
	tg_¥ovidî
 *);

80 
	tg_dumpc⁄f_t
 (
	tsbuf
 *, c⁄° *
	tödít
, 
	tg_geom
 *,

81 
	tg_c⁄sumî
 *, 
	tg_¥ovidî
 *);

82 
	tg_ªsize_t
(
	tg_c⁄sumî
 *
	t˝
);

91 
	sg_˛ass
 {

92 c⁄° *
	m«me
;

93 
u_öt
 
	mvîsi⁄
;

94 
u_öt
 
	m•¨e0
;

95 
g_è°e_t
 *
	mè°e
;

96 
g_c⁄fig_t
 *
	mc⁄fig
;

97 
g_˘l_ªq_t
 *
	m˘Ãeq
;

98 
g_öô_t
 *
	möô
;

99 
g_föi_t
 *
	mföi
;

100 
g_˘l_de°roy_geom_t
 *
	mde°roy_geom
;

104 
g_°¨t_t
 *
	m°¨t
;

105 
g_•oûed_t
 *
	m•oûed
;

106 
g_©åch™ged_t
 *
	m©åch™ged
;

107 
g_dumpc⁄f_t
 *
	mdumpc⁄f
;

108 
g_ac˚ss_t
 *
	mac˚ss
;

109 
g_‹ph™_t
 *
	m‹ph™
;

110 
g_io˘l_t
 *
	mio˘l
;

111 
g_¥ovg⁄e_t
 *
	m¥ovidîg⁄e
;

112 
g_ªsize_t
 *
	mªsize
;

113 *
	m•¨e1
;

114 *
	m•¨e2
;

118 
LIST_ENTRY
(
g_˛ass
Ë
	m˛ass
;

119 
LIST_HEAD
(,
g_geom
Ë
	mgeom
;

122 
	#G_VERSION_00
 0x19950323

	)

123 
	#G_VERSION_01
 0x20041207

	)

124 
	#G_VERSION
 
G_VERSION_01


	)

129 
	sg_geom
 {

130 *
	m«me
;

131 
g_˛ass
 *
	m˛ass
;

132 
LIST_ENTRY
(
g_geom
Ë
	mgeom
;

133 
LIST_HEAD
(,
g_c⁄sumî
Ë
	mc⁄sumî
;

134 
LIST_HEAD
(,
g_¥ovidî
Ë
	m¥ovidî
;

135 
TAILQ_ENTRY
(
g_geom
Ë
	mgeoms
;

136 
	mønk
;

137 
g_°¨t_t
 *
	m°¨t
;

138 
g_•oûed_t
 *
	m•oûed
;

139 
g_©åch™ged_t
 *
	m©åch™ged
;

140 
g_dumpc⁄f_t
 *
	mdumpc⁄f
;

141 
g_ac˚ss_t
 *
	mac˚ss
;

142 
g_‹ph™_t
 *
	m‹ph™
;

143 
g_io˘l_t
 *
	mio˘l
;

144 
g_¥ovg⁄e_t
 *
	m¥ovidîg⁄e
;

145 
g_ªsize_t
 *
	mªsize
;

146 *
	m•¨e0
;

147 *
	m•¨e1
;

148 *
	mso·c
;

149 
	mÊags
;

150 
	#G_GEOM_WITHER
 1

	)

151 
	#G_GEOM_VOLATILE_BIO
 2

	)

159 
	sg_bioq
 {

160 
TAILQ_HEAD
(, 
bio
Ë
	mbio_queue
;

161 
mtx
 
	mbio_queue_lock
;

162 
	mbio_queue_Àngth
;

171 
	sg_c⁄sumî
 {

172 
g_geom
 *
	mgeom
;

173 
LIST_ENTRY
(
g_c⁄sumî
Ë
	mc⁄sumî
;

174 
g_¥ovidî
 *
	m¥ovidî
;

175 
LIST_ENTRY
(
g_c⁄sumî
Ë
	mc⁄sumîs
;

176 
	ma¸
, 
	macw
, 
	ma˚
;

177 
	mÊags
;

178 
	#G_CF_SPOILED
 0x1

	)

179 
	#G_CF_ORPHAN
 0x4

	)

180 
	#G_CF_DIRECT_SEND
 0x10

	)

181 
	#G_CF_DIRECT_RECEIVE
 0x20

	)

182 
dev°©
 *
	m°©
;

183 
u_öt
 
	mn°¨t
, 
	m√nd
;

186 *
	m¥iv©e
;

187 
u_öt
 
	mödex
;

193 
	sg_¥ovidî
 {

194 *
	m«me
;

195 
LIST_ENTRY
(
g_¥ovidî
Ë
	m¥ovidî
;

196 
g_geom
 *
	mgeom
;

197 
LIST_HEAD
(,
g_c⁄sumî
Ë
	mc⁄sumîs
;

198 
	ma¸
, 
	macw
, 
	ma˚
;

199 
	mîr‹
;

200 
TAILQ_ENTRY
(
g_¥ovidî
Ë
	m‹ph™
;

201 
off_t
 
	mmedüsize
;

202 
u_öt
 
	m£˘‹size
;

203 
u_öt
 
	m°rùesize
;

204 
u_öt
 
	m°rùeoff£t
;

205 
dev°©
 *
	m°©
;

206 
u_öt
 
	mn°¨t
, 
	m√nd
;

207 
u_öt
 
	mÊags
;

208 
	#G_PF_WITHER
 0x2

	)

209 
	#G_PF_ORPHAN
 0x4

	)

210 
	#G_PF_ACCEPT_UNMAPPED
 0x8

	)

211 
	#G_PF_DIRECT_SEND
 0x10

	)

212 
	#G_PF_DIRECT_RECEIVE
 0x20

	)

215 *
	m¥iv©e
;

216 
u_öt
 
	mödex
;

224 
	sg_˛assifõr_hook
 {

225 
TAILQ_ENTRY
(
g_˛assifõr_hook
Ë
	mlök
;

226 (*
	mfunc
)(*
	m¨g
, 
bio
 *
	mbp
);

227 *
	m¨g
;

231 
	#G_STATE_FAILED
 0

	)

232 
	#G_STATE_REBUILD
 1

	)

233 
	#G_STATE_RESYNC
 2

	)

234 
	#G_STATE_ACTIVE
 3

	)

237 
	gcdev
;

238 
g_dev_¥öt
();

239 
g_dev_phy•©h_ch™ged
();

240 
g_¥ovidî
 *
g_dev_gë¥ovidî
(
cdev
 *
dev
);

243 
g_åa˚
(
Àvñ
, const *, ...);

244 
	#G_T_TOPOLOGY
 1

	)

245 
	#G_T_BIO
 2

	)

246 
	#G_T_ACCESS
 4

	)

250 
	tg_evít_t
(*, 
	tÊag
);

251 
	#EV_CANCEL
 1

	)

252 
g_po°_evít
(
g_evít_t
 *
func
, *
¨g
, 
Êag
, ...);

253 
g_waôf‹_evít
(
g_evít_t
 *
func
, *
¨g
, 
Êag
, ...);

254 
g_ˇn˚l_evít
(*
ªf
);

255 
g_©å_ch™ged
(
g_¥ovidî
 *
µ
, c⁄° *
©å
, 
Êag
);

256 
g_medü_ch™ged
(
g_¥ovidî
 *
µ
, 
Êag
);

257 
g_medü_g⁄e
(
g_¥ovidî
 *
µ
, 
Êag
);

258 
g_‹ph™_¥ovidî
(
g_¥ovidî
 *
µ
, 
îr‹
);

259 
g_waôidÀlock
();

262 
g_ac˚ss
(
g_c⁄sumî
 *
˝
, 
ƒód
, 
nwrôe
, 
√x˛
);

263 
g_©èch
(
g_c⁄sumî
 *
˝
, 
g_¥ovidî
 *
µ
);

264 
g_com∑ª_«mes
(c⁄° *
«mó
, c⁄° *
«meb
);

265 
g_de°roy_c⁄sumî
(
g_c⁄sumî
 *
˝
);

266 
g_de°roy_geom
(
g_geom
 *
µ
);

267 
g_de°roy_¥ovidî
(
g_¥ovidî
 *
µ
);

268 
g_dëach
(
g_c⁄sumî
 *
˝
);

269 
g_îr‹_¥ovidî
(
g_¥ovidî
 *
µ
, 
îr‹
);

270 
g_¥ovidî
 *
g_¥ovidî_by_«me
(c⁄° *
¨g
);

271 
g_gë©å__
(c⁄° *
©å
, 
g_c⁄sumî
 *
˝
, *
v¨
, 
Àn
);

272 
	#g_gë©å
(
a
, 
c
, 
v
Ë
	`g_gë©å__
(◊), (c), (v),  *(v))

	)

273 
g_h™dÀ©å
(
bio
 *
bp
, c⁄° *
©åibuã
, c⁄° *
vÆ
,

274 
Àn
);

275 
g_h™dÀ©å_öt
(
bio
 *
bp
, c⁄° *
©åibuã
, 
vÆ
);

276 
g_h™dÀ©å_off_t
(
bio
 *
bp
, c⁄° *
©åibuã
, 
off_t
 
vÆ
);

277 
g_h™dÀ©å_uöt16_t
(
bio
 *
bp
, c⁄° *
©åibuã
, 
uöt16_t
 
vÆ
);

278 
g_h™dÀ©å_°r
(
bio
 *
bp
, c⁄° *
©åibuã
, c⁄° *
°r
);

279 
g_c⁄sumî
 * 
g_√w_c⁄sumî
(
g_geom
 *
gp
);

280 
g_geom
 * 
	$g_√w_geomf
(
g_˛ass
 *
mp
, c⁄° *
fmt
, ...)

281 
	`__¥ötÊike
(2, 3);

282 
g_¥ovidî
 * 
	$g_√w_¥ovidîf
(
g_geom
 *
gp
, c⁄° *
fmt
, ...)

283 
	`__¥ötÊike
(2, 3);

284 
	`g_ªsize_¥ovidî
(
g_¥ovidî
 *
µ
, 
off_t
 
size
);

285 
	`g_ªè°e
(
g_˛ass
 *
mp
);

286 
	`g_•oû
(
g_¥ovidî
 *
µ
, 
g_c⁄sumî
 *
˝
);

287 
	`g_°d_ac˚ss
(
g_¥ovidî
 *
µ
, 
dr
, 
dw
, 
de
);

288 
	`g_°d_d⁄e
(
bio
 *
bp
);

289 
	`g_°d_•oûed
(
g_c⁄sumî
 *
˝
);

290 
	`g_wôhî_geom
(
g_geom
 *
gp
, 
îr‹
);

291 
	`g_wôhî_geom_˛o£
(
g_geom
 *
gp
, 
îr‹
);

292 
	`g_wôhî_¥ovidî
(
g_¥ovidî
 *
µ
, 
îr‹
);

294 #i‡
	`deföed
(
DIAGNOSTIC
Ë|| deföed(
DDB
)

295 
	`g_vÆid_obj
(c⁄° *
±r
);

297 #ifde‡
DIAGNOSTIC


298 
	#G_VALID_CLASS
(
foo
) \

299 
	`KASSERT
(
	`g_vÆid_obj
(
foo
Ë=1, ("%∞i†nŸá g_˛ass", foo))

	)

300 
	#G_VALID_GEOM
(
foo
) \

301 
	`KASSERT
(
	`g_vÆid_obj
(
foo
Ë=2, ("%∞i†nŸá g_geom", foo))

	)

302 
	#G_VALID_CONSUMER
(
foo
) \

303 
	`KASSERT
(
	`g_vÆid_obj
(
foo
Ë=3, ("%∞i†nŸá g_c⁄sumî", foo))

	)

304 
	#G_VALID_PROVIDER
(
foo
) \

305 
	`KASSERT
(
	`g_vÆid_obj
(
foo
Ë=4, ("%∞i†nŸá g_¥ovidî", foo))

	)

307 
	#G_VALID_CLASS
(
foo
Ëdÿ{ 
	}
} 0)

	)

308 
	#G_VALID_GEOM
(
foo
Ëdÿ{ } 0)

	)

309 
	#G_VALID_CONSUMER
(
foo
Ëdÿ{ } 0)

	)

310 
	#G_VALID_PROVIDER
(
foo
Ëdÿ{ } 0)

	)

313 
g_modevít
(
moduÀ_t
, , *);

316 
bio
 * 
g_˛⁄e_bio
(bio *);

317 
bio
 * 
g_du∂iˇã_bio
(bio *);

318 
g_de°roy_bio
(
bio
 *);

319 
g_io_dñivî
(
bio
 *
bp
, 
îr‹
);

320 
g_io_gë©å
(c⁄° *
©å
, 
g_c⁄sumî
 *
˝
, *
Àn
, *
±r
);

321 
g_io_Êush
(
g_c⁄sumî
 *
˝
);

322 
g_ªgi°î_˛assifõr
(
g_˛assifõr_hook
 *
hook
);

323 
g_uƒegi°î_˛assifõr
(
g_˛assifõr_hook
 *
hook
);

324 
g_io_ªque°
(
bio
 *
bp
, 
g_c⁄sumî
 *
˝
);

325 
bio
 *
g_√w_bio
();

326 
bio
 *
g_Æloc_bio
();

327 * 
g_ªad_d©a
(
g_c⁄sumî
 *
˝
, 
off_t
 
off£t
, off_à
Àngth
, *
îr‹
);

328 
g_wrôe_d©a
(
g_c⁄sumî
 *
˝
, 
off_t
 
off£t
, *
±r
, off_à
Àngth
);

329 
g_dñëe_d©a
(
g_c⁄sumî
 *
˝
, 
off_t
 
off£t
, off_à
Àngth
);

330 
g_¥öt_bio
(
bio
 *
bp
);

334 #ifde‡
_KERNEL


336 
sx
 
t›ﬁogy_lock
;

338 
	sg_kî√ldump
 {

339 
off_t
 
	moff£t
;

340 
off_t
 
	mÀngth
;

341 
dum≥röfo
 
	mdi
;

344 
MALLOC_DECLARE
(
M_GEOM
);

346 
__ölöe
 *

347 
	$g_mÆloc
(
size
, 
Êags
)

349 *
p
;

351 
p
 = 
	`mÆloc
(
size
, 
M_GEOM
, 
Êags
);

352  (
p
);

353 
	}
}

355 
__ölöe
 

356 
	$g_‰ì
(*
±r
)

359 #ifde‡
DIAGNOSTIC


360 i‡(
	`sx_xlocked
(&
t›ﬁogy_lock
)) {

361 
	`KASSERT
(
	`g_vÆid_obj
(
±r
) == 0,

362 ("g_‰ì(%pËo‡livêobje˘,Åy≥ %d", 
±r
,

363 
	`g_vÆid_obj
(
±r
)));

366 
	`‰ì
(
±r
, 
M_GEOM
);

367 
	}
}

369 
	#g_t›ﬁogy_lock
() \

371 
	`mtx_as£π
(&
Gü¡
, 
MA_NOTOWNED
); \

372 
	`sx_xlock
(&
t›ﬁogy_lock
); \

373 } 0)

	)

375 
	#g_t›ﬁogy_åy_lock
(Ë
	`sx_åy_xlock
(&
t›ﬁogy_lock
)

	)

377 
	#g_t›ﬁogy_u∆ock
() \

379 
	`sx_xu∆ock
(&
t›ﬁogy_lock
); \

380 } 0)

	)

382 
	#g_t›ﬁogy_as£π
() \

384 
	`sx_as£π
(&
t›ﬁogy_lock
, 
SX_XLOCKED
); \

385 } 0)

	)

387 
	#g_t›ﬁogy_as£π_nŸ
() \

389 
	`sx_as£π
(&
t›ﬁogy_lock
, 
SX_UNLOCKED
); \

390 } 0)

	)

392 
	#g_t›ﬁogy_¶ìp
(
ch™
, 
timo
) \

393 
	`sx_¶ìp
(
ch™
, &
t›ﬁogy_lock
, 0, "gt›ﬁ", 
timo
)

	)

395 
	#DECLARE_GEOM_CLASS
(
˛ass
, 
«me
) \

396 
moduÀd©a_t
 
«me
##
_mod
 = { \

397 #«me, 
g_modevít
, &
˛ass
 \

399 
	`DECLARE_MODULE
(
«me
,Çame##
_mod
, 
SI_SUB_DRIVERS
, 
SI_ORDER_FIRST
);

	)

401 
g_is_geom_thªad
(
thªad
 *
td
);

406 
g˘l_£t_∑øm
(
g˘l_ªq
 *
ªq
, c⁄° *
∑øm
, c⁄° *
±r
, 
Àn
);

407 
g˘l_£t_∑øm_îr
(
g˘l_ªq
 *
ªq
, c⁄° *
∑øm
, c⁄° *
±r
, 
Àn
);

408 *
g˘l_gë_∑øm
(
g˘l_ªq
 *
ªq
, c⁄° *
∑øm
, *
Àn
);

409 c⁄° *
g˘l_gë_asciù¨am
(
g˘l_ªq
 *
ªq
, c⁄° *
∑øm
);

410 *
g˘l_gë_∑øml
(
g˘l_ªq
 *
ªq
, c⁄° *
∑øm
, 
Àn
);

411 
	$g˘l_îr‹
(
g˘l_ªq
 *
ªq
, c⁄° *
fmt
, ...Ë
	`__¥ötÊike
(2, 3);

412 
g_˛ass
 *
	`g˘l_gë_˛ass
(
g˘l_ªq
 *
ªq
, c⁄° *
¨g
);

413 
g_geom
 *
	`g˘l_gë_geom
(
g˘l_ªq
 *
ªq
, 
g_˛ass
 *
m¥
, c⁄° *
¨g
);

414 
g_¥ovidî
 *
	`g˘l_gë_¥ovidî
(
g˘l_ªq
 *
ªq
, c⁄° *
¨g
);

	@/usr/include/geom/geom_vfs.h

29 #i‚de‡
_GEOM_GEOM_VFS_H_


30 
	#_GEOM_GEOM_VFS_H_


	)

32 
	gvnode
;

33 
	gbufobj
;

34 
	gbuf
;

36 
buf_›s
 *
g_vfs_buf›s
;

38 
g_vfs_°øãgy
(
bufobj
 *
bo
, 
buf
 *
bp
);

39 
g_vfs_›í
(
vnode
 *
vp
, 
g_c⁄sumî
 **
˝p
, c⁄° *
f¢ame
, 
wr
);

40 
g_vfs_˛o£
(
g_c⁄sumî
 *
˝
);

	@/usr/include/machine/bus.h

6 
	~<x86/bus.h
>

	@/usr/include/machine/stdarg.h

6 
	~<x86/°d¨g.h
>

	@/usr/include/netdb.h

57 #i‚de‡
_NETDB_H_


58 
	#_NETDB_H_


	)

60 
	~<sys/cdefs.h
>

61 
	~<sys/_ty≥s.h
>

63 #i‚de‡
_SIZE_T_DECLARED


64 
__size_t
 
	tsize_t
;

65 
	#_SIZE_T_DECLARED


	)

68 #i‚de‡
_SOCKLEN_T_DECLARED


69 
__sockÀn_t
 
	tsockÀn_t
;

70 
	#_SOCKLEN_T_DECLARED


	)

73 #i‚de‡
_UINT32_T_DECLARED


74 
__uöt32_t
 
	tuöt32_t
;

75 
	#_UINT32_T_DECLARED


	)

78 #i‚de‡
_PATH_HEQUIV


79 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

81 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

82 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

83 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

84 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

85 
	#_PATH_SERVICES_DB
 "/v¨/db/£rvi˚s.db"

	)

87 
	#h_î∫o
 (*
	`__h_î∫o
())

	)

94 
	sho°ít
 {

95 *
	mh_«me
;

96 **
	mh_Æü£s
;

97 
	mh_addπy≥
;

98 
	mh_Àngth
;

99 **
	mh_addr_li°
;

100 
	#h_addr
 
h_addr_li°
[0]

	)

103 
	s√ã¡
 {

104 *
	mn_«me
;

105 **
	mn_Æü£s
;

106 
	mn_addπy≥
;

107 
uöt32_t
 
	mn_√t
;

110 
	s£rvít
 {

111 *
	ms_«me
;

112 **
	ms_Æü£s
;

113 
	ms_p‹t
;

114 *
	ms_¥Ÿo
;

117 
	s¥Ÿ€¡
 {

118 *
	mp_«me
;

119 **
	mp_Æü£s
;

120 
	mp_¥Ÿo
;

123 
	saddröfo
 {

124 
	mai_Êags
;

125 
	mai_Ámûy
;

126 
	mai_sockty≥
;

127 
	mai_¥Ÿocﬁ
;

128 
sockÀn_t
 
	mai_addæí
;

129 *
	mai_ˇn⁄«me
;

130 
sockaddr
 *
	mai_addr
;

131 
addröfo
 *
	mai_√xt
;

139 
	#NETDB_INTERNAL
 -1

	)

140 
	#NETDB_SUCCESS
 0

	)

141 
	#HOST_NOT_FOUND
 1

	)

142 
	#TRY_AGAIN
 2

	)

143 
	#NO_RECOVERY
 3

	)

144 
	#NO_DATA
 4

	)

145 
	#NO_ADDRESS
 
NO_DATA


	)

152 
	#EAI_ADDRFAMILY
 1

	)

154 
	#EAI_AGAIN
 2

	)

155 
	#EAI_BADFLAGS
 3

	)

156 
	#EAI_FAIL
 4

	)

157 
	#EAI_FAMILY
 5

	)

158 
	#EAI_MEMORY
 6

	)

161 
	#EAI_NODATA
 7

	)

163 
	#EAI_NONAME
 8

	)

164 
	#EAI_SERVICE
 9

	)

165 
	#EAI_SOCKTYPE
 10

	)

166 
	#EAI_SYSTEM
 11

	)

167 
	#EAI_BADHINTS
 12

	)

168 
	#EAI_PROTOCOL
 13

	)

169 
	#EAI_OVERFLOW
 14

	)

170 
	#EAI_MAX
 15

	)

175 
	#AI_PASSIVE
 0x00000001

	)

176 
	#AI_CANONNAME
 0x00000002

	)

177 
	#AI_NUMERICHOST
 0x00000004

	)

178 
	#AI_NUMERICSERV
 0x00000008

	)

180 
	#AI_MASK
 \

181 (
AI_PASSIVE
 | 
AI_CANONNAME
 | 
AI_NUMERICHOST
 | 
AI_NUMERICSERV
 | \

182 
AI_ADDRCONFIG
 | 
AI_ALL
 | 
AI_V4MAPPED
)

	)

184 
	#AI_ALL
 0x00000100

	)

185 
	#AI_V4MAPPED_CFG
 0x00000200

	)

186 
	#AI_ADDRCONFIG
 0x00000400

	)

187 
	#AI_V4MAPPED
 0x00000800

	)

189 
	#AI_DEFAULT
 (
AI_V4MAPPED_CFG
 | 
AI_ADDRCONFIG
)

	)

194 
	#NI_MAXHOST
 1025

	)

195 
	#NI_MAXSERV
 32

	)

200 
	#NI_NOFQDN
 0x00000001

	)

201 
	#NI_NUMERICHOST
 0x00000002

	)

202 
	#NI_NAMEREQD
 0x00000004

	)

203 
	#NI_NUMERICSERV
 0x00000008

	)

204 
	#NI_DGRAM
 0x00000010

	)

206 
	#NI_WITHSCOPEID
 0x00000020

	)

212 
	#SCOPE_DELIMITER
 '%'

	)

214 
__BEGIN_DECLS


215 
ídho°ít
();

216 
íd√ã¡
();

217 
íd¥Ÿ€¡
();

218 
íd£rvít
();

219 #i‡
__BSD_VISIBLE
 || (
__POSIX_VISIBLE
 && __POSIX_VISIBLE <= 200112)

220 
ho°ít
 *
gëho°byaddr
(c⁄° *, 
sockÀn_t
, );

221 
ho°ít
 *
gëho°by«me
(const *);

223 
ho°ít
 *
gëho°ít
();

224 
√ã¡
 *
gë√tbyaddr
(
uöt32_t
, );

225 
√ã¡
 *
gë√tby«me
(const *);

226 
√ã¡
 *
gë√ã¡
();

227 
¥Ÿ€¡
 *
gë¥Ÿoby«me
(const *);

228 
¥Ÿ€¡
 *
gë¥Ÿobynumbî
();

229 
¥Ÿ€¡
 *
gë¥Ÿ€¡
();

230 
£rvít
 *
gë£rvby«me
(const *, const *);

231 
£rvít
 *
gë£rvbyp‹t
(, const *);

232 
£rvít
 *
gë£rvít
();

233 
£tho°ít
();

235 
£äëít
();

236 
£çrŸ€¡
();

237 
gëaddröfo
(const *, const *,

238 c⁄° 
addröfo
 *, addrinfo **);

239 
gë«meöfo
(c⁄° 
sockaddr
 *, 
sockÀn_t
, *,

240 
size_t
, *, size_t, );

241 
‰ìaddröfo
(
addröfo
 *);

242 c⁄° *
gai_°ªº‹
();

243 
£t£rvít
();

245 #i‡
__BSD_VISIBLE


246 
íd√tgª¡
();

247 
‰ìho°ít
(
ho°ít
 *);

248 
gëho°byaddr_r
(c⁄° *, 
sockÀn_t
, , 
ho°ít
 *,

249 *, 
size_t
, 
ho°ít
 **, *);

250 
gëho°by«me_r
(c⁄° *, 
ho°ít
 *, *, 
size_t
,

251 
ho°ít
 **, *);

252 
ho°ít
 *
gëho°by«me2
(const *, );

253 
gëho°by«me2_r
(c⁄° *, , 
ho°ít
 *, *,

254 
size_t
, 
ho°ít
 **, *);

255 
gëho°ít_r
(
ho°ít
 *, *, 
size_t
,

256 
ho°ít
 **, *);

257 
ho°ít
 *
gëùnodebyaddr
(c⁄° *, 
size_t
, , *);

258 
ho°ít
 *
gëùnodeby«me
(const *, , , *);

259 
gë√tbyaddr_r
(
uöt32_t
, , 
√ã¡
 *, *, 
size_t
,

260 
√ã¡
**, *);

261 
gë√tby«me_r
(c⁄° *, 
√ã¡
 *, *, 
size_t
,

262 
√ã¡
 **, *);

263 
gë√ã¡_r
(
√ã¡
 *, *, 
size_t
, netent **,

265 
gë√tgª¡
(**, **, **);

266 
gë¥Ÿoby«me_r
(c⁄° *, 
¥Ÿ€¡
 *, *,

267 
size_t
, 
¥Ÿ€¡
 **);

268 
gë¥Ÿobynumbî_r
(, 
¥Ÿ€¡
 *, *, 
size_t
,

269 
¥Ÿ€¡
 **);

270 
gë¥Ÿ€¡_r
(
¥Ÿ€¡
 *, *, 
size_t
,

271 
¥Ÿ€¡
 **);

272 
gë£rvby«me_r
(c⁄° *, c⁄° *, 
£rvít
 *,

273 *, 
size_t
, 
£rvít
 **);

274 
gë£rvbyp‹t_r
(, c⁄° *, 
£rvít
 *, *,

275 
size_t
, 
£rvít
 **);

276 
gë£rvít_r
(
£rvít
 *, *, 
size_t
,

277 
£rvít
 **);

278 
hîr‹
(const *);

279 c⁄° *
h°ªº‹
();

280 
ö√tgr
(const *, const *, const *, const *);

281 
£äëgª¡
(const *);

290 * 
__h_î∫o
();

291 
	g__END_DECLS


	@/usr/include/netinet/in.h

33 #i‚de‡
_NETINET_IN_H_


34 
	#_NETINET_IN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<machöe/ídün.h
>

41 
	#IPPROTO_IP
 0

	)

42 
	#IPPROTO_ICMP
 1

	)

43 
	#IPPROTO_TCP
 6

	)

44 
	#IPPROTO_UDP
 17

	)

46 
	#INADDR_ANY
 (
u_öt32_t
)0x00000000

	)

47 
	#INADDR_BROADCAST
 (
u_öt32_t
)0xfffffff‡

	)

49 #i‚de‡
_UINT8_T_DECLARED


50 
__uöt8_t
 
	tuöt8_t
;

51 
	#_UINT8_T_DECLARED


	)

54 #i‚de‡
_UINT16_T_DECLARED


55 
__uöt16_t
 
	tuöt16_t
;

56 
	#_UINT16_T_DECLARED


	)

59 #i‚de‡
_UINT32_T_DECLARED


60 
__uöt32_t
 
	tuöt32_t
;

61 
	#_UINT32_T_DECLARED


	)

64 #i‚de‡
_IN_ADDR_T_DECLARED


65 
uöt32_t
 
	tö_addr_t
;

66 
	#_IN_ADDR_T_DECLARED


	)

69 #i‚de‡
_IN_PORT_T_DECLARED


70 
uöt16_t
 
	tö_p‹t_t
;

71 
	#_IN_PORT_T_DECLARED


	)

74 #i‚de‡
_SA_FAMILY_T_DECLARED


75 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

76 
	#_SA_FAMILY_T_DECLARED


	)

80 #i‚def 
_STRUCT_IN_ADDR_DECLARED


81 
	sö_addr
 {

82 
ö_addr_t
 
	ms_addr
;

84 
	#_STRUCT_IN_ADDR_DECLARED


	)

87 #i‚def 
_SOCKLEN_T_DECLARED


88 
__sockÀn_t
 
	tsockÀn_t
;

89 
	#_SOCKLEN_T_DECLARED


	)

92 
	~<sys/_sockaddr_°‹age.h
>

95 
	ssockaddr_ö
 {

96 
uöt8_t
 
	msö_Àn
;

97 
ß_Ámûy_t
 
	msö_Ámûy
;

98 
ö_p‹t_t
 
	msö_p‹t
;

99 
ö_addr
 
	msö_addr
;

100 
	msö_zîo
[8];

103 #i‡!
deföed
(
_KERNEL
Ë&& 
__POSIX_VISIBLE
 >= 200112

105 #i‚de‡
_BYTEORDER_PROTOTYPED


106 
	#_BYTEORDER_PROTOTYPED


	)

107 
__BEGIN_DECLS


108 
uöt32_t
 
ht⁄l
(uint32_t);

109 
uöt16_t
 
ht⁄s
(uint16_t);

110 
uöt32_t
 
¡ohl
(uint32_t);

111 
uöt16_t
 
¡ohs
(uint16_t);

112 
	g__END_DECLS


115 #i‚de‡
_BYTEORDER_FUNC_DEFINED


116 
	#_BYTEORDER_FUNC_DEFINED


	)

117 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

118 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

119 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

120 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

125 #i‡
__POSIX_VISIBLE
 >= 200112

126 
	#IPPROTO_IPV6
 41

	)

127 
	#IPPROTO_RAW
 255

	)

128 
	#INET_ADDRSTRLEN
 16

	)

131 #i‡
__BSD_VISIBLE


140 
	#IPPROTO_HOPOPTS
 0

	)

141 
	#IPPROTO_IGMP
 2

	)

142 
	#IPPROTO_GGP
 3

	)

143 
	#IPPROTO_IPV4
 4

	)

144 
	#IPPROTO_IPIP
 
IPPROTO_IPV4


	)

145 
	#IPPROTO_ST
 7

	)

146 
	#IPPROTO_EGP
 8

	)

147 
	#IPPROTO_PIGP
 9

	)

148 
	#IPPROTO_RCCMON
 10

	)

149 
	#IPPROTO_NVPII
 11

	)

150 
	#IPPROTO_PUP
 12

	)

151 
	#IPPROTO_ARGUS
 13

	)

152 
	#IPPROTO_EMCON
 14

	)

153 
	#IPPROTO_XNET
 15

	)

154 
	#IPPROTO_CHAOS
 16

	)

155 
	#IPPROTO_MUX
 18

	)

156 
	#IPPROTO_MEAS
 19

	)

157 
	#IPPROTO_HMP
 20

	)

158 
	#IPPROTO_PRM
 21

	)

159 
	#IPPROTO_IDP
 22

	)

160 
	#IPPROTO_TRUNK1
 23

	)

161 
	#IPPROTO_TRUNK2
 24

	)

162 
	#IPPROTO_LEAF1
 25

	)

163 
	#IPPROTO_LEAF2
 26

	)

164 
	#IPPROTO_RDP
 27

	)

165 
	#IPPROTO_IRTP
 28

	)

166 
	#IPPROTO_TP
 29

	)

167 
	#IPPROTO_BLT
 30

	)

168 
	#IPPROTO_NSP
 31

	)

169 
	#IPPROTO_INP
 32

	)

170 
	#IPPROTO_SEP
 33

	)

171 
	#IPPROTO_3PC
 34

	)

172 
	#IPPROTO_IDPR
 35

	)

173 
	#IPPROTO_XTP
 36

	)

174 
	#IPPROTO_DDP
 37

	)

175 
	#IPPROTO_CMTP
 38

	)

176 
	#IPPROTO_TPXX
 39

	)

177 
	#IPPROTO_IL
 40

	)

178 
	#IPPROTO_SDRP
 42

	)

179 
	#IPPROTO_ROUTING
 43

	)

180 
	#IPPROTO_FRAGMENT
 44

	)

181 
	#IPPROTO_IDRP
 45

	)

182 
	#IPPROTO_RSVP
 46

	)

183 
	#IPPROTO_GRE
 47

	)

184 
	#IPPROTO_MHRP
 48

	)

185 
	#IPPROTO_BHA
 49

	)

186 
	#IPPROTO_ESP
 50

	)

187 
	#IPPROTO_AH
 51

	)

188 
	#IPPROTO_INLSP
 52

	)

189 
	#IPPROTO_SWIPE
 53

	)

190 
	#IPPROTO_NHRP
 54

	)

191 
	#IPPROTO_MOBILE
 55

	)

192 
	#IPPROTO_TLSP
 56

	)

193 
	#IPPROTO_SKIP
 57

	)

194 
	#IPPROTO_ICMPV6
 58

	)

195 
	#IPPROTO_NONE
 59

	)

196 
	#IPPROTO_DSTOPTS
 60

	)

197 
	#IPPROTO_AHIP
 61

	)

198 
	#IPPROTO_CFTP
 62

	)

199 
	#IPPROTO_HELLO
 63

	)

200 
	#IPPROTO_SATEXPAK
 64

	)

201 
	#IPPROTO_KRYPTOLAN
 65

	)

202 
	#IPPROTO_RVD
 66

	)

203 
	#IPPROTO_IPPC
 67

	)

204 
	#IPPROTO_ADFS
 68

	)

205 
	#IPPROTO_SATMON
 69

	)

206 
	#IPPROTO_VISA
 70

	)

207 
	#IPPROTO_IPCV
 71

	)

208 
	#IPPROTO_CPNX
 72

	)

209 
	#IPPROTO_CPHB
 73

	)

210 
	#IPPROTO_WSN
 74

	)

211 
	#IPPROTO_PVP
 75

	)

212 
	#IPPROTO_BRSATMON
 76

	)

213 
	#IPPROTO_ND
 77

	)

214 
	#IPPROTO_WBMON
 78

	)

215 
	#IPPROTO_WBEXPAK
 79

	)

216 
	#IPPROTO_EON
 80

	)

217 
	#IPPROTO_VMTP
 81

	)

218 
	#IPPROTO_SVMTP
 82

	)

219 
	#IPPROTO_VINES
 83

	)

220 
	#IPPROTO_TTP
 84

	)

221 
	#IPPROTO_IGP
 85

	)

222 
	#IPPROTO_DGP
 86

	)

223 
	#IPPROTO_TCF
 87

	)

224 
	#IPPROTO_IGRP
 88

	)

225 
	#IPPROTO_OSPFIGP
 89

	)

226 
	#IPPROTO_SRPC
 90

	)

227 
	#IPPROTO_LARP
 91

	)

228 
	#IPPROTO_MTP
 92

	)

229 
	#IPPROTO_AX25
 93

	)

230 
	#IPPROTO_IPEIP
 94

	)

231 
	#IPPROTO_MICP
 95

	)

232 
	#IPPROTO_SCCSP
 96

	)

233 
	#IPPROTO_ETHERIP
 97

	)

234 
	#IPPROTO_ENCAP
 98

	)

235 
	#IPPROTO_APES
 99

	)

236 
	#IPPROTO_GMTP
 100

	)

237 
	#IPPROTO_IPCOMP
 108

	)

238 
	#IPPROTO_SCTP
 132

	)

239 
	#IPPROTO_MH
 135

	)

240 
	#IPPROTO_UDPLITE
 136

	)

241 
	#IPPROTO_HIP
 139

	)

242 
	#IPPROTO_SHIM6
 140

	)

244 
	#IPPROTO_PIM
 103

	)

245 
	#IPPROTO_CARP
 112

	)

246 
	#IPPROTO_PGM
 113

	)

247 
	#IPPROTO_MPLS
 137

	)

248 
	#IPPROTO_PFSYNC
 240

	)

249 
	#IPPROTO_RESERVED_253
 253

	)

250 
	#IPPROTO_RESERVED_254
 254

	)

253 
	#IPPROTO_OLD_DIVERT
 254

	)

254 
	#IPPROTO_MAX
 256

	)

257 
	#IPPROTO_DONE
 257

	)

260 
	#IPPROTO_DIVERT
 258

	)

261 
	#IPPROTO_SEND
 259

	)

267 
	#IPPROTO_SPACER
 32767

	)

318 
	#IPPORT_RESERVED
 1024

	)

323 
	#IPPORT_EPHEMERALFIRST
 10000

	)

324 
	#IPPORT_EPHEMERALLAST
 65535

	)

329 
	#IPPORT_HIFIRSTAUTO
 49152

	)

330 
	#IPPORT_HILASTAUTO
 65535

	)

338 
	#IPPORT_RESERVEDSTART
 600

	)

340 
	#IPPORT_MAX
 65535

	)

347 
	#IN_CLASSA
(
i
Ë(((
u_öt32_t
)(iË& 0x80000000Ë=0)

	)

348 
	#IN_CLASSA_NET
 0xff000000

	)

349 
	#IN_CLASSA_NSHIFT
 24

	)

350 
	#IN_CLASSA_HOST
 0x00ffffff

	)

351 
	#IN_CLASSA_MAX
 128

	)

353 
	#IN_CLASSB
(
i
Ë(((
u_öt32_t
)(iË& 0xc0000000Ë=0x80000000)

	)

354 
	#IN_CLASSB_NET
 0xffff0000

	)

355 
	#IN_CLASSB_NSHIFT
 16

	)

356 
	#IN_CLASSB_HOST
 0x0000ffff

	)

357 
	#IN_CLASSB_MAX
 65536

	)

359 
	#IN_CLASSC
(
i
Ë(((
u_öt32_t
)(iË& 0xe0000000Ë=0xc0000000)

	)

360 
	#IN_CLASSC_NET
 0xffffff00

	)

361 
	#IN_CLASSC_NSHIFT
 8

	)

362 
	#IN_CLASSC_HOST
 0x000000ff

	)

364 
	#IN_CLASSD
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xe0000000)

	)

365 
	#IN_CLASSD_NET
 0xf0000000

	)

366 
	#IN_CLASSD_NSHIFT
 28

	)

367 
	#IN_CLASSD_HOST
 0x0ffffff‡

	)

368 
	#IN_MULTICAST
(
i
Ë
	`IN_CLASSD
(i)

	)

370 
	#IN_EXPERIMENTAL
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

371 
	#IN_BADCLASS
(
i
Ë(((
u_öt32_t
)(iË& 0xf0000000Ë=0xf0000000)

	)

373 
	#IN_LINKLOCAL
(
i
Ë(((
u_öt32_t
)(iË& 0xffff0000Ë=0xa9„0000)

	)

374 
	#IN_LOOPBACK
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0x7f000000)

	)

375 
	#IN_ZERONET
(
i
Ë(((
u_öt32_t
)(iË& 0xff000000Ë=0)

	)

377 
	#IN_PRIVATE
(
i
Ë((((
u_öt32_t
)(i) & 0xff000000) == 0x0a000000) || \

378 (((
u_öt32_t
)(
i
) & 0xfff00000) == 0xac100000) || \

379 (((
u_öt32_t
)(
i
Ë& 0xffff0000Ë=0xc0a80000))

	)

381 
	#IN_LOCAL_GROUP
(
i
Ë(((
u_öt32_t
)(iË& 0xffffff00Ë=0xe0000000)

	)

383 
	#IN_ANY_LOCAL
(
i
Ë(
	`IN_LINKLOCAL
(iË|| 
	`IN_LOCAL_GROUP
(i))

	)

385 
	#INADDR_LOOPBACK
 (
u_öt32_t
)0x7f000001

	)

386 #i‚de‡
_KERNEL


387 
	#INADDR_NONE
 0xfffffff‡

	)

390 
	#INADDR_UNSPEC_GROUP
 (
u_öt32_t
)0xe0000000

	)

391 
	#INADDR_ALLHOSTS_GROUP
 (
u_öt32_t
)0xe0000001

	)

392 
	#INADDR_ALLRTRS_GROUP
 (
u_öt32_t
)0xe0000002

	)

393 
	#INADDR_ALLRPTS_GROUP
 (
u_öt32_t
)0xe0000016

	)

394 
	#INADDR_CARP_GROUP
 (
u_öt32_t
)0xe0000012

	)

395 
	#INADDR_PFSYNC_GROUP
 (
u_öt32_t
)0xe00000f0

	)

396 
	#INADDR_ALLMDNS_GROUP
 (
u_öt32_t
)0xe00000fb

	)

397 
	#INADDR_MAX_LOCAL_GROUP
 (
u_öt32_t
)0xe00000f‡

	)

399 
	#IN_LOOPBACKNET
 127

	)

401 
	#IN_RFC3021_MASK
 (
u_öt32_t
)0xffffff„

	)

407 
	#IP_OPTIONS
 1

	)

408 
	#IP_HDRINCL
 2

	)

409 
	#IP_TOS
 3

	)

410 
	#IP_TTL
 4

	)

411 
	#IP_RECVOPTS
 5

	)

412 
	#IP_RECVRETOPTS
 6

	)

413 
	#IP_RECVDSTADDR
 7

	)

414 
	#IP_SENDSRCADDR
 
IP_RECVDSTADDR


	)

415 
	#IP_RETOPTS
 8

	)

416 
	#IP_MULTICAST_IF
 9

	)

418 
	#IP_MULTICAST_TTL
 10

	)

419 
	#IP_MULTICAST_LOOP
 11

	)

420 
	#IP_ADD_MEMBERSHIP
 12

	)

421 
	#IP_DROP_MEMBERSHIP
 13

	)

422 
	#IP_MULTICAST_VIF
 14

	)

423 
	#IP_RSVP_ON
 15

	)

424 
	#IP_RSVP_OFF
 16

	)

425 
	#IP_RSVP_VIF_ON
 17

	)

426 
	#IP_RSVP_VIF_OFF
 18

	)

427 
	#IP_PORTRANGE
 19

	)

428 
	#IP_RECVIF
 20

	)

430 
	#IP_IPSEC_POLICY
 21

	)

431 
	#IP_FAITH
 22

	)

433 
	#IP_ONESBCAST
 23

	)

434 
	#IP_BINDANY
 24

	)

441 
	#IP_FW_TABLE_ADD
 40

	)

442 
	#IP_FW_TABLE_DEL
 41

	)

443 
	#IP_FW_TABLE_FLUSH
 42

	)

444 
	#IP_FW_TABLE_GETSIZE
 43

	)

445 
	#IP_FW_TABLE_LIST
 44

	)

447 
	#IP_FW3
 48

	)

448 
	#IP_DUMMYNET3
 49

	)

450 
	#IP_FW_ADD
 50

	)

451 
	#IP_FW_DEL
 51

	)

452 
	#IP_FW_FLUSH
 52

	)

453 
	#IP_FW_ZERO
 53

	)

454 
	#IP_FW_GET
 54

	)

455 
	#IP_FW_RESETLOG
 55

	)

457 
	#IP_FW_NAT_CFG
 56

	)

458 
	#IP_FW_NAT_DEL
 57

	)

459 
	#IP_FW_NAT_GET_CONFIG
 58

	)

460 
	#IP_FW_NAT_GET_LOG
 59

	)

462 
	#IP_DUMMYNET_CONFIGURE
 60

	)

463 
	#IP_DUMMYNET_DEL
 61

	)

464 
	#IP_DUMMYNET_FLUSH
 62

	)

465 
	#IP_DUMMYNET_GET
 64

	)

467 
	#IP_RECVTTL
 65

	)

468 
	#IP_MINTTL
 66

	)

469 
	#IP_DONTFRAG
 67

	)

470 
	#IP_RECVTOS
 68

	)

473 
	#IP_ADD_SOURCE_MEMBERSHIP
 70

	)

474 
	#IP_DROP_SOURCE_MEMBERSHIP
 71

	)

475 
	#IP_BLOCK_SOURCE
 72

	)

476 
	#IP_UNBLOCK_SOURCE
 73

	)

479 
	#IP_MSFILTER
 74

	)

482 
	#MCAST_JOIN_GROUP
 80

	)

483 
	#MCAST_LEAVE_GROUP
 81

	)

484 
	#MCAST_JOIN_SOURCE_GROUP
 82

	)

485 
	#MCAST_LEAVE_SOURCE_GROUP
 83

	)

486 
	#MCAST_BLOCK_SOURCE
 84

	)

487 
	#MCAST_UNBLOCK_SOURCE
 85

	)

492 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

493 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

500 
	#IP_MIN_MEMBERSHIPS
 31

	)

501 
	#IP_MAX_MEMBERSHIPS
 4095

	)

502 
	#IP_MAX_SOURCE_FILTER
 1024

	)

508 
	#IP_MAX_GROUP_SRC_FILTER
 512

	)

509 
	#IP_MAX_SOCK_SRC_FILTER
 128

	)

510 
	#IP_MAX_SOCK_MUTE_FILTER
 128

	)

515 
	sù_mªq
 {

516 
ö_addr
 
	mimr_mu…üddr
;

517 
ö_addr
 
	mimr_öãrÁ˚
;

525 
	sù_mªqn
 {

526 
ö_addr
 
	mimr_mu…üddr
;

527 
ö_addr
 
	mimr_addªss
;

528 
	mimr_ifödex
;

534 
	sù_mªq_sour˚
 {

535 
ö_addr
 
	mimr_mu…üddr
;

536 
ö_addr
 
	mimr_sour˚addr
;

537 
ö_addr
 
	mimr_öãrÁ˚
;

544 
	sgroup_ªq
 {

545 
uöt32_t
 
	mgr_öãrÁ˚
;

546 
sockaddr_°‹age
 
	mgr_group
;

549 
	sgroup_sour˚_ªq
 {

550 
uöt32_t
 
	mg§_öãrÁ˚
;

551 
sockaddr_°‹age
 
	mg§_group
;

552 
sockaddr_°‹age
 
	mg§_sour˚
;

555 #i‚de‡
__MSFILTERREQ_DEFINED


556 
	#__MSFILTERREQ_DEFINED


	)

562 
	s__msfûãºeq
 {

563 
uöt32_t
 
	mms‰_ifödex
;

564 
uöt32_t
 
	mms‰_fmode
;

565 
uöt32_t
 
	mms‰_n§cs
;

566 
sockaddr_°‹age
 
	mms‰_group
;

567 
sockaddr_°‹age
 *
	mms‰_§cs
;

574 
	gsockaddr
;

581 
£tùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
,

582 
uöt32_t
, 
ö_addr
 *);

583 
gëùv4sour˚fûãr
(, 
ö_addr
, ö_addr, 
uöt32_t
 *,

584 
uöt32_t
 *, 
ö_addr
 *);

585 
£tsour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

586 
uöt32_t
, uöt32_t, 
sockaddr_°‹age
 *);

587 
gësour˚fûãr
(, 
uöt32_t
, 
sockaddr
 *, 
sockÀn_t
,

588 
uöt32_t
 *, uöt32_à*, 
sockaddr_°‹age
 *);

593 
	#MCAST_UNDEFINED
 0

	)

594 
	#MCAST_INCLUDE
 1

	)

595 
	#MCAST_EXCLUDE
 2

	)

601 
	#IP_PORTRANGE_DEFAULT
 0

	)

602 
	#IP_PORTRANGE_HIGH
 1

	)

603 
	#IP_PORTRANGE_LOW
 2

	)

611 
	#IPPROTO_MAXID
 (
IPPROTO_AH
 + 1Ë

	)

613 
	#CTL_IPPROTO_NAMES
 { \

614 { "ù", 
CTLTYPE_NODE
 }, \

615 { "icmp", 
CTLTYPE_NODE
 }, \

616 { "igmp", 
CTLTYPE_NODE
 }, \

617 { "ggp", 
CTLTYPE_NODE
 }, \

620 { "t˝", 
CTLTYPE_NODE
 }, \

622 { "egp", 
CTLTYPE_NODE
 }, \

626 { "pup", 
CTLTYPE_NODE
 }, \

631 { "udp", 
CTLTYPE_NODE
 }, \

636 { "idp", 
CTLTYPE_NODE
 }, \

665 { "ù£c", 
CTLTYPE_NODE
 }, \

681 { "pim", 
CTLTYPE_NODE
 }, \

682 }

	)

687 
	#IPCTL_FORWARDING
 1

	)

688 
	#IPCTL_SENDREDIRECTS
 2

	)

689 
	#IPCTL_DEFTTL
 3

	)

690 #ifde‡
nŸyë


691 
	#IPCTL_DEFMTU
 4

	)

693 
	#IPCTL_RTEXPIRE
 5

	)

694 
	#IPCTL_RTMINEXPIRE
 6

	)

695 
	#IPCTL_RTMAXCACHE
 7

	)

696 
	#IPCTL_SOURCEROUTE
 8

	)

697 
	#IPCTL_DIRECTEDBROADCAST
 9

	)

698 
	#IPCTL_INTRQMAXLEN
 10

	)

699 
	#IPCTL_INTRQDROPS
 11

	)

700 
	#IPCTL_STATS
 12

	)

701 
	#IPCTL_ACCEPTSOURCEROUTE
 13

	)

702 
	#IPCTL_FASTFORWARDING
 14

	)

703 
	#IPCTL_KEEPFAITH
 15

	)

704 
	#IPCTL_GIF_TTL
 16

	)

705 
	#IPCTL_MAXID
 17

	)

709 #ifde‡
_KERNEL


711 
	gi‚ë
; 
	gmbuf
;

713 
ö_brﬂdˇ°
(
ö_addr
, 
i‚ë
 *);

714 
ö_ˇnf‹w¨d
(
ö_addr
);

715 
ö_loˇœddr
(
ö_addr
);

716 
ö_loˇlù
(
ö_addr
);

717 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

718 *
öë_¡ﬂ
(
ö_addr
);

719 *
öë_¡ﬂ_r
(
ö_addr
 
öa
, *
buf
);

720 *
öë_¡›
(, c⁄° *, *, 
sockÀn_t
);

721 
öë_±⁄
(
af
, const *, *);

722 
ö_ifdëach
(
i‚ë
 *);

724 
	#ö_ho°eq
(
s
, 
t
Ë((s).
s_addr
 =—).s_addr)

	)

725 
	#ö_nuŒho°
(
x
Ë((x).
s_addr
 =
INADDR_ANY
)

	)

726 
	#ö_Ælho°s
(
x
Ë((x).
s_addr
 =
	`ht⁄l
(
INADDR_ALLHOSTS_GROUP
))

	)

728 
	#ßtosö
(
ß
Ë((
sockaddr_ö
 *)(ß))

	)

729 
	#sötoß
(
sö
Ë((
sockaddr
 *)(sö))

	)

730 
	#iÁtoü
(
iÁ
Ë((
ö_iÁddr
 *)(iÁ))

	)

734 #i‡
__POSIX_VISIBLE
 >= 200112

735 
	#__KAME_NETINET_IN_H_INCLUDED_


	)

736 
	~<√töë6/ö6.h
>

737 #unde‡
__KAME_NETINET_IN_H_INCLUDED_


	@/usr/include/stdarg.h

6 
	~<x86/°d¨g.h
>

	@/usr/include/stdio.h

36 #i‚def 
_STDIO_H_


37 
	#_STDIO_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<sys/_nuŒ.h
>

41 
	~<sys/_ty≥s.h
>

43 
__off_t
 
	tÂos_t
;

45 #i‚de‡
_SIZE_T_DECLARED


46 
__size_t
 
	tsize_t
;

47 
	#_SIZE_T_DECLARED


	)

50 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

51 #i‚de‡
_OFF_T_DECLARED


52 
	#_OFF_T_DECLARED


	)

53 
__off_t
 
	toff_t
;

55 #i‚de‡
_SSIZE_T_DECLARED


56 
	#_SSIZE_T_DECLARED


	)

57 
__ssize_t
 
	tssize_t
;

61 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


62 #i‚de‡
_VA_LIST_DECLARED


63 
__va_li°
 
	tva_li°
;

64 
	#_VA_LIST_DECLARED


	)

68 
	#_FSTDIO


	)

77 
	s__sbuf
 {

78 *
	m_ba£
;

79 
	m_size
;

110 
	s__sFILE
 {

111 *
	m_p
;

112 
	m_r
;

113 
	m_w
;

114 
	m_Êags
;

115 
	m_fûe
;

116 
__sbuf
 
	m_bf
;

117 
	m_lbfsize
;

120 *
	m_cookõ
;

121 (*
	m_˛o£
)(*);

122 (*
	m_ªad
)(*, *, );

123 
Âos_t
 (*
_£ek
)(*, 
	mÂos_t
, );

124 (*
	m_wrôe
)(*, const *, );

127 
__sbuf
 
	m_ub
;

128 *
	m_up
;

129 
	m_ur
;

132 
	m_ubuf
[3];

133 
	m_nbuf
[1];

136 
__sbuf
 
	m_lb
;

139 
	m_blksize
;

140 
Âos_t
 
	m_off£t
;

142 
±hªad_muãx
 *
	m_Ê_muãx
;

143 
±hªad
 *
	m_Ê_ow√r
;

144 
	m_Ê_cou¡
;

145 
	m_‹õ¡©i⁄
;

146 
__mb°©e_t
 
	m_mb°©e
;

147 
	m_Êags2
;

149 #i‚de‡
_STDFILE_DECLARED


150 
	#_STDFILE_DECLARED


	)

151 
__sFILE
 
	tFILE
;

153 #i‚de‡
_STDSTREAM_DECLARED


154 
__BEGIN_DECLS


155 
FILE
 *
__°döp
;

156 
FILE
 *
__°douç
;

157 
FILE
 *
__°dîΩ
;

158 
	g__END_DECLS


159 
	#_STDSTREAM_DECLARED


	)

162 
	#__SLBF
 0x0001

	)

163 
	#__SNBF
 0x0002

	)

164 
	#__SRD
 0x0004

	)

165 
	#__SWR
 0x0008

	)

167 
	#__SRW
 0x0010

	)

168 
	#__SEOF
 0x0020

	)

169 
	#__SERR
 0x0040

	)

170 
	#__SMBF
 0x0080

	)

171 
	#__SAPP
 0x0100

	)

172 
	#__SSTR
 0x0200

	)

173 
	#__SOPT
 0x0400

	)

174 
	#__SNPT
 0x0800

	)

175 
	#__SOFF
 0x1000

	)

176 
	#__SMOD
 0x2000

	)

177 
	#__SALC
 0x4000

	)

178 
	#__SIGN
 0x8000

	)

180 
	#__S2OAP
 0x0001

	)

191 
	#_IOFBF
 0

	)

192 
	#_IOLBF
 1

	)

193 
	#_IONBF
 2

	)

195 
	#BUFSIZ
 1024

	)

196 
	#EOF
 (-1)

	)

204 #i‚de‡
FOPEN_MAX


205 
	#FOPEN_MAX
 20

	)

207 
	#FILENAME_MAX
 1024

	)

210 #i‡
__XSI_VISIBLE


211 
	#P_tmpdú
 "/tmp/"

	)

213 
	#L_tm≤am
 1024

	)

214 
	#TMP_MAX
 308915776

	)

216 #i‚de‡
SEEK_SET


217 
	#SEEK_SET
 0

	)

219 #i‚de‡
SEEK_CUR


220 
	#SEEK_CUR
 1

	)

222 #i‚de‡
SEEK_END


223 
	#SEEK_END
 2

	)

226 
	#°dö
 
__°döp


	)

227 
	#°dout
 
__°douç


	)

228 
	#°dîr
 
__°dîΩ


	)

230 
	g__BEGIN_DECLS


231 #ifde‡
_XLOCALE_H_


232 
	~<xloˇÀ/_°dio.h
>

237 
˛óªº
(
FILE
 *);

238 
f˛o£
(
FILE
 *);

239 
„of
(
FILE
 *);

240 
„º‹
(
FILE
 *);

241 
fÊush
(
FILE
 *);

242 
fgëc
(
FILE
 *);

243 
fgëpos
(
FILE
 * 
__ª°ri˘
, 
Âos_t
 * __restrict);

244 *
fgës
(* 
__ª°ri˘
, , 
FILE
 * __restrict);

245 
FILE
 *
f›í
(c⁄° * 
__ª°ri˘
, const * __restrict);

246 
Ârötf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

247 
Âutc
(, 
FILE
 *);

248 
Âuts
(c⁄° * 
__ª°ri˘
, 
FILE
 * __restrict);

249 
size_t
 
‰ód
(* 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

250 
FILE
 *
‰e›í
(c⁄° * 
__ª°ri˘
, const * __restrict, FILE * __restrict);

251 
fsˇnf
(
FILE
 * 
__ª°ri˘
, const * __restrict, ...);

252 
f£ek
(
FILE
 *, , );

253 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

254 
·ñl
(
FILE
 *);

255 
size_t
 
fwrôe
(c⁄° * 
__ª°ri˘
, size_t, size_t, 
FILE
 * __restrict);

256 
gëc
(
FILE
 *);

257 
gëch¨
();

258 *
gës
(*);

259 
≥º‹
(const *);

260 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

261 
putc
(, 
FILE
 *);

262 
putch¨
();

263 
puts
(const *);

264 
ªmove
(const *);

265 
ª«me
(const *, const *);

266 
ªwöd
(
FILE
 *);

267 
sˇnf
(c⁄° * 
__ª°ri˘
, ...);

268 
£tbuf
(
FILE
 * 
__ª°ri˘
, * __restrict);

269 
£tvbuf
(
FILE
 * 
__ª°ri˘
, * __ª°ri˘, , 
size_t
);

270 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

271 
ssˇnf
(c⁄° * 
__ª°ri˘
, const * __restrict, ...);

272 
FILE
 *
tmpfûe
();

273 *
tm≤am
(*);

274 
ungëc
(, 
FILE
 *);

275 
vÂrötf
(
FILE
 * 
__ª°ri˘
, const * __restrict,

276 
__va_li°
);

277 
v¥ötf
(c⁄° * 
__ª°ri˘
, 
__va_li°
);

278 
v•rötf
(* 
__ª°ri˘
, const * __restrict,

279 
__va_li°
);

281 #i‡
__ISO_C_VISIBLE
 >= 1999

282 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

283 ...Ë
	`__¥ötÊike
(3, 4);

284 
	$vfsˇnf
(
FILE
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

285 
	`__sˇnÊike
(2, 0);

286 
	$vsˇnf
(c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__sˇnÊike
(1, 0);

287 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

288 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

289 
	$vssˇnf
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
__va_li°
)

290 
	`__sˇnÊike
(2, 0);

296 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 199506

297 
	#L_cu£rid
 17

	)

300 #i‡
__POSIX_VISIBLE


301 
	#L_˘îmid
 1024

	)

303 *
	`˘îmid
(*);

304 
FILE
 *
	`fd›í
(, const *);

305 
	`fûío
(
FILE
 *);

308 #i‡
__POSIX_VISIBLE
 >= 199209

309 
	`p˛o£
(
FILE
 *);

310 
FILE
 *
	`p›í
(const *, const *);

313 #i‡
__POSIX_VISIBLE
 >= 199506

314 
	`·rylockfûe
(
FILE
 *);

315 
	`Êockfûe
(
FILE
 *);

316 
	`fu∆ockfûe
(
FILE
 *);

322 
	`gëc_u∆ocked
(
FILE
 *);

323 
	`gëch¨_u∆ocked
();

324 
	`putc_u∆ocked
(, 
FILE
 *);

325 
	`putch¨_u∆ocked
();

327 #i‡
__BSD_VISIBLE


328 
	`˛óªº_u∆ocked
(
FILE
 *);

329 
	`„of_u∆ocked
(
FILE
 *);

330 
	`„º‹_u∆ocked
(
FILE
 *);

331 
	`fûío_u∆ocked
(
FILE
 *);

334 #i‡
__POSIX_VISIBLE
 >= 200112

335 
	`f£eko
(
FILE
 *, 
__off_t
, );

336 
__off_t
 
	`·ñlo
(
FILE
 *);

339 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 > 0 && __XSI_VISIBLE < 600

340 
	`gëw
(
FILE
 *);

341 
	`putw
(, 
FILE
 *);

344 #i‡
__XSI_VISIBLE


345 *
	`ãm≤am
(const *, const *);

348 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

349 
FILE
 *
	`fmem›í
(* 
__ª°ri˘
, 
size_t
, const * __restrict);

350 
ssize_t
 
	`gëdñim
(** 
__ª°ri˘
, 
size_t
 * __restrict, ,

351 
FILE
 * 
__ª°ri˘
);

352 
FILE
 *
	`›í_mem°ªam
(**, 
size_t
 *);

353 
	`ª«mót
(, const *, , const *);

354 
	`vd¥ötf
(, c⁄° * 
__ª°ri˘
, 
__va_li°
);

365 #i‚de‡
_WITH_GETLINE


366 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

367 
	#_WITH_GETLINE


	)

368 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

369 #i‡
_POSIX_C_SOURCE
 >= 200809

370 
	#_WITH_GETLINE


	)

375 #ifde‡
_WITH_GETLINE


376 
ssize_t
 
	`gëlöe
(** 
__ª°ri˘
, 
size_t
 * __ª°ri˘, 
FILE
 * __restrict);

379 #i‚de‡
_WITH_DPRINTF


380 #i‡
	`deföed
(
_BSD_SOURCE
Ë|| deföed(
_GNU_SOURCE
)

381 
	#_WITH_DPRINTF


	)

382 #ñi‡
	`deföed
(
_POSIX_C_SOURCE
)

383 #i‡
_POSIX_C_SOURCE
 >= 200809

384 
	#_WITH_DPRINTF


	)

389 #ifde‡
_WITH_DPRINTF


390 (
d¥ötf
)(, c⁄° * 
__ª°ri˘
, ...);

398 #i‡
__BSD_VISIBLE


399 
	$a•rötf
(**, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

400 *
	`˘îmid_r
(*);

401 
	`f˛o£Æl
();

402 
	`fd˛o£
(
FILE
 *, *);

403 *
	`fgë 
(
FILE
 *, 
size_t
 *);

404 c⁄° *
	$fmtcheck
(c⁄° *, c⁄° *Ë
	`__f‹m©_¨g
(2);

405 
	`Âurge
(
FILE
 *);

406 
	`£tbuf„r
(
FILE
 *, *, );

407 
	`£éöebuf
(
FILE
 *);

408 
	$va•rötf
(**, c⁄° *, 
__va_li°
)

409 
	`__¥ötÊike
(2, 0);

416 c⁄° 
sys_√º
;

417 c⁄° * c⁄° 
sys_îæi°
[];

422 
FILE
 *
	`fun›í
(const *,

425 
	$Âos_t
 (*)(*, 
Âos_t
, ),

427 
	#‰›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, fn, 0, 0, 0)

	)

428 
	#fw›í
(
cookõ
, 
‚
Ë
	`fun›í
(cookõ, 0, fn, 0, 0)

	)

433 #i‚de‡
_FTRUNCATE_DECLARED


434 
	#_FTRUNCATE_DECLARED


	)

435 
	`·runˇã
(, 
__off_t
);

437 #i‚de‡
_LSEEK_DECLARED


438 
	#_LSEEK_DECLARED


	)

439 
__off_t
 
	`l£ek
(, __off_t, );

441 #i‚de‡
_MMAP_DECLARED


442 
	#_MMAP_DECLARED


	)

443 *
	`mm≠
(*, 
size_t
, , , , 
__off_t
);

445 #i‚de‡
_TRUNCATE_DECLARED


446 
	#_TRUNCATE_DECLARED


	)

447 
	`åunˇã
(c⁄° *, 
__off_t
);

454 
	`__§gë
(
FILE
 *);

455 
	`__swbuf
(, 
FILE
 *);

461 
	#__sgëc
(
p
Ë(--’)->
_r
 < 0 ? 
	`__§gë
’Ë: ()(*’)->
_p
++))

	)

462 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__STDC__
)

463 
__ölöe
 
	$__•utc
(
_c
, 
FILE
 *
_p
) {

464 i‡(--
_p
->
_w
 >0 || (_p->_w >_p->
_lbfsize
 && ()
_c
 != '\n'))

465  (*
_p
->_p++ = 
_c
);

467  (
	`__swbuf
(
_c
, 
_p
));

468 
	}
}

473 
	#__•utc
(
c
, 
p
) \

474 (--(
p
)->
_w
 < 0 ? \

475 (
p
)->
_w
 >’)->
_lbfsize
 ? \

476 (*(
p
)->
_p
 = (
c
)), *(p)->_p != '\n' ? \

477 ()*(
p
)->
_p
++ : \

478 
	`__swbuf
('\n', 
p
) : \

479 
	`__swbuf
(()(
c
), 
p
) : \

480 (*(
p
)->
_p
 = (
c
), ()*’)->_p++))

	)

483 
__i°hªaded
;

485 #i‚de‡
__˝lu•lus


487 
	#__s„of
(
p
Ë((’)->
_Êags
 & 
__SEOF
Ë!0)

	)

488 
	#__s„º‹
(
p
Ë((’)->
_Êags
 & 
__SERR
Ë!0)

	)

489 
	#__s˛óªº
(
p
Ë(()(’)->
_Êags
 &~(
__SERR
|
__SEOF
)))

	)

490 
	#__sfûío
(
p
Ë(’)->
_fûe
)

	)

493 
	#„of
(
p
Ë(!
__i°hªaded
 ? 
	`__s„of
’Ë: (
„of
)’))

	)

494 
	#„º‹
(
p
Ë(!
__i°hªaded
 ? 
	`__s„º‹
’Ë: (
„º‹
)’))

	)

495 
	#˛óªº
(
p
Ë(!
__i°hªaded
 ? 
	`__s˛óªº
’Ë: (
˛óªº
)’))

	)

497 #i‡
__POSIX_VISIBLE


498 
	#fûío
(
p
Ë(!
__i°hªaded
 ? 
	`__sfûío
’Ë: (
fûío
)’))

	)

501 
	#gëc
(
Â
Ë(!
__i°hªaded
 ? 
	`__sgëc
(ÂË: (
gëc
)(Â))

	)

502 
	#putc
(
x
, 
Â
Ë(!
__i°hªaded
 ? 
	`__•utc
(x, fpË: (
putc
)(x, fp))

	)

504 
	#gëch¨
(Ë
	`gëc
(
°dö
)

	)

505 
	#putch¨
(
x
Ë
	`putc
(x, 
°dout
)

	)

507 #i‡
__BSD_VISIBLE


512 
	#„of_u∆ocked
(
p
Ë
	`__s„of
’)

	)

513 
	#„º‹_u∆ocked
(
p
Ë
	`__s„º‹
’)

	)

514 
	#˛óªº_u∆ocked
(
p
Ë
	`__s˛óªº
’)

	)

515 
	#fûío_u∆ocked
(
p
Ë
	`__sfûío
’)

	)

517 #i‡
__POSIX_VISIBLE
 >= 199506

518 
	#gëc_u∆ocked
(
Â
Ë
	`__sgëc
(Â)

	)

519 
	#putc_u∆ocked
(
x
, 
Â
Ë
	`__•utc
(x, fp)

	)

521 
	#gëch¨_u∆ocked
(Ë
	`gëc_u∆ocked
(
°dö
)

	)

522 
	#putch¨_u∆ocked
(
x
Ë
	`putc_u∆ocked
(x, 
°dout
)

	)

526 
	g__END_DECLS


	@/usr/include/stdlib.h

33 #i‚de‡
_STDLIB_H_


34 
	#_STDLIB_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_nuŒ.h
>

38 
	~<sys/_ty≥s.h
>

40 #i‡
__BSD_VISIBLE


41 #i‚de‡
_RUNE_T_DECLARED


42 
__ru√_t
 
	tru√_t
;

43 
	#_RUNE_T_DECLARED


	)

47 #i‚de‡
_SIZE_T_DECLARED


48 
__size_t
 
	tsize_t
;

49 
	#_SIZE_T_DECLARED


	)

52 #i‚def 
__˝lu•lus


53 #i‚de‡
_WCHAR_T_DECLARED


54 
___wch¨_t
 
	twch¨_t
;

55 
	#_WCHAR_T_DECLARED


	)

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 
	mquŸ
;

66 
	mªm
;

67 } 
	tldiv_t
;

69 
	#EXIT_FAILURE
 1

	)

70 
	#EXIT_SUCCESS
 0

	)

72 
	#RAND_MAX
 0x7ffffffd

	)

74 
	g__BEGIN_DECLS


75 #ifde‡
_XLOCALE_H_


76 
	~<xloˇÀ/_°dlib.h
>

78 
__mb_cur_max
;

79 
___mb_cur_max
();

80 
	#MB_CUR_MAX
 (
	`___mb_cur_max
())

	)

82 
_N‹ëu∫
 
ab‹t
();

83 
	$abs
(Ë
__puª2
;

84 
	`©exô
((*)());

85 
	`©of
(const *);

86 
	`©oi
(const *);

87 
	`©ﬁ
(const *);

88 *
	`b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

89 
size_t
, (*)(const *, const *));

90 *
	$ˇŒoc
(
size_t
, size_tË
__mÆloc_like
;

91 
div_t
 
	$div
(, Ë
__puª2
;

92 
_N‹ëu∫
 
	`exô
();

93 
	`‰ì
(*);

94 *
	`gëív
(const *);

95 
	$œbs
(Ë
__puª2
;

96 
ldiv_t
 
	$ldiv
(, Ë
__puª2
;

97 *
	$mÆloc
(
size_t
Ë
__mÆloc_like
;

98 
	`mbÀn
(c⁄° *, 
size_t
);

99 
size_t
 
	`mb°owcs
(
wch¨_t
 * 
__ª°ri˘
 , const * __restrict, size_t);

100 
	`mbtowc
(
wch¨_t
 * 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

101 
	`qs‹t
(*, 
size_t
, size_t,

103 
	`ønd
();

104 *
	`ªÆloc
(*, 
size_t
);

105 
	`§™d
();

106 
	`°πod
(c⁄° * 
__ª°ri˘
, ** __restrict);

107 
	`°πof
(c⁄° * 
__ª°ri˘
, ** __restrict);

108 
	`°πﬁ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

110 
	`°πﬁd
(c⁄° * 
__ª°ri˘
, ** __restrict);

112 
	`°πoul
(c⁄° * 
__ª°ri˘
, ** __restrict, );

113 
	`sy°em
(const *);

114 
	`w˘omb
(*, 
wch¨_t
);

115 
size_t
 
	`wc°ombs
(* 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict, size_t);

127 #i‡
__ISO_C_VISIBLE
 >1999 || 
	`deföed
(
__˝lu•lus
)

128 #ifde‡
__LONG_LONG_SUPPORTED


131 
quŸ
;

132 
ªm
;

133 } 
	tŒdiv_t
;

137 
	`©ﬁl
(const *);

140 
	$Œabs
(Ë
__puª2
;

142 
Œdiv_t
 
	$Œdiv
(, Ë
__puª2
;

145 
	`°πﬁl
(c⁄° * 
__ª°ri˘
, ** __restrict, );

148 
	`°πouŒ
(c⁄° * 
__ª°ri˘
, ** __restrict, );

151 
_N‹ëu∫
 
	`_Exô
();

157 #i‡
__ISO_C_VISIBLE
 >2011 || 
__˝lu•lus
 >= 201103L

158 * 
	$Æig√d_Æloc
(
size_t
, size_tË
__mÆloc_like
;

159 
	`©_quick_exô
((*)());

160 
_N‹ëu∫
 

161 
	`quick_exô
();

166 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE


167 *
	`ªÆ∑th
(c⁄° * 
__ª°ri˘
, * __restrict);

169 #i‡
__POSIX_VISIBLE
 >= 199506

170 
	`ønd_r
(*);

172 #i‡
__POSIX_VISIBLE
 >= 200112

173 
	`posix_memÆign
(**, 
size_t
, size_t);

174 
	`£ãnv
(const *, const *, );

175 
	`un£ãnv
(const *);

178 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


179 
	`gësub›t
(**, *const *, **);

180 #i‚de‡
_MKDTEMP_DECLARED


181 *
	`mkdãmp
(*);

182 
	#_MKDTEMP_DECLARED


	)

184 #i‚de‡
_MKSTEMP_DECLARED


185 
	`mk°emp
(*);

186 
	#_MKSTEMP_DECLARED


	)

196 #i‡
__XSI_VISIBLE


198 
	`a64l
(const *);

199 
	`dønd48
();

201 
	`î™d48
([3]);

204 
	`gø¡±
();

205 *
	`öô°©e
(, *, );

206 
	`jønd48
([3]);

207 *
	`l64a
();

208 
	`lc⁄g48
([7]);

209 
	`Ã™d48
();

210 #i‡!
	`deföed
(
_MKTEMP_DECLARED
Ë&& (
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 <= 600)

211 *
	`mkãmp
(*);

212 
	#_MKTEMP_DECLARED


	)

214 
	`mønd48
();

215 
	`ƒ™d48
([3]);

216 
	`posix_›í±
();

217 *
	`±¢ame
();

218 
	`puãnv
(*);

219 
	`øndom
();

221 *
	`£ed48
([3]);

222 #i‚de‡
_SETKEY_DECLARED


223 
	`£tkey
(const *);

224 
	#_SETKEY_DECLARED


	)

226 *
	`£t°©e
( *);

227 
	`§™d48
();

228 
	`§™dom
();

229 
	`u∆ock±
();

232 #i‡
__BSD_VISIBLE


233 c⁄° *
mÆloc_c⁄f
;

234 (*
mÆloc_mesßge
)(*, const *);

245 #i‡
__GNUC__
 >2 || 
	`deföed
(
__INTEL_COMPILER
)

246 #unde‡
Æloˇ


247 
	#Æloˇ
(
sz
Ë
	`__buûtö_Æloˇ
(sz)

	)

248 #ñi‡
	`deföed
(
löt
)

249 *
	`Æloˇ
(
size_t
);

252 
	$ab‹t2
(c⁄° *, , **Ë
__dód2
;

253 
__uöt32_t


254 
	`¨c4øndom
();

255 
	`¨c4øndom_addøndom
(*, );

256 
	`¨c4øndom_buf
(*, 
size_t
);

257 
	`¨c4øndom_°ú
();

258 
__uöt32_t


259 
	`¨c4øndom_unif‹m
(
__uöt32_t
);

260 *
	`gëbsize
(*, *);

262 *
	`cgëˇp
(*, const *, );

263 
	`cgë˛o£
();

264 
	`cgëít
(**, **, const *);

265 
	`cgëfú°
(**, **);

266 
	`cgëm©ch
(const *, const *);

267 
	`cgë√xt
(**, **);

268 
	`cgënum
(*, const *, *);

269 
	`cgë£t
(const *);

270 
	`cgë°r
(*, const *, **);

271 
	`cgëu°r
(*, const *, **);

273 
	`d´m⁄
(, );

274 *
	`dev«me
(
__dev_t
, 
__mode_t
);

275 *
	`dev«me_r
(
__dev_t
, 
__mode_t
, *, );

276 *
	`fdev«me
();

277 *
	`fdev«me_r
(, *, );

278 
	`gëlﬂdavg
([], );

280 
	`gë¥og«me
();

282 
	`hóps‹t
(*, 
size_t
, size_t, (*)(const *, const *));

283 
	`l64a_r
(, *, );

284 
	`mîges‹t
(*, 
size_t
, size_t, (*)(const *, const *));

285 
	`mko°emp
(*, );

286 
	`mko°emps
(*, , );

287 
	`qs‹t_r
(*, 
size_t
, size_t, *,

289 
	`ødixs‹t
(const **, , const *,

291 *
	`ªÆlocf
(*, 
size_t
);

292 
	`Ωm©ch
(const *);

293 
	`£çrog«me
(const *);

294 
	`§adixs‹t
(const **, , const *,

296 
	`§™ddev
();

297 
	`§™domdev
();

299 
	`°π⁄um
(const *, , , const **);

302 
__öt64_t


303 
	`°πoq
(const *, **, );

304 
__uöt64_t


305 
	`°πouq
(const *, **, );

307 *
sub›èrg
;

309 
__END_DECLS


	@/usr/include/string.h

33 #i‚de‡
_STRING_H_


34 
	#_STRING_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_nuŒ.h
>

38 
	~<sys/_ty≥s.h
>

44 #i‡
__BSD_VISIBLE


45 
	~<°rögs.h
>

48 #i‚de‡
_SIZE_T_DECLARED


49 
__size_t
 
	tsize_t
;

50 
	#_SIZE_T_DECLARED


	)

53 
	g__BEGIN_DECLS


54 #i‡
__XSI_VISIBLE
 >= 600

55 *
memc˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, , 
size_t
);

57 *
	$memchr
(c⁄° *, , 
size_t
Ë
__puª
;

58 #i‡
__BSD_VISIBLE


59 *
	$memrchr
(c⁄° *, , 
size_t
Ë
__puª
;

61 
	$memcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

62 *
	`mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

63 #i‡
__BSD_VISIBLE


64 *
	$memmem
(c⁄° *, 
size_t
, c⁄° *, size_tË
__puª
;

66 *
	`memmove
(*, c⁄° *, 
size_t
);

67 *
	`mem£t
(*, , 
size_t
);

68 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


69 *
	`°p˝y
(* 
__ª°ri˘
, const * __restrict);

70 *
	`°≤˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

72 #i‡
__BSD_VISIBLE


73 *
	$°rˇ£°r
(c⁄° *, c⁄° *Ë
__puª
;

75 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

76 *
	$°rchr
(c⁄° *, Ë
__puª
;

77 #i‡
__BSD_VISIBLE


78 *
	$°rch∫ul
(c⁄° *, Ë
__puª
;

80 
	$°rcmp
(c⁄° *, c⁄° *Ë
__puª
;

81 
	`°rcﬁl
(const *, const *);

82 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

83 
size_t
 
	$°rc•n
(c⁄° *, c⁄° *Ë
__puª
;

84 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


85 *
	$°rdup
(c⁄° *Ë
__mÆloc_like
;

87 *
	`°ªº‹
();

88 #i‡
__POSIX_VISIBLE
 >= 200112

89 
	`°ªº‹_r
(, *, 
size_t
);

91 #i‡
__BSD_VISIBLE


92 
size_t
 
	`°æˇt
(* 
__ª°ri˘
, const * __restrict, size_t);

93 
size_t
 
	`°æ˝y
(* 
__ª°ri˘
, const * __restrict, size_t);

95 
size_t
 
	$°æí
(c⁄° *Ë
__puª
;

96 #i‡
__BSD_VISIBLE


97 
	`°rmode
(, *);

99 *
	`°∫ˇt
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

100 
	$°∫cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

101 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

102 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


103 *
	$°∫dup
(c⁄° *, 
size_t
Ë
__mÆloc_like
;

104 
size_t
 
	$°∫Àn
(c⁄° *, 
size_t
Ë
__puª
;

106 #i‡
__BSD_VISIBLE


107 *
	$°∫°r
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

109 *
	$°Ωbrk
(c⁄° *, c⁄° *Ë
__puª
;

110 *
	$°ºchr
(c⁄° *, Ë
__puª
;

111 #i‡
__BSD_VISIBLE


112 *
	`°r£p
(**, const *);

114 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


115 *
	`°rsig«l
();

117 
size_t
 
	$°r•n
(c⁄° *, c⁄° *Ë
__puª
;

118 *
	$°r°r
(c⁄° *, c⁄° *Ë
__puª
;

119 *
	`°πok
(* 
__ª°ri˘
, const * __restrict);

120 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE
 >= 500

121 *
	`°πok_r
(*, const *, **);

123 
size_t
 
	`°rx‰m
(* 
__ª°ri˘
, const * __restrict, size_t);

124 #i‡
__BSD_VISIBLE


126 #i‚de‡
_SWAB_DECLARED


127 
	#_SWAB_DECLARED


	)

129 #i‚de‡
_SSIZE_T_DECLARED


130 
__ssize_t
 
	tssize_t
;

131 
	#_SSIZE_T_DECLARED


	)

134 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

139 #i‡
__POSIX_VISIBLE
 >200809 || 
	`deföed
(
_XLOCALE_H_
)

140 
	~<xloˇÀ/_°rög.h
>

142 
__END_DECLS


	@/usr/include/strings.h

29 #i‚de‡
_STRINGS_H_


30 
	#_STRINGS_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 #i‚de‡
_SIZE_T_DECLARED


36 
__size_t
 
	tsize_t
;

37 
	#_SIZE_T_DECLARED


	)

40 
	g__BEGIN_DECLS


41 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

42 
	$bcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

43 
	`bc›y
(c⁄° *, *, 
size_t
);

44 
	`bzîo
(*, 
size_t
);

46 #i‡
__XSI_VISIBLE


47 
	$ffs
(Ë
__puª2
;

49 #i‡
__BSD_VISIBLE


50 
	$ff¶
(Ë
__puª2
;

51 
	$ff¶l
(Ë
__puª2
;

52 
	$Ês
(Ë
__puª2
;

53 
	$Ê¶
(Ë
__puª2
;

54 
	$Ê¶l
(Ë
__puª2
;

56 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 <= 200112

57 *
	$ödex
(c⁄° *, Ë
__puª
;

58 *
	$rödex
(c⁄° *, Ë
__puª
;

60 
	$°rˇ£cmp
(c⁄° *, c⁄° *Ë
__puª
;

61 
	$°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

63 #i‡
__POSIX_VISIBLE
 >200809 || 
	`deföed
(
_XLOCALE_H_
)

64 
	~<xloˇÀ/_°rögs.h
>

66 
__END_DECLS


	@/usr/include/sys/bus.h

29 #i‚de‡
_SYS_BUS_H_


30 
	#_SYS_BUS_H_


	)

32 
	~<machöe/_limôs.h
>

33 
	~<sys/_bus_dma.h
>

34 
	~<sys/ioccom.h
>

44 
	su_busöfo
 {

45 
	mub_vîsi⁄
;

46 
	#BUS_USER_VERSION
 1

	)

47 
	mub_gíî©i⁄
;

53 
	edevi˚_°©e
 {

54 
	mDS_NOTPRESENT
 = 10,

55 
	mDS_ALIVE
 = 20,

56 
	mDS_ATTACHING
 = 25,

57 
	mDS_ATTACHED
 = 30,

58 
	mDS_BUSY
 = 40

59 } 
	tdevi˚_°©e_t
;

64 
	su_devi˚
 {

65 
uöçå_t
 
	mdv_h™dÀ
;

66 
uöçå_t
 
	mdv_∑ª¡
;

68 
	mdv_«me
[32];

69 
	mdv_desc
[32];

70 
	mdv_drivî«me
[32];

71 
	mdv_≤pöfo
[128];

72 
	mdv_loˇti⁄
[128];

73 
uöt32_t
 
	mdv_devÊags
;

74 
uöt16_t
 
	mdv_Êags
;

75 
devi˚_°©e_t
 
	mdv_°©e
;

85 
	sdevªq_buf„r
 {

86 *
	mbuf„r
;

87 
size_t
 
	mÀngth
;

90 
	sdevªq
 {

91 
	mdr_«me
[128];

92 
	mdr_Êags
;

94 
devªq_buf„r
 
	mdru_buf„r
;

95 *
	mdru_d©a
;

96 } 
	mdr_dru
;

97 
	#dr_buf„r
 
dr_dru
.
dru_buf„r


	)

98 
	#dr_d©a
 
dr_dru
.
dru_d©a


	)

101 
	#DEV_ATTACH
 
	`_IOW
('D', 1, 
devªq
)

	)

102 
	#DEV_DETACH
 
	`_IOW
('D', 2, 
devªq
)

	)

103 
	#DEV_ENABLE
 
	`_IOW
('D', 3, 
devªq
)

	)

104 
	#DEV_DISABLE
 
	`_IOW
('D', 4, 
devªq
)

	)

105 
	#DEV_SET_DRIVER
 
	`_IOW
('D', 7, 
devªq
)

	)

108 
	#DEVF_FORCE_DETACH
 0x0000001

	)

111 
	#DEVF_SET_DRIVER_DETACH
 0x0000001

	)

113 #ifde‡
_KERNEL


115 
	~<sys/evíth™dÀr.h
>

116 
	~<sys/kobj.h
>

123 
boﬁón_t
 
dev˘l_¥o˚ss_ru¬ög
();

124 
dev˘l_nŸify_f
(c⁄° *
__sy°em
, c⁄° *
__subsy°em
,

125 c⁄° *
__ty≥
, c⁄° *
__d©a
, 
__Êags
);

126 
dev˘l_nŸify
(c⁄° *
__sy°em
, c⁄° *
__subsy°em
,

127 c⁄° *
__ty≥
, c⁄° *
__d©a
);

128 
dev˘l_queue_d©a_f
(*
__d©a
, 
__Êags
);

129 
dev˘l_queue_d©a
(*
__d©a
);

135 (*
	tdev_lookup_‚
)(*
	t¨g
, c⁄° *
	t«me
,

136 
	tdevi˚_t
 *
	tªsu…
);

137 
	`EVENTHANDLER_DECLARE
(
dev_lookup
, 
dev_lookup_‚
);

143 
kobj_˛ass
 
	tdrivî_t
;

165 
dev˛ass
 *
	tdev˛ass_t
;

171 
	#devi˚_mëhod_t
 
kobj_mëhod_t


	)

191 
	#FILTER_STRAY
 0x01

	)

192 
	#FILTER_HANDLED
 0x02

	)

193 
	#FILTER_SCHEDULE_THREAD
 0x04

	)

210 
	tdrivî_fûãr_t
(*);

211 
	tdrivî_öå_t
(*);

227 
	eöå_ty≥
 {

228 
INTR_TYPE_TTY
 = 1,

229 
INTR_TYPE_BIO
 = 2,

230 
INTR_TYPE_NET
 = 4,

231 
INTR_TYPE_CAM
 = 8,

232 
INTR_TYPE_MISC
 = 16,

233 
INTR_TYPE_CLK
 = 32,

234 
INTR_TYPE_AV
 = 64,

235 
INTR_EXCL
 = 256,

236 
INTR_MPSAFE
 = 512,

237 
INTR_ENTROPY
 = 1024,

238 
INTR_MD1
 = 4096,

239 
INTR_MD2
 = 8192,

240 
INTR_MD3
 = 16384,

241 
INTR_MD4
 = 32768

244 
	eöå_åiggî
 {

245 
INTR_TRIGGER_CONFORM
 = 0,

246 
INTR_TRIGGER_EDGE
 = 1,

247 
INTR_TRIGGER_LEVEL
 = 2

250 
	eöå_pﬁ¨ôy
 {

251 
INTR_POLARITY_CONFORM
 = 0,

252 
INTR_POLARITY_HIGH
 = 1,

253 
INTR_POLARITY_LOW
 = 2

256 (*
	tdev›_t
)();

264 
	sdrivî
 {

265 
KOBJ_CLASS_FIELDS
;

272 
ªsour˚
;

277 
	sªsour˚_li°_íåy
 {

278 
	`STAILQ_ENTRY
(
ªsour˚_li°_íåy
Ë
lök
;

279 
ty≥
;

280 
rid
;

281 
Êags
;

282 
ªsour˚
 *
ªs
;

283 
u_l⁄g
 
°¨t
;

284 
u_l⁄g
 
íd
;

285 
u_l⁄g
 
cou¡
;

287 
	`STAILQ_HEAD
(
ªsour˚_li°
, 
ªsour˚_li°_íåy
);

289 
	#RLE_RESERVED
 0x0001

	)

290 
	#RLE_ALLOCATED
 0x0002

	)

291 
	#RLE_PREFETCH
 0x0004

	)

293 
	`ªsour˚_li°_öô
(
ªsour˚_li°
 *
æ
);

294 
	`ªsour˚_li°_‰ì
(
ªsour˚_li°
 *
æ
);

295 
ªsour˚_li°_íåy
 *

296 
	`ªsour˚_li°_add
(
ªsour˚_li°
 *
æ
,

297 
ty≥
, 
rid
,

298 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
, u_l⁄g 
cou¡
);

299 
	`ªsour˚_li°_add_√xt
(
ªsour˚_li°
 *
æ
,

300 
ty≥
,

301 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
, u_l⁄g 
cou¡
);

302 
	`ªsour˚_li°_busy
(
ªsour˚_li°
 *
æ
,

303 
ty≥
, 
rid
);

304 
	`ªsour˚_li°_ª£rved
(
ªsour˚_li°
 *
æ
, 
ty≥
, 
rid
);

305 
ªsour˚_li°_íåy
*

306 
	`ªsour˚_li°_föd
(
ªsour˚_li°
 *
æ
,

307 
ty≥
, 
rid
);

308 
	`ªsour˚_li°_dñëe
(
ªsour˚_li°
 *
æ
,

309 
ty≥
, 
rid
);

310 
ªsour˚
 *

311 
	`ªsour˚_li°_Æloc
(
ªsour˚_li°
 *
æ
,

312 
devi˚_t
 
bus
, devi˚_à
chûd
,

313 
ty≥
, *
rid
,

314 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
,

315 
u_l⁄g
 
cou¡
, 
u_öt
 
Êags
);

316 
	`ªsour˚_li°_ªÀa£
(
ªsour˚_li°
 *
æ
,

317 
devi˚_t
 
bus
, devi˚_à
chûd
,

318 
ty≥
, 
rid
, 
ªsour˚
 *
ªs
);

319 
	`ªsour˚_li°_ªÀa£_a˘ive
(
ªsour˚_li°
 *
æ
,

320 
devi˚_t
 
bus
, devi˚_à
chûd
,

321 
ty≥
);

322 
ªsour˚
 *

323 
	`ªsour˚_li°_ª£rve
(
ªsour˚_li°
 *
æ
,

324 
devi˚_t
 
bus
, devi˚_à
chûd
,

325 
ty≥
, *
rid
,

326 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
,

327 
u_l⁄g
 
cou¡
, 
u_öt
 
Êags
);

328 
	`ªsour˚_li°_uƒe£rve
(
ªsour˚_li°
 *
æ
,

329 
devi˚_t
 
bus
, devi˚_à
chûd
,

330 
ty≥
, 
rid
);

331 
	`ªsour˚_li°_purge
(
ªsour˚_li°
 *
æ
);

332 
	`ªsour˚_li°_¥öt_ty≥
(
ªsour˚_li°
 *
æ
,

333 c⁄° *
«me
, 
ty≥
,

334 c⁄° *
f‹m©
);

339 
devi˚_t
 
roŸ_bus
;

340 
dev˛ass_t
 
roŸ_dev˛ass
;

341 
	`roŸ_bus_c⁄figuª
();

347 
	`bus_gíîic_a˘iv©e_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

348 
rid
, 
ªsour˚
 *
r
);

349 
devi˚_t


350 
	`bus_gíîic_add_chûd
(
devi˚_t
 
dev
, 
u_öt
 
‹dî
, c⁄° *
«me
,

351 
unô
);

352 
	`bus_gíîic_adju°_ªsour˚
(
devi˚_t
 
bus
, devi˚_à
chûd
, 
ty≥
,

353 
ªsour˚
 *
r
, 
u_l⁄g
 
°¨t
,

354 
u_l⁄g
 
íd
);

355 
ªsour˚
 *

356 
	`bus_gíîic_Æloc_ªsour˚
(
devi˚_t
 
bus
, devi˚_à
chûd
, 
ty≥
,

357 *
rid
, 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
,

358 
u_l⁄g
 
cou¡
, 
u_öt
 
Êags
);

359 
	`bus_gíîic_©èch
(
devi˚_t
 
dev
);

360 
	`bus_gíîic_böd_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

361 
ªsour˚
 *
úq
, 
˝u
);

362 
	`bus_gíîic_chûd_¥e£¡
(
devi˚_t
 
dev
, devi˚_à
chûd
);

363 
	`bus_gíîic_c⁄fig_öå
(
devi˚_t
, , 
öå_åiggî
,

364 
öå_pﬁ¨ôy
);

365 
	`bus_gíîic_des¸ibe_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

366 
ªsour˚
 *
úq
, *
cookõ
,

367 c⁄° *
des¸
);

368 
	`bus_gíîic_dó˘iv©e_ªsour˚
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
ty≥
,

369 
rid
, 
ªsour˚
 *
r
);

370 
	`bus_gíîic_dëach
(
devi˚_t
 
dev
);

371 
	`bus_gíîic_drivî_added
(
devi˚_t
 
dev
, 
drivî_t
 *
drivî
);

372 
bus_dma_èg_t


373 
	`bus_gíîic_gë_dma_èg
(
devi˚_t
 
dev
, devi˚_à
chûd
);

374 
ªsour˚_li°
 *

375 
	`bus_gíîic_gë_ªsour˚_li°
 (
devi˚_t
, device_t);

376 
	`bus_gíîic_√w_∑ss
(
devi˚_t
 
dev
);

377 
	`bus_¥öt_chûd_hódî
(
devi˚_t
 
dev
, devi˚_à
chûd
);

378 
	`bus_¥öt_chûd_domaö
(
devi˚_t
 
dev
, devi˚_à
chûd
);

379 
	`bus_¥öt_chûd_foŸî
(
devi˚_t
 
dev
, devi˚_à
chûd
);

380 
	`bus_gíîic_¥öt_chûd
(
devi˚_t
 
dev
, devi˚_à
chûd
);

381 
	`bus_gíîic_¥obe
(
devi˚_t
 
dev
);

382 
	`bus_gíîic_ªad_iv¨
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
which
,

383 
uöçå_t
 *
ªsu…
);

384 
	`bus_gíîic_ªÀa£_ªsour˚
(
devi˚_t
 
bus
, devi˚_à
chûd
,

385 
ty≥
, 
rid
, 
ªsour˚
 *
r
);

386 
	`bus_gíîic_ªsume
(
devi˚_t
 
dev
);

387 
	`bus_gíîic_£tup_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

388 
ªsour˚
 *
úq
, 
Êags
,

389 
drivî_fûãr_t
 *
fûãr
, 
drivî_öå_t
 *
öå
,

390 *
¨g
, **
cookõp
);

392 
ªsour˚
 *

393 
	`bus_gíîic_æ_Æloc_ªsour˚
 (
devi˚_t
, device_t, , *,

394 
u_l⁄g
, u_l⁄g, u_l⁄g, 
u_öt
);

395 
	`bus_gíîic_æ_dñëe_ªsour˚
 (
devi˚_t
, device_t, , );

396 
	`bus_gíîic_æ_gë_ªsour˚
 (
devi˚_t
, devi˚_t, , , 
u_l⁄g
 *,

397 
u_l⁄g
 *);

398 
	`bus_gíîic_æ_£t_ªsour˚
 (
devi˚_t
, devi˚_t, , , 
u_l⁄g
,

399 
u_l⁄g
);

400 
	`bus_gíîic_æ_ªÀa£_ªsour˚
 (
devi˚_t
, device_t, , ,

401 
ªsour˚
 *);

403 
	`bus_gíîic_shutdown
(
devi˚_t
 
dev
);

404 
	`bus_gíîic_su•íd
(
devi˚_t
 
dev
);

405 
	`bus_gíîic_ã¨down_öå
(
devi˚_t
 
dev
, devi˚_à
chûd
,

406 
ªsour˚
 *
úq
, *
cookõ
);

407 
	`bus_gíîic_wrôe_iv¨
(
devi˚_t
 
dev
, devi˚_à
chûd
, 
which
,

408 
uöçå_t
 
vÆue
);

410 
	`bus_gíîic_gë_domaö
(
devi˚_t
 
dev
, devi˚_à
chûd
, *
domaö
);

417 
	sªsour˚_•ec
 {

418 
ty≥
;

419 
rid
;

420 
Êags
;

423 
	`bus_Æloc_ªsour˚s
(
devi˚_t
 
dev
, 
ªsour˚_•ec
 *
rs
,

424 
ªsour˚
 **
ªs
);

425 
	`bus_ªÀa£_ªsour˚s
(
devi˚_t
 
dev
, c⁄° 
ªsour˚_•ec
 *
rs
,

426 
ªsour˚
 **
ªs
);

428 
	`bus_adju°_ªsour˚
(
devi˚_t
 
chûd
, 
ty≥
, 
ªsour˚
 *
r
,

429 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
);

430 
ªsour˚
 *
	`bus_Æloc_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, *
rid
,

431 
u_l⁄g
 
°¨t
, u_l⁄g 
íd
, u_l⁄g 
cou¡
,

432 
u_öt
 
Êags
);

433 
	`bus_a˘iv©e_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

434 
ªsour˚
 *
r
);

435 
	`bus_dó˘iv©e_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

436 
ªsour˚
 *
r
);

437 
bus_dma_èg_t
 
	`bus_gë_dma_èg
(
devi˚_t
 
dev
);

438 
	`bus_gë_domaö
(
devi˚_t
 
dev
, *
domaö
);

439 
	`bus_ªÀa£_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

440 
ªsour˚
 *
r
);

441 
	`bus_‰ì_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
ªsour˚
 *
r
);

442 
	`bus_£tup_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
r
, 
Êags
,

443 
drivî_fûãr_t
 
fûãr
, 
drivî_öå_t
 
h™dÀr
,

444 *
¨g
, **
cookõp
);

445 
	`bus_ã¨down_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
r
, *
cookõ
);

446 
	`bus_böd_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
r
, 
˝u
);

447 
	`bus_des¸ibe_öå
(
devi˚_t
 
dev
, 
ªsour˚
 *
úq
, *
cookõ
,

448 c⁄° *
fmt
, ...);

449 
	`bus_£t_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

450 
u_l⁄g
 
°¨t
, u_l⁄g 
cou¡
);

451 
	`bus_gë_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
,

452 
u_l⁄g
 *
°¨ç
, u_l⁄g *
cou¡p
);

453 
u_l⁄g
 
	`bus_gë_ªsour˚_°¨t
(
devi˚_t
 
dev
, 
ty≥
, 
rid
);

454 
u_l⁄g
 
	`bus_gë_ªsour˚_cou¡
(
devi˚_t
 
dev
, 
ty≥
, 
rid
);

455 
	`bus_dñëe_ªsour˚
(
devi˚_t
 
dev
, 
ty≥
, 
rid
);

456 
	`bus_chûd_¥e£¡
(
devi˚_t
 
chûd
);

457 
	`bus_chûd_≤pöfo_°r
(
devi˚_t
 
chûd
, *
buf
, 
size_t
 
buÊí
);

458 
	`bus_chûd_loˇti⁄_°r
(
devi˚_t
 
chûd
, *
buf
, 
size_t
 
buÊí
);

459 
	`bus_íumî©e_höãd_chûdªn
(
devi˚_t
 
bus
);

461 
__ölöe
 
ªsour˚
 *

462 
	$bus_Æloc_ªsour˚_™y
(
devi˚_t
 
dev
, 
ty≥
, *
rid
, 
u_öt
 
Êags
)

464  (
	`bus_Æloc_ªsour˚
(
dev
, 
ty≥
, 
rid
, 0ul, ~0ul, 1, 
Êags
));

465 
	}
}

470 
devi˚_t
 
devi˚_add_chûd
(devi˚_à
dev
, c⁄° *
«me
, 
unô
);

471 
devi˚_t
 
devi˚_add_chûd_‹dîed
(devi˚_à
dev
, 
u_öt
 
‹dî
,

472 c⁄° *
«me
, 
unô
);

473 
devi˚_busy
(
devi˚_t
 
dev
);

474 
devi˚_dñëe_chûd
(
devi˚_t
 
dev
, devi˚_à
chûd
);

475 
devi˚_dñëe_chûdªn
(
devi˚_t
 
dev
);

476 
devi˚_©èch
(
devi˚_t
 
dev
);

477 
devi˚_dëach
(
devi˚_t
 
dev
);

478 
devi˚_dißbÀ
(
devi˚_t
 
dev
);

479 
devi˚_íabÀ
(
devi˚_t
 
dev
);

480 
devi˚_t
 
devi˚_föd_chûd
(devi˚_à
dev
, c⁄° *
˛as¢ame
,

481 
unô
);

482 c⁄° *
devi˚_gë_desc
(
devi˚_t
 
dev
);

483 
dev˛ass_t
 
devi˚_gë_dev˛ass
(
devi˚_t
 
dev
);

484 
drivî_t
 *
devi˚_gë_drivî
(
devi˚_t
 
dev
);

485 
u_öt32_t
 
devi˚_gë_Êags
(
devi˚_t
 
dev
);

486 
devi˚_t
 
devi˚_gë_∑ª¡
(devi˚_à
dev
);

487 
devi˚_gë_chûdªn
(
devi˚_t
 
dev
, devi˚_à**
li°p
, *
cou¡p
);

488 *
devi˚_gë_iv¨s
(
devi˚_t
 
dev
);

489 
devi˚_£t_iv¨s
(
devi˚_t
 
dev
, *
iv¨s
);

490 c⁄° *
devi˚_gë_«me
(
devi˚_t
 
dev
);

491 c⁄° *
devi˚_gë_«meunô
(
devi˚_t
 
dev
);

492 *
devi˚_gë_so·c
(
devi˚_t
 
dev
);

493 
devi˚_°©e_t
 
devi˚_gë_°©e
(
devi˚_t
 
dev
);

494 
devi˚_gë_unô
(
devi˚_t
 
dev
);

495 
sys˘l_˘x_li°
 *
devi˚_gë_sys˘l_˘x
(
devi˚_t
 
dev
);

496 
sys˘l_oid
 *
devi˚_gë_sys˘l_åì
(
devi˚_t
 
dev
);

497 
devi˚_is_Æive
(
devi˚_t
 
dev
);

498 
devi˚_is_©èched
(
devi˚_t
 
dev
);

499 
devi˚_is_íabÀd
(
devi˚_t
 
dev
);

500 
devi˚_is_su•íded
(
devi˚_t
 
dev
);

501 
devi˚_is_quõt
(
devi˚_t
 
dev
);

502 
devi˚_¥öt_¥ëty«me
(
devi˚_t
 
dev
);

503 
	$devi˚_¥ötf
(
devi˚_t
 
dev
, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

504 
	`devi˚_¥obe
(
devi˚_t
 
dev
);

505 
	`devi˚_¥obe_™d_©èch
(
devi˚_t
 
dev
);

506 
	`devi˚_¥obe_chûd
(
devi˚_t
 
bus
, devi˚_à
dev
);

507 
	`devi˚_quõs˚
(
devi˚_t
 
dev
);

508 
	`devi˚_quõt
(
devi˚_t
 
dev
);

509 
	`devi˚_£t_desc
(
devi˚_t
 
dev
, c⁄° * 
desc
);

510 
	`devi˚_£t_desc_c›y
(
devi˚_t
 
dev
, c⁄° * 
desc
);

511 
	`devi˚_£t_dev˛ass
(
devi˚_t
 
dev
, c⁄° *
˛as¢ame
);

512 
	`devi˚_£t_drivî
(
devi˚_t
 
dev
, 
drivî_t
 *
drivî
);

513 
	`devi˚_£t_Êags
(
devi˚_t
 
dev
, 
u_öt32_t
 
Êags
);

514 
	`devi˚_£t_so·c
(
devi˚_t
 
dev
, *
so·c
);

515 
	`devi˚_‰ì_so·c
(*
so·c
);

516 
	`devi˚_˛aim_so·c
(
devi˚_t
 
dev
);

517 
	`devi˚_£t_unô
(
devi˚_t
 
dev
, 
unô
);

518 
	`devi˚_shutdown
(
devi˚_t
 
dev
);

519 
	`devi˚_unbusy
(
devi˚_t
 
dev
);

520 
	`devi˚_vîbo£
(
devi˚_t
 
dev
);

525 
	`dev˛ass_add_drivî
(
dev˛ass_t
 
dc
, 
drivî_t
 *
drivî
,

526 
∑ss
, 
dev˛ass_t
 *
d˝
);

527 
dev˛ass_t
 
	`dev˛ass_¸óã
(c⁄° *
˛as¢ame
);

528 
	`dev˛ass_dñëe_drivî
(
dev˛ass_t
 
bus˛ass
, 
drivî_t
 *
drivî
);

529 
dev˛ass_t
 
	`dev˛ass_föd
(c⁄° *
˛as¢ame
);

530 c⁄° *
	`dev˛ass_gë_«me
(
dev˛ass_t
 
dc
);

531 
devi˚_t
 
	`dev˛ass_gë_devi˚
(
dev˛ass_t
 
dc
, 
unô
);

532 *
	`dev˛ass_gë_so·c
(
dev˛ass_t
 
dc
, 
unô
);

533 
	`dev˛ass_gë_devi˚s
(
dev˛ass_t
 
dc
, 
devi˚_t
 **
li°p
, *
cou¡p
);

534 
	`dev˛ass_gë_drivîs
(
dev˛ass_t
 
dc
, 
drivî_t
 ***
li°p
, *
cou¡p
);

535 
	`dev˛ass_gë_cou¡
(
dev˛ass_t
 
dc
);

536 
	`dev˛ass_gë_maxunô
(
dev˛ass_t
 
dc
);

537 
	`dev˛ass_föd_‰ì_unô
(
dev˛ass_t
 
dc
, 
unô
);

538 
	`dev˛ass_£t_∑ª¡
(
dev˛ass_t
 
dc
, dev˛ass_à
pdc
);

539 
dev˛ass_t
 
	`dev˛ass_gë_∑ª¡
(dev˛ass_à
dc
);

540 
sys˘l_˘x_li°
 *
	`dev˛ass_gë_sys˘l_˘x
(
dev˛ass_t
 
dc
);

541 
sys˘l_oid
 *
	`dev˛ass_gë_sys˘l_åì
(
dev˛ass_t
 
dc
);

547 
	`ªsour˚_öt_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

548 *
ªsu…
);

549 
	`ªsour˚_l⁄g_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

550 *
ªsu…
);

551 
	`ªsour˚_°rög_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

552 c⁄° **
ªsu…
);

553 
	`ªsour˚_dißbÀd
(c⁄° *
«me
, 
unô
);

554 
	`ªsour˚_föd_m©ch
(*
™ch‹
, c⁄° **
«me
, *
unô
,

555 c⁄° *
ª¢ame
, c⁄° *
vÆue
);

556 
	`ªsour˚_föd_dev
(*
™ch‹
, c⁄° *
«me
, *
unô
,

557 c⁄° *
ª¢ame
, c⁄° *
vÆue
);

558 
	`ªsour˚_£t_öt
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

559 
vÆue
);

560 
	`ªsour˚_£t_l⁄g
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

561 
vÆue
);

562 
	`ªsour˚_£t_°rög
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
,

563 c⁄° *
vÆue
);

564 
	`ªsour˚_un£t_vÆue
(c⁄° *
«me
, 
unô
, c⁄° *
ª¢ame
);

570 
	`bus_d©a_gíî©i⁄_check
(
gíî©i⁄
);

571 
	`bus_d©a_gíî©i⁄_upd©e
();

596 
	#BUS_PROBE_SPECIFIC
 0

	)

597 
	#BUS_PROBE_VENDOR
 (-10Ë

	)

598 
	#BUS_PROBE_DEFAULT
 (-20Ë

	)

599 
	#BUS_PROBE_LOW_PRIORITY
 (-40Ë

	)

600 
	#BUS_PROBE_GENERIC
 (-100Ë

	)

601 
	#BUS_PROBE_HOOVER
 (-500Ë

	)

602 
	#BUS_PROBE_NOWILDCARD
 (-2000000000Ë

	)

613 
	#BUS_PASS_ROOT
 0

	)

614 
	#BUS_PASS_BUS
 10

	)

615 
	#BUS_PASS_CPU
 20

	)

616 
	#BUS_PASS_RESOURCE
 30

	)

617 
	#BUS_PASS_INTERRUPT
 40

	)

618 
	#BUS_PASS_TIMER
 50

	)

619 
	#BUS_PASS_SCHEDULER
 60

	)

620 
	#BUS_PASS_DEFAULT
 
__INT_MAX


	)

622 
	#BUS_PASS_ORDER_FIRST
 0

	)

623 
	#BUS_PASS_ORDER_EARLY
 2

	)

624 
	#BUS_PASS_ORDER_MIDDLE
 5

	)

625 
	#BUS_PASS_ORDER_LATE
 7

	)

626 
	#BUS_PASS_ORDER_LAST
 9

	)

628 
bus_cuºít_∑ss
;

630 
	`bus_£t_∑ss
(
∑ss
);

635 
	#DEVMETHOD
 
KOBJMETHOD


	)

636 
	#DEVMETHOD_END
 
KOBJMETHOD_END


	)

641 
	~"devi˚_if.h
"

642 
	~"bus_if.h
"

644 
moduÀ
;

646 
	`drivî_moduÀ_h™dÀr
(
moduÀ
 *, , *);

651 
	sdrivî_moduÀ_d©a
 {

652 (*
dmd_chaöevh
)(
moduÀ
 *, , *);

653 *
dmd_chaö¨g
;

654 c⁄° *
dmd_bu¢ame
;

655 
kobj_˛ass_t
 
dmd_drivî
;

656 
dev˛ass_t
 *
dmd_dev˛ass
;

657 
dmd_∑ss
;

660 
	#EARLY_DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, \

661 
evh
, 
¨g
, 
‹dî
, 
∑ss
) \

663 
drivî_moduÀ_d©a
 
«me
##
_
##
bu¢ame
##
_drivî_mod
 = { \

664 
evh
, 
¨g
, \

666 (
kobj_˛ass_t
Ë&
drivî
, \

667 &
dev˛ass
, \

668 
∑ss
 \

669 
	}
}; \

671 
moduÀd©a_t
 
«me
##
_
##
bu¢ame
##
_mod
 = { \

673 
drivî_moduÀ_h™dÀr
, \

674 &
«me
##
_
##
bu¢ame
##
_drivî_mod
 \

676 
	`DECLARE_MODULE
(
«me
##
_
##
bu¢ame
,Çame##_##bu¢ame##
_mod
, \

677 
SI_SUB_DRIVERS
, 
‹dî
)

	)

679 
	#EARLY_DRIVER_MODULE
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
, 
∑ss
) \

680 
	`EARLY_DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, \

681 
evh
, 
¨g
, 
SI_ORDER_MIDDLE
, 
∑ss
)

	)

683 
	#DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
,\

684 
‹dî
) \

685 
	`EARLY_DRIVER_MODULE_ORDERED
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, \

686 
evh
, 
¨g
, 
‹dî
, 
BUS_PASS_DEFAULT
)

	)

688 
	#DRIVER_MODULE
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
) \

689 
	`EARLY_DRIVER_MODULE
(
«me
, 
bu¢ame
, 
drivî
, 
dev˛ass
, 
evh
, 
¨g
, \

690 
BUS_PASS_DEFAULT
)

	)

695 
	#__BUS_ACCESSOR
(
v¨p
, 
v¨
, 
iv¨p
, 
iv¨
, 
ty≥
) \

697 
__ölöe
 
ty≥
 
v¨p
 ## 
_gë_
 ## 
	`v¨
(
devi˚_t
 
dev
) \

699 
uöçå_t
 
v
; \

700 
	`BUS_READ_IVAR
(
	`devi˚_gë_∑ª¡
(
dev
), dev, \

701 
iv¨p
 ## 
_IVAR_
 ## 
iv¨
, &
v
); \

702  ((
ty≥
Ë
v
); \

705 
__ölöe
 
v¨p
 ## 
_£t_
 ## 
	`v¨
(
devi˚_t
 
dev
, 
ty≥
 
t
) \

707 
uöçå_t
 
v
 = (uöçå_tË
t
; \

708 
	`BUS_WRITE_IVAR
(
	`devi˚_gë_∑ª¡
(
dev
), dev, \

709 
iv¨p
 ## 
_IVAR_
 ## 
iv¨
, 
v
); \

710 }

	)

717 
	#bus_b¨rõr
(
r
, 
o
, 
l
, 
f
) \

718 
	`bus_•a˚_b¨rõr
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
l
), (
f
))

	)

719 
	#bus_ªad_1
(
r
, 
o
) \

720 
	`bus_•a˚_ªad_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

721 
	#bus_ªad_mu…i_1
(
r
, 
o
, 
d
, 
c
) \

722 
	`bus_•a˚_ªad_mu…i_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

723 
	#bus_ªad_ªgi⁄_1
(
r
, 
o
, 
d
, 
c
) \

724 
	`bus_•a˚_ªad_ªgi⁄_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

725 
	#bus_£t_mu…i_1
(
r
, 
o
, 
v
, 
c
) \

726 
	`bus_•a˚_£t_mu…i_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

727 
	#bus_£t_ªgi⁄_1
(
r
, 
o
, 
v
, 
c
) \

728 
	`bus_•a˚_£t_ªgi⁄_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

729 
	#bus_wrôe_1
(
r
, 
o
, 
v
) \

730 
	`bus_•a˚_wrôe_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

731 
	#bus_wrôe_mu…i_1
(
r
, 
o
, 
d
, 
c
) \

732 
	`bus_•a˚_wrôe_mu…i_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

733 
	#bus_wrôe_ªgi⁄_1
(
r
, 
o
, 
d
, 
c
) \

734 
	`bus_•a˚_wrôe_ªgi⁄_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

735 
	#bus_ªad_°ªam_1
(
r
, 
o
) \

736 
	`bus_•a˚_ªad_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

737 
	#bus_ªad_mu…i_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

738 
	`bus_•a˚_ªad_mu…i_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

739 
	#bus_ªad_ªgi⁄_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

740 
	`bus_•a˚_ªad_ªgi⁄_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

741 
	#bus_£t_mu…i_°ªam_1
(
r
, 
o
, 
v
, 
c
) \

742 
	`bus_•a˚_£t_mu…i_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

743 
	#bus_£t_ªgi⁄_°ªam_1
(
r
, 
o
, 
v
, 
c
) \

744 
	`bus_•a˚_£t_ªgi⁄_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

745 
	#bus_wrôe_°ªam_1
(
r
, 
o
, 
v
) \

746 
	`bus_•a˚_wrôe_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

747 
	#bus_wrôe_mu…i_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

748 
	`bus_•a˚_wrôe_mu…i_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

749 
	#bus_wrôe_ªgi⁄_°ªam_1
(
r
, 
o
, 
d
, 
c
) \

750 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_1
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

751 
	#bus_ªad_2
(
r
, 
o
) \

752 
	`bus_•a˚_ªad_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

753 
	#bus_ªad_mu…i_2
(
r
, 
o
, 
d
, 
c
) \

754 
	`bus_•a˚_ªad_mu…i_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

755 
	#bus_ªad_ªgi⁄_2
(
r
, 
o
, 
d
, 
c
) \

756 
	`bus_•a˚_ªad_ªgi⁄_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

757 
	#bus_£t_mu…i_2
(
r
, 
o
, 
v
, 
c
) \

758 
	`bus_•a˚_£t_mu…i_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

759 
	#bus_£t_ªgi⁄_2
(
r
, 
o
, 
v
, 
c
) \

760 
	`bus_•a˚_£t_ªgi⁄_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

761 
	#bus_wrôe_2
(
r
, 
o
, 
v
) \

762 
	`bus_•a˚_wrôe_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

763 
	#bus_wrôe_mu…i_2
(
r
, 
o
, 
d
, 
c
) \

764 
	`bus_•a˚_wrôe_mu…i_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

765 
	#bus_wrôe_ªgi⁄_2
(
r
, 
o
, 
d
, 
c
) \

766 
	`bus_•a˚_wrôe_ªgi⁄_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

767 
	#bus_ªad_°ªam_2
(
r
, 
o
) \

768 
	`bus_•a˚_ªad_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

769 
	#bus_ªad_mu…i_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

770 
	`bus_•a˚_ªad_mu…i_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

771 
	#bus_ªad_ªgi⁄_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

772 
	`bus_•a˚_ªad_ªgi⁄_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

773 
	#bus_£t_mu…i_°ªam_2
(
r
, 
o
, 
v
, 
c
) \

774 
	`bus_•a˚_£t_mu…i_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

775 
	#bus_£t_ªgi⁄_°ªam_2
(
r
, 
o
, 
v
, 
c
) \

776 
	`bus_•a˚_£t_ªgi⁄_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

777 
	#bus_wrôe_°ªam_2
(
r
, 
o
, 
v
) \

778 
	`bus_•a˚_wrôe_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

779 
	#bus_wrôe_mu…i_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

780 
	`bus_•a˚_wrôe_mu…i_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

781 
	#bus_wrôe_ªgi⁄_°ªam_2
(
r
, 
o
, 
d
, 
c
) \

782 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_2
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

783 
	#bus_ªad_4
(
r
, 
o
) \

784 
	`bus_•a˚_ªad_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

785 
	#bus_ªad_mu…i_4
(
r
, 
o
, 
d
, 
c
) \

786 
	`bus_•a˚_ªad_mu…i_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

787 
	#bus_ªad_ªgi⁄_4
(
r
, 
o
, 
d
, 
c
) \

788 
	`bus_•a˚_ªad_ªgi⁄_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

789 
	#bus_£t_mu…i_4
(
r
, 
o
, 
v
, 
c
) \

790 
	`bus_•a˚_£t_mu…i_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

791 
	#bus_£t_ªgi⁄_4
(
r
, 
o
, 
v
, 
c
) \

792 
	`bus_•a˚_£t_ªgi⁄_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

793 
	#bus_wrôe_4
(
r
, 
o
, 
v
) \

794 
	`bus_•a˚_wrôe_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

795 
	#bus_wrôe_mu…i_4
(
r
, 
o
, 
d
, 
c
) \

796 
	`bus_•a˚_wrôe_mu…i_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

797 
	#bus_wrôe_ªgi⁄_4
(
r
, 
o
, 
d
, 
c
) \

798 
	`bus_•a˚_wrôe_ªgi⁄_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

799 
	#bus_ªad_°ªam_4
(
r
, 
o
) \

800 
	`bus_•a˚_ªad_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

801 
	#bus_ªad_mu…i_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

802 
	`bus_•a˚_ªad_mu…i_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

803 
	#bus_ªad_ªgi⁄_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

804 
	`bus_•a˚_ªad_ªgi⁄_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

805 
	#bus_£t_mu…i_°ªam_4
(
r
, 
o
, 
v
, 
c
) \

806 
	`bus_•a˚_£t_mu…i_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

807 
	#bus_£t_ªgi⁄_°ªam_4
(
r
, 
o
, 
v
, 
c
) \

808 
	`bus_•a˚_£t_ªgi⁄_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

809 
	#bus_wrôe_°ªam_4
(
r
, 
o
, 
v
) \

810 
	`bus_•a˚_wrôe_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

811 
	#bus_wrôe_mu…i_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

812 
	`bus_•a˚_wrôe_mu…i_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

813 
	#bus_wrôe_ªgi⁄_°ªam_4
(
r
, 
o
, 
d
, 
c
) \

814 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_4
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

815 
	#bus_ªad_8
(
r
, 
o
) \

816 
	`bus_•a˚_ªad_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

817 
	#bus_ªad_mu…i_8
(
r
, 
o
, 
d
, 
c
) \

818 
	`bus_•a˚_ªad_mu…i_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

819 
	#bus_ªad_ªgi⁄_8
(
r
, 
o
, 
d
, 
c
) \

820 
	`bus_•a˚_ªad_ªgi⁄_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

821 
	#bus_£t_mu…i_8
(
r
, 
o
, 
v
, 
c
) \

822 
	`bus_•a˚_£t_mu…i_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

823 
	#bus_£t_ªgi⁄_8
(
r
, 
o
, 
v
, 
c
) \

824 
	`bus_•a˚_£t_ªgi⁄_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

825 
	#bus_wrôe_8
(
r
, 
o
, 
v
) \

826 
	`bus_•a˚_wrôe_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

827 
	#bus_wrôe_mu…i_8
(
r
, 
o
, 
d
, 
c
) \

828 
	`bus_•a˚_wrôe_mu…i_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

829 
	#bus_wrôe_ªgi⁄_8
(
r
, 
o
, 
d
, 
c
) \

830 
	`bus_•a˚_wrôe_ªgi⁄_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

831 
	#bus_ªad_°ªam_8
(
r
, 
o
) \

832 
	`bus_•a˚_ªad_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
))

	)

833 
	#bus_ªad_mu…i_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

834 
	`bus_•a˚_ªad_mu…i_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

835 
	#bus_ªad_ªgi⁄_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

836 
	`bus_•a˚_ªad_ªgi⁄_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

837 
	#bus_£t_mu…i_°ªam_8
(
r
, 
o
, 
v
, 
c
) \

838 
	`bus_•a˚_£t_mu…i_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

839 
	#bus_£t_ªgi⁄_°ªam_8
(
r
, 
o
, 
v
, 
c
) \

840 
	`bus_•a˚_£t_ªgi⁄_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
), (
c
))

	)

841 
	#bus_wrôe_°ªam_8
(
r
, 
o
, 
v
) \

842 
	`bus_•a˚_wrôe_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
v
))

	)

843 
	#bus_wrôe_mu…i_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

844 
	`bus_•a˚_wrôe_mu…i_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

845 
	#bus_wrôe_ªgi⁄_°ªam_8
(
r
, 
o
, 
d
, 
c
) \

846 
	`bus_•a˚_wrôe_ªgi⁄_°ªam_8
((
r
)->
r_bu°ag
, (r)->
r_bush™dÀ
, (
o
), (
d
), (
c
))

	)

	@/usr/include/sys/cdefs.h

36 #i‚def 
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

43 #i‚def 
__has_©åibuã


44 
	#__has_©åibuã
(
x
Ë0

	)

46 #i‚def 
__has_exãnsi⁄


47 
	#__has_exãnsi⁄
 
__has_„©uª


	)

49 #i‚def 
__has_„©uª


50 
	#__has_„©uª
(
x
Ë0

	)

52 #i‚def 
__has_ö˛ude


53 
	#__has_ö˛ude
(
x
Ë0

	)

55 #i‚def 
__has_buûtö


56 
	#__has_buûtö
(
x
Ë0

	)

59 #i‡
deföed
(
__˝lu•lus
)

60 
	#__BEGIN_DECLS
 "C" {

	)

61 
	#__END_DECLS
 }

	)

63 
	#__BEGIN_DECLS


	)

64 
	#__END_DECLS


	)

73 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

75 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

76 
	#__GNUCLIKE_ASM
 3

	)

77 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

79 
	#__GNUCLIKE_ASM
 2

	)

81 
	#__GNUCLIKE___TYPEOF
 1

	)

82 
	#__GNUCLIKE___OFFSETOF
 1

	)

83 
	#__GNUCLIKE___SECTION
 1

	)

85 #i‚de‡
__INTEL_COMPILER


86 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

89 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

90 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) \

91 && 
__INTEL_COMPILER
 < 800

92 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


95 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >= 3)

96 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

97 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

98 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

101 #i‡
deföed
(
__GNUC__
)

102 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

108 #i‡
deföed
(
__GNUC__
)

109 
	#__compûî_memb¨
(Ë
__asm
 
	`__vﬁ©ûe
(" " : : : "mem‹y")

	)

112 #i‚de‡
__INTEL_COMPILER


113 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

114 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

117 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

120 
	#__CC_SUPPORTS_INLINE
 1

	)

121 
	#__CC_SUPPORTS___INLINE
 1

	)

122 
	#__CC_SUPPORTS___INLINE__
 1

	)

124 
	#__CC_SUPPORTS___FUNC__
 1

	)

125 
	#__CC_SUPPORTS_WARNING
 1

	)

127 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

129 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

136 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

137 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

138 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

140 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

155 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

156 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

157 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

158 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

159 
	#__STRING
(
x
Ë#x

	)

160 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

162 
	#__c⁄°
 c⁄°

	)

163 
	#__sig√d
 sig√d

	)

164 
	#__vﬁ©ûe
 vﬁ©ûe

	)

165 #i‡
deföed
(
__˝lu•lus
)

166 
	#__ölöe
 
ölöe


	)

168 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

169 
	#__ölöe


	)

174 
	#__P
(
¥Ÿos
Ë(Ë

	)

175 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

176 
	#__STRING
(
x
Ë"x"

	)

178 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

179 
	#__c⁄°


	)

180 
	#__ölöe


	)

181 
	#__sig√d


	)

182 
	#__vﬁ©ûe


	)

191 #i‚def 
NO_ANSI_KEYWORDS


192 c⁄°

	)

193 
	#ölöe


	)

194 sig√d

	)

195 vﬁ©ûe

	)

209 #ifde‡
löt


210 
	#__dód2


	)

211 
	#__puª2


	)

212 
	#__unu£d


	)

213 
	#__∑cked


	)

214 
	#__Æig√d
(
x
)

	)

215 
	#__£˘i⁄
(
x
)

	)

216 
	#__wók_symbﬁ


	)

218 
	#__wók_symbﬁ
 
	`__©åibuã__
((
__wók__
))

	)

219 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

220 
	#__dód2


	)

221 
	#__puª2


	)

222 
	#__unu£d


	)

224 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

225 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

226 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

227 
	#__unu£d


	)

230 #i‡
__GNUC_PREREQ__
(2, 7)

231 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

232 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

233 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

234 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

235 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

236 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

237 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

239 #i‡
deföed
(
__INTEL_COMPILER
)

240 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

241 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

242 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

243 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

244 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

245 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

246 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

250 #i‡!
__GNUC_PREREQ__
(2, 95)

251 
	#__Æignof
(
x
Ë
	`__off£tof
(°ru˘ { 
__a
; x 
__b
; }, __b)

	)

258 #i‡!
deföed
(
__STDC_VERSION__
Ë|| __STDC_VERSION__ < 201112L || deföed(
löt
)

260 #i‡!
__has_exãnsi⁄
(
c_Æig«s
)

261 #i‡(
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L) || \

262 
	$__has_exãnsi⁄
(
cxx_Æig«s
)

263 
	#_Alig«s
(
x
Ë
	`Æig«s
(x)

	)

266 
	#_Alig«s
(
x
Ë
	`__Æig√d
(x)

	)

270 #i‡
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

271 
	#_Alignof
(
x
Ë
	`Æignof
(x)

	)

273 
	#_Alignof
(
x
Ë
	`__Æignof
(x)

	)

276 #i‡!
	`deföed
(
__˝lu•lus
Ë&& !
	`__has_exãnsi⁄
(
c_©omic
) && \

277 !
	$__has_exãnsi⁄
(
cxx_©omic
)

282 
	#_Atomic
(
T
Ë°ru˘ { T vﬁ©ûê
__vÆ
; }

	)

285 #i‡
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

286 
	#_N‹ëu∫
 [[
n‹ëu∫
]]

	)

288 
	#_N‹ëu∫
 
__dód2


	)

291 #i‡!
	`__has_exãnsi⁄
(
c_°©ic_as£π
)

292 #i‡(
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L) || \

293 
	$__has_exãnsi⁄
(
cxx_°©ic_as£π
)

294 
	#_Sètic_as£π
(
x
, 
y
Ë
	`°©ic_as£π
(x, y)

	)

295 #ñi‡
	`deföed
(
__COUNTER__
)

296 
	#_Sètic_as£π
(
x
, 
y
Ë
	`__Sètic_as£π
(x, 
__COUNTER__
)

	)

297 
	#__Sètic_as£π
(
x
, 
y
Ë
	`___Sètic_as£π
(x, y)

	)

298 
	#___Sètic_as£π
(
x
, 
y
Ë
	t__as£π_
 ## 
	ty
[(x) ? 1 : -1] \

299 
	t__unu£d


	)

301 
	t_Sètic_as£π
(
	tx
, 
	ty
Ë
	t__hack


	)

305 #i‡!
	t__has_exãnsi⁄
(
	tc_thªad_loˇl
)

308 
	t__has_exãnsi⁄
(
	tcxx_thªad_loˇl
)

309 
	t_Thªad_loˇl
 
	tthªad_loˇl


	)

311 
	t_Thªad_loˇl
 
	t__thªad


	)

326 #i‡
	tdeföed
(
	t__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

327 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

328 
	t_Gíîic
(
	tex¥
, 
	tt
: 
	tyes
, : 
	tno
)

	)

329 #ñi‡
	t__GNUC_PREREQ__
(3, 1Ë&& !
	tdeföed
(
	t__˝lu•lus
)

330 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

331 
	t__buûtö_choo£_ex¥
( \

332 
	t__buûtö_ty≥s_com∑tibÀ_p
(
	t__ty≥of
(
	tex¥
), 
	tt
), 
	tyes
, 
	tno
)

	)

335 #i‡
	t__GNUC_PREREQ__
(2, 96)

336 
	t__mÆloc_like
 
	t__©åibuã__
((
	t__mÆloc__
))

	)

337 
	t__puª
 
	t__©åibuã__
((
	t__puª__
))

	)

339 
	t__mÆloc_like


	)

340 
	t__puª


	)

343 #i‡
	t__GNUC_PREREQ__
(3, 1Ë|| (
	tdeföed
(
	t__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

344 
	t__Æways_ölöe
 
	t__©åibuã__
((
	t__Æways_ölöe__
))

	)

346 
	t__Æways_ölöe


	)

349 #i‡
	t__GNUC_PREREQ__
(3, 1)

350 
	t__noölöe
 
	t__©åibuã__
 ((
	t__noölöe__
))

	)

352 
	t__noölöe


	)

355 #i‡
	t__GNUC_PREREQ__
(3, 3)

356 
	t__n⁄nuŒ
(
	tx
Ë
	t__©åibuã__
((
	t__n⁄nuŒ__
(x)))

	)

358 
	t__n⁄nuŒ
(
	tx
)

	)

361 #i‡
	t__GNUC_PREREQ__
(3, 4)

362 
	t__Á°ˇŒ
 
	t__©åibuã__
((
	t__Á°ˇŒ__
))

	)

363 
	t__ªsu…_u£_check
 
	t__©åibuã__
((
	t__w¨n_unu£d_ªsu…__
))

	)

365 
	t__Á°ˇŒ


	)

366 
	t__ªsu…_u£_check


	)

369 #i‡
	t__GNUC_PREREQ__
(4, 1)

370 
	t__ªtu∫s_twi˚
 
	t__©åibuã__
((
	t__ªtu∫s_twi˚__
))

	)

372 
	t__ªtu∫s_twi˚


	)

376 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

377 
	t__func__
 
	tNULL


	)

380 #i‡(
	tdeföed
(
	t__INTEL_COMPILER
Ë|| (deföed(
	t__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
	t__STRICT_ANSI__
Ë|| 
	t__STDC_VERSION__
 >= 199901

381 
	t__LONG_LONG_SUPPORTED


	)

385 #i‡
	tdeföed
(
	t__˝lu•lus
) && __cplusplus >= 201103L

386 
	t__LONG_LONG_SUPPORTED


	)

387 #i‚def 
	t__STDC_LIMIT_MACROS


388 
	t__STDC_LIMIT_MACROS


	)

390 #i‚def 
	t__STDC_CONSTANT_MACROS


391 
	t__STDC_CONSTANT_MACROS


	)

401 #i‡!(
	t__GNUC__
 =2 && 
	t__GNUC_MINOR__
 == 95)

402 #i‡!
	tdeföed
(
	t__STDC_VERSION__
Ë|| __STDC_VERSION__ < 199901 || deföed(
	tlöt
)

403 
	t__ª°ri˘


	)

405 
	t__ª°ri˘
 
	tª°ri˘


	)

437 #i‡
	t__GNUC_PREREQ__
(2, 96)

438 
	t__¥edi˘_åue
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 1)

	)

439 
	t__¥edi˘_Ál£
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 0)

	)

441 
	t__¥edi˘_åue
(
	texp
Ë”xp)

	)

442 
	t__¥edi˘_Ál£
(
	texp
Ë”xp)

	)

445 #i‡
	t__GNUC_PREREQ__
(4, 0)

446 
	t__hiddí
 
	t__©åibuã__
((
	t__visibûôy__
("hiddí")))

	)

447 
	t__exp‹ãd
 
	t__©åibuã__
((
	t__visibûôy__
("deÁu…")))

	)

449 
	t__hiddí


	)

450 
	t__exp‹ãd


	)

457 #i‡
	t__GNUC_PREREQ__
(4, 1)

458 
	t__off£tof
(
	tty≥
, 
	tfõld
Ë
	t__buûtö_off£tof
—y≥, fõld)

	)

460 #i‚de‡
	t__˝lu•lus


461 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

462 ((
	t__size_t
)(
	t__uöçå_t
)((c⁄° vﬁ©ûê*)&((
	tty≥
 *)0)->
	tfõld
))

	)

464 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

465 (
	t__off£tof__
 (
	tªöãΩªt_ˇ°
 <
	t__size_t
> \

466 (&
	tªöãΩªt_ˇ°
 <const volatile &> \

467 (
	t°©ic_ˇ°
<
	tty≥
 *> (0)->
	tfõld
))))

	)

470 
	t__øngeof
(
	tty≥
, 
	t°¨t
, 
	tíd
) \

471 (
	t__off£tof
(
	tty≥
, 
	tíd
Ë- __off£tof—y≥, 
	t°¨t
))

	)

479 #i‡
	t__GNUC_PREREQ__
(3, 1)

480 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) ({ \

481 c⁄° vﬁ©ûê
	`__ty≥of
(((
s
 *)0)->
m
Ë*
__x
 = (
x
); \

482 
	`__DEQUALIFY
(
s
 *, (c⁄° vﬁ©ûê*)
__x
 - 
	`__off£tof
(s, 
m
));\

483 
	}
})

	)

485 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) \

486 
	t__DEQUALIFY
(
	ts
 *, (c⁄° vﬁ©ûê*)(
	tx
Ë- 
	t__off£tof
(s, 
	tm
))

	)

495 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

496 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

497 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

498 
	t__f‹m©_¨g
(
	tfmèrg
)

	)

499 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

500 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

502 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

503 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

504 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

505 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__sˇnf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

506 
	t__f‹m©_¨g
(
	tfmèrg
Ë
	t__©åibuã__
((
	t__f‹m©_¨g__
 (fmèrg)))

	)

507 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

508 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°rfm⁄__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

509 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

510 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°r·ime__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

514 #i‡
	tdeföed
(
	t__FªeBSD_cc_vîsi⁄
) && __FreeBSD_cc_version >= 300001 && \

515 
	tdeföed
(
	t__GNUC__
Ë&& !deföed(
	t__INTEL_COMPILER
)

516 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

517 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf0__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

519 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

522 #i‡
	tdeföed
(
	t__GNUC__
Ë|| deföed(
	t__INTEL_COMPILER
)

523 #i‚de‡
	t__INTEL_COMPILER


524 
	t__°r⁄g_ª„ªn˚
(
	tsym
,
	tÆüssym
) \

525 
	t__ty≥of
 (
	tsym
Ë
	tÆüssym
 
	t__©åibuã__
 ((
	t__Æüs__
 (#sym)))

	)

527 #ifde‡
	t__STDC__


528 
	t__wók_ª„ªn˚
(
	tsym
,
	tÆüs
) \

529 
	t__asm__
(".weak " #alias); \

530 
	`__asm__
(".equ " #Æü†", " #sym)

	)

531 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

532 
	`__asm__
(".section .gnu.warning." #sym); \

533 
	`__asm__
(".asciz \"" 
msg
 "\""); \

534 
	`__asm__
(".¥evious")

	)

535 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

536 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

537 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

538 
	`__asm__
(".symvî " #im∂ ", " #sym "@@" #vîid)

	)

540 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

541 
	`__asm__
(".weakálias"); \

542 
	`__asm__
(".equálüs, sym")

	)

543 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

544 
	`__asm__
(".section .gnu.warning.sym"); \

545 
	`__asm__
(".asciz \"msg\""); \

546 
	`__asm__
(".¥evious")

	)

547 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

548 
	`__asm__
(".symvî im∂, sym@vîid")

	)

549 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

550 
	`__asm__
(".symvî im∂, sym@@vîid")

	)

554 
	#__GLOBL1
(
sym
Ë
	`__asm__
(".glob»" #sym)

	)

555 
	#__GLOBL
(
sym
Ë
	`__GLOBL1
(sym)

	)

557 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

558 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

566 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
string

575 #i‚def 
__FBSDID


576 #i‡!
	`deföed
(
löt
Ë&& !deföed(
STRIP_FBSDID
)

577 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

579 
	#__FBSDID
(
s
Ë
__hack


	)

583 #i‚def 
__RCSID


584 #i‚def 
NO__RCSID


585 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

587 
	#__RCSID
(
s
Ë
__hack


	)

591 #i‚def 
__RCSID_SOURCE


592 #i‚def 
NO__RCSID_SOURCE


593 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

595 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

599 #i‚def 
__SCCSID


600 #i‚def 
NO__SCCSID


601 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

603 
	#__SCCSID
(
s
Ë
__hack


	)

607 #i‚def 
__COPYRIGHT


608 #i‚def 
NO__COPYRIGHT


609 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

611 
	#__COPYRIGHT
(
s
Ë
__hack


	)

615 #i‚def 
__DECONST


616 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° *)(v¨))

	)

619 #i‚def 
__DEVOLATILE


620 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(vﬁ©ûê*)(v¨))

	)

623 #i‚def 
__DEQUALIFY


624 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

651 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

652 #unde‡
_POSIX_C_SOURCE


653 
	#_POSIX_C_SOURCE
 199009

	)

657 #i‡
	`deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

658 #unde‡
_POSIX_C_SOURCE


659 
	#_POSIX_C_SOURCE
 199209

	)

663 #ifde‡
_XOPEN_SOURCE


664 #i‡
_XOPEN_SOURCE
 - 0 >= 700

665 
	#__XSI_VISIBLE
 700

	)

666 #unde‡
_POSIX_C_SOURCE


667 
	#_POSIX_C_SOURCE
 200809

	)

668 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

669 
	#__XSI_VISIBLE
 600

	)

670 #unde‡
_POSIX_C_SOURCE


671 
	#_POSIX_C_SOURCE
 200112

	)

672 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

673 
	#__XSI_VISIBLE
 500

	)

674 #unde‡
_POSIX_C_SOURCE


675 
	#_POSIX_C_SOURCE
 199506

	)

683 #i‡
	`deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

684 
	#_POSIX_C_SOURCE
 198808

	)

686 #ifde‡
_POSIX_C_SOURCE


687 #i‡
_POSIX_C_SOURCE
 >= 200809

688 
	#__POSIX_VISIBLE
 200809

	)

689 
	#__ISO_C_VISIBLE
 1999

	)

690 #ñi‡
_POSIX_C_SOURCE
 >= 200112

691 
	#__POSIX_VISIBLE
 200112

	)

692 
	#__ISO_C_VISIBLE
 1999

	)

693 #ñi‡
_POSIX_C_SOURCE
 >= 199506

694 
	#__POSIX_VISIBLE
 199506

	)

695 
	#__ISO_C_VISIBLE
 1990

	)

696 #ñi‡
_POSIX_C_SOURCE
 >= 199309

697 
	#__POSIX_VISIBLE
 199309

	)

698 
	#__ISO_C_VISIBLE
 1990

	)

699 #ñi‡
_POSIX_C_SOURCE
 >= 199209

700 
	#__POSIX_VISIBLE
 199209

	)

701 
	#__ISO_C_VISIBLE
 1990

	)

702 #ñi‡
_POSIX_C_SOURCE
 >= 199009

703 
	#__POSIX_VISIBLE
 199009

	)

704 
	#__ISO_C_VISIBLE
 1990

	)

706 
	#__POSIX_VISIBLE
 198808

	)

707 
	#__ISO_C_VISIBLE
 0

	)

722 #i‡
	`deföed
(
_ANSI_SOURCE
)

723 
	#__POSIX_VISIBLE
 0

	)

724 
	#__XSI_VISIBLE
 0

	)

725 
	#__BSD_VISIBLE
 0

	)

726 
	#__ISO_C_VISIBLE
 1990

	)

727 #ñi‡
	`deföed
(
_C99_SOURCE
)

728 
	#__POSIX_VISIBLE
 0

	)

729 
	#__XSI_VISIBLE
 0

	)

730 
	#__BSD_VISIBLE
 0

	)

731 
	#__ISO_C_VISIBLE
 1999

	)

732 #ñi‡
	`deföed
(
_C11_SOURCE
)

733 
	#__POSIX_VISIBLE
 0

	)

734 
	#__XSI_VISIBLE
 0

	)

735 
	#__BSD_VISIBLE
 0

	)

736 
	#__ISO_C_VISIBLE
 2011

	)

738 
	#__POSIX_VISIBLE
 200809

	)

739 
	#__XSI_VISIBLE
 700

	)

740 
	#__BSD_VISIBLE
 1

	)

741 
	#__ISO_C_VISIBLE
 2011

	)

745 #i‡
	`deföed
(
__mùs
Ë|| deföed(
__powîpc64__
)

746 
	#__NO_TLS
 1

	)

	@/usr/include/sys/condvar.h

29 #i‚def 
_SYS_CONDVAR_H_


30 
	#_SYS_CONDVAR_H_


	)

32 #i‚def 
LOCORE


33 
	~<sys/queue.h
>

35 
	glock_obje˘
;

36 
	gthªad
;

38 
TAILQ_HEAD
(
cv_waôq
, 
thªad
);

46 
	scv
 {

47 c⁄° *
	mcv_des¸ùti⁄
;

48 
	mcv_waôîs
;

51 #ifde‡
_KERNEL


52 
cv_öô
(
cv
 *
cvp
, c⁄° *
desc
);

53 
cv_de°roy
(
cv
 *
cvp
);

55 
_cv_waô
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

56 
_cv_waô_u∆ock
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

57 
_cv_waô_sig
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
);

58 
_cv_timedwaô_sbt
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
,

59 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
);

60 
_cv_timedwaô_sig_sbt
(
cv
 *
cvp
, 
lock_obje˘
 *
lock
,

61 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
);

63 
cv_sig«l
(
cv
 *
cvp
);

64 
cv_brﬂdˇ°¥i
(
cv
 *
cvp
, 
¥i
);

66 
	#cv_waô
(
cvp
, 
lock
) \

67 
	`_cv_waô
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

68 
	#cv_waô_u∆ock
(
cvp
, 
lock
) \

69 
	`_cv_waô_u∆ock
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

70 
	#cv_waô_sig
(
cvp
, 
lock
) \

71 
	`_cv_waô_sig
((
cvp
), &(
lock
)->
lock_obje˘
)

	)

72 
	#cv_timedwaô
(
cvp
, 
lock
, 
timo
) \

73 
	`_cv_timedwaô_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, \

74 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

75 
	#cv_timedwaô_sbt
(
cvp
, 
lock
, 
sbt
, 
¥
, 
Êags
) \

76 
	`_cv_timedwaô_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, (
sbt
), (
¥
), (
Êags
))

	)

77 
	#cv_timedwaô_sig
(
cvp
, 
lock
, 
timo
) \

78 
	`_cv_timedwaô_sig_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, \

79 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

80 
	#cv_timedwaô_sig_sbt
(
cvp
, 
lock
, 
sbt
, 
¥
, 
Êags
) \

81 
	`_cv_timedwaô_sig_sbt
((
cvp
), &(
lock
)->
lock_obje˘
, (
sbt
), (
¥
), (
Êags
))

	)

83 
	#cv_brﬂdˇ°
(
cvp
Ë
	`cv_brﬂdˇ°¥i
(cvp, 0)

	)

85 
	#cv_wmesg
(
cvp
Ë((cvp)->
cv_des¸ùti⁄
)

	)

	@/usr/include/sys/dirent.h

33 #i‚def 
_SYS_DIRENT_H_


34 
	#_SYS_DIRENT_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

50 
	sdúít
 {

51 
__uöt32_t
 
	md_fûío
;

52 
__uöt16_t
 
	md_ª˛í
;

53 
__uöt8_t
 
	md_ty≥
;

54 
__uöt8_t
 
	md_«mÀn
;

55 #i‡
__BSD_VISIBLE


56 
	#MAXNAMLEN
 255

	)

57 
	md_«me
[
MAXNAMLEN
 + 1];

59 
	md_«me
[255 + 1];

63 #i‡
__BSD_VISIBLE


67 
	#DT_UNKNOWN
 0

	)

68 
	#DT_FIFO
 1

	)

69 
	#DT_CHR
 2

	)

70 
	#DT_DIR
 4

	)

71 
	#DT_BLK
 6

	)

72 
	#DT_REG
 8

	)

73 
	#DT_LNK
 10

	)

74 
	#DT_SOCK
 12

	)

75 
	#DT_WHT
 14

	)

80 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

81 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

92 
	#_GENERIC_DIRSIZ
(
dp
) \

93 (( (
dúít
Ë- (
MAXNAMLEN
+1)Ë+ (((
dp
)->
d_«mÀn
+1 + 3Ë&~ 3))

	)

96 #ifde‡
_KERNEL


97 
	#GENERIC_DIRSIZ
(
dp
Ë
	`_GENERIC_DIRSIZ
(dp)

	)

	@/usr/include/sys/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

178 
	#ECAPMODE
 94

	)

179 
	#ENOTRECOVERABLE
 95

	)

180 
	#EOWNERDEAD
 96

	)

183 #i‚de‡
_POSIX_SOURCE


184 
	#ELAST
 96

	)

187 #ifde‡
_KERNEL


189 
	#ERESTART
 (-1Ë

	)

190 
	#EJUSTRETURN
 (-2Ë

	)

191 
	#ENOIOCTL
 (-3Ë

	)

192 
	#EDIRIOCTL
 (-4Ë

	)

	@/usr/include/sys/fcntl.h

38 #i‚de‡
_SYS_FCNTL_H_


39 
	#_SYS_FCNTL_H_


	)

47 
	~<sys/cdefs.h
>

48 
	~<sys/_ty≥s.h
>

50 #i‚de‡
_MODE_T_DECLARED


51 
__mode_t
 
	tmode_t
;

52 
	#_MODE_T_DECLARED


	)

55 #i‚de‡
_OFF_T_DECLARED


56 
__off_t
 
	toff_t
;

57 
	#_OFF_T_DECLARED


	)

60 #i‚de‡
_PID_T_DECLARED


61 
__pid_t
 
	tpid_t
;

62 
	#_PID_T_DECLARED


	)

73 
	#O_RDONLY
 0x0000

	)

74 
	#O_WRONLY
 0x0001

	)

75 
	#O_RDWR
 0x0002

	)

76 
	#O_ACCMODE
 0x0003

	)

86 #i‡
__BSD_VISIBLE


87 
	#FREAD
 0x0001

	)

88 
	#FWRITE
 0x0002

	)

90 
	#O_NONBLOCK
 0x0004

	)

91 
	#O_APPEND
 0x0008

	)

92 #i‡
__BSD_VISIBLE


93 
	#O_SHLOCK
 0x0010

	)

94 
	#O_EXLOCK
 0x0020

	)

95 
	#O_ASYNC
 0x0040

	)

96 
	#O_FSYNC
 0x0080

	)

98 
	#O_SYNC
 0x0080

	)

99 #i‡
__POSIX_VISIBLE
 >= 200809

100 
	#O_NOFOLLOW
 0x0100

	)

102 
	#O_CREAT
 0x0200

	)

103 
	#O_TRUNC
 0x0400

	)

104 
	#O_EXCL
 0x0800

	)

105 #ifde‡
_KERNEL


106 
	#FHASLOCK
 0x4000

	)

110 
	#O_NOCTTY
 0x8000

	)

112 #i‡
__BSD_VISIBLE


114 
	#O_DIRECT
 0x00010000

	)

117 #i‡
__POSIX_VISIBLE
 >= 200809

118 
	#O_DIRECTORY
 0x00020000

	)

119 
	#O_EXEC
 0x00040000

	)

121 #ifdef 
_KERNEL


122 
	#FEXEC
 
O_EXEC


	)

125 #i‡
__POSIX_VISIBLE
 >= 200809

127 
	#O_TTY_INIT
 0x00080000

	)

129 
	#O_CLOEXEC
 0x00100000

	)

136 #ifde‡
_KERNEL


138 
	#FFLAGS
(
oÊags
Ë((oÊagsË& 
O_EXEC
 ? (oÊagsË: (oÊagsË+ 1)

	)

139 
	#OFLAGS
(
fÊags
Ë((fÊagsË& 
O_EXEC
 ? (fÊagsË: (fÊagsË- 1)

	)

142 
	#FMASK
 (
FREAD
|
FWRITE
|
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
O_DIRECT
|
FEXEC
)

	)

144 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FRDAHEAD
|
O_DIRECT
)

	)

146 #i‡
deföed
(
COMPAT_FREEBSD7
Ë|| deföed(
COMPAT_FREEBSD6
) || \

147 
deföed
(
COMPAT_FREEBSD5
Ë|| 
	$deföed
(
COMPAT_FREEBSD4
)

153 
	#FPOSIXSHM
 
O_NOFOLLOW


	)

154 #unde‡
FCNTLFLAGS


155 
	#FCNTLFLAGS
 (
FAPPEND
|
FASYNC
|
FFSYNC
|
FNONBLOCK
|
FPOSIXSHM
|
FRDAHEAD
| \

156 
O_DIRECT
)

	)

165 #i‡
__BSD_VISIBLE


166 
	#FAPPEND
 
O_APPEND


	)

167 
	#FASYNC
 
O_ASYNC


	)

168 
	#FFSYNC
 
O_FSYNC


	)

169 
	#FNONBLOCK
 
O_NONBLOCK


	)

170 
	#FNDELAY
 
O_NONBLOCK


	)

171 
	#O_NDELAY
 
O_NONBLOCK


	)

180 #i‡
__BSD_VISIBLE


182 
	#FRDAHEAD
 
O_CREAT


	)

185 #i‡
__POSIX_VISIBLE
 >= 200809

191 
	#AT_FDCWD
 -100

	)

196 
	#AT_EACCESS
 0x100

	)

197 
	#AT_SYMLINK_NOFOLLOW
 0x200

	)

198 
	#AT_SYMLINK_FOLLOW
 0x400

	)

199 
	#AT_REMOVEDIR
 0x800

	)

207 
	#F_DUPFD
 0

	)

208 
	#F_GETFD
 1

	)

209 
	#F_SETFD
 2

	)

210 
	#F_GETFL
 3

	)

211 
	#F_SETFL
 4

	)

212 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

213 
	#F_GETOWN
 5

	)

214 
	#F_SETOWN
 6

	)

216 #i‡
__BSD_VISIBLE


217 
	#F_OGETLK
 7

	)

218 
	#F_OSETLK
 8

	)

219 
	#F_OSETLKW
 9

	)

220 
	#F_DUP2FD
 10

	)

222 
	#F_GETLK
 11

	)

223 
	#F_SETLK
 12

	)

224 
	#F_SETLKW
 13

	)

225 #i‡
__BSD_VISIBLE


226 
	#F_SETLK_REMOTE
 14

	)

227 
	#F_READAHEAD
 15

	)

228 
	#F_RDAHEAD
 16

	)

230 #i‡
__POSIX_VISIBLE
 >= 200809

231 
	#F_DUPFD_CLOEXEC
 17

	)

233 #i‡
__BSD_VISIBLE


234 
	#F_DUP2FD_CLOEXEC
 18

	)

238 
	#FD_CLOEXEC
 1

	)

241 
	#F_RDLCK
 1

	)

242 
	#F_UNLCK
 2

	)

243 
	#F_WRLCK
 3

	)

244 #i‡
__BSD_VISIBLE


245 
	#F_UNLCKSYS
 4

	)

246 
	#F_CANCEL
 5

	)

248 #ifde‡
_KERNEL


249 
	#F_WAIT
 0x010

	)

250 
	#F_FLOCK
 0x020

	)

251 
	#F_POSIX
 0x040

	)

252 
	#F_REMOTE
 0x080

	)

253 
	#F_NOINTR
 0x100

	)

260 
	sÊock
 {

261 
off_t
 
l_°¨t
;

262 
off_t
 
l_Àn
;

263 
pid_t
 
l_pid
;

264 
l_ty≥
;

265 
l_whí˚
;

266 
l_sysid
;

269 #i‡
__BSD_VISIBLE


274 
	s__oÊock
 {

275 
off_t
 
l_°¨t
;

276 
off_t
 
l_Àn
;

277 
pid_t
 
l_pid
;

278 
l_ty≥
;

279 
l_whí˚
;

283 #i‡
__BSD_VISIBLE


285 
	#LOCK_SH
 0x01

	)

286 
	#LOCK_EX
 0x02

	)

287 
	#LOCK_NB
 0x04

	)

288 
	#LOCK_UN
 0x08

	)

291 #i‡
__POSIX_VISIBLE
 >= 200112

295 
	#POSIX_FADV_NORMAL
 0

	)

296 
	#POSIX_FADV_RANDOM
 1

	)

297 
	#POSIX_FADV_SEQUENTIAL
 2

	)

298 
	#POSIX_FADV_WILLNEED
 3

	)

299 
	#POSIX_FADV_DONTNEED
 4

	)

300 
	#POSIX_FADV_NOREUSE
 5

	)

303 #i‚de‡
_KERNEL


304 
__BEGIN_DECLS


305 
	`›í
(const *, , ...);

306 
	`¸ót
(c⁄° *, 
mode_t
);

307 
	`f˙é
(, , ...);

308 #i‡
__BSD_VISIBLE


309 
	`Êock
(, );

311 #i‡
__POSIX_VISIBLE
 >= 200809

312 
	`›í©
(, const *, , ...);

314 #i‡
__POSIX_VISIBLE
 >= 200112

315 
	`posix_Ádvi£
(, 
off_t
, off_t, );

316 
	`posix_ÁŒoˇã
(, 
off_t
, off_t);

318 
__END_DECLS


	@/usr/include/sys/fnv_hash.h

10 #i‚de‡
_SYS_FNV_HASH_H_


11 
	#_SYS_FNV_HASH_H_


	)

13 
u_öt32_t
 
	tFnv32_t
;

14 
u_öt64_t
 
	tFnv64_t
;

16 
	#FNV1_32_INIT
 ((
Fnv32_t
Ë33554467UL)

	)

17 
	#FNV1_64_INIT
 ((
Fnv64_t
Ë0xcbf29˚484222325ULL)

	)

19 
	#FNV_32_PRIME
 ((
Fnv32_t
Ë0x01000193UL)

	)

20 
	#FNV_64_PRIME
 ((
Fnv64_t
Ë0x100000001b3ULL)

	)

22 
__ölöe
 
Fnv32_t


23 
	$‚v_32_buf
(c⁄° *
buf
, 
size_t
 
Àn
, 
Fnv32_t
 
hvÆ
)

25 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
buf
;

27 
Àn
-- != 0) {

28 
hvÆ
 *
FNV_32_PRIME
;

29 
hvÆ
 ^*
s
++;

31  
hvÆ
;

32 
	}
}

34 
__ölöe
 
Fnv32_t


35 
	$‚v_32_°r
(c⁄° *
°r
, 
Fnv32_t
 
hvÆ
)

37 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
°r
;

38 
Fnv32_t
 
c
;

40 (
c
 = *
s
++) != 0) {

41 
hvÆ
 *
FNV_32_PRIME
;

42 
hvÆ
 ^
c
;

44  
hvÆ
;

45 
	}
}

47 
__ölöe
 
Fnv64_t


48 
	$‚v_64_buf
(c⁄° *
buf
, 
size_t
 
Àn
, 
Fnv64_t
 
hvÆ
)

50 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
buf
;

52 
Àn
-- != 0) {

53 
hvÆ
 *
FNV_64_PRIME
;

54 
hvÆ
 ^*
s
++;

56  
hvÆ
;

57 
	}
}

59 
__ölöe
 
Fnv64_t


60 
	$‚v_64_°r
(c⁄° *
°r
, 
Fnv64_t
 
hvÆ
)

62 c⁄° 
u_öt8_t
 *
s
 = (c⁄° u_öt8_à*)
°r
;

63 
u_ªgi°î_t
 
c
;

65 (
c
 = *
s
++) != 0) {

66 
hvÆ
 *
FNV_64_PRIME
;

67 
hvÆ
 ^
c
;

69  
hvÆ
;

70 
	}
}

	@/usr/include/sys/kernel.h

45 #i‚de‡
_SYS_KERNEL_H_


46 
	#_SYS_KERNEL_H_


	)

48 
	~<sys/lökî_£t.h
>

50 #ifde‡
_KERNEL


53 
	~<sys/queue.h
>

58 
kî√ ame
[
MAXPATHLEN
];

60 
tick
;

61 
hz
;

62 
p§©io
;

63 
°©hz
;

64 
¥ofhz
;

65 
¥oÂrocs
;

66 vﬁ©ûê
ticks
;

88 
	esysöô_sub_id
 {

89 
	mSI_SUB_DUMMY
 = 0x0000000,

90 
	mSI_SUB_DONE
 = 0x0000001,

91 
	mSI_SUB_TUNABLES
 = 0x0700000,

92 
	mSI_SUB_COPYRIGHT
 = 0x0800001,

93 
	mSI_SUB_SETTINGS
 = 0x0880000,

94 
	mSI_SUB_MTX_POOL_STATIC
 = 0x0900000,

95 
	mSI_SUB_LOCKMGR
 = 0x0980000,

96 
	mSI_SUB_VM
 = 0x1000000,

97 
	mSI_SUB_KMEM
 = 0x1800000,

98 
	mSI_SUB_KVM_RSRC
 = 0x1A00000,

99 
	mSI_SUB_HYPERVISOR
 = 0x1A40000,

104 
	mSI_SUB_WITNESS
 = 0x1A80000,

105 
	mSI_SUB_MTX_POOL_DYNAMIC
 = 0x1AC0000,

106 
	mSI_SUB_LOCK
 = 0x1B00000,

107 
	mSI_SUB_EVENTHANDLER
 = 0x1C00000,

108 
	mSI_SUB_VNET_PRELINK
 = 0x1E00000,

109 
	mSI_SUB_KLD
 = 0x2000000,

110 
	mSI_SUB_CPU
 = 0x2100000,

111 
	mSI_SUB_RACCT
 = 0x2110000,

112 
	mSI_SUB_RANDOM
 = 0x2120000,

113 
	mSI_SUB_KDTRACE
 = 0x2140000,

114 
	mSI_SUB_MAC
 = 0x2180000,

115 
	mSI_SUB_MAC_POLICY
 = 0x21C0000,

116 
	mSI_SUB_MAC_LATE
 = 0x21D0000,

117 
	mSI_SUB_VNET
 = 0x21E0000,

118 
	mSI_SUB_INTRINSIC
 = 0x2200000,

119 
	mSI_SUB_VM_CONF
 = 0x2300000,

120 
	mSI_SUB_DDB_SERVICES
 = 0x2380000,

121 
	mSI_SUB_RUN_QUEUE
 = 0x2400000,

122 
	mSI_SUB_KTRACE
 = 0x2480000,

123 
	mSI_SUB_OPENSOLARIS
 = 0x2490000,

124 
	mSI_SUB_CYCLIC
 = 0x24A0000,

125 
	mSI_SUB_AUDIT
 = 0x24C0000,

126 
	mSI_SUB_CREATE_INIT
 = 0x2500000,

127 
	mSI_SUB_SCHED_IDLE
 = 0x2600000,

128 
	mSI_SUB_MBUF
 = 0x2700000,

129 
	mSI_SUB_INTR
 = 0x2800000,

130 
	mSI_SUB_SOFTINTR
 = 0x2800001,

131 
	mSI_SUB_ACL
 = 0x2900000,

132 
	mSI_SUB_DEVFS
 = 0x2F00000,

133 
	mSI_SUB_INIT_IF
 = 0x3000000,

134 
	mSI_SUB_NETGRAPH
 = 0x3010000,

135 
	mSI_SUB_DTRACE
 = 0x3020000,

136 
	mSI_SUB_DTRACE_PROVIDER
 = 0x3048000,

137 
	mSI_SUB_DTRACE_ANON
 = 0x308C000,

138 
	mSI_SUB_DRIVERS
 = 0x3100000,

139 
	mSI_SUB_CONFIGURE
 = 0x3800000,

140 
	mSI_SUB_VFS
 = 0x4000000,

141 
	mSI_SUB_CLOCKS
 = 0x4800000,

142 
	mSI_SUB_CLIST
 = 0x5800000,

143 
	mSI_SUB_SYSV_SHM
 = 0x6400000,

144 
	mSI_SUB_SYSV_SEM
 = 0x6800000,

145 
	mSI_SUB_SYSV_MSG
 = 0x6C00000,

146 
	mSI_SUB_P1003_1B
 = 0x6E00000,

147 
	mSI_SUB_PSEUDO
 = 0x7000000,

148 
	mSI_SUB_EXEC
 = 0x7400000,

149 
	mSI_SUB_PROTO_BEGIN
 = 0x8000000,

150 
	mSI_SUB_PROTO_IF
 = 0x8400000,

151 
	mSI_SUB_PROTO_DOMAININIT
 = 0x8600000,

152 
	mSI_SUB_PROTO_DOMAIN
 = 0x8800000,

153 
	mSI_SUB_PROTO_IFATTACHDOMAIN
 = 0x8800001,

154 
	mSI_SUB_PROTO_END
 = 0x8ffffff,

155 
	mSI_SUB_KPROF
 = 0x9000000,

156 
	mSI_SUB_KICK_SCHEDULER
 = 0xa000000,

157 
	mSI_SUB_INT_CONFIG_HOOKS
 = 0xa800000,

158 
	mSI_SUB_ROOT_CONF
 = 0xb000000,

159 
	mSI_SUB_DUMP_CONF
 = 0xb200000,

160 
	mSI_SUB_RAID
 = 0xb380000,

161 
	mSI_SUB_SWAP
 = 0xc000000,

162 
	mSI_SUB_INTRINSIC_POST
 = 0xd000000,

163 
	mSI_SUB_SYSCALLS
 = 0xd800000,

164 
	mSI_SUB_VNET_DONE
 = 0xdc00000,

165 
	mSI_SUB_KTHREAD_INIT
 = 0xe000000,

166 
	mSI_SUB_KTHREAD_PAGE
 = 0xe400000,

167 
	mSI_SUB_KTHREAD_VM
 = 0xe800000,

168 
	mSI_SUB_KTHREAD_BUF
 = 0xea00000,

169 
	mSI_SUB_KTHREAD_UPDATE
 = 0xec00000,

170 
	mSI_SUB_KTHREAD_IDLE
 = 0xee00000,

171 
	mSI_SUB_SMP
 = 0xf000000,

172 
	mSI_SUB_RACCTD
 = 0xf100000,

173 
	mSI_SUB_LAST
 = 0xfffffff

180 
	esysöô_ñem_‹dî
 {

181 
	mSI_ORDER_FIRST
 = 0x0000000,

182 
	mSI_ORDER_SECOND
 = 0x0000001,

183 
	mSI_ORDER_THIRD
 = 0x0000002,

184 
	mSI_ORDER_FOURTH
 = 0x0000003,

185 
	mSI_ORDER_MIDDLE
 = 0x1000000,

186 
	mSI_ORDER_ANY
 = 0xfffffff

213 (*
	tsysöô_nfunc_t
)(*);

214 (*
	tsysöô_cfunc_t
)(const *);

216 
	ssysöô
 {

217 
sysöô_sub_id
 
subsy°em
;

218 
sysöô_ñem_‹dî
 
‹dî
;

219 
sysöô_cfunc_t
 
func
;

220 c⁄° *
ud©a
;

235 
	#C_SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

236 
sysöô
 
uniquifõr
 ## 
_sys_öô
 = { \

237 
subsy°em
, \

238 
‹dî
, \

239 
func
, \

240 (
idít
) \

241 
	}
}; \

242 
	`DATA_SET
(
sysöô_£t
,
uniquifõr
 ## 
_sys_öô
)

	)

244 
	#SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

245 
	`C_SYSINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, \

246 (
sysöô_cfunc_t
)(
sysöô_nfunc_t
)
func
, (*)(
idít
))

	)

251 
	#C_SYSUNINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

252 
sysöô
 
uniquifõr
 ## 
_sys_unöô
 = { \

253 
subsy°em
, \

254 
‹dî
, \

255 
func
, \

256 (
idít
) \

258 
	`DATA_SET
(
sysunöô_£t
,
uniquifõr
 ## 
_sys_unöô
)

	)

260 
	#SYSUNINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, 
func
, 
idít
) \

261 
	`C_SYSUNINIT
(
uniquifõr
, 
subsy°em
, 
‹dî
, \

262 (
sysöô_cfunc_t
)(
sysöô_nfunc_t
)
func
, (*)(
idít
))

	)

264 
sysöô_add
(
sysöô
 **
£t
, sysöô **
£t_íd
);

279 
tu«bÀ_öt_öô
(*);

280 
	stu«bÀ_öt
 {

281 c⁄° *
	m∑th
;

282 *
	mv¨
;

284 
	#TUNABLE_INT
(
∑th
, 
v¨
) \

285 
tu«bÀ_öt
 
	`__CONCAT
(
__tu«bÀ_öt_
, 
__LINE__
) = { \

286 (
∑th
), \

287 (
v¨
), \

289 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

290 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_öt_öô
, \

291 &
	`__CONCAT
(
__tu«bÀ_öt_
, 
__LINE__
))

	)

293 
	#TUNABLE_INT_FETCH
(
∑th
, 
v¨
Ë
	`gëív_öt
(’©h), (v¨))

	)

298 
tu«bÀ_l⁄g_öô
(*);

299 
	stu«bÀ_l⁄g
 {

300 c⁄° *
	m∑th
;

301 *
	mv¨
;

303 
	#TUNABLE_LONG
(
∑th
, 
v¨
) \

304 
tu«bÀ_l⁄g
 
	`__CONCAT
(
__tu«bÀ_l⁄g_
, 
__LINE__
) = { \

305 (
∑th
), \

306 (
v¨
), \

308 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

309 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_l⁄g_öô
,\

310 &
	`__CONCAT
(
__tu«bÀ_l⁄g_
, 
__LINE__
))

	)

312 
	#TUNABLE_LONG_FETCH
(
∑th
, 
v¨
Ë
	`gëív_l⁄g
(’©h), (v¨))

	)

317 
tu«bÀ_ul⁄g_öô
(*);

318 
	stu«bÀ_ul⁄g
 {

319 c⁄° *
	m∑th
;

320 *
	mv¨
;

322 
	#TUNABLE_ULONG
(
∑th
, 
v¨
) \

323 
tu«bÀ_ul⁄g
 
	`__CONCAT
(
__tu«bÀ_ul⁄g_
, 
__LINE__
) = { \

324 (
∑th
), \

325 (
v¨
), \

327 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

328 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_ul⁄g_öô
, \

329 &
	`__CONCAT
(
__tu«bÀ_ul⁄g_
, 
__LINE__
))

	)

331 
	#TUNABLE_ULONG_FETCH
(
∑th
, 
v¨
Ë
	`gëív_ul⁄g
(’©h), (v¨))

	)

336 
tu«bÀ_quad_öô
(*);

337 
	stu«bÀ_quad
 {

338 c⁄° *
	m∑th
;

339 
quad_t
 *
	mv¨
;

341 
	#TUNABLE_QUAD
(
∑th
, 
v¨
) \

342 
tu«bÀ_quad
 
	`__CONCAT
(
__tu«bÀ_quad_
, 
__LINE__
) = { \

343 (
∑th
), \

344 (
v¨
), \

346 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

347 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_quad_öô
, \

348 &
	`__CONCAT
(
__tu«bÀ_quad_
, 
__LINE__
))

	)

350 
	#TUNABLE_QUAD_FETCH
(
∑th
, 
v¨
Ë
	`gëív_quad
(’©h), (v¨))

	)

352 
tu«bÀ_°r_öô
(*);

353 
	stu«bÀ_°r
 {

354 c⁄° *
	m∑th
;

355 *
	mv¨
;

356 
	msize
;

358 
	#TUNABLE_STR
(
∑th
, 
v¨
, 
size
) \

359 
tu«bÀ_°r
 
	`__CONCAT
(
__tu«bÀ_°r_
, 
__LINE__
) = { \

360 (
∑th
), \

361 (
v¨
), \

362 (
size
), \

364 
	`SYSINIT
(
	`__CONCAT
(
__Tu«bÀ_öô_
, 
__LINE__
), \

365 
SI_SUB_TUNABLES
, 
SI_ORDER_MIDDLE
, 
tu«bÀ_°r_öô
, \

366 &
	`__CONCAT
(
__tu«bÀ_°r_
, 
__LINE__
))

	)

368 
	#TUNABLE_STR_FETCH
(
∑th
, 
v¨
, 
size
) \

369 
	`gëív_°rög
((
∑th
), (
v¨
), (
size
))

	)

371 
	söå_c⁄fig_hook
 {

372 
TAILQ_ENTRY
(
öå_c⁄fig_hook
Ë
	mich_löks
;

373 (*
	mich_func
)(*
	m¨g
);

374 *
	mich_¨g
;

377 
c⁄fig_öåhook_e°ablish
(
öå_c⁄fig_hook
 *
hook
);

378 
c⁄fig_öåhook_di£°ablish
(
öå_c⁄fig_hook
 *
hook
);

	@/usr/include/sys/limits.h

32 #i‚de‡
_SYS_LIMITS_H_


33 
	#_SYS_LIMITS_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<machöe/_limôs.h
>

38 
	#CHAR_BIT
 
__CHAR_BIT


	)

40 
	#SCHAR_MAX
 
__SCHAR_MAX


	)

41 
	#SCHAR_MIN
 
__SCHAR_MIN


	)

43 
	#UCHAR_MAX
 
__UCHAR_MAX


	)

45 #ifde‡
__CHAR_UNSIGNED__


46 
	#CHAR_MAX
 
UCHAR_MAX


	)

47 
	#CHAR_MIN
 0

	)

49 
	#CHAR_MAX
 
SCHAR_MAX


	)

50 
	#CHAR_MIN
 
SCHAR_MIN


	)

53 
	#USHRT_MAX
 
__USHRT_MAX


	)

54 
	#SHRT_MAX
 
__SHRT_MAX


	)

55 
	#SHRT_MIN
 
__SHRT_MIN


	)

57 
	#UINT_MAX
 
__UINT_MAX


	)

58 
	#INT_MAX
 
__INT_MAX


	)

59 
	#INT_MIN
 
__INT_MIN


	)

61 
	#ULONG_MAX
 
__ULONG_MAX


	)

62 
	#LONG_MAX
 
__LONG_MAX


	)

63 
	#LONG_MIN
 
__LONG_MIN


	)

65 #ifde‡
__LONG_LONG_SUPPORTED


66 
	#ULLONG_MAX
 
__ULLONG_MAX


	)

67 
	#LLONG_MAX
 
__LLONG_MAX


	)

68 
	#LLONG_MIN
 
__LLONG_MIN


	)

71 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


72 
	#SSIZE_MAX
 
__SSIZE_MAX


	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIZE_T_MAX
 
__SIZE_T_MAX


	)

78 
	#OFF_MAX
 
__OFF_MAX


	)

79 
	#OFF_MIN
 
__OFF_MIN


	)

82 #i‡
__BSD_VISIBLE


83 
	#GID_MAX
 
UINT_MAX


	)

84 
	#UID_MAX
 
UINT_MAX


	)

86 
	#UQUAD_MAX
 (
__UQUAD_MAX
Ë

	)

87 
	#QUAD_MAX
 (
__QUAD_MAX
Ë

	)

88 
	#QUAD_MIN
 (
__QUAD_MIN
Ë

	)

91 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

92 
	#LONG_BIT
 
__LONG_BIT


	)

93 
	#WORD_BIT
 
__WORD_BIT


	)

96 #i‡
__POSIX_VISIBLE


97 
	#MQ_PRIO_MAX
 64

	)

	@/usr/include/sys/linker.h

29 #i‚de‡
_SYS_LINKER_H_


30 
	#_SYS_LINKER_H_


	)

32 #ifde‡
_KERNEL


34 
	~<machöe/ñf.h
>

35 
	~<sys/kobj.h
>

37 #ifde‡
MALLOC_DECLARE


38 
MALLOC_DECLARE
(
M_LINKER
);

41 
	gmod_dïíd
;

46 
lökî_fûe
* 
	tlökî_fûe_t
;

47 
	$TAILQ_HEAD
(, 
	tlökî_fûe
Ë
	tlökî_fûe_li°_t
;

49 
ˇddr_t
 
	tlökî_sym_t
;

50 
c_ˇddr_t
 
	tc_lökî_sym_t
;

51 (*
	tlökî_fun˘i⁄_«me_ˇŒback_t
)(const *, *);

56 
	slökî_symvÆ
 {

57 c⁄° * 
«me
;

58 
ˇddr_t
 
vÆue
;

59 
size_t
 
size
;

60 } 
	tlökî_symvÆ_t
;

62 (*
	tlökî_fun˘i⁄_«mevÆ_ˇŒback_t
)(
	tlökî_fûe_t
, , 
	tlökî_symvÆ_t
 *, *);

64 
	scomm⁄_symbﬁ
 {

65 
	`STAILQ_ENTRY
(
comm⁄_symbﬁ
Ë
lök
;

66 * 
«me
;

67 
ˇddr_t
 
addªss
;

70 
	slökî_fûe
 {

71 
KOBJ_FIELDS
;

72 
ªfs
;

73 
u£ºefs
;

74 
Êags
;

75 
	#LINKER_FILE_LINKED
 0x1

	)

76 
	`TAILQ_ENTRY
(
lökî_fûe
Ë
lök
;

77 * 
fûíame
;

78 * 
∑th«me
;

79 
id
;

80 
ˇddr_t
 
addªss
;

81 
size_t
 
size
;

82 
ndïs
;

83 
lökî_fûe_t
* 
dïs
;

84 
	`STAILQ_HEAD
(, 
comm⁄_symbﬁ
Ë
comm⁄
;

85 
	`TAILQ_HEAD
(, 
moduÀ
Ë
moduÀs
;

86 
	`TAILQ_ENTRY
(
lökî_fûe
Ë
lﬂded
;

87 
lﬂd˙t
;

93 
√«bÀd
;

94 
fbt_√¡rõs
;

100 
lökî_˛ass
 *
	tlökî_˛ass_t
;

101 
	$TAILQ_HEAD
(, 
	tlökî_˛ass
Ë
	tlökî_˛ass_li°_t
;

103 
	slökî_˛ass
 {

104 
KOBJ_CLASS_FIELDS
;

105 
	`TAILQ_ENTRY
(
lökî_˛ass
Ë
lök
;

111 
	tlökî_¥ediˇã_t
(
	tlökî_fûe_t
, *);

116 
lökî_fûe_t
 
lökî_kî√l_fûe
;

121 
	`lökî_ª„ªn˚_moduÀ
(c⁄° * 
_mod«me
, 
mod_dïíd
 *
_vîöfo
,

122 
lökî_fûe_t
* 
_ªsu…
);

129 
	`lökî_ªÀa£_moduÀ
(c⁄° *
_mod«me
, 
mod_dïíd
 *
_vîöfo
,

130 
lökî_fûe_t
 
_fûe
);

137 
	`lökî_fûe_f‹óch
(
lökî_¥ediˇã_t
 *
_¥ediˇã
, *
_c⁄ãxt
);

143 
ˇddr_t
 
	`lökî_fûe_lookup_symbﬁ
(
lökî_fûe_t
 
_fûe
, c⁄° * 
_«me
,

144 
_dïs
);

151 
	`lökî_fûe_lookup_£t
(
lökî_fûe_t
 
_fûe
, c⁄° *
_«me
,

152 *
_°¨t
, *
_°›
, *
_cou¡
);

157 
	`lökî_fûe_fun˘i⁄_li°Æl
(
lökî_fûe_t
,

158 
lökî_fun˘i⁄_«mevÆ_ˇŒback_t
, *);

163 
	`lökî_add_˛ass
(
lökî_˛ass_t
 
_˛s
);

164 
	`lökî_fûe_u∆ﬂd
(
lökî_fûe_t
 
_fûe
, 
Êags
);

165 
	`lökî_lﬂd_dïídícõs
(
lökî_fûe_t
 
_lf
);

166 
lökî_fûe_t
 
	`lökî_make_fûe
(c⁄° * 
_fûíame
, 
lökî_˛ass_t
 
_˛s
);

171 
	`lökî_ddb_lookup
(c⁄° *
_sym°r
, 
c_lökî_sym_t
 *
_sym
);

172 
	`lökî_ddb_£¨ch_symbﬁ
(
ˇddr_t
 
_vÆue
, 
c_lökî_sym_t
 *
_sym
,

173 *
_difÂ
);

174 
	`lökî_ddb_symbﬁ_vÆues
(
c_lökî_sym_t
 
_sym
, 
lökî_symvÆ_t
 *
_symvÆ
);

175 
	`lökî_ddb_£¨ch_symbﬁ_«me
(
ˇddr_t
 
vÆue
, *
buf
, 
u_öt
 
buÊí
,

176 *
off£t
);

181 
	`lökî_£¨ch_symbﬁ_«me
(
ˇddr_t
 
vÆue
, *
buf
, 
u_öt
 
buÊí
,

182 *
off£t
);

186 *
	`lökî_hwpmc_li°_obje˘s
();

193 
	#MODINFO_END
 0x0000

	)

194 
	#MODINFO_NAME
 0x0001

	)

195 
	#MODINFO_TYPE
 0x0002

	)

196 
	#MODINFO_ADDR
 0x0003

	)

197 
	#MODINFO_SIZE
 0x0004

	)

198 
	#MODINFO_EMPTY
 0x0005

	)

199 
	#MODINFO_ARGS
 0x0006

	)

200 
	#MODINFO_METADATA
 0x8000

	)

202 
	#MODINFOMD_AOUTEXEC
 0x0001

	)

203 
	#MODINFOMD_ELFHDR
 0x0002

	)

204 
	#MODINFOMD_SSYM
 0x0003

	)

205 
	#MODINFOMD_ESYM
 0x0004

	)

206 
	#MODINFOMD_DYNAMIC
 0x0005

	)

208 #i‡!
	`deföed
(
__•¨c64__
Ë&& !deföed(
__powîpc__
)

209 
	#MODINFOMD_ENVP
 0x0006

	)

210 
	#MODINFOMD_HOWTO
 0x0007

	)

211 
	#MODINFOMD_KERNEND
 0x0008

	)

213 
	#MODINFOMD_SHDR
 0x0009

	)

214 
	#MODINFOMD_NOCOPY
 0x8000

	)

216 
	#MODINFOMD_DEPLIST
 (0x4001 | 
MODINFOMD_NOCOPY
Ë

	)

218 #ifde‡
_KERNEL


219 
	#MD_FETCH
(
mdp
, 
öfo
, 
ty≥
) ({ \

220 
ty≥
 *
__p
; \

221 
__p
 = (
ty≥
 *)
	`¥ñﬂd_£¨ch_öfo
((
mdp
), 
MODINFO_METADATA
 | (
öfo
)); \

222 
__p
 ? *__p : 0; \

223 
	}
})

	)

226 
	#LINKER_HINTS_VERSION
 1

	)

228 #ifde‡
_KERNEL


233 
vm_off£t_t
 
¥ñﬂd_addr_ªloˇã
;

234 
ˇddr_t
 
¥ñﬂd_mëad©a
;

236 * 
¥ñﬂd_„tch_addr
(
ˇddr_t
 
_mod
);

237 
size_t
 
¥ñﬂd_„tch_size
(
ˇddr_t
 
_mod
);

238 
ˇddr_t
 
¥ñﬂd_£¨ch_by_«me
(c⁄° *
_«me
);

239 
ˇddr_t
 
¥ñﬂd_£¨ch_by_ty≥
(c⁄° *
_ty≥
);

240 
ˇddr_t
 
¥ñﬂd_£¨ch_√xt_«me
(ˇddr_à
_ba£
);

241 
ˇddr_t
 
¥ñﬂd_£¨ch_öfo
(ˇddr_à
_mod
, 
_öf
);

242 
¥ñﬂd_dñëe_«me
(c⁄° *
_«me
);

243 
¥ñﬂd_boŸ°øp_ªloˇã
(
vm_off£t_t
 
_off£t
);

245 #ifde‡
KLD_DEBUG


247 
kld_debug
;

248 
	#KLD_DEBUG_FILE
 1

	)

249 
	#KLD_DEBUG_SYM
 2

	)

251 
	#KLD_DPF
(
ˇt
, 
¨gs
) \

253 i‡(
kld_debug
 & 
KLD_DEBUG_
##
ˇt
Ë
¥ötf
 
¨gs
; \

254 } 0)

	)

258 
	#KLD_DPF
(
ˇt
, 
¨gs
)

	)

262 
	tñf_lookup_‚
(
	tlökî_fûe_t
, 
	tElf_Size
, , 
	tElf_Addr
 *);

265 
ñf_ªloc
(
lökî_fûe_t
 
_lf
, 
Elf_Addr
 
ba£
, c⁄° *
_ªl
, 
_ty≥
, 
ñf_lookup_‚
 
_lu
);

266 
ñf_ªloc_loˇl
(
lökî_fûe_t
 
_lf
, 
Elf_Addr
 
ba£
, c⁄° *
_ªl
, 
_ty≥
, 
ñf_lookup_‚
 
_lu
);

267 
Elf_Addr
 
ñf_ªloˇddr
(
lökî_fûe_t
 
_lf
, Elf_Add∏
addr
);

268 c⁄° 
Elf_Sym
 *
ñf_gë_sym
(
lökî_fûe_t
 
_lf
, 
Elf_Size
 
_symidx
);

269 c⁄° *
ñf_gë_sym«me
(
lökî_fûe_t
 
_lf
, 
Elf_Size
 
_symidx
);

271 
	slökî_˘f
 {

272 c⁄° 
uöt8_t
 *
	m˘·ab
;

273 
	m˘f˙t
;

274 c⁄° 
Elf_Sym
 *
	msymèb
;

275 
	mnsym
;

276 c⁄° *
	m°πab
;

277 
	m°r˙t
;

278 
uöt32_t
 **
	m˘fofÂ
;

279 
uöt32_t
 **
	mtypofÂ
;

280 *
	mty∂íp
;

281 } 
	tlökî_˘f_t
;

283 
lökî_˘f_gë
(
lökî_fûe_t
, 
lökî_˘f_t
 *);

285 
ñf_˝u_lﬂd_fûe
(
lökî_fûe_t
);

286 
ñf_˝u_u∆ﬂd_fûe
(
lökî_fûe_t
);

289 
	#ELF_RELOC_REL
 1

	)

290 
	#ELF_RELOC_RELA
 2

	)

296 
	skld_fûe_°©_1
 {

297 
	mvîsi⁄
;

298 
	m«me
[
MAXPATHLEN
];

299 
	mªfs
;

300 
	mid
;

301 
ˇddr_t
 
	maddªss
;

302 
size_t
 
	msize
;

306 
	skld_fûe_°©
 {

307 
	mvîsi⁄
;

308 
	m«me
[
MAXPATHLEN
];

309 
	mªfs
;

310 
	mid
;

311 
ˇddr_t
 
	maddªss
;

312 
size_t
 
	msize
;

313 
	m∑th«me
[
MAXPATHLEN
];

316 
	skld_sym_lookup
 {

317 
	mvîsi⁄
;

318 *
	msym«me
;

319 
u_l⁄g
 
	msymvÆue
;

320 
size_t
 
	msymsize
;

322 
	#KLDSYM_LOOKUP
 1

	)

327 
	#LINKER_UNLOAD_NORMAL
 0

	)

328 
	#LINKER_UNLOAD_FORCE
 1

	)

330 #i‚de‡
_KERNEL


332 
	~<sys/cdefs.h
>

334 
__BEGIN_DECLS


335 
kldlﬂd
(c⁄° * 
_fûe
);

336 
kldu∆ﬂd
(
_fûeid
);

337 
kldu∆ﬂdf
(
_fûeid
, 
Êags
);

338 
kldföd
(c⁄° * 
_fûe
);

339 
kld√xt
(
_fûeid
);

340 
kld°©
(
_fûeid
, 
kld_fûe_°©
* 
_°©
);

341 
kldfú°mod
(
_fûeid
);

342 
kldsym
(
_fûeid
, 
_cmd
, *
_d©a
);

343 
	g__END_DECLS


	@/usr/include/sys/lock.h

32 #i‚de‡
_SYS_LOCK_H_


33 
	#_SYS_LOCK_H_


	)

35 
	~<sys/queue.h
>

36 
	~<sys/_lock.h
>

38 
	glock_li°_íåy
;

39 
	gthªad
;

58 
	slock_˛ass
 {

59 c⁄° *
	mlc_«me
;

60 
u_öt
 
	mlc_Êags
;

61 (*
	mlc_as£π
)(c⁄° 
lock_obje˘
 *
	mlock
, 
	mwh©
);

62 (*
	mlc_ddb_show
)(c⁄° 
lock_obje˘
 *
	mlock
);

63 (*
	mlc_lock
)(
lock_obje˘
 *
	mlock
, 
uöçå_t
 
	mhow
);

64 (*
	mlc_ow√r
)(c⁄° 
lock_obje˘
 *
	mlock
,

65 
thªad
 **
	mow√r
);

66 
uöçå_t
 (*
lc_u∆ock
)(
lock_obje˘
 *
	mlock
);

69 
	#LC_SLEEPLOCK
 0x00000001

	)

70 
	#LC_SPINLOCK
 0x00000002

	)

71 
	#LC_SLEEPABLE
 0x00000004

	)

72 
	#LC_RECURSABLE
 0x00000008

	)

73 
	#LC_UPGRADABLE
 0x00000010

	)

75 
	#LO_CLASSFLAGS
 0x0000fff‡

	)

76 
	#LO_INITIALIZED
 0x00010000

	)

77 
	#LO_WITNESS
 0x00020000

	)

78 
	#LO_QUIET
 0x00040000

	)

79 
	#LO_RECURSABLE
 0x00080000

	)

80 
	#LO_SLEEPABLE
 0x00100000

	)

81 
	#LO_UPGRADABLE
 0x00200000

	)

82 
	#LO_DUPOK
 0x00400000

	)

83 
	#LO_IS_VNODE
 0x00800000

	)

84 
	#LO_CLASSMASK
 0x0f000000

	)

85 
	#LO_NOPROFILE
 0x10000000

	)

92 
	#LO_CLASSSHIFT
 24

	)

93 
	#LO_CLASSINDEX
(
lock
Ë(((÷ock)->
lo_Êags
Ë& 
LO_CLASSMASK
Ë>> 
LO_CLASSSHIFT
)

	)

94 
	#LOCK_CLASS
(
lock
Ë(
lock_˛as£s
[
	`LO_CLASSINDEX
(÷ock))])

	)

95 
	#LOCK_CLASS_MAX
 (
LO_CLASSMASK
 >> 
LO_CLASSSHIFT
)

	)

101 
	#LOP_NEWORDER
 0x00000001

	)

102 
	#LOP_QUIET
 0x00000002

	)

103 
	#LOP_TRYLOCK
 0x00000004

	)

104 
	#LOP_EXCLUSIVE
 0x00000008

	)

105 
	#LOP_DUPOK
 0x00000010

	)

108 
	#LA_MASKASSERT
 0x000000f‡

	)

109 
	#LA_UNLOCKED
 0x00000000

	)

110 
	#LA_LOCKED
 0x00000001

	)

111 
	#LA_SLOCKED
 0x00000002

	)

112 
	#LA_XLOCKED
 0x00000004

	)

113 
	#LA_RECURSED
 0x00000008

	)

114 
	#LA_NOTRECURSED
 0x00000010

	)

116 #ifde‡
_KERNEL


126 #i‡
deföed
(
KLD_MODULE
Ë|| deföed(
WITNESS
Ë|| deföed(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
Ë|| deföed(
KTR
Ë|| deföed(
LOCK_PROFILING
)

127 
	#LOCK_DEBUG
 1

	)

129 
	#LOCK_DEBUG
 0

	)

136 #i‡
LOCK_DEBUG
 > 0

137 
	#LOCK_FILE
 
__FILE__


	)

138 
	#LOCK_LINE
 
__LINE__


	)

140 
	#LOCK_FILE
 
NULL


	)

141 
	#LOCK_LINE
 0

	)

155 
	#LOCK_LOG_TEST
(
lo
, 
Êags
) \

156 (((
Êags
Ë& 
LOP_QUIET
Ë=0 && ((
lo
)->
lo_Êags
 & 
LO_QUIET
Ë=0)

	)

158 
	#LOCK_LOG_LOCK
(
›«me
, 
lo
, 
Êags
, 
ªcur£
, 
fûe
, 
löe
) do { \

159 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

160 
	`CTR6
(
KTR_LOCK
, 
›«me
 " (%s) %s %pÑ = %dát %s:%d", \

161 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

162 (
lo
), (
u_öt
)(
ªcur£
), (
fûe
), (
löe
)); \

163 } 0)

	)

165 
	#LOCK_LOG_TRY
(
›«me
, 
lo
, 
Êags
, 
ªsu…
, 
fûe
, 
löe
) do { \

166 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

167 
	`CTR6
(
KTR_LOCK
, "TRY_" 
›«me
 " (%s) %s %pÑesult=%dát %s:%d",\

168 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
, \

169 (
lo
), (
u_öt
)(
ªsu…
), (
fûe
), (
löe
)); \

170 } 0)

	)

172 
	#LOCK_LOG_INIT
(
lo
, 
Êags
) do { \

173 i‡(
	`LOCK_LOG_TEST
((
lo
), (
Êags
))) \

174 
	`CTR4
(
KTR_LOCK
, "%s: %∞(%sË%s", 
__func__
, (
lo
), \

175 
	`LOCK_CLASS
(
lo
)->
lc_«me
, (lo)->
lo_«me
); \

176 } 0)

	)

178 
	#LOCK_LOG_DESTROY
(
lo
, 
Êags
Ë
	`LOCK_LOG_INIT
÷o, fœgs)

	)

180 
	#lock_öôÆized
(
lo
Ë(÷o)->
lo_Êags
 & 
LO_INITIALIZED
)

	)

186 
	#MPASS
(
ex
Ë
	`MPASS4
”x, #ex, 
__FILE__
, 
__LINE__
)

	)

187 
	#MPASS2
(
ex
, 
wh©
Ë
	`MPASS4
”x, wh©, 
__FILE__
, 
__LINE__
)

	)

188 
	#MPASS3
(
ex
, 
fûe
, 
löe
Ë
	`MPASS4
”x, #ex, fûe,Üöe)

	)

189 
	#MPASS4
(
ex
, 
wh©
, 
fûe
, 
löe
) \

190 
	`KASSERT
((
ex
), ("As£πi⁄ %†Áûedáà%s:%d", 
wh©
, 
fûe
, 
löe
))

	)

192 
lock_˛ass
 
lock_˛ass_mtx_¶ìp
;

193 
lock_˛ass
 
lock_˛ass_mtx_•ö
;

194 
lock_˛ass
 
lock_˛ass_sx
;

195 
lock_˛ass
 
lock_˛ass_rw
;

196 
lock_˛ass
 
lock_˛ass_rm
;

197 
lock_˛ass
 
lock_˛ass_rm_¶ì∑bÀ
;

198 
lock_˛ass
 
lock_˛ass_lockmgr
;

200 
lock_˛ass
 *
lock_˛as£s
[];

202 
lock_öô
(
lock_obje˘
 *, 
lock_˛ass
 *,

204 
lock_de°roy
(
lock_obje˘
 *);

205 
•ölock_íãr
();

206 
•ölock_exô
();

207 
wô√ss_öô
(
lock_obje˘
 *, const *);

208 
wô√ss_de°roy
(
lock_obje˘
 *);

209 
wô√ss_deföe‹dî
(
lock_obje˘
 *, lock_object *);

210 
wô√ss_check‹dî
(
lock_obje˘
 *, , const *, ,

211 
lock_obje˘
 *);

212 
wô√ss_lock
(
lock_obje˘
 *, , const *, );

213 
wô√ss_upgøde
(
lock_obje˘
 *, , const *, );

214 
wô√ss_downgøde
(
lock_obje˘
 *, , const *, );

215 
wô√ss_u∆ock
(
lock_obje˘
 *, , const *, );

216 
wô√ss_ßve
(
lock_obje˘
 *, const **, *);

217 
wô√ss_ª°‹e
(
lock_obje˘
 *, const *, );

218 
wô√ss_li°_locks
(
lock_li°_íåy
 **,

220 
	`wô√ss_w¨n
(, 
lock_obje˘
 *, const *, ...);

221 
	`wô√ss_as£π
(c⁄° 
lock_obje˘
 *, , const *, );

222 
	`wô√ss_di•œy_•ölock
(
lock_obje˘
 *, 
thªad
 *,

224 
	`wô√ss_löe
(
lock_obje˘
 *);

225 
	`wô√ss_n‹ñó£
(
lock_obje˘
 *);

226 
	`wô√ss_ªÀa£ok
(
lock_obje˘
 *);

227 c⁄° *
	`wô√ss_fûe
(
lock_obje˘
 *);

228 
	`wô√ss_thªad_exô
(
thªad
 *);

230 #ifdef 
WITNESS


233 
	#WARN_GIANTOK
 0x01

	)

234 
	#WARN_PANIC
 0x02

	)

235 
	#WARN_SLEEPOK
 0x04

	)

237 
	#WITNESS_INIT
(
lock
, 
ty≥
) \

238 
	`wô√ss_öô
((
lock
), (
ty≥
))

	)

240 
	#WITNESS_DESTROY
(
lock
) \

241 
	`wô√ss_de°roy
(
lock
)

	)

243 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
) \

244 
	`wô√ss_check‹dî
((
lock
), (
Êags
), (
fûe
), (
löe
), (
öãæock
))

	)

246 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
) \

247 
	`wô√ss_deföe‹dî
((
lock_obje˘
 *)(
lock1
), \

248 (
lock_obje˘
 *)(
lock2
))

	)

250 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

251 
	`wô√ss_lock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

253 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

254 
	`wô√ss_upgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

256 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
) \

257 
	`wô√ss_downgøde
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

259 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
) \

260 
	`wô√ss_u∆ock
((
lock
), (
Êags
), (
fûe
), (
löe
))

	)

262 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...) \

263 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

265 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...) \

266 
	`wô√ss_w¨n
((
Êags
), (
lock
), (
fmt
), ## 
__VA_ARGS__
)

	)

268 
	#WITNESS_SAVE_DECL
(
n
) \

269 c⁄° * 
	`__CONCAT
(
n
, 
__wf
); \

270 
	`__CONCAT
(
n
, 
__wl
)

	)

272 
	#WITNESS_SAVE
(
lock
, 
n
) \

273 
	`wô√ss_ßve
((
lock
), &
	`__CONCAT
(
n
, 
__wf
), &__CONCAT“, 
__wl
))

	)

275 
	#WITNESS_RESTORE
(
lock
, 
n
) \

276 
	`wô√ss_ª°‹e
((
lock
), 
	`__CONCAT
(
n
, 
__wf
), __CONCAT“, 
__wl
))

	)

278 
	#WITNESS_NORELEASE
(
lock
) \

279 
	`wô√ss_n‹ñó£
(&(
lock
)->
lock_obje˘
)

	)

281 
	#WITNESS_RELEASEOK
(
lock
) \

282 
	`wô√ss_ªÀa£ok
(&(
lock
)->
lock_obje˘
)

	)

284 
	#WITNESS_FILE
(
lock
) \

285 
	`wô√ss_fûe
(
lock
)

	)

287 
	#WITNESS_LINE
(
lock
) \

288 
	`wô√ss_löe
(
lock
)

	)

291 
	#WITNESS_INIT
(
lock
, 
ty≥
Ë()0

	)

292 
	#WITNESS_DESTROY
(
lock
Ë()0

	)

293 
	#WITNESS_DEFINEORDER
(
lock1
, 
lock2
Ë0

	)

294 
	#WITNESS_CHECKORDER
(
lock
, 
Êags
, 
fûe
, 
löe
, 
öãæock
Ë()0

	)

295 
	#WITNESS_LOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

296 
	#WITNESS_UPGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

297 
	#WITNESS_DOWNGRADE
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

298 
	#WITNESS_UNLOCK
(
lock
, 
Êags
, 
fûe
, 
löe
Ë()0

	)

299 
	#WITNESS_CHECK
(
Êags
, 
lock
, 
fmt
, ...Ë0

	)

300 
	#WITNESS_WARN
(
Êags
, 
lock
, 
fmt
, ...Ë()0

	)

301 
	#WITNESS_SAVE_DECL
(
n
Ë()0

	)

302 
	#WITNESS_SAVE
(
lock
, 
n
Ë()0

	)

303 
	#WITNESS_RESTORE
(
lock
, 
n
Ë()0

	)

304 
	#WITNESS_NORELEASE
(
lock
Ë()0

	)

305 
	#WITNESS_RELEASEOK
(
lock
Ë()0

	)

306 
	#WITNESS_FILE
(
lock
Ë("?")

	)

307 
	#WITNESS_LINE
(
lock
Ë(0)

	)

	@/usr/include/sys/malloc.h

35 #i‚de‡
_SYS_MALLOC_H_


36 
	#_SYS_MALLOC_H_


	)

38 
	~<sys/∑øm.h
>

39 
	~<sys/queue.h
>

40 
	~<sys/_lock.h
>

41 
	~<sys/_muãx.h
>

43 
	#MINALLOCSIZE
 
UMA_SMALLEST_UNIT


	)

48 
	#M_NOWAIT
 0x0001

	)

49 
	#M_WAITOK
 0x0002

	)

50 
	#M_ZERO
 0x0100

	)

51 
	#M_NOVM
 0x0200

	)

52 
	#M_USE_RESERVE
 0x0400

	)

53 
	#M_NODUMP
 0x0800

	)

54 
	#M_FIRSTFIT
 0x1000

	)

55 
	#M_BESTFIT
 0x2000

	)

57 
	#M_MAGIC
 877983977

	)

75 
	smÆloc_ty≥_°©s
 {

76 
uöt64_t
 
	mmts_memÆlo˚d
;

77 
uöt64_t
 
	mmts_mem‰ìd
;

78 
uöt64_t
 
	mmts_numÆlocs
;

79 
uöt64_t
 
	mmts_num‰ìs
;

80 
uöt64_t
 
	mmts_size
;

81 
uöt64_t
 
	m_mts_ª£rved1
;

82 
uöt64_t
 
	m_mts_ª£rved2
;

83 
uöt64_t
 
	m_mts_ª£rved3
;

89 
	#DTMALLOC_PROBE_MALLOC
 0

	)

90 
	#DTMALLOC_PROBE_FREE
 1

	)

91 
	#DTMALLOC_PROBE_MAX
 2

	)

93 
	smÆloc_ty≥_öã∫Æ
 {

94 
uöt32_t
 
	mmti_¥obes
[
DTMALLOC_PROBE_MAX
];

96 
u_ch¨
 
	mmti_z⁄e
;

97 
mÆloc_ty≥_°©s
 
	mmti_°©s
[
MAXCPU
];

105 
	smÆloc_ty≥
 {

106 
mÆloc_ty≥
 *
	mks_√xt
;

107 
u_l⁄g
 
	mks_magic
;

108 c⁄° *
	mks_sh‹tdesc
;

109 *
	mks_h™dÀ
;

119 
	#MALLOC_TYPE_STREAM_VERSION
 0x00000001

	)

120 
	smÆloc_ty≥_°ªam_hódî
 {

121 
uöt32_t
 
	mmtsh_vîsi⁄
;

122 
uöt32_t
 
	mmtsh_max˝us
;

123 
uöt32_t
 
	mmtsh_cou¡
;

124 
uöt32_t
 
	m_mtsh_∑d
;

127 
	#MALLOC_MAX_NAME
 32

	)

128 
	smÆloc_ty≥_hódî
 {

129 
	mmth_«me
[
MALLOC_MAX_NAME
];

132 #ifde‡
_KERNEL


133 
	#MALLOC_DEFINE
(
ty≥
, 
sh‹tdesc
, 
l⁄gdesc
) \

134 
mÆloc_ty≥
 
ty≥
[1] = { \

135 { 
NULL
, 
M_MAGIC
, 
sh‹tdesc
, NULL } \

137 
	`SYSINIT
(
ty≥
##
_öô
, 
SI_SUB_KMEM
, 
SI_ORDER_SECOND
, 
mÆloc_öô
, \

138 
ty≥
); \

139 
	`SYSUNINIT
(
ty≥
##
_unöô
, 
SI_SUB_KMEM
, 
SI_ORDER_ANY
, \

140 
mÆloc_unöô
, 
ty≥
)

	)

142 
	#MALLOC_DECLARE
(
ty≥
) \

143 
mÆloc_ty≥
 
ty≥
[1]

	)

145 
MALLOC_DECLARE
(
M_CACHE
);

146 
MALLOC_DECLARE
(
M_DEVBUF
);

147 
MALLOC_DECLARE
(
M_TEMP
);

149 
MALLOC_DECLARE
(
M_IP6OPT
);

150 
MALLOC_DECLARE
(
M_IP6NDP
);

155 
	#MALLOC
(
•a˚
, 
ˇ°
, 
size
, 
ty≥
, 
Êags
) \

156 ((
•a˚
Ë(
ˇ°
)
	`mÆloc
((
u_l⁄g
)(
size
), (
ty≥
), (
Êags
)))

	)

157 
	#FREE
(
addr
, 
ty≥
Ë
	`‰ì
(◊ddr), (ty≥))

	)

164 
MALLOC_DECLARE
(
M_IOV
);

166 
mtx
 
mÆloc_mtx
;

171 
	tmÆloc_ty≥_li°_func_t
(
	tmÆloc_ty≥
 *, *);

173 
c⁄tig‰ì
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
);

174 *
	$c⁄tigmÆloc
(
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
,

175 
vm_∑ddr_t
 
low
, vm_∑ddr_à
high
, 
Æignmít
,

176 
vm_∑ddr_t
 
bound¨y
Ë
__mÆloc_like
;

177 
	`‰ì
(*
addr
, 
mÆloc_ty≥
 *
ty≥
);

178 *
	$mÆloc
(
size
, 
mÆloc_ty≥
 *
ty≥
, 
Êags
Ë
__mÆloc_like
;

179 
	`mÆloc_öô
(*);

180 
	`mÆloc_œ°_Áû
();

181 
	`mÆloc_ty≥_Æloˇãd
(
mÆloc_ty≥
 *
ty≥
, 
size
);

182 
	`mÆloc_ty≥_‰ìd
(
mÆloc_ty≥
 *
ty≥
, 
size
);

183 
	`mÆloc_ty≥_li°
(
mÆloc_ty≥_li°_func_t
 *, *);

184 
	`mÆloc_unöô
(*);

185 *
	`ªÆloc
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
,

186 
Êags
);

187 *
	`ªÆlocf
(*
addr
, 
size
, 
mÆloc_ty≥
 *
ty≥
,

188 
Êags
);

190 
mÆloc_ty≥
 *
	`mÆloc_desc2ty≥
(c⁄° *
desc
);

	@/usr/include/sys/module.h

29 #i‚de‡
_SYS_MODULE_H_


30 
	#_SYS_MODULE_H_


	)

35 
	#MDT_DEPEND
 1

	)

36 
	#MDT_MODULE
 2

	)

37 
	#MDT_VERSION
 3

	)

38 
	#MDT_PNP_INFO
 4

	)

40 
	#MDT_STRUCT_VERSION
 1

	)

41 
	#MDT_SETNAME
 "modmëad©a_£t"

	)

43 
	emodevíây≥
 {

44 
	mMOD_LOAD
,

45 
	mMOD_UNLOAD
,

46 
	mMOD_SHUTDOWN
,

47 
	mMOD_QUIESCE


48 } 
	tmodevíây≥_t
;

50 
moduÀ
 *
	tmoduÀ_t
;

51 (*
	tmodevíth™d_t
)(
	tmoduÀ_t
, , *);

56 
	smoduÀd©a
 {

57 c⁄° *
«me
;

58 
modevíth™d_t
 
evh™d
;

59 *
¥iv
;

60 } 
	tmoduÀd©a_t
;

66 
	umod•ecific
 {

67 
ötvÆ
;

68 
u_öt
 
uötvÆ
;

69 
l⁄gvÆ
;

70 
u_l⁄g
 
ul⁄gvÆ
;

71 } 
	tmod•ecific_t
;

76 
	smod_dïíd
 {

77 
md_vî_möimum
;

78 
md_vî_¥e„ºed
;

79 
md_vî_maximum
;

85 
	smod_vîsi⁄
 {

86 
mv_vîsi⁄
;

89 
	smod_mëad©a
 {

90 
md_vîsi⁄
;

91 
md_ty≥
;

92 *
md_d©a
;

93 c⁄° *
md_cvÆ
;

96 #ifdef 
_KERNEL


98 
	~<sys/lökî_£t.h
>

100 
	#MODULE_METADATA
(
uniquifõr
, 
ty≥
, 
d©a
, 
cvÆ
) \

101 
mod_mëad©a
 
_mod_mëad©a
##
uniquifõr
 = { \

102 
MDT_STRUCT_VERSION
, \

103 
ty≥
, \

104 
d©a
, \

105 
cvÆ
 \

106 
	}
}; \

107 
	`DATA_SET
(
modmëad©a_£t
, 
_mod_mëad©a
##
uniquifõr
)

	)

109 
	#MODULE_DEPEND
(
moduÀ
, 
mdïíd
, 
vmö
, 
v¥ef
, 
vmax
) \

110 
mod_dïíd
 
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
 \

111 
	`__£˘i⁄
(".data") = { \

112 
vmö
, \

113 
v¥ef
, \

114 
vmax
 \

116 
	`MODULE_METADATA
(
_md_
##
moduÀ
##
_⁄_
##
mdïíd
, 
MDT_DEPEND
, \

117 &
_
##
moduÀ
##
_dïíd_⁄_
##
mdïíd
, #mdïíd)

	)

128 
	#MODULE_KERNEL_MAXVER
 (
	`roundup
(
__FªeBSD_vîsi⁄
, 100000Ë- 1)

	)

130 
	#DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
maxvî
) \

131 
	`MODULE_DEPEND
(
«me
, 
kî√l
, 
__FªeBSD_vîsi⁄
, \

132 
__FªeBSD_vîsi⁄
, 
maxvî
); \

133 
	`MODULE_METADATA
(
_md_
##
«me
, 
MDT_MODULE
, &
d©a
, #name); \

134 
	`SYSINIT
(
«me
##
moduÀ
, 
sub
, 
‹dî
, 
moduÀ_ªgi°î_öô
, &
d©a
); \

135 
__hack


	)

137 
	#DECLARE_MODULE
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

138 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
MODULE_KERNEL_MAXVER
)

	)

147 
	#DECLARE_MODULE_TIED
(
«me
, 
d©a
, 
sub
, 
‹dî
) \

148 
	`DECLARE_MODULE_WITH_MAXVER
(
«me
, 
d©a
, 
sub
, 
‹dî
, 
__FªeBSD_vîsi⁄
)

	)

150 
	#MODULE_VERSION
(
moduÀ
, 
vîsi⁄
) \

151 
mod_vîsi⁄
 
_
##
moduÀ
##
_vîsi⁄
 \

152 
	`__£˘i⁄
(".data") = { \

153 
vîsi⁄
 \

155 
	`MODULE_METADATA
(
_
##
moduÀ
##
_vîsi⁄
, 
MDT_VERSION
, \

156 &
_
##
moduÀ
##
_vîsi⁄
, #moduÀ)

	)

158 
sx
 
moduÀs_sx
;

160 
	#MOD_XLOCK
 
	`sx_xlock
(&
moduÀs_sx
)

	)

161 
	#MOD_SLOCK
 
	`sx_¶ock
(&
moduÀs_sx
)

	)

162 
	#MOD_XUNLOCK
 
	`sx_xu∆ock
(&
moduÀs_sx
)

	)

163 
	#MOD_SUNLOCK
 
	`sx_su∆ock
(&
moduÀs_sx
)

	)

164 
	#MOD_LOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_LOCKED
)

	)

165 
	#MOD_XLOCK_ASSERT
 
	`sx_as£π
(&
moduÀs_sx
, 
SX_XLOCKED
)

	)

167 
	glökî_fûe
;

169 
moduÀ_ªgi°î_öô
(const *);

170 
moduÀ_ªgi°î
(c⁄° 
moduÀd©a
 *, 
lökî_fûe
 *);

171 
moduÀ_t
 
moduÀ_lookupby«me
(const *);

172 
moduÀ_t
 
moduÀ_lookupbyid
();

173 
moduÀ_quõs˚
(
moduÀ_t
);

174 
moduÀ_ª„ªn˚
(
moduÀ_t
);

175 
moduÀ_ªÀa£
(
moduÀ_t
);

176 
moduÀ_u∆ﬂd
(
moduÀ_t
);

177 
moduÀ_gëid
(
moduÀ_t
);

178 
moduÀ_t
 
moduÀ_gë‚ext
(module_t);

179 c⁄° * 
moduÀ_gë«me
(
moduÀ_t
);

180 
moduÀ_£t•ecific
(
moduÀ_t
, 
mod•ecific_t
 *);

181 
lökî_fûe
 *
moduÀ_fûe
(
moduÀ_t
);

183 #ifdef 
MOD_DEBUG


184 
mod_debug
;

185 
	#MOD_DEBUG_REFS
 1

	)

187 
	#MOD_DPF
(
ˇt
, 
¨gs
) do { \

188 i‡(
mod_debug
 & 
MOD_DEBUG_
##
ˇt
) \

189 
	`¥ötf
(
¨gs
); \

190 } 0)

	)

194 
	#MOD_DPF
(
ˇt
, 
¨gs
)

	)

198 
	#MAXMODNAME
 32

	)

200 
	smoduÀ_°©
 {

201 
	mvîsi⁄
;

202 
	m«me
[
MAXMODNAME
];

203 
	mªfs
;

204 
	mid
;

205 
mod•ecific_t
 
	md©a
;

208 #i‚de‡
_KERNEL


210 
	~<sys/cdefs.h
>

212 
__BEGIN_DECLS


213 
mod√xt
(
_modid
);

214 
mod‚ext
(
_modid
);

215 
mod°©
(
_modid
, 
moduÀ_°©
 *
_°©
);

216 
modföd
(c⁄° *
_«me
);

217 
	g__END_DECLS


	@/usr/include/sys/mount.h

33 #i‚de‡
_SYS_MOUNT_H_


34 
	#_SYS_MOUNT_H_


	)

36 
	~<sys/u¸ed.h
>

37 
	~<sys/queue.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/lock.h
>

40 
	~<sys/lockmgr.h
>

41 
	~<sys/_muãx.h
>

42 
	~<sys/_sx.h
>

50 
	sfsid
 { 
öt32_t
 
	mvÆ
[2]; } 
	tfsid_t
;

56 
	#MAXFIDSZ
 16

	)

58 
	sfid
 {

59 
u_sh‹t
 
	mfid_Àn
;

60 
u_sh‹t
 
	mfid_d©a0
;

61 
	mfid_d©a
[
MAXFIDSZ
];

67 
	#MFSNAMELEN
 16

	)

68 
	#MNAMELEN
 88

	)

69 
	#STATFS_VERSION
 0x20030518

	)

70 
	s°©fs
 {

71 
uöt32_t
 
	mf_vîsi⁄
;

72 
uöt32_t
 
	mf_ty≥
;

73 
uöt64_t
 
	mf_Êags
;

74 
uöt64_t
 
	mf_bsize
;

75 
uöt64_t
 
	mf_iosize
;

76 
uöt64_t
 
	mf_blocks
;

77 
uöt64_t
 
	mf_b‰ì
;

78 
öt64_t
 
	mf_bavaû
;

79 
uöt64_t
 
	mf_fûes
;

80 
öt64_t
 
	mf_f‰ì
;

81 
uöt64_t
 
	mf_syncwrôes
;

82 
uöt64_t
 
	mf_asyncwrôes
;

83 
uöt64_t
 
	mf_syn¸óds
;

84 
uöt64_t
 
	mf_asyn¸óds
;

85 
uöt64_t
 
	mf_•¨e
[10];

86 
uöt32_t
 
	mf_«memax
;

87 
uid_t
 
	mf_ow√r
;

88 
fsid_t
 
	mf_fsid
;

89 
	mf_ch¨•¨e
[80];

90 
	mf_f°y≥«me
[
MFSNAMELEN
];

91 
	mf_m¡‰om«me
[
MNAMELEN
];

92 
	mf_m¡⁄«me
[
MNAMELEN
];

95 #ifde‡
_KERNEL


96 
	#OMFSNAMELEN
 16

	)

97 
	#OMNAMELEN
 (88 - 2 * ()Ë

	)

101 
	so°©fs
 {

102 
	mf_•¨e2
;

103 
	mf_bsize
;

104 
	mf_iosize
;

105 
	mf_blocks
;

106 
	mf_b‰ì
;

107 
	mf_bavaû
;

108 
	mf_fûes
;

109 
	mf_f‰ì
;

110 
fsid_t
 
	mf_fsid
;

111 
uid_t
 
	mf_ow√r
;

112 
	mf_ty≥
;

113 
	mf_Êags
;

114 
	mf_syncwrôes
;

115 
	mf_asyncwrôes
;

116 
	mf_f°y≥«me
[
OMFSNAMELEN
];

117 
	mf_m¡⁄«me
[
OMNAMELEN
];

118 
	mf_syn¸óds
;

119 
	mf_asyn¸óds
;

120 
	mf_•¨es1
;

121 
	mf_m¡‰om«me
[
OMNAMELEN
];

122 
	mf_•¨es2
;

128 
	mf_•¨e
[2];

131 
TAILQ_HEAD
(
vnodñ°
, 
vnode
);

134 
TAILQ_HEAD
(
vfs›éi°
, 
vfs›t
);

135 
	svfs›t
 {

136 
TAILQ_ENTRY
(
vfs›t
Ë
	mlök
;

137 *
	m«me
;

138 *
	mvÆue
;

139 
	mÀn
;

140 
	mpos
;

141 
	m£í
;

157 
	smou¡
 {

158 
mtx
 
	mm¡_mtx
;

159 
	mm¡_gí
;

160 
	#m¡_°¨tzîo
 
m¡_li°


	)

161 
TAILQ_ENTRY
(
mou¡
Ë
	mm¡_li°
;

162 
vfs›s
 *
	mm¡_›
;

163 
vfsc⁄f
 *
	mm¡_vfc
;

164 
vnode
 *
	mm¡_vnodecovîed
;

165 
vnode
 *
	mm¡_syn˚r
;

166 
	mm¡_ªf
;

167 
vnodñ°
 
	mm¡_nvnodñi°
;

168 
	mm¡_nvnodñi°size
;

169 
vnodñ°
 
	mm¡_a˘ivevnodñi°
;

170 
	mm¡_a˘ivevnodñi°size
;

171 
	mm¡_wrôe›cou¡
;

172 
	mm¡_kîn_Êag
;

173 
uöt64_t
 
	mm¡_Êag
;

174 
vfs›éi°
 *
	mm¡_›t
;

175 
vfs›éi°
 *
	mm¡_›äew
;

176 
	mm¡_maxsymlökÀn
;

177 
°©fs
 
	mm¡_°©
;

178 
u¸ed
 *
	mm¡_¸ed
;

179 * 
	mm¡_d©a
;

180 
time_t
 
	mm¡_time
;

181 
	mm¡_iosize_max
;

182 
√ãxp‹t
 *
	mm¡_exp‹t
;

183 
œbñ
 *
	mm¡_œbñ
;

184 
u_öt
 
	mm¡_hash£ed
;

185 
	mm¡_lockªf
;

186 
	mm¡_£c⁄d¨y_wrôes
;

187 
	mm¡_£c⁄d¨y_accwrôes
;

188 
thªad
 *
	mm¡_su•_ow√r
;

189 
	#m¡_ídzîo
 
m¡_gj¥ovidî


	)

190 *
	mm¡_gj¥ovidî
;

191 
lock
 
	mm¡_ex∂ock
;

192 
TAILQ_ENTRY
(
mou¡
Ë
	mm¡_uµî_lök
;

193 
TAILQ_HEAD
(, 
mou¡
Ë
	mm¡_uµîs
;

199 
vnode
 *
__m¡_vnode_√xt_Æl
(vnodê**
mvp
, 
mou¡
 *
mp
);

200 
vnode
 *
__m¡_vnode_fú°_Æl
(vnodê**
mvp
, 
mou¡
 *
mp
);

201 
__m¡_vnode_m¨kî‰ì_Æl
(
vnode
 **
mvp
, 
mou¡
 *
mp
);

203 
	#MNT_VNODE_FOREACH_ALL
(
vp
, 
mp
, 
mvp
) \

204 
vp
 = 
	`__m¡_vnode_fú°_Æl
(&(
mvp
), (
mp
)); \

205 (
vp
Ë!
NULL
; v∞
	`__m¡_vnode_√xt_Æl
(&(
mvp
), (
mp
)))

	)

207 
	#MNT_VNODE_FOREACH_ALL_ABORT
(
mp
, 
mvp
) \

209 
	`MNT_ILOCK
(
mp
); \

210 
	`__m¡_vnode_m¨kî‰ì_Æl
(&(
mvp
), (
mp
)); \

212 
	`mtx_as£π
(
	`MNT_MTX
(
mp
), 
MA_NOTOWNED
); \

213 } 0)

	)

218 
vnode
 *
__m¡_vnode_√xt_a˘ive
(vnodê**
mvp
, 
mou¡
 *
mp
);

219 
vnode
 *
__m¡_vnode_fú°_a˘ive
(vnodê**
mvp
, 
mou¡
 *
mp
);

220 
__m¡_vnode_m¨kî‰ì_a˘ive
(
vnode
 **
mvp
, 
mou¡
 *);

222 
	#MNT_VNODE_FOREACH_ACTIVE
(
vp
, 
mp
, 
mvp
) \

223 
vp
 = 
	`__m¡_vnode_fú°_a˘ive
(&(
mvp
), (
mp
)); \

224 (
vp
Ë!
NULL
; v∞
	`__m¡_vnode_√xt_a˘ive
(&(
mvp
), (
mp
)))

	)

226 
	#MNT_VNODE_FOREACH_ACTIVE_ABORT
(
mp
, 
mvp
) \

227 
	`__m¡_vnode_m¨kî‰ì_a˘ive
(&(
mvp
), (
mp
))

	)

229 
	#MNT_ILOCK
(
mp
Ë
	`mtx_lock
(&(mp)->
m¡_mtx
)

	)

230 
	#MNT_ITRYLOCK
(
mp
Ë
	`mtx_åylock
(&(mp)->
m¡_mtx
)

	)

231 
	#MNT_IUNLOCK
(
mp
Ë
	`mtx_u∆ock
(&(mp)->
m¡_mtx
)

	)

232 
	#MNT_MTX
(
mp
Ë(&(mp)->
m¡_mtx
)

	)

233 
	#MNT_REF
(
mp
Ë(mp)->
m¡_ªf
++

	)

234 
	#MNT_REL
(
mp
) do { \

235 
	`KASSERT
((
mp
)->
m¡_ªf
 > 0, ("negative mnt_ref")); \

236 (
mp
)->
m¡_ªf
--; \

237 i‡((
mp
)->
m¡_ªf
 == 0) \

238 
	`wakeup
((
mp
)); \

239 } 0)

	)

246 
	#MNT_RDONLY
 0x0000000000000001ULL

	)

247 
	#MNT_SYNCHRONOUS
 0x0000000000000002ULL

	)

248 
	#MNT_NOEXEC
 0x0000000000000004ULL

	)

249 
	#MNT_NOSUID
 0x0000000000000008ULL

	)

250 
	#MNT_NFS4ACLS
 0x0000000000000010ULL

	)

251 
	#MNT_UNION
 0x0000000000000020ULL

	)

252 
	#MNT_ASYNC
 0x0000000000000040ULL

	)

253 
	#MNT_SUIDDIR
 0x0000000000100000ULL

	)

254 
	#MNT_SOFTDEP
 0x0000000000200000ULL

	)

255 
	#MNT_NOSYMFOLLOW
 0x0000000000400000ULL

	)

256 
	#MNT_GJOURNAL
 0x0000000002000000ULL

	)

257 
	#MNT_MULTILABEL
 0x0000000004000000ULL

	)

258 
	#MNT_ACLS
 0x0000000008000000ULL

	)

259 
	#MNT_NOATIME
 0x0000000010000000ULL

	)

260 
	#MNT_NOCLUSTERR
 0x0000000040000000ULL

	)

261 
	#MNT_NOCLUSTERW
 0x0000000080000000ULL

	)

262 
	#MNT_SUJ
 0x0000000100000000ULL

	)

263 
	#MNT_AUTOMOUNTED
 0x0000000200000000ULL

	)

268 
	#MNT_EXRDONLY
 0x0000000000000080ULL

	)

269 
	#MNT_EXPORTED
 0x0000000000000100ULL

	)

270 
	#MNT_DEFEXPORTED
 0x0000000000000200ULL

	)

271 
	#MNT_EXPORTANON
 0x0000000000000400ULL

	)

272 
	#MNT_EXKERB
 0x0000000000000800ULL

	)

273 
	#MNT_EXPUBLIC
 0x0000000020000000ULL

	)

280 
	#MNT_LOCAL
 0x0000000000001000ULL

	)

281 
	#MNT_QUOTA
 0x0000000000002000ULL

	)

282 
	#MNT_ROOTFS
 0x0000000000004000ULL

	)

283 
	#MNT_USER
 0x0000000000008000ULL

	)

284 
	#MNT_IGNORE
 0x0000000000800000ULL

	)

291 
	#MNT_VISFLAGMASK
 (
MNT_RDONLY
 | 
MNT_SYNCHRONOUS
 | 
MNT_NOEXEC
 | \

292 
MNT_NOSUID
 | 
MNT_UNION
 | 
MNT_SUJ
 | \

293 
MNT_ASYNC
 | 
MNT_EXRDONLY
 | 
MNT_EXPORTED
 | \

294 
MNT_DEFEXPORTED
 | 
MNT_EXPORTANON
| 
MNT_EXKERB
 | \

295 
MNT_LOCAL
 | 
MNT_USER
 | 
MNT_QUOTA
 | \

296 
MNT_ROOTFS
 | 
MNT_NOATIME
 | 
MNT_NOCLUSTERR
| \

297 
MNT_NOCLUSTERW
 | 
MNT_SUIDDIR
 | 
MNT_SOFTDEP
 | \

298 
MNT_IGNORE
 | 
MNT_EXPUBLIC
 | 
MNT_NOSYMFOLLOW
 | \

299 
MNT_GJOURNAL
 | 
MNT_MULTILABEL
 | 
MNT_ACLS
 | \

300 
MNT_NFS4ACLS
 | 
MNT_AUTOMOUNTED
)

	)

303 
	#MNT_UPDATEMASK
 (
MNT_NOSUID
 | 
MNT_NOEXEC
 | \

304 
MNT_SYNCHRONOUS
 | 
MNT_UNION
 | 
MNT_ASYNC
 | \

305 
MNT_NOATIME
 | \

306 
MNT_NOSYMFOLLOW
 | 
MNT_IGNORE
 | \

307 
MNT_NOCLUSTERR
 | 
MNT_NOCLUSTERW
 | 
MNT_SUIDDIR
 | \

308 
MNT_ACLS
 | 
MNT_USER
 | 
MNT_NFS4ACLS
 | \

309 
MNT_AUTOMOUNTED
)

	)

318 
	#MNT_UPDATE
 0x0000000000010000ULL

	)

319 
	#MNT_DELEXPORT
 0x0000000000020000ULL

	)

320 
	#MNT_RELOAD
 0x0000000000040000ULL

	)

321 
	#MNT_FORCE
 0x0000000000080000ULL

	)

322 
	#MNT_SNAPSHOT
 0x0000000001000000ULL

	)

323 
	#MNT_BYFSID
 0x0000000008000000ULL

	)

324 
	#MNT_CMDFLAGS
 (
MNT_UPDATE
 | 
MNT_DELEXPORT
 | 
MNT_RELOAD
 | \

325 
MNT_FORCE
 | 
MNT_SNAPSHOT
 | 
MNT_BYFSID
)

	)

342 
	#MNTK_UNMOUNTF
 0x00000001

	)

343 
	#MNTK_ASYNC
 0x00000002

	)

344 
	#MNTK_SOFTDEP
 0x00000004

	)

345 
	#MNTK_NOINSMNTQ
 0x00000008

	)

346 
	#MNTK_DRAINING
 0x00000010

	)

347 
	#MNTK_REFEXPIRE
 0x00000020

	)

348 
	#MNTK_EXTENDED_SHARED
 0x00000040

	)

349 
	#MNTK_SHARED_WRITES
 0x00000080

	)

350 
	#MNTK_NO_IOPF
 0x00000100

	)

353 
	#MNTK_VGONE_UPPER
 0x00000200

	)

354 
	#MNTK_VGONE_WAITER
 0x00000400

	)

355 
	#MNTK_LOOKUP_EXCL_DOTDOT
 0x00000800

	)

356 
	#MNTK_MARKER
 0x00001000

	)

357 
	#MNTK_UNMAPPED_BUFS
 0x00002000

	)

358 
	#MNTK_USES_BCACHE
 0x00004000

	)

359 
	#MNTK_NOASYNC
 0x00800000

	)

360 
	#MNTK_UNMOUNT
 0x01000000

	)

361 
	#MNTK_MWAIT
 0x02000000

	)

362 
	#MNTK_SUSPEND
 0x08000000

	)

363 
	#MNTK_SUSPEND2
 0x04000000

	)

364 
	#MNTK_SUSPENDED
 0x10000000

	)

365 
	#MNTK_UNUSED25
 0x20000000

	)

366 
	#MNTK_LOOKUP_SHARED
 0x40000000

	)

367 
	#MNTK_NOKNOTE
 0x80000000

	)

369 #ifde‡
_KERNEL


370 
ölöe
 

371 
	$MNT_SHARED_WRITES
(
mou¡
 *
mp
)

374  (
mp
 !
NULL
 && (mp->
m¡_kîn_Êag
 & 
MNTK_SHARED_WRITES
) != 0);

375 
	}
}

377 
ölöe
 

378 
	$MNT_EXTENDED_SHARED
(
mou¡
 *
mp
)

381  (
mp
 !
NULL
 && (mp->
m¡_kîn_Êag
 & 
MNTK_EXTENDED_SHARED
) != 0);

382 
	}
}

392 
	#VFS_VFSCONF
 0

	)

393 
	#VFS_GENERIC
 0

	)

399 
	#VFS_MAXTYPENUM
 1

	)

400 
	#VFS_CONF
 2

	)

408 
	#MNT_WAIT
 1

	)

409 
	#MNT_NOWAIT
 2

	)

410 
	#MNT_LAZY
 3

	)

411 
	#MNT_SUSPEND
 4

	)

416 
	sfh™dÀ
 {

417 
fsid_t
 
	mfh_fsid
;

418 
fid
 
	mfh_fid
;

420 
fh™dÀ
 
	tfh™dÀ_t
;

425 
	s€xp‹t_¨gs
 {

426 
	mex_Êags
;

427 
uid_t
 
	mex_roŸ
;

428 
xu¸ed
 
	mex_™⁄
;

429 
sockaddr
 *
	mex_addr
;

430 
u_ch¨
 
	mex_addæí
;

431 
sockaddr
 *
	mex_mask
;

432 
u_ch¨
 
	mex_maskÀn
;

433 *
	mex_ödexfûe
;

439 
	#MAXSECFLAVORS
 5

	)

440 
	sexp‹t_¨gs
 {

441 
	mex_Êags
;

442 
uid_t
 
	mex_roŸ
;

443 
xu¸ed
 
	mex_™⁄
;

444 
sockaddr
 *
	mex_addr
;

445 
u_ch¨
 
	mex_addæí
;

446 
sockaddr
 *
	mex_mask
;

447 
u_ch¨
 
	mex_maskÀn
;

448 *
	mex_ödexfûe
;

449 
	mex_num£cÊav‹s
;

450 
	mex_£cÊav‹s
[
MAXSECFLAVORS
];

457 
	snfs_public
 {

458 
	m≈_vÆid
;

459 
fh™dÀ_t
 
	m≈_h™dÀ
;

460 
mou¡
 *
	m≈_mou¡
;

461 *
	m≈_ödex
;

471 
	svfsc⁄f
 {

472 
u_öt
 
	mvfc_vîsi⁄
;

473 
	mvfc_«me
[
MFSNAMELEN
];

474 
vfs›s
 *
	mvfc_vfs›s
;

475 
	mvfc_ty≥num
;

476 
	mvfc_ªfcou¡
;

477 
	mvfc_Êags
;

478 
vfs›tde˛
 *
	mvfc_›ts
;

479 
TAILQ_ENTRY
(
vfsc⁄f
Ë
	mvfc_li°
;

483 
	sxvfsc⁄f
 {

484 
vfs›s
 *
	mvfc_vfs›s
;

485 
	mvfc_«me
[
MFSNAMELEN
];

486 
	mvfc_ty≥num
;

487 
	mvfc_ªfcou¡
;

488 
	mvfc_Êags
;

489 
vfsc⁄f
 *
	mvfc_√xt
;

492 #i‚de‡
BURN_BRIDGES


493 
	sovfsc⁄f
 {

494 *
	mvfc_vfs›s
;

495 
	mvfc_«me
[32];

496 
	mvfc_ödex
;

497 
	mvfc_ªfcou¡
;

498 
	mvfc_Êags
;

506 
	#VFCF_STATIC
 0x00010000

	)

507 
	#VFCF_NETWORK
 0x00020000

	)

508 
	#VFCF_READONLY
 0x00040000

	)

509 
	#VFCF_SYNTHETIC
 0x00080000

	)

510 
	#VFCF_LOOPBACK
 0x00100000

	)

511 
	#VFCF_UNICODE
 0x00200000

	)

512 
	#VFCF_JAIL
 0x00400000

	)

513 
	#VFCF_DELEGADMIN
 0x00800000

	)

514 
	#VFCF_SBDRY
 0x01000000

	)

516 
uöt32_t
 
	tfs˘l›_t
;

518 
	svfsid˘l
 {

519 
	mvc_vîs
;

520 
fsid_t
 
	mvc_fsid
;

521 
	mvc_f°y≥«me
[
MFSNAMELEN
];

523 
fs˘l›_t
 
	mvc_›
;

524 *
	mvc_±r
;

525 
size_t
 
	mvc_Àn
;

526 
u_öt32_t
 
	mvc_•¨e
[12];

530 
	#VFS_CTL_VERS1
 0x01

	)

539 
	#VFS_CTL_QUERY
 0x00010001

	)

540 
	#VFS_CTL_TIMEO
 0x00010002

	)

541 
	#VFS_CTL_NOLOCKS
 0x00010003

	)

543 
	svfsquîy
 {

544 
u_öt32_t
 
	mvq_Êags
;

545 
u_öt32_t
 
	mvq_•¨e
[31];

549 
	#VQ_NOTRESP
 0x0001

	)

550 
	#VQ_NEEDAUTH
 0x0002

	)

551 
	#VQ_LOWDISK
 0x0004

	)

552 
	#VQ_MOUNT
 0x0008

	)

553 
	#VQ_UNMOUNT
 0x0010

	)

554 
	#VQ_DEAD
 0x0020

	)

555 
	#VQ_ASSIST
 0x0040

	)

557 
	#VQ_NOTRESPLOCK
 0x0080

	)

558 
	#VQ_FLAG0100
 0x0100

	)

559 
	#VQ_FLAG0200
 0x0200

	)

560 
	#VQ_FLAG0400
 0x0400

	)

561 
	#VQ_FLAG0800
 0x0800

	)

562 
	#VQ_FLAG1000
 0x1000

	)

563 
	#VQ_FLAG2000
 0x2000

	)

564 
	#VQ_FLAG4000
 0x4000

	)

565 
	#VQ_FLAG8000
 0x8000

	)

567 #ifde‡
_KERNEL


569 
	#VCTLTOREQ
(
vc
, 
ªq
) \

571 (
ªq
)->
√w±r
 = (
vc
)->
vc_±r
; \

572 (
ªq
)->
√wÀn
 = (
vc
)->
vc_Àn
; \

573 (
ªq
)->
√widx
 = 0; \

574 } 0)

	)

577 
	giovec
;

578 
	guio
;

580 #ifde‡
_KERNEL


585 
	#MBF_NOWAIT
 0x01

	)

586 
	#MBF_MNTLSTLOCK
 0x02

	)

587 
	#MBF_MASK
 (
MBF_NOWAIT
 | 
MBF_MNTLSTLOCK
)

	)

589 #ifde‡
MALLOC_DECLARE


590 
MALLOC_DECLARE
(
M_MOUNT
);

592 
maxvfsc⁄f
;

593 
nfs_mou¡_ty≥
;

595 
TAILQ_HEAD
(
vfsc⁄fhód
, 
vfsc⁄f
);

596 
vfsc⁄fhód
 
vfsc⁄f
;

601 
	gmou¡_¨gs
;

602 
	g«meid©a
;

603 
	gsys˘l_ªq
;

604 
	gm¡¨g
;

606 
	tvfs_cmou¡_t
(
	tm¡¨g
 *
	tma
, *
	td©a
, 
	tuöt64_t
 
	tÊags
);

607 
	tvfs_unmou¡_t
(
	tmou¡
 *
	tmp
, 
	tm¡Êags
);

608 
	tvfs_roŸ_t
(
	tmou¡
 *
	tmp
, 
	tÊags
, 
	tvnode
 **
	tvµ
);

609 
	tvfs_quŸa˘l_t
(
	tmou¡
 *
	tmp
, 
	tcmds
, 
	tuid_t
 
	tuid
, *
	t¨g
);

610 
	tvfs_°©fs_t
(
	tmou¡
 *
	tmp
, 
	t°©fs
 *
	tsbp
);

611 
	tvfs_sync_t
(
	tmou¡
 *
	tmp
, 
	twaôf‹
);

612 
	tvfs_vgë_t
(
	tmou¡
 *
	tmp
, 
	töo_t
 
	töo
, 
	tÊags
,

613 
	tvnode
 **
	tvµ
);

614 
	tvfs_fhtovp_t
(
	tmou¡
 *
	tmp
, 
	tfid
 *
	tfhp
,

615 
	tÊags
, 
	tvnode
 **
	tvµ
);

616 
	tvfs_checkexp_t
(
	tmou¡
 *
	tmp
, 
	tsockaddr
 *
	t«m
,

617 *
	textÊag•
, 
	tu¸ed
 **
	t¸ed™⁄p
,

618 *
	tnum£cÊav‹s
, **
	t£cÊav‹s
);

619 
	tvfs_öô_t
(
	tvfsc⁄f
 *);

620 
	tvfs_unöô_t
(
	tvfsc⁄f
 *);

621 
	tvfs_exèâr˘l_t
(
	tmou¡
 *
	tmp
, 
	tcmd
,

622 
	tvnode
 *
	tfûíame_vp
, 
	t©å«me•a˚
,

623 c⁄° *
	t©å«me
);

624 
	tvfs_mou¡_t
(
	tmou¡
 *
	tmp
);

625 
	tvfs_sys˘l_t
(
	tmou¡
 *
	tmp
, 
	tfs˘l›_t
 
	t›
,

626 
	tsys˘l_ªq
 *
	tªq
);

627 
	tvfs_su•_˛ón_t
(
	tmou¡
 *
	tmp
);

628 
	tvfs_nŸify_lowîvp_t
(
	tmou¡
 *
	tmp
, 
	tvnode
 *
	tlowîvp
);

629 
	tvfs_purge_t
(
	tmou¡
 *
	tmp
);

631 
	svfs›s
 {

632 
vfs_mou¡_t
 *
	mvfs_mou¡
;

633 
vfs_cmou¡_t
 *
	mvfs_cmou¡
;

634 
vfs_unmou¡_t
 *
	mvfs_unmou¡
;

635 
vfs_roŸ_t
 *
	mvfs_roŸ
;

636 
vfs_quŸa˘l_t
 *
	mvfs_quŸa˘l
;

637 
vfs_°©fs_t
 *
	mvfs_°©fs
;

638 
vfs_sync_t
 *
	mvfs_sync
;

639 
vfs_vgë_t
 *
	mvfs_vgë
;

640 
vfs_fhtovp_t
 *
	mvfs_fhtovp
;

641 
vfs_checkexp_t
 *
	mvfs_checkexp
;

642 
vfs_öô_t
 *
	mvfs_öô
;

643 
vfs_unöô_t
 *
	mvfs_unöô
;

644 
vfs_exèâr˘l_t
 *
	mvfs_exèâr˘l
;

645 
vfs_sys˘l_t
 *
	mvfs_sys˘l
;

646 
vfs_su•_˛ón_t
 *
	mvfs_su•_˛ón
;

647 
vfs_nŸify_lowîvp_t
 *
	mvfs_ª˛aim_lowîvp
;

648 
vfs_nŸify_lowîvp_t
 *
	mvfs_u∆ök_lowîvp
;

649 
vfs_purge_t
 *
	mvfs_purge
;

650 
vfs_mou¡_t
 *
	mvfs_•¨e
[6];

653 
vfs_°©fs_t
 
	g__vfs_°©fs
;

655 
	#VFS_PROLOGUE
(
MP
) do { \

656 
mou¡
 *
mp__
; \

657 
_íabÀ_°›s
; \

659 
mp__
 = (
MP
); \

660 
_íabÀ_°›s
 = (
mp__
 !
NULL
 && \

661 (
mp__
->
m¡_vfc
->
vfc_Êags
 & 
VFCF_SBDRY
Ë&& 
	`sigde„r°›
())

	)

663 
	#VFS_EPILOGUE
(
MP
) \

664 i‡(
_íabÀ_°›s
) \

665 
	`sigÆlow°›
(); \

666 } 0)

	)

668 
	#VFS_MOUNT
(
MP
) ({ \

669 
_rc
; \

671 
	`VFS_PROLOGUE
(
MP
); \

672 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_mou¡
)(MP); \

673 
	`VFS_EPILOGUE
(
MP
); \

674 
_rc
; })

	)

676 
	#VFS_UNMOUNT
(
MP
, 
FORCE
) ({ \

677 
_rc
; \

679 
	`VFS_PROLOGUE
(
MP
); \

680 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_unmou¡
)(MP, 
FORCE
); \

681 
	`VFS_EPILOGUE
(
MP
); \

682 
_rc
; })

	)

684 
	#VFS_ROOT
(
MP
, 
FLAGS
, 
VPP
) ({ \

685 
_rc
; \

687 
	`VFS_PROLOGUE
(
MP
); \

688 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_roŸ
)(MP, 
FLAGS
, 
VPP
); \

689 
	`VFS_EPILOGUE
(
MP
); \

690 
_rc
; })

	)

692 
	#VFS_QUOTACTL
(
MP
, 
C
, 
U
, 
A
) ({ \

693 
_rc
; \

695 
	`VFS_PROLOGUE
(
MP
); \

696 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_quŸa˘l
)(MP, 
C
, 
U
, 
A
); \

697 
	`VFS_EPILOGUE
(
MP
); \

698 
_rc
; })

	)

700 
	#VFS_STATFS
(
MP
, 
SBP
) ({ \

701 
_rc
; \

703 
	`VFS_PROLOGUE
(
MP
); \

704 
_rc
 = 
	`__vfs_°©fs
((
MP
), (
SBP
)); \

705 
	`VFS_EPILOGUE
(
MP
); \

706 
_rc
; })

	)

708 
	#VFS_SYNC
(
MP
, 
WAIT
) ({ \

709 
_rc
; \

711 
	`VFS_PROLOGUE
(
MP
); \

712 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_sync
)(MP, 
WAIT
); \

713 
	`VFS_EPILOGUE
(
MP
); \

714 
_rc
; })

	)

716 
	#VFS_VGET
(
MP
, 
INO
, 
FLAGS
, 
VPP
) ({ \

717 
_rc
; \

719 
	`VFS_PROLOGUE
(
MP
); \

720 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_vgë
)(MP, 
INO
, 
FLAGS
, 
VPP
); \

721 
	`VFS_EPILOGUE
(
MP
); \

722 
_rc
; })

	)

724 
	#VFS_FHTOVP
(
MP
, 
FIDP
, 
FLAGS
, 
VPP
) ({ \

725 
_rc
; \

727 
	`VFS_PROLOGUE
(
MP
); \

728 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_fhtovp
)(MP, 
FIDP
, 
FLAGS
, 
VPP
); \

729 
	`VFS_EPILOGUE
(
MP
); \

730 
_rc
; })

	)

732 
	#VFS_CHECKEXP
(
MP
, 
NAM
, 
EXFLG
, 
CRED
, 
NUMSEC
, 
SEC
) ({ \

733 
_rc
; \

735 
	`VFS_PROLOGUE
(
MP
); \

736 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_checkexp
)(MP, 
NAM
, 
EXFLG
, 
CRED
, 
NUMSEC
,\

737 
SEC
); \

738 
	`VFS_EPILOGUE
(
MP
); \

739 
_rc
; })

	)

741 
	#VFS_EXTATTRCTL
(
MP
, 
C
, 
FN
, 
NS
, 
N
) ({ \

742 
_rc
; \

744 
	`VFS_PROLOGUE
(
MP
); \

745 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_exèâr˘l
)(MP, 
C
, 
FN
, 
NS
, 
N
); \

746 
	`VFS_EPILOGUE
(
MP
); \

747 
_rc
; })

	)

749 
	#VFS_SYSCTL
(
MP
, 
OP
, 
REQ
) ({ \

750 
_rc
; \

752 
	`VFS_PROLOGUE
(
MP
); \

753 
_rc
 = (*(
MP
)->
m¡_›
->
vfs_sys˘l
)(MP, 
OP
, 
REQ
); \

754 
	`VFS_EPILOGUE
(
MP
); \

755 
_rc
; })

	)

757 
	#VFS_SUSP_CLEAN
(
MP
) do { \

758 i‡(*(
MP
)->
m¡_›
->
vfs_su•_˛ón
 !
NULL
) { \

759 
	`VFS_PROLOGUE
(
MP
); \

760 (*(
MP
)->
m¡_›
->
vfs_su•_˛ón
)(MP); \

761 
	`VFS_EPILOGUE
(
MP
); \

763 } 0)

	)

765 
	#VFS_RECLAIM_LOWERVP
(
MP
, 
VP
) do { \

766 i‡(*(
MP
)->
m¡_›
->
vfs_ª˛aim_lowîvp
 !
NULL
) { \

767 
	`VFS_PROLOGUE
(
MP
); \

768 (*(
MP
)->
m¡_›
->
vfs_ª˛aim_lowîvp
)((MP), (
VP
)); \

769 
	`VFS_EPILOGUE
(
MP
); \

771 } 0)

	)

773 
	#VFS_UNLINK_LOWERVP
(
MP
, 
VP
) do { \

774 i‡(*(
MP
)->
m¡_›
->
vfs_u∆ök_lowîvp
 !
NULL
) { \

775 
	`VFS_PROLOGUE
(
MP
); \

776 (*(
MP
)->
m¡_›
->
vfs_u∆ök_lowîvp
)((MP), (
VP
)); \

777 
	`VFS_EPILOGUE
(
MP
); \

779 } 0)

	)

781 
	#VFS_PURGE
(
MP
) do { \

782 i‡(*(
MP
)->
m¡_›
->
vfs_purge
 !
NULL
) { \

783 
	`VFS_PROLOGUE
(
MP
); \

784 (*(
MP
)->
m¡_›
->
vfs_purge
)(MP); \

785 
	`VFS_EPILOGUE
(
MP
); \

787 } 0)

	)

789 
	#VFS_KNOTE_LOCKED
(
vp
, 
höt
) do \

791 i‡(((
vp
)->
v_vÊag
 & 
VV_NOKNOTE
) == 0) \

792 
	`VN_KNOTE
((
vp
), (
höt
), 
KNF_LISTLOCKED
); \

793 } 0)

	)

795 
	#VFS_KNOTE_UNLOCKED
(
vp
, 
höt
) do \

797 i‡(((
vp
)->
v_vÊag
 & 
VV_NOKNOTE
) == 0) \

798 
	`VN_KNOTE
((
vp
), (
höt
), 0); \

799 } 0)

	)

801 
	#VFS_NOTIFY_UPPER_RECLAIM
 1

	)

802 
	#VFS_NOTIFY_UPPER_UNLINK
 2

	)

804 
	~<sys/moduÀ.h
>

809 
	#VFS_VERSION_00
 0x19660120

	)

810 
	#VFS_VERSION_01
 0x20121030

	)

811 
	#VFS_VERSION
 
VFS_VERSION_01


	)

813 
	#VFS_SET
(
vfs›s
, 
f¢ame
, 
Êags
) \

814 
vfsc⁄f
 
f¢ame
 ## 
_vfsc⁄f
 = { \

815 .
vfc_vîsi⁄
 = 
VFS_VERSION
, \

816 .
vfc_«me
 = #fsname, \

817 .
vfc_vfs›s
 = &
vfs›s
, \

818 .
vfc_ty≥num
 = -1, \

819 .
vfc_Êags
 = 
Êags
, \

821 
moduÀd©a_t
 
f¢ame
 ## 
_mod
 = { \

823 
vfs_modevít
, \

824 & 
f¢ame
 ## 
_vfsc⁄f
 \

826 
	`DECLARE_MODULE
(
f¢ame
, f¢amê## 
_mod
, 
SI_SUB_VFS
, 
SI_ORDER_MIDDLE
)

	)

828 *
mou¡roŸf¢ame
;

834 
dounmou¡
(
mou¡
 *, , 
thªad
 *);

836 
kî√l_mou¡
(
m¡¨g
 *
ma
, 
uöt64_t
 
Êags
);

837 
kî√l_vmou¡
(
Êags
, ...);

838 
m¡¨g
 *
mou¡_¨g
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

839 
m¡¨g
 *
mou¡_¨gb
(m¡¨g *
ma
, 
Êag
, c⁄° *
«me
);

840 
m¡¨g
 *
mou¡_¨gf
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
fmt
, ...);

841 
m¡¨g
 *
mou¡_¨gsu
(m¡¨g *
ma
, c⁄° *
«me
, c⁄° *
vÆ
, 
Àn
);

842 
°©fs_sˇÀ_blocks
(
°©fs
 *
sf
, 
max_size
);

843 
vfsc⁄f
 *
vfs_by«me
(const *);

844 
vfsc⁄f
 *
vfs_by«me_kld
(c⁄° *, 
thªad
 *
td
, *);

845 
vfs_mou¡_de°roy
(
mou¡
 *);

846 
vfs_evít_sig«l
(
fsid_t
 *, 
u_öt32_t
, 
öçå_t
);

847 
vfs_‰ì›ts
(
vfs›éi°
 *
›ts
);

848 
vfs_dñëe›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
);

849 
vfs_buûd›ts
(
uio
 *
auio
, 
vfs›éi°
 **
›ti⁄s
);

850 
vfs_Êag›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, 
uöt64_t
 *
w
,

851 
uöt64_t
 
vÆ
);

852 
vfs_gë›t
(
vfs›éi°
 *, const *, **, *);

853 
vfs_gë›t_pos
(
vfs›éi°
 *
›ts
, c⁄° *
«me
);

854 
vfs_gë›t_size
(
vfs›éi°
 *
›ts
, c⁄° *
«me
,

855 
off_t
 *
vÆue
);

856 *
vfs_gë›ts
(
vfs›éi°
 *, c⁄° *, *
îr‹
);

857 
vfs_c›y›t
(
vfs›éi°
 *, const *, *, );

858 
vfs_fûãr›t
(
vfs›éi°
 *, c⁄° **
ÀgÆ
);

859 
vfs_›ãº‹
(
vfs›éi°
 *
›ts
, c⁄° *
fmt
, ...);

860 
vfs_sˇn›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, c⁄° *
fmt
, ...);

861 
vfs_£t›t
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, *
vÆue
,

862 
Àn
);

863 
vfs_£t›t_∑π
(
vfs›éi°
 *
›ts
, c⁄° *
«me
, *
vÆue
,

864 
Àn
);

865 
vfs_£t›ts
(
vfs›éi°
 *
›ts
, c⁄° *
«me
,

866 c⁄° *
vÆue
);

867 
	gvfs_£çublicfs


868 (
	gmou¡
 *, 
	g√ãxp‹t
 *, 
	gexp‹t_¨gs
 *);

869 
vfs_msync
(
mou¡
 *, );

870 
vfs_busy
(
mou¡
 *, );

871 
	gvfs_exp‹t


872 (
	gmou¡
 *, 
	gexp‹t_¨gs
 *);

873 
vfs_Æloˇã_syncvnode
(
mou¡
 *);

874 
vfs_dóŒoˇã_syncvnode
(
mou¡
 *);

875 
vfs_d⁄mou¡
(
thªad
 *
td
, 
uöt64_t
 
fsÊags
,

876 
uio
 *
fs›ti⁄s
);

877 
vfs_gë√wfsid
(
mou¡
 *);

878 
cdev
 *
vfs_gëroŸfsid
(
mou¡
 *);

879 
mou¡
 *
vfs_gëvfs
(
fsid_t
 *);

880 
mou¡
 *
vfs_busyfs
(
fsid_t
 *);

881 
vfs_modevít
(
moduÀ_t
, , *);

882 
vfs_mou¡_îr‹
(
mou¡
 *, const *, ...);

883 
vfs_mou¡roŸ
();

884 
vfs_mou¡ed‰om
(
mou¡
 *, c⁄° *
‰om
);

885 
vfs_nŸify_uµî
(
vnode
 *, );

886 
vfs_€xp‹t_c⁄v
(c⁄° 
€xp‹t_¨gs
 *
€xp
,

887 
exp‹t_¨gs
 *
exp
);

888 
vfs_ªf
(
mou¡
 *);

889 
vfs_ªl
(
mou¡
 *);

890 
mou¡
 *
vfs_mou¡_Æloc
(
vnode
 *, 
vfsc⁄f
 *, const *,

891 
u¸ed
 *);

892 
vfs_su£r
(
mou¡
 *, 
thªad
 *);

893 
vfs_unbusy
(
mou¡
 *);

894 
vfs_unmou¡Æl
();

895 
	$TAILQ_HEAD
(
m¡li°
, 
mou¡
Ë
mou¡li°
;

896 
mtx
 
mou¡li°_mtx
;

897 
nfs_public
 
nfs_pub
;

898 
sx
 
vfsc⁄f_sx
;

899 
	#vfsc⁄f_lock
(Ë
	`sx_xlock
(&
vfsc⁄f_sx
)

	)

900 
	#vfsc⁄f_u∆ock
(Ë
	`sx_xu∆ock
(&
vfsc⁄f_sx
)

	)

901 
	#vfsc⁄f_¶ock
(Ë
	`sx_¶ock
(&
vfsc⁄f_sx
)

	)

902 
	#vfsc⁄f_su∆ock
(Ë
	`sx_su∆ock
(&
vfsc⁄f_sx
)

	)

910 
vfs_roŸ_t
 
vfs_°droŸ
;

911 
vfs_quŸa˘l_t
 
vfs_°dquŸa˘l
;

912 
vfs_°©fs_t
 
vfs_°d°©fs
;

913 
vfs_sync_t
 
vfs_°dsync
;

914 
vfs_sync_t
 
vfs_°dnosync
;

915 
vfs_vgë_t
 
vfs_°dvgë
;

916 
vfs_fhtovp_t
 
vfs_°dfhtovp
;

917 
vfs_checkexp_t
 
vfs_°dcheckexp
;

918 
vfs_öô_t
 
vfs_°döô
;

919 
vfs_unöô_t
 
vfs_°dunöô
;

920 
vfs_exèâr˘l_t
 
vfs_°dexèâr˘l
;

921 
vfs_sys˘l_t
 
vfs_°dsys˘l
;

923 
	`syn˚r_su•íd
();

924 
	`syn˚r_ªsume
();

928 
	~<sys/cdefs.h
>

930 
°©
;

932 
__BEGIN_DECLS


933 
	`fh›í
(c⁄° 
fh™dÀ
 *, );

934 
	`fh°©
(c⁄° 
fh™dÀ
 *, 
°©
 *);

935 
	`fh°©fs
(c⁄° 
fh™dÀ
 *, 
°©fs
 *);

936 
	`f°©fs
(, 
°©fs
 *);

937 
	`gëfh
(c⁄° *, 
fh™dÀ_t
 *);

938 
	`gëfs°©
(
°©fs
 *, , );

939 
	`gëm¡öfo
(
°©fs
 **, );

940 
	`lgëfh
(c⁄° *, 
fh™dÀ_t
 *);

941 
	`mou¡
(const *, const *, , *);

942 
	`nmou¡
(
iovec
 *, , );

943 
	`°©fs
(c⁄° *, 
°©fs
 *);

944 
	`unmou¡
(const *, );

947 
	`gëvfsby«me
(c⁄° *, 
xvfsc⁄f
 *);

948 
__END_DECLS


	@/usr/include/sys/mutex.h

32 #i‚de‡
_SYS_MUTEX_H_


33 
	#_SYS_MUTEX_H_


	)

35 
	~<sys/queue.h
>

36 
	~<sys/_lock.h
>

37 
	~<sys/_muãx.h
>

39 #ifde‡
_KERNEL


40 
	~<sys/p˝u.h
>

41 
	~<sys/lock_¥ofûe.h
>

42 
	~<sys/lock°©.h
>

43 
	~<machöe/©omic.h
>

44 
	~<machöe/˝ufunc.h
>

50 
	#MTX_DEF
 0x00000000

	)

51 
	#MTX_SPIN
 0x00000001

	)

52 
	#MTX_RECURSE
 0x00000004

	)

53 
	#MTX_NOWITNESS
 0x00000008

	)

54 
	#MTX_NOPROFILE
 0x00000020

	)

60 
	#MTX_QUIET
 
LOP_QUIET


	)

61 
	#MTX_DUPOK
 
LOP_DUPOK


	)

67 
	#MTX_RECURSED
 0x00000001

	)

68 
	#MTX_CONTESTED
 0x00000002

	)

69 
	#MTX_UNOWNED
 0x00000004

	)

70 
	#MTX_FLAGMASK
 (
MTX_RECURSED
 | 
MTX_CONTESTED
 | 
MTX_UNOWNED
)

	)

75 
	#MTX_DESTROYED
 (
MTX_CONTESTED
 | 
MTX_UNOWNED
)

	)

93 
_mtx_öô
(vﬁ©ûê
uöçå_t
 *
c
, c⁄° *
«me
, c⁄° *
ty≥
,

94 
›ts
);

95 
_mtx_de°roy
(vﬁ©ûê
uöçå_t
 *
c
);

96 
mtx_sysöô
(*
¨g
);

97 
_mtx_åylock_Êags_
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

98 
löe
);

99 
muãx_öô
();

100 
__mtx_lock_¶ìp
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
tid
, 
›ts
,

101 c⁄° *
fûe
, 
löe
);

102 
__mtx_u∆ock_¶ìp
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

103 
löe
);

104 #ifde‡
SMP


105 
_mtx_lock_•ö_cookõ
(vﬁ©ûê
uöçå_t
 *
c
, uöçå_à
tid
, 
›ts
,

106 c⁄° *
fûe
, 
löe
);

108 
__mtx_lock_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

109 
löe
);

110 
__mtx_u∆ock_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

111 
löe
);

112 
__mtx_lock_•ö_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
, c⁄° *
fûe
,

113 
löe
);

114 
__mtx_u∆ock_•ö_Êags
(vﬁ©ûê
uöçå_t
 *
c
, 
›ts
,

115 c⁄° *
fûe
, 
löe
);

116 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

117 
__mtx_as£π
(c⁄° vﬁ©ûê
uöçå_t
 *
c
, 
wh©
, c⁄° *
fûe
,

118 
löe
);

120 
thªad_lock_Êags_
(
thªad
 *, , const *, );

122 
	#thªad_lock
(
tdp
) \

123 
	`thªad_lock_Êags_
((
tdp
), 0, 
__FILE__
, 
__LINE__
)

	)

124 
	#thªad_lock_Êags
(
tdp
, 
›t
) \

125 
	`thªad_lock_Êags_
((
tdp
), (
›t
), 
__FILE__
, 
__LINE__
)

	)

126 
	#thªad_u∆ock
(
tdp
) \

127 
	`mtx_u∆ock_•ö
((
tdp
)->
td_lock
)

	)

134 
	#mtx_öô
(
m
, 
n
, 
t
, 
o
) \

135 
	`_mtx_öô
(&(
m
)->
mtx_lock
, 
n
, 
t
, 
o
)

	)

136 
	#mtx_de°roy
(
m
) \

137 
	`_mtx_de°roy
(&(
m
)->
mtx_lock
)

	)

138 
	#mtx_åylock_Êags_
(
m
, 
o
, 
f
, 
l
) \

139 
	`_mtx_åylock_Êags_
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

140 
	#_mtx_lock_¶ìp
(
m
, 
t
, 
o
, 
f
, 
l
) \

141 
	`__mtx_lock_¶ìp
(&(
m
)->
mtx_lock
, 
t
, 
o
, 
f
, 
l
)

	)

142 
	#_mtx_u∆ock_¶ìp
(
m
, 
o
, 
f
, 
l
) \

143 
	`__mtx_u∆ock_¶ìp
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

144 #ifde‡
SMP


145 
	#_mtx_lock_•ö
(
m
, 
t
, 
o
, 
f
, 
l
) \

146 
	`_mtx_lock_•ö_cookõ
(&(
m
)->
mtx_lock
, 
t
, 
o
, 
f
, 
l
)

	)

148 
	#_mtx_lock_Êags
(
m
, 
o
, 
f
, 
l
) \

149 
	`__mtx_lock_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

150 
	#_mtx_u∆ock_Êags
(
m
, 
o
, 
f
, 
l
) \

151 
	`__mtx_u∆ock_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

152 
	#_mtx_lock_•ö_Êags
(
m
, 
o
, 
f
, 
l
) \

153 
	`__mtx_lock_•ö_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

154 
	#_mtx_u∆ock_•ö_Êags
(
m
, 
o
, 
f
, 
l
) \

155 
	`__mtx_u∆ock_•ö_Êags
(&(
m
)->
mtx_lock
, 
o
, 
f
, 
l
)

	)

156 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

157 
	#_mtx_as£π
(
m
, 
w
, 
f
, 
l
) \

158 
	`__mtx_as£π
(&(
m
)->
mtx_lock
, 
w
, 
f
, 
l
)

	)

161 
	#mtx_ªcur£
 
lock_obje˘
.
lo_d©a


	)

166 
	#_mtx_obèö_lock
(
mp
, 
tid
) \

167 
	`©omic_cmp£t_acq_±r
(&(
mp
)->
mtx_lock
, 
MTX_UNOWNED
, (
tid
))

	)

170 
	#_mtx_ªÀa£_lock
(
mp
, 
tid
) \

171 
	`©omic_cmp£t_ªl_±r
(&(
mp
)->
mtx_lock
, (
tid
), 
MTX_UNOWNED
)

	)

174 
	#_mtx_ªÀa£_lock_quick
(
mp
) \

175 
	`©omic_°‹e_ªl_±r
(&(
mp
)->
mtx_lock
, 
MTX_UNOWNED
)

	)

184 
	#__mtx_lock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

185 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

187 i‡(!
	`_mtx_obèö_lock
((
mp
), 
_tid
)) \

188 
	`_mtx_lock_¶ìp
((
mp
), 
_tid
, (
›ts
), (
fûe
), (
löe
)); \

190 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_MTX_LOCK_ACQUIRE
, \

191 
mp
, 0, 0, (
fûe
), (
löe
)); \

192 } 0)

	)

200 #ifde‡
SMP


201 
	#__mtx_lock_•ö
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

202 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

204 
	`•ölock_íãr
(); \

205 i‡(!
	`_mtx_obèö_lock
((
mp
), 
_tid
)) { \

206 i‡((
mp
)->
mtx_lock
 =
_tid
) \

207 (
mp
)->
mtx_ªcur£
++; \

209 
	`_mtx_lock_•ö
((
mp
), 
_tid
, (
›ts
), (
fûe
), (
löe
)); \

211 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_MTX_SPIN_LOCK_ACQUIRE
, \

212 
mp
, 0, 0, (
fûe
), (
löe
)); \

213 } 0)

	)

215 
	#__mtx_lock_•ö
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

216 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

218 
	`•ölock_íãr
(); \

219 i‡((
mp
)->
mtx_lock
 =
_tid
) \

220 (
mp
)->
mtx_ªcur£
++; \

222 
	`KASSERT
((
mp
)->
mtx_lock
 =
MTX_UNOWNED
, ("corrupt spinlock")); \

223 (
mp
)->
mtx_lock
 = 
_tid
; \

225 } 0)

	)

229 
	#__mtx_u∆ock
(
mp
, 
tid
, 
›ts
, 
fûe
, 
löe
) do { \

230 
uöçå_t
 
_tid
 = (uöçå_t)(
tid
); \

232 i‡(!
	`_mtx_ªÀa£_lock
((
mp
), 
_tid
)) \

233 
	`_mtx_u∆ock_¶ìp
((
mp
), (
›ts
), (
fûe
), (
löe
)); \

234 } 0)

	)

246 #ifde‡
SMP


247 
	#__mtx_u∆ock_•ö
(
mp
) do { \

248 i‡(
	`mtx_ªcur£d
((
mp
))) \

249 (
mp
)->
mtx_ªcur£
--; \

251 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
LS_MTX_SPIN_UNLOCK_RELEASE
, \

252 
mp
); \

253 
	`_mtx_ªÀa£_lock_quick
((
mp
)); \

255 
	`•ölock_exô
(); \

256 } 0)

	)

258 
	#__mtx_u∆ock_•ö
(
mp
) do { \

259 i‡(
	`mtx_ªcur£d
((
mp
))) \

260 (
mp
)->
mtx_ªcur£
--; \

262 
	`LOCKSTAT_PROFILE_RELEASE_LOCK
(
LS_MTX_SPIN_UNLOCK_RELEASE
, \

263 
mp
); \

264 (
mp
)->
mtx_lock
 = 
MTX_UNOWNED
; \

266 
	`•ölock_exô
(); \

267 } 0)

	)

301 
	#mtx_lock
(
m
Ë
	`mtx_lock_Êags
((m), 0)

	)

302 
	#mtx_lock_•ö
(
m
Ë
	`mtx_lock_•ö_Êags
((m), 0)

	)

303 
	#mtx_åylock
(
m
Ë
	`mtx_åylock_Êags
((m), 0)

	)

304 
	#mtx_u∆ock
(
m
Ë
	`mtx_u∆ock_Êags
((m), 0)

	)

305 
	#mtx_u∆ock_•ö
(
m
Ë
	`mtx_u∆ock_•ö_Êags
((m), 0)

	)

307 
	gmtx_poﬁ
;

309 
mtx_poﬁ
 *
mtx_poﬁ_¸óã
(c⁄° *
mtx_«me
, 
poﬁ_size
, 
›ts
);

310 
mtx_poﬁ_de°roy
(
mtx_poﬁ
 **
poﬁp
);

311 
mtx
 *
mtx_poﬁ_föd
(
mtx_poﬁ
 *
poﬁ
, *
±r
);

312 
mtx
 *
mtx_poﬁ_Æloc
(
mtx_poﬁ
 *
poﬁ
);

313 
	#mtx_poﬁ_lock
(
poﬁ
, 
±r
) \

314 
	`mtx_lock
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

315 
	#mtx_poﬁ_lock_•ö
(
poﬁ
, 
±r
) \

316 
	`mtx_lock_•ö
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

317 
	#mtx_poﬁ_u∆ock
(
poﬁ
, 
±r
) \

318 
	`mtx_u∆ock
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

319 
	#mtx_poﬁ_u∆ock_•ö
(
poﬁ
, 
±r
) \

320 
	`mtx_u∆ock_•ö
(
	`mtx_poﬁ_föd
((
poﬁ
), (
±r
)))

	)

328 
mtx_poﬁ
 *
mtxpoﬁ_lockbuûdî
;

329 
mtx_poﬁ
 *
mtxpoﬁ_¶ìp
;

331 #i‚de‡
LOCK_DEBUG


332 #îr‹ 
LOCK_DEBUG
 
nŸ
 
deföed
, 
ö˛ude
 <
sys
/
lock
.
h
> 
bef‹e
 <sys/
muãx
.h>

334 #i‡
LOCK_DEBUG
 > 0 || 
deföed
(
MUTEX_NOINLINE
)

335 
	#mtx_lock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

336 
	`_mtx_lock_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

337 
	#mtx_u∆ock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

338 
	`_mtx_u∆ock_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

339 
	#mtx_lock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

340 
	`_mtx_lock_•ö_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

341 
	#mtx_u∆ock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

342 
	`_mtx_u∆ock_•ö_Êags
((
m
), (
›ts
), (
fûe
), (
löe
))

	)

344 
	#mtx_lock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

345 
	`__mtx_lock
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

346 
	#mtx_u∆ock_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

347 
	`__mtx_u∆ock
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

348 
	#mtx_lock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

349 
	`__mtx_lock_•ö
((
m
), 
cuπhªad
, (
›ts
), (
fûe
), (
löe
))

	)

350 
	#mtx_u∆ock_•ö_Êags_
(
m
, 
›ts
, 
fûe
, 
löe
) \

351 
	`__mtx_u∆ock_•ö
((
m
))

	)

354 #ifde‡
INVARIANTS


355 
	#mtx_as£π_
(
m
, 
wh©
, 
fûe
, 
löe
) \

356 
	`_mtx_as£π
((
m
), (
wh©
), (
fûe
), (
löe
))

	)

358 
	#GIANT_REQUIRED
 
	`mtx_as£π_
(&
Gü¡
, 
MA_OWNED
, 
__FILE__
, 
__LINE__
)

	)

361 
	#mtx_as£π_
(
m
, 
wh©
, 
fûe
, 
löe
Ë()0

	)

362 
	#GIANT_REQUIRED


	)

365 
	#mtx_lock_Êags
(
m
, 
›ts
) \

366 
	`mtx_lock_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

367 
	#mtx_u∆ock_Êags
(
m
, 
›ts
) \

368 
	`mtx_u∆ock_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

369 
	#mtx_lock_•ö_Êags
(
m
, 
›ts
) \

370 
	`mtx_lock_•ö_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

371 
	#mtx_u∆ock_•ö_Êags
(
m
, 
›ts
) \

372 
	`mtx_u∆ock_•ö_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

373 
	#mtx_åylock_Êags
(
m
, 
›ts
) \

374 
	`mtx_åylock_Êags_
((
m
), (
›ts
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

375 
	#mtx_as£π
(
m
, 
wh©
) \

376 
	`mtx_as£π_
((
m
), (
wh©
), 
__FILE__
, 
__LINE__
)

	)

378 
	#mtx_¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

379 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

380 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

382 
	#mtx_öôülized
(
m
Ë
	`lock_öôÆized
(&(m)->
lock_obje˘
)

	)

384 
	#mtx_ow√d
(
m
Ë(((m)->
mtx_lock
 & ~
MTX_FLAGMASK
Ë=(
uöçå_t
)
cuπhªad
)

	)

386 
	#mtx_ªcur£d
(
m
Ë((m)->
mtx_ªcur£
 !0)

	)

388 
	#mtx_«me
(
m
Ë((m)->
lock_obje˘
.
lo_«me
)

	)

393 
mtx
 
Gü¡
;

394 
mtx
 
blocked_lock
;

403 #i‚de‡
DROP_GIANT


404 
	#DROP_GIANT
() \

406 
_gü¡˙t
 = 0; \

407 
	`WITNESS_SAVE_DECL
(
Gü¡
); \

409 i‡(
	`mtx_ow√d
(&
Gü¡
)) { \

410 
	`WITNESS_SAVE
(&
Gü¡
.
lock_obje˘
, Giant); \

411 
_gü¡˙t
 = 0; 
	`mtx_ow√d
(&
Gü¡
) && \

412 !
	`SCHEDULER_STOPPED
(); 
_gü¡˙t
++) \

413 
	`mtx_u∆ock
(&
Gü¡
); \

414 }

	)

416 
	#PICKUP_GIANT
() \

417 
	`PARTIAL_PICKUP_GIANT
(); \

418 } 0)

	)

420 
	#PARTIAL_PICKUP_GIANT
() \

421 
	`mtx_as£π
(&
Gü¡
, 
MA_NOTOWNED
); \

422 i‡(
_gü¡˙t
 > 0) { \

423 
_gü¡˙t
--) \

424 
	`mtx_lock
(&
Gü¡
); \

425 
	`WITNESS_RESTORE
(&
Gü¡
.
lock_obje˘
, Giant); \

426 }

	)

429 
	smtx_¨gs
 {

430 *
	mma_mtx
;

431 c⁄° *
	mma_desc
;

432 
	mma_›ts
;

435 
	#MTX_SYSINIT
(
«me
, 
mtx
, 
desc
, 
›ts
) \

436 
mtx_¨gs
 
«me
##
_¨gs
 = { \

437 (
mtx
), \

438 (
desc
), \

439 (
›ts
) \

441 
	`SYSINIT
(
«me
##
_mtx_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

442 
mtx_sysöô
, &
«me
##
_¨gs
); \

443 
	`SYSUNINIT
(
«me
##
_mtx_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

444 
_mtx_de°roy
, 
	`__DEVOLATILE
(*, &(
mtx
)->
mtx_lock
))

	)

453 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

454 
	#MA_OWNED
 
LA_XLOCKED


	)

455 
	#MA_NOTOWNED
 
LA_UNLOCKED


	)

456 
	#MA_RECURSED
 
LA_RECURSED


	)

457 
	#MA_NOTRECURSED
 
LA_NOTRECURSED


	)

463 
	#MTX_NETWORK_LOCK
 "√tw‹k drivî"

	)

	@/usr/include/sys/namei.h

33 #i‚de‡
_SYS_NAMEI_H_


34 
	#_SYS_NAMEI_H_


	)

36 
	~<sys/ˇ¥ights.h
>

37 
	~<sys/fûedesc.h
>

38 
	~<sys/queue.h
>

39 
	~<sys/uio.h
>

41 
	scomp⁄íäame
 {

45 
u_l⁄g
 
	m˙_«mei›
;

46 
u_öt64_t
 
	m˙_Êags
;

47 
thªad
 *
	m˙_thªad
;

48 
u¸ed
 *
	m˙_¸ed
;

49 
	m˙_lkÊags
;

53 *
	m˙_≤buf
;

54 *
	m˙_«mïå
;

55 
	m˙_«mñí
;

56 
	m˙_c⁄sume
;

62 
	s«meid©a
 {

66 c⁄° *
	mni_dúp
;

67 
uio_£g
 
	mni_£gÊg
;

68 
ˇp_rights_t
 
	mni_right¢ìded
;

72 
vnode
 *
	mni_°¨tdú
;

73 
vnode
 *
	mni_roŸdú
;

74 
vnode
 *
	mni_t›dú
;

75 
	mni_dúfd
;

76 
	mni_°ri˘ªœtive
;

80 
fûeˇps
 
	mni_fûeˇps
;

84 
vnode
 *
	mni_vp
;

85 
vnode
 *
	mni_dvp
;

89 
size_t
 
	mni_∑thÀn
;

90 *
	mni_√xt
;

91 
u_öt
 
	mni_lo›˙t
;

97 
comp⁄íäame
 
	mni_˙d
;

100 #ifde‡
_KERNEL


104 
	#LOOKUP
 0

	)

105 
	#CREATE
 1

	)

106 
	#DELETE
 2

	)

107 
	#RENAME
 3

	)

108 
	#OPMASK
 3

	)

112 
	#LOCKLEAF
 0x0004

	)

113 
	#LOCKPARENT
 0x0008

	)

114 
	#WANTPARENT
 0x0010

	)

115 
	#NOCACHE
 0x0020

	)

116 
	#FOLLOW
 0x0040

	)

117 
	#LOCKSHARED
 0x0100

	)

118 
	#NOFOLLOW
 0x0000

	)

119 
	#MODMASK
 0x01f¯

	)

134 
	#RDONLY
 0x00000200

	)

135 
	#HASBUF
 0x00000400

	)

136 
	#SAVENAME
 0x00000800

	)

137 
	#SAVESTART
 0x00001000

	)

138 
	#ISDOTDOT
 0x00002000

	)

139 
	#MAKEENTRY
 0x00004000

	)

140 
	#ISLASTCN
 0x00008000

	)

141 
	#ISSYMLINK
 0x00010000

	)

142 
	#ISWHITEOUT
 0x00020000

	)

143 
	#DOWHITEOUT
 0x00040000

	)

144 
	#WILLBEDIR
 0x00080000

	)

145 
	#ISUNICODE
 0x00100000

	)

146 
	#ISOPEN
 0x00200000

	)

147 
	#NOCROSSMOUNT
 0x00400000

	)

148 
	#NOMACCHECK
 0x00800000

	)

149 
	#AUDITVNODE1
 0x04000000

	)

150 
	#AUDITVNODE2
 0x08000000

	)

151 
	#TRAILINGSLASH
 0x10000000

	)

152 
	#NOCAPCHECK
 0x20000000

	)

153 
	#PARAMASK
 0x3fff„00

	)

158 
	#NDINIT
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
td
) \

159 
	`NDINIT_ALL
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
AT_FDCWD
, 
NULL
, 0, 
td
)

	)

160 
	#NDINIT_AT
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
dúfd
, 
td
) \

161 
	`NDINIT_ALL
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
dúfd
, 
NULL
, 0, 
td
)

	)

162 
	#NDINIT_ATRIGHTS
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
dúfd
, 
right•
, 
td
) \

163 
	`NDINIT_ALL
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
dúfd
, 
NULL
, 
right•
, 
td
)

	)

164 
	#NDINIT_ATVP
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
vp
, 
td
) \

165 
	`NDINIT_ALL
(
ndp
, 
›
, 
Êags
, 
£gÊg
, 
«mï
, 
AT_FDCWD
, 
vp
, 0, 
td
)

	)

167 
NDINIT_ALL
(
«meid©a
 *
ndp
, 
u_l⁄g
 
›
, u_l⁄g 
Êags
,

168 
uio_£g
 
£gÊg
, c⁄° *
«mï
, 
dúfd
, 
vnode
 *
°¨tdú
,

169 
ˇp_rights_t
 *
right•
, 
thªad
 *
td
);

171 
	#NDF_NO_DVP_RELE
 0x00000001

	)

172 
	#NDF_NO_DVP_UNLOCK
 0x00000002

	)

173 
	#NDF_NO_DVP_PUT
 0x00000003

	)

174 
	#NDF_NO_VP_RELE
 0x00000004

	)

175 
	#NDF_NO_VP_UNLOCK
 0x00000008

	)

176 
	#NDF_NO_VP_PUT
 0x0000000c

	)

177 
	#NDF_NO_STARTDIR_RELE
 0x00000010

	)

178 
	#NDF_NO_FREE_PNBUF
 0x00000020

	)

179 
	#NDF_ONLY_PNBUF
 (~
NDF_NO_FREE_PNBUF
)

	)

181 
NDFREE
(
«meid©a
 *, c⁄° 
u_öt
);

183 
«mei
(
«meid©a
 *
ndp
);

184 
lookup
(
«meid©a
 *
ndp
);

185 
ªlookup
(
vnode
 *
dvp
, vnodê**
vµ
,

186 
comp⁄íäame
 *
˙p
);

192 
	snch°©s
 {

193 
	mncs_goodhôs
;

194 
	mncs_√ghôs
;

195 
	mncs_badhôs
;

196 
	mncs_Ál£hôs
;

197 
	mncs_miss
;

198 
	mncs_l⁄g
;

199 
	mncs_∑ss2
;

200 
	mncs_2∑s£s
;

203 
nch°©s
Çchstats;

	@/usr/include/sys/param.h

38 #i‚de‡
_SYS_PARAM_H_


39 
	#_SYS_PARAM_H_


	)

41 
	~<sys/_nuŒ.h
>

43 
	#BSD
 199506

	)

44 
	#BSD4_3
 1

	)

45 
	#BSD4_4
 1

	)

60 #unde‡
__FªeBSD_vîsi⁄


61 
	#__FªeBSD_vîsi⁄
 1003504

	)

76 #unde‡
__FªeBSD_kî√l__


77 
	#__FªeBSD_kî√l__


	)

79 #ifde‡
_KERNEL


80 
	#P_OSREL_SIGWAIT
 700000

	)

81 
	#P_OSREL_SIGSEGV
 700004

	)

82 
	#P_OSREL_MAP_ANON
 800104

	)

84 
	#P_OSREL_MAJOR
(
x
Ë((xË/ 100000)

	)

87 #i‚de‡
LOCORE


88 
	~<sys/ty≥s.h
>

97 
	~<sys/sy¶imôs.h
>

99 
	#MAXCOMLEN
 19

	)

100 
	#MAXINTERP
 
PATH_MAX


	)

101 
	#MAXLOGNAME
 33

	)

102 
	#MAXUPRC
 
CHILD_MAX


	)

103 
	#NCARGS
 
ARG_MAX


	)

104 
	#NGROUPS
 (
NGROUPS_MAX
+1Ë

	)

105 
	#NOFILE
 
OPEN_MAX


	)

106 
	#NOGROUP
 65535

	)

107 
	#MAXHOSTNAMELEN
 256

	)

108 
	#SPECNAMELEN
 63

	)

111 #ifde‡
_KERNEL


112 
	~<sys/cdefs.h
>

113 
	~<sys/î∫o.h
>

114 #i‚de‡
LOCORE


115 
	~<sys/time.h
>

116 
	~<sys/¥i‹ôy.h
>

119 #i‚de‡
FALSE


120 
	#FALSE
 0

	)

122 #i‚de‡
TRUE


123 
	#TRUE
 1

	)

127 #i‚de‡
_KERNEL


129 
	~<sys/sig«l.h
>

133 
	~<machöe/∑øm.h
>

134 #i‚de‡
_KERNEL


135 
	~<sys/limôs.h
>

138 #i‚de‡
DEV_BSHIFT


139 
	#DEV_BSHIFT
 9

	)

141 
	#DEV_BSIZE
 (1<<
DEV_BSHIFT
)

	)

143 #i‚de‡
BLKDEV_IOSIZE


144 
	#BLKDEV_IOSIZE
 
PAGE_SIZE


	)

146 #i‚de‡
DFLTPHYS


147 
	#DFLTPHYS
 (64 * 1024Ë

	)

149 #i‚de‡
MAXPHYS


150 
	#MAXPHYS
 (128 * 1024Ë

	)

152 #i‚de‡
MAXDUMPPGS


153 
	#MAXDUMPPGS
 (
DFLTPHYS
/
PAGE_SIZE
)

	)

160 #i‚def 
MSIZE


161 
	#MSIZE
 256

	)

164 #i‚def 
MCLSHIFT


165 
	#MCLSHIFT
 11

	)

168 
	#MCLBYTES
 (1 << 
MCLSHIFT
Ë

	)

170 #i‡
PAGE_SIZE
 < 2048

171 
	#MJUMPAGESIZE
 
MCLBYTES


	)

172 #ñi‡
PAGE_SIZE
 <= 8192

173 
	#MJUMPAGESIZE
 
PAGE_SIZE


	)

175 
	#MJUMPAGESIZE
 (8 * 1024)

	)

178 
	#MJUM9BYTES
 (9 * 1024Ë

	)

179 
	#MJUM16BYTES
 (16 * 1024Ë

	)

186 #i‚de‡
˘ob


187 
	#˘ob
(
x
Ë((x)<<
PAGE_SHIFT
)

	)

191 #i‚de‡
btoc


192 
	#btoc
(
x
Ë(((
vm_off£t_t
)(x)+
PAGE_MASK
)>>
PAGE_SHIFT
)

	)

201 #i‚de‡
btodb


202 
	#btodb
(
byãs
) \

203 ( (
byãs
) > () \

204 ? (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
) \

205 : (
daddr_t
)(()(
byãs
Ë>> 
DEV_BSHIFT
))

	)

208 #i‚de‡
dbtob


209 
	#dbtob
(
db
) \

210 ((
off_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)

213 
	#PRIMASK
 0x0ff

	)

214 
	#PCATCH
 0x100

	)

215 
	#PDROP
 0x200

	)

217 
	#NZERO
 0

	)

219 
	#NBBY
 8

	)

220 
	#NBPW
 (Ë

	)

222 
	#CMASK
 022

	)

224 
	#NODEV
 (
dev_t
)(-1Ë

	)

258 
	#MAXBSIZE
 65536

	)

259 #i‚def 
MAXBCACHEBUF


260 
	#MAXBCACHEBUF
 
MAXBSIZE


	)

262 #i‚def 
BKVASIZE


263 
	#BKVASIZE
 16384

	)

265 
	#BKVAMASK
 (
BKVASIZE
-1)

	)

276 
	#MAXPATHLEN
 
PATH_MAX


	)

277 
	#MAXSYMLINKS
 32

	)

280 
	#£tbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] |1<<((i)%NBBY))

	)

281 
	#˛rbô
(
a
,
i
Ë(((*)◊))[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

282 
	#is£t
(
a
,
i
) \

283 (((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY)))

	)

284 
	#is˛r
(
a
,
i
) \

285 ((((c⁄° *)(
a
))[(
i
)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

288 #i‚de‡
howm™y


289 
	#howm™y
(
x
, 
y
Ë(((x)+((y)-1))/(y))

	)

291 
	#nôems
(
x
Ë(((x)Ë/ ((x)[0]))

	)

292 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

293 
	#rounddown2
(
x
, 
y
Ë((x)&(~((y)-1))Ë

	)

294 
	#roundup
(
x
, 
y
Ë((((x)+((y)-1))/(y))*(y)Ë

	)

295 
	#roundup2
(
x
, 
y
Ë(((x)+((y)-1))&(~((y)-1))Ë

	)

296 
	#powîof2
(
x
Ë((((x)-1)&(x))==0)

	)

299 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

300 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

302 #ifde‡
_KERNEL


306 #i‚de‡
LOCORE


307 #i‚de‡
_BYTEORDER_PROTOTYPED


308 
	#_BYTEORDER_PROTOTYPED


	)

309 
__BEGIN_DECLS


310 
__uöt32_t
 
ht⁄l
(__uint32_t);

311 
__uöt16_t
 
ht⁄s
(__uint16_t);

312 
__uöt32_t
 
¡ohl
(__uint32_t);

313 
__uöt16_t
 
¡ohs
(__uint16_t);

314 
	g__END_DECLS


318 #i‚de‡
löt


319 #i‚de‡
_BYTEORDER_FUNC_DEFINED


320 
	#_BYTEORDER_FUNC_DEFINED


	)

321 
	#ht⁄l
(
x
Ë
	`__ht⁄l
(x)

	)

322 
	#ht⁄s
(
x
Ë
	`__ht⁄s
(x)

	)

323 
	#¡ohl
(
x
Ë
	`__¡ohl
(x)

	)

324 
	#¡ohs
(
x
Ë
	`__¡ohs
(x)

	)

340 
	#FSHIFT
 11

	)

341 
	#FSCALE
 (1<<
FSHIFT
)

	)

343 
	#dbtoc
(
db
) \

344 ((
db
 + (
	`˘odb
(1Ë- 1)Ë>> (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

346 
	#˘odb
(
db
) \

347 ((
db
Ë<< (
PAGE_SHIFT
 - 
DEV_BSHIFT
))

	)

352 
	#membî2°ru˘
(
s
, 
m
, 
x
) \

353 ((
s
 *)(*)((*)(
x
Ë- 
	`off£tof
(s, 
m
)))

	)

359 
	#__PAST_END
(
¨øy
, 
off£t
Ë(((
	`__ty≥of__
(*◊ºay)Ë*)◊ºay))[off£t])

	)

	@/usr/include/sys/pcpu.h

33 #i‚de‡
_SYS_PCPU_H_


34 
	#_SYS_PCPU_H_


	)

36 #ifde‡
LOCORE


40 
	~<sys/_˝u£t.h
>

41 
	~<sys/_lock.h
>

42 
	~<sys/_muãx.h
>

43 
	~<sys/_sx.h
>

44 
	~<sys/queue.h
>

45 
	~<sys/_rmlock.h
>

46 
	~<sys/vmmëî.h
>

47 
	~<sys/ªsour˚.h
>

48 
	~<machöe/p˝u.h
>

50 
	#DPCPU_SETNAME
 "£t_p˝u"

	)

51 
	#DPCPU_SYMPREFIX
 "p˝u_íåy_"

	)

53 #ifde‡
_KERNEL


58 
uöçå_t
 *
__°¨t_£t_p˝u
;

59 
__GLOBL
(
__°¨t_£t_p˝u
);

60 
uöçå_t
 *
__°›_£t_p˝u
;

61 
__GLOBL
(
__°›_£t_p˝u
);

66 
uöçå_t
 
dp˝u_off
[];

71 
	#DPCPU_START
 ((
uöçå_t
)&
__°¨t_£t_p˝u
)

	)

72 
	#DPCPU_STOP
 ((
uöçå_t
)&
__°›_£t_p˝u
)

	)

73 
	#DPCPU_BYTES
 (
DPCPU_STOP
 - 
DPCPU_START
)

	)

74 
	#DPCPU_MODMIN
 2048

	)

75 
	#DPCPU_SIZE
 
	`roundup2
(
DPCPU_BYTES
, 
PAGE_SIZE
)

	)

76 
	#DPCPU_MODSIZE
 (
DPCPU_SIZE
 - (
DPCPU_BYTES
 - 
DPCPU_MODMIN
))

	)

81 
	#DPCPU_NAME
(
n
Ë
p˝u_íåy_
##
	)
n

82 
	#DPCPU_DECLARE
(
t
, 
n
Ëà
	`DPCPU_NAME
“)

	)

83 
	#DPCPU_DEFINE
(
t
, 
n
Ëà
	`DPCPU_NAME
“Ë
	`__£˘i⁄
(
DPCPU_SETNAME
Ë
__u£d


	)

88 
	#_DPCPU_PTR
(
b
, 
n
) \

89 (
	`__ty≥of
(
	`DPCPU_NAME
(
n
))*)((
b
Ë+ (
uöçå_t
)&DPCPU_NAME“))

	)

90 
	#_DPCPU_GET
(
b
, 
n
Ë(*
	`_DPCPU_PTR
(b,Ç))

	)

91 
	#_DPCPU_SET
(
b
, 
n
, 
v
Ë(*
	`_DPCPU_PTR
(b,ÇËv)

	)

96 
	#DPCPU_PTR
(
n
Ë
	`_DPCPU_PTR
(
	`PCPU_GET
(
dy«mic
),Ç)

	)

97 
	#DPCPU_GET
(
n
Ë(*
	`DPCPU_PTR
“))

	)

98 
	#DPCPU_SET
(
n
, 
v
Ë(*
	`DPCPU_PTR
“Ëv)

	)

103 
	#DPCPU_ID_PTR
(
i
, 
n
Ë
	`_DPCPU_PTR
(
dp˝u_off
[(i)],Ç)

	)

104 
	#DPCPU_ID_GET
(
i
, 
n
Ë(*
	`DPCPU_ID_PTR
(i,Ç))

	)

105 
	#DPCPU_ID_SET
(
i
, 
n
, 
v
Ë(*
	`DPCPU_ID_PTR
(i,ÇËv)

	)

110 
	#DPCPU_SUM
(
n
Ë
__exãnsi⁄__
 \

112 
u_öt
 
_i
; \

113 
	`__ty≥of
(*
	`DPCPU_PTR
(
n
)Ë
sum
; \

115 
sum
 = 0; \

116 
	`CPU_FOREACH
(
_i
) { \

117 
sum
 +*
	`DPCPU_ID_PTR
(
_i
, 
n
); \

119 
sum
; \

120 })

	)

122 
	#DPCPU_VARSUM
(
n
, 
v¨
Ë
__exãnsi⁄__
 \

124 
u_öt
 
_i
; \

125 
	`__ty≥of
((
	`DPCPU_PTR
(
n
))->
v¨
Ë
sum
; \

127 
sum
 = 0; \

128 
	`CPU_FOREACH
(
_i
) { \

129 
sum
 +(
	`DPCPU_ID_PTR
(
_i
, 
n
))->
v¨
; \

131 
sum
; \

132 })

	)

134 
	#DPCPU_ZERO
(
n
) do { \

135 
u_öt
 
_i
; \

137 
	`CPU_FOREACH
(
_i
) { \

138 
	`bzîo
(
	`DPCPU_ID_PTR
(
_i
, 
n
), (*
	`DPCPU_PTR
(n))); \

140 } 0)

	)

150 
	sp˝u
 {

151 
thªad
 *
pc_cuπhªad
;

152 
thªad
 *
pc_idÀthªad
;

153 
thªad
 *
pc_Âcuπhªad
;

154 
thªad
 *
pc_dódthªad
;

155 
pcb
 *
pc_cuΩcb
;

156 
uöt64_t
 
pc_swôchtime
;

157 
pc_swôchticks
;

158 
u_öt
 
pc_˝uid
;

159 
STAILQ_ENTRY
(
p˝u
Ë
pc_Æl˝u
;

160 
lock_li°_íåy
 *
pc_•ölocks
;

161 
vmmëî
 
pc_˙t
;

162 
pc_˝_time
[
CPUSTATES
];

163 
devi˚
 *
pc_devi˚
;

164 *
pc_√ti§
;

165 
pc_unu£d1
;

166 
pc_domaö
;

167 
rm_queue
 
pc_rm_queue
;

168 
uöçå_t
 
pc_dy«mic
;

180 
PCPU_MD_FIELDS
;

181 } 
__Æig√d
(
CACHE_LINE_SIZE
);

183 #ifde‡
CTASSERT


188 
CTASSERT
((
PAGE_SIZE
 / (
p˝u
)) * (pcpu) == PAGE_SIZE);

191 #ifde‡
_KERNEL


193 
STAILQ_HEAD
(
˝uhód
, 
p˝u
);

195 
˝uhód
 cpuhead;

196 
p˝u
 *
˝uid_to_p˝u
[];

198 
	#cur˝u
 
	`PCPU_GET
(
˝uid
)

	)

199 
	#cuΩroc
 (
cuπhªad
->
td_¥oc
)

	)

200 #i‚de‡
cuπhªad


201 
	#cuπhªad
 
	`PCPU_GET
(
cuπhªad
)

	)

203 
	#curvid©a
 
	`PCPU_GET
(
vid©a
)

	)

206 
ölöe
 *

207 
	$zp˝u_gë
(*
ba£
)

210  ((*)(
ba£
Ë+ (
p˝u
Ë* 
cur˝u
);

211 
	}
}

213 
ölöe
 *

214 
	$zp˝u_gë_˝u
(*
ba£
, 
˝u
)

217  ((*)(
ba£
Ë+ (
p˝u
Ë* 
˝u
);

218 
	}
}

226 
˝u_p˝u_öô
(
p˝u
 *p˝u, 
˝uid
, 
size_t
 
size
);

227 
db_show_mdp˝u
(
p˝u
 *pcpu);

229 *
dp˝u_Æloc
(
size
);

230 
dp˝u_c›y
(*
s
, 
size
);

231 
dp˝u_‰ì
(*
s
, 
size
);

232 
dp˝u_öô
(*
dp˝u
, 
˝uid
);

233 
p˝u_de°roy
(
p˝u
 *pcpu);

234 
p˝u
 *
p˝u_föd
(
u_öt
 
˝uid
);

235 
p˝u_öô
(
p˝u
 *p˝u, 
˝uid
, 
size_t
 
size
);

	@/usr/include/sys/priv.h

35 #i‚de‡
_SYS_PRIV_H_


36 
	#_SYS_PRIV_H_


	)

55 
	#_PRIV_LOWEST
 1

	)

64 
	#_PRIV_ROOT
 1

	)

65 
	#PRIV_ACCT
 2

	)

66 
	#PRIV_MAXFILES
 3

	)

67 
	#PRIV_MAXPROC
 4

	)

68 
	#PRIV_KTRACE
 5

	)

69 
	#PRIV_SETDUMPER
 6

	)

70 
	#PRIV_REBOOT
 8

	)

71 
	#PRIV_SWAPON
 9

	)

72 
	#PRIV_SWAPOFF
 10

	)

73 
	#PRIV_MSGBUF
 11

	)

74 
	#PRIV_IO
 12

	)

75 
	#PRIV_KEYBOARD
 13

	)

76 
	#PRIV_DRIVER
 14

	)

77 
	#PRIV_ADJTIME
 15

	)

78 
	#PRIV_NTP_ADJTIME
 16

	)

79 
	#PRIV_CLOCK_SETTIME
 17

	)

80 
	#PRIV_SETTIMEOFDAY
 18

	)

81 
	#_PRIV_SETHOSTID
 19

	)

82 
	#_PRIV_SETDOMAINNAME
 20

	)

87 
	#PRIV_AUDIT_CONTROL
 40

	)

88 
	#PRIV_AUDIT_FAILSTOP
 41

	)

89 
	#PRIV_AUDIT_GETAUDIT
 42

	)

90 
	#PRIV_AUDIT_SETAUDIT
 43

	)

91 
	#PRIV_AUDIT_SUBMIT
 44

	)

96 
	#PRIV_CRED_SETUID
 50

	)

97 
	#PRIV_CRED_SETEUID
 51

	)

98 
	#PRIV_CRED_SETGID
 52

	)

99 
	#PRIV_CRED_SETEGID
 53

	)

100 
	#PRIV_CRED_SETGROUPS
 54

	)

101 
	#PRIV_CRED_SETREUID
 55

	)

102 
	#PRIV_CRED_SETREGID
 56

	)

103 
	#PRIV_CRED_SETRESUID
 57

	)

104 
	#PRIV_CRED_SETRESGID
 58

	)

105 
	#PRIV_SEEOTHERGIDS
 59

	)

106 
	#PRIV_SEEOTHERUIDS
 60

	)

111 
	#PRIV_DEBUG_DIFFCRED
 80

	)

112 
	#PRIV_DEBUG_SUGID
 81

	)

113 
	#PRIV_DEBUG_UNPRIV
 82

	)

114 
	#PRIV_DEBUG_DENIED
 83

	)

119 
	#PRIV_DTRACE_KERNEL
 90

	)

120 
	#PRIV_DTRACE_PROC
 91

	)

121 
	#PRIV_DTRACE_USER
 92

	)

126 
	#PRIV_FIRMWARE_LOAD
 100

	)

131 
	#PRIV_JAIL_ATTACH
 110

	)

132 
	#PRIV_JAIL_SET
 111

	)

133 
	#PRIV_JAIL_REMOVE
 112

	)

138 
	#PRIV_KENV_SET
 120

	)

139 
	#PRIV_KENV_UNSET
 121

	)

144 
	#PRIV_KLD_LOAD
 130

	)

145 
	#PRIV_KLD_UNLOAD
 131

	)

151 
	#PRIV_MAC_PARTITION
 140

	)

152 
	#PRIV_MAC_PRIVS
 141

	)

157 
	#PRIV_PROC_LIMIT
 160

	)

158 
	#PRIV_PROC_SETLOGIN
 161

	)

159 
	#PRIV_PROC_SETRLIMIT
 162

	)

160 
	#PRIV_PROC_SETLOGINCLASS
 163

	)

165 
	#PRIV_IPC_READ
 170

	)

166 
	#PRIV_IPC_WRITE
 171

	)

167 
	#PRIV_IPC_ADMIN
 172

	)

168 
	#PRIV_IPC_MSGSIZE
 173

	)

173 
	#PRIV_MQ_ADMIN
 180

	)

178 
	#PRIV_PMC_MANAGE
 190

	)

179 
	#PRIV_PMC_SYSTEM
 191

	)

184 
	#PRIV_SCHED_DIFFCRED
 200

	)

185 
	#PRIV_SCHED_SETPRIORITY
 201

	)

186 
	#PRIV_SCHED_RTPRIO
 202

	)

187 
	#PRIV_SCHED_SETPOLICY
 203

	)

188 
	#PRIV_SCHED_SET
 204

	)

189 
	#PRIV_SCHED_SETPARAM
 205

	)

190 
	#PRIV_SCHED_CPUSET
 206

	)

191 
	#PRIV_SCHED_CPUSET_INTR
 207

	)

196 
	#PRIV_SEM_WRITE
 220

	)

201 
	#PRIV_SIGNAL_DIFFCRED
 230

	)

202 
	#PRIV_SIGNAL_SUGID
 231

	)

207 
	#PRIV_SYSCTL_DEBUG
 240

	)

208 
	#PRIV_SYSCTL_WRITE
 241

	)

209 
	#PRIV_SYSCTL_WRITEJAIL
 242

	)

214 
	#PRIV_TTY_CONSOLE
 250

	)

215 
	#PRIV_TTY_DRAINWAIT
 251

	)

216 
	#PRIV_TTY_DTRWAIT
 252

	)

217 
	#PRIV_TTY_EXCLUSIVE
 253

	)

218 
	#_PRIV_TTY_PRISON
 254

	)

219 
	#PRIV_TTY_STI
 255

	)

220 
	#PRIV_TTY_SETA
 256

	)

225 
	#PRIV_UFS_EXTATTRCTL
 270

	)

226 
	#PRIV_UFS_QUOTAOFF
 271

	)

227 
	#PRIV_UFS_QUOTAON
 272

	)

228 
	#PRIV_UFS_SETUSE
 273

	)

233 
	#PRIV_ZFS_POOL_CONFIG
 280

	)

234 
	#PRIV_ZFS_INJECT
 281

	)

236 
	#PRIV_ZFS_JAIL
 282

	)

242 
	#PRIV_NFS_DAEMON
 290

	)

243 
	#PRIV_NFS_LOCKD
 291

	)

248 
	#PRIV_VFS_READ
 310

	)

249 
	#PRIV_VFS_WRITE
 311

	)

250 
	#PRIV_VFS_ADMIN
 312

	)

251 
	#PRIV_VFS_EXEC
 313

	)

252 
	#PRIV_VFS_LOOKUP
 314

	)

253 
	#PRIV_VFS_BLOCKRESERVE
 315

	)

254 
	#PRIV_VFS_CHFLAGS_DEV
 316

	)

255 
	#PRIV_VFS_CHOWN
 317

	)

256 
	#PRIV_VFS_CHROOT
 318

	)

257 
	#PRIV_VFS_RETAINSUGID
 319

	)

258 
	#PRIV_VFS_EXCEEDQUOTA
 320

	)

259 
	#PRIV_VFS_EXTATTR_SYSTEM
 321

	)

260 
	#PRIV_VFS_FCHROOT
 322

	)

261 
	#PRIV_VFS_FHOPEN
 323

	)

262 
	#PRIV_VFS_FHSTAT
 324

	)

263 
	#PRIV_VFS_FHSTATFS
 325

	)

264 
	#PRIV_VFS_GENERATION
 326

	)

265 
	#PRIV_VFS_GETFH
 327

	)

266 
	#PRIV_VFS_GETQUOTA
 328

	)

267 
	#PRIV_VFS_LINK
 329

	)

268 
	#PRIV_VFS_MKNOD_BAD
 330

	)

269 
	#PRIV_VFS_MKNOD_DEV
 331

	)

270 
	#PRIV_VFS_MKNOD_WHT
 332

	)

271 
	#PRIV_VFS_MOUNT
 333

	)

272 
	#PRIV_VFS_MOUNT_OWNER
 334

	)

273 
	#PRIV_VFS_MOUNT_EXPORTED
 335

	)

274 
	#PRIV_VFS_MOUNT_PERM
 336

	)

275 
	#PRIV_VFS_MOUNT_SUIDDIR
 337

	)

276 
	#PRIV_VFS_MOUNT_NONUSER
 338

	)

277 
	#PRIV_VFS_SETGID
 339

	)

278 
	#PRIV_VFS_SETQUOTA
 340

	)

279 
	#PRIV_VFS_STICKYFILE
 341

	)

280 
	#PRIV_VFS_SYSFLAGS
 342

	)

281 
	#PRIV_VFS_UNMOUNT
 343

	)

282 
	#PRIV_VFS_STAT
 344

	)

287 
	#PRIV_VM_MADV_PROTECT
 360

	)

288 
	#PRIV_VM_MLOCK
 361

	)

289 
	#PRIV_VM_MUNLOCK
 362

	)

290 
	#PRIV_VM_SWAP_NOQUOTA
 363

	)

294 
	#PRIV_VM_SWAP_NORLIMIT
 364

	)

302 
	#PRIV_DEVFS_RULE
 370

	)

303 
	#PRIV_DEVFS_SYMLINK
 371

	)

308 
	#PRIV_RANDOM_RESEED
 380

	)

313 
	#PRIV_NET_BRIDGE
 390

	)

314 
	#PRIV_NET_GRE
 391

	)

315 
	#_PRIV_NET_PPP
 392

	)

316 
	#_PRIV_NET_SLIP
 393

	)

317 
	#PRIV_NET_BPF
 394

	)

318 
	#PRIV_NET_RAW
 395

	)

319 
	#PRIV_NET_ROUTE
 396

	)

320 
	#PRIV_NET_TAP
 397

	)

321 
	#PRIV_NET_SETIFMTU
 398

	)

322 
	#PRIV_NET_SETIFFLAGS
 399

	)

323 
	#PRIV_NET_SETIFCAP
 400

	)

324 
	#PRIV_NET_SETIFNAME
 401

	)

325 
	#PRIV_NET_SETIFMETRIC
 402

	)

326 
	#PRIV_NET_SETIFPHYS
 403

	)

327 
	#PRIV_NET_SETIFMAC
 404

	)

328 
	#PRIV_NET_ADDMULTI
 405

	)

329 
	#PRIV_NET_DELMULTI
 406

	)

330 
	#PRIV_NET_HWIOCTL
 407

	)

331 
	#PRIV_NET_SETLLADDR
 408

	)

332 
	#PRIV_NET_ADDIFGROUP
 409

	)

333 
	#PRIV_NET_DELIFGROUP
 410

	)

334 
	#PRIV_NET_IFCREATE
 411

	)

335 
	#PRIV_NET_IFDESTROY
 412

	)

336 
	#PRIV_NET_ADDIFADDR
 413

	)

337 
	#PRIV_NET_DELIFADDR
 414

	)

338 
	#PRIV_NET_LAGG
 415

	)

339 
	#PRIV_NET_GIF
 416

	)

340 
	#PRIV_NET_SETIFVNET
 417

	)

341 
	#PRIV_NET_SETIFDESCR
 418

	)

342 
	#PRIV_NET_SETIFFIB
 419

	)

343 
	#PRIV_NET_VXLAN
 420

	)

348 
	#PRIV_NET80211_GETKEY
 440

	)

349 
	#PRIV_NET80211_MANAGE
 441

	)

354 
	#PRIV_NETATALK_RESERVEDPORT
 450

	)

359 
	#PRIV_NETATM_CFG
 460

	)

360 
	#PRIV_NETATM_ADD
 461

	)

361 
	#PRIV_NETATM_DEL
 462

	)

362 
	#PRIV_NETATM_SET
 463

	)

367 
	#PRIV_NETBLUETOOTH_RAW
 470

	)

372 
	#PRIV_NETGRAPH_CONTROL
 480

	)

373 
	#PRIV_NETGRAPH_TTY
 481

	)

378 
	#PRIV_NETINET_RESERVEDPORT
 490

	)

379 
	#PRIV_NETINET_IPFW
 491

	)

380 
	#PRIV_NETINET_DIVERT
 492

	)

381 
	#PRIV_NETINET_PF
 493

	)

382 
	#PRIV_NETINET_DUMMYNET
 494

	)

383 
	#PRIV_NETINET_CARP
 495

	)

384 
	#PRIV_NETINET_MROUTE
 496

	)

385 
	#PRIV_NETINET_RAW
 497

	)

386 
	#PRIV_NETINET_GETCRED
 498

	)

387 
	#PRIV_NETINET_ADDRCTRL6
 499

	)

388 
	#PRIV_NETINET_ND6
 500

	)

389 
	#PRIV_NETINET_SCOPE6
 501

	)

390 
	#PRIV_NETINET_ALIFETIME6
 502

	)

391 
	#PRIV_NETINET_IPSEC
 503

	)

392 
	#PRIV_NETINET_REUSEPORT
 504

	)

393 
	#PRIV_NETINET_SETHDROPTS
 505

	)

394 
	#PRIV_NETINET_BINDANY
 506

	)

399 
	#PRIV_NETIPX_RESERVEDPORT
 520

	)

400 
	#PRIV_NETIPX_RAW
 521

	)

405 
	#PRIV_NETNCP
 530

	)

410 
	#PRIV_NETSMB
 540

	)

415 
	#PRIV_VM86_INTCALL
 550

	)

421 
	#_PRIV_RESERVED0
 560

	)

422 
	#_PRIV_RESERVED1
 561

	)

423 
	#_PRIV_RESERVED2
 562

	)

424 
	#_PRIV_RESERVED3
 563

	)

425 
	#_PRIV_RESERVED4
 564

	)

426 
	#_PRIV_RESERVED5
 565

	)

427 
	#_PRIV_RESERVED6
 566

	)

428 
	#_PRIV_RESERVED7
 567

	)

429 
	#_PRIV_RESERVED8
 568

	)

430 
	#_PRIV_RESERVED9
 569

	)

431 
	#_PRIV_RESERVED10
 570

	)

432 
	#_PRIV_RESERVED11
 571

	)

433 
	#_PRIV_RESERVED12
 572

	)

434 
	#_PRIV_RESERVED13
 573

	)

435 
	#_PRIV_RESERVED14
 574

	)

436 
	#_PRIV_RESERVED15
 575

	)

445 
	#PRIV_MODULE0
 600

	)

446 
	#PRIV_MODULE1
 601

	)

447 
	#PRIV_MODULE2
 602

	)

448 
	#PRIV_MODULE3
 603

	)

449 
	#PRIV_MODULE4
 604

	)

450 
	#PRIV_MODULE5
 605

	)

451 
	#PRIV_MODULE6
 606

	)

452 
	#PRIV_MODULE7
 607

	)

453 
	#PRIV_MODULE8
 608

	)

454 
	#PRIV_MODULE9
 609

	)

455 
	#PRIV_MODULE10
 610

	)

456 
	#PRIV_MODULE11
 611

	)

457 
	#PRIV_MODULE12
 612

	)

458 
	#PRIV_MODULE13
 613

	)

459 
	#PRIV_MODULE14
 614

	)

460 
	#PRIV_MODULE15
 615

	)

465 
	#PRIV_DDB_CAPTURE
 620

	)

470 
	#PRIV_NNPFS_DEBUG
 630

	)

475 
	#PRIV_CPUCTL_WRMSR
 640

	)

476 
	#PRIV_CPUCTL_UPDATE
 641

	)

481 
	#PRIV_C4B_RESET_CTLR
 650

	)

482 
	#PRIV_C4B_TRACE
 651

	)

487 
	#PRIV_AFS_ADMIN
 660

	)

488 
	#PRIV_AFS_DAEMON
 661

	)

493 
	#PRIV_RCTL_GET_RACCT
 670

	)

494 
	#PRIV_RCTL_GET_RULES
 671

	)

495 
	#PRIV_RCTL_GET_LIMITS
 672

	)

496 
	#PRIV_RCTL_ADD_RULE
 673

	)

497 
	#PRIV_RCTL_REMOVE_RULE
 674

	)

502 
	#PRIV_KMEM_READ
 680

	)

503 
	#PRIV_KMEM_WRITE
 681

	)

508 
	#_PRIV_HIGHEST
 682

	)

516 
	#PRIV_VALID
(
x
Ë((xË> 
_PRIV_LOWEST
 && (xË< 
_PRIV_HIGHEST
)

	)

518 #ifde‡
_KERNEL


526 
	gthªad
;

527 
	gu¸ed
;

528 
¥iv_check
(
thªad
 *
td
, 
¥iv
);

529 
¥iv_check_¸ed
(
u¸ed
 *
¸ed
, 
¥iv
, 
Êags
);

	@/usr/include/sys/proc.h

38 #i‚de‡
_SYS_PROC_H_


39 
	#_SYS_PROC_H_


	)

41 
	~<sys/ˇŒout.h
>

42 
	~<sys/evít.h
>

43 
	~<sys/c⁄dv¨.h
>

44 #i‚de‡
_KERNEL


45 
	~<sys/fûedesc.h
>

47 
	~<sys/queue.h
>

48 
	~<sys/_lock.h
>

49 
	~<sys/lock_¥ofûe.h
>

50 
	~<sys/_muãx.h
>

51 
	~<sys/osd.h
>

52 
	~<sys/¥i‹ôy.h
>

53 
	~<sys/π¥io.h
>

54 
	~<sys/runq.h
>

55 
	~<sys/ªsour˚.h
>

56 
	~<sys/sigio.h
>

57 
	~<sys/sig«l.h
>

58 
	~<sys/sig«lv¨.h
>

59 #i‚de‡
_KERNEL


60 
	~<sys/time.h
>

62 
	~<sys/p˝u.h
>

64 
	~<sys/uc⁄ãxt.h
>

65 
	~<sys/u¸ed.h
>

66 
	~<machöe/¥oc.h
>

76 
	s£ssi⁄
 {

77 
u_öt
 
	ms_cou¡
;

78 
¥oc
 *
	ms_Àadî
;

79 
vnode
 *
	ms_âyvp
;

80 
cdev_¥iv
 *
	ms_âydp
;

81 
ây
 *
	ms_âyp
;

82 
pid_t
 
	ms_sid
;

84 
	ms_logö
[
roundup
(
MAXLOGNAME
, ())];

85 
mtx
 
	ms_mtx
;

96 
	spgΩ
 {

97 
LIST_ENTRY
(
pgΩ
Ë
	mpg_hash
;

98 
LIST_HEAD
(, 
¥oc
Ë
	mpg_membîs
;

99 
£ssi⁄
 *
	mpg_£ssi⁄
;

100 
sigiﬁ°
 
	mpg_sigiﬁ°
;

101 
pid_t
 
	mpg_id
;

102 
	mpg_jobc
;

103 
mtx
 
	mpg_mtx
;

109 
	s∑rgs
 {

110 
u_öt
 
	m¨_ªf
;

111 
u_öt
 
	m¨_Àngth
;

112 
u_ch¨
 
	m¨_¨gs
[1];

160 
	g˝u£t
;

161 
	gfûem⁄
;

162 
	gkaioöfo
;

163 
	gkaudô_ªc‹d
;

164 
	gkdåa˚_¥oc
;

165 
	gkdåa˚_thªad
;

166 
	gmqueue_nŸifõr
;

167 
	g∆möfo
;

168 
	gp_sched
;

169 
	g¥oc
;

170 
	g¥ocdesc
;

171 
	gøc˘
;

172 
	gsbuf
;

173 
	g¶ìpqueue
;

174 
	gsysˇŒ_¨gs
;

175 
	gtd_sched
;

176 
	gthªad
;

177 
	gå≠‰ame
;

178 
	gtu∫°ûe
;

191 
	srußge_ext
 {

192 
uöt64_t
 
	mrux_ru¡ime
;

193 
uöt64_t
 
	mrux_uticks
;

194 
uöt64_t
 
	mrux_°icks
;

195 
uöt64_t
 
	mrux_ôicks
;

196 
uöt64_t
 
	mrux_uu
;

197 
uöt64_t
 
	mrux_su
;

198 
uöt64_t
 
	mrux_tu
;

206 
	sthªad
 {

207 
mtx
 *vﬁ©ûê
	mtd_lock
;

208 
¥oc
 *
	mtd_¥oc
;

209 
TAILQ_ENTRY
(
thªad
Ë
	mtd_∂i°
;

210 
TAILQ_ENTRY
(
thªad
Ë
	mtd_runq
;

211 
TAILQ_ENTRY
(
thªad
Ë
	mtd_¶pq
;

212 
TAILQ_ENTRY
(
thªad
Ë
	mtd_lockq
;

213 
LIST_ENTRY
(
thªad
Ë
	mtd_hash
;

214 
˝u£t
 *
	mtd_˝u£t
;

215 
£…d
 *
	mtd_£l
;

216 
¶ìpqueue
 *
	mtd_¶ìpqueue
;

217 
tu∫°ûe
 *
	mtd_tu∫°ûe
;

218 
æ_q_íåy
 *
	mtd_æqe
;

219 
umtx_q
 *
	mtd_umtxq
;

220 
lwpid_t
 
	mtd_tid
;

221 
sigqueue_t
 
	mtd_sigqueue
;

222 
	#td_sigli°
 
td_sigqueue
.
sq_sig«ls


	)

223 
u_ch¨
 
	mtd_Ànd_u£r_¥i
;

226 
	#td_°¨tzîo
 
td_Êags


	)

227 
	mtd_Êags
;

228 
	mtd_öhibô‹s
;

229 
	mtd_pÊags
;

230 
	mtd_dupfd
;

231 
	mtd_sqqueue
;

232 *
	mtd_wch™
;

233 c⁄° *
	mtd_wmesg
;

234 
u_ch¨
 
	mtd_œ°˝u
;

235 
u_ch¨
 
	mtd_⁄˝u
;

236 vﬁ©ûê
u_ch¨
 
	mtd_owïªem±
;

237 
u_ch¨
 
	mtd_tsqueue
;

238 
	mtd_locks
;

239 
	mtd_rw_æocks
;

240 
	mtd_lk_¶ocks
;

241 
	mtd_°›sched
;

242 
tu∫°ûe
 *
	mtd_blocked
;

243 c⁄° *
	mtd_lock«me
;

244 
LIST_HEAD
(, 
tu∫°ûe
Ë
	mtd_c⁄ã°ed
;

245 
lock_li°_íåy
 *
	mtd_¶ì∂ocks
;

246 
	mtd_öå_√°ög_Àvñ
;

247 
	mtd_pö√d
;

248 
u¸ed
 *
	mtd_u¸ed
;

249 
u_öt
 
	mtd_e°˝u
;

250 
	mtd_¶±ick
;

251 
	mtd_blktick
;

252 
	mtd_swvﬁtick
;

253 
u_öt
 
	mtd_cow
;

254 
rußge
 
	mtd_ru
;

255 
rußge_ext
 
	mtd_rux
;

256 
uöt64_t
 
	mtd_ö¸u¡ime
;

257 
uöt64_t
 
	mtd_ru¡ime
;

258 
u_öt
 
	mtd_±icks
;

259 
u_öt
 
	mtd_°icks
;

260 
u_öt
 
	mtd_ôicks
;

261 
u_öt
 
	mtd_uticks
;

262 
	mtd_öåvÆ
;

263 
sig£t_t
 
	mtd_ﬁdsigmask
;

264 vﬁ©ûê
u_öt
 
	mtd_gíî©i⁄
;

265 
°ack_t
 
	mtd_sig°k
;

266 
	mtd_xsig
;

267 
u_l⁄g
 
	mtd_¥ofû_addr
;

268 
u_öt
 
	mtd_¥ofû_ticks
;

269 
	mtd_«me
[
MAXCOMLEN
 + 1];

270 
fûe
 *
	mtd_Â›
;

271 
	mtd_dbgÊags
;

272 
ksigöfo
 
	mtd_dbgksi
;

273 
	mtd_ng_outbound
;

274 
osd
 
	mtd_osd
;

275 
vm_m≠_íåy
 *
	mtd_m≠_def_u£r
;

276 
pid_t
 
	mtd_dbg_f‹ked
;

277 
u_öt
 
	mtd_vp_ª£rv
;

278 
	mtd_no_¶ìpög
;

279 
	mtd_dom_º_idx
;

280 
	#td_ídzîo
 
td_sigmask


	)

283 
	#td_°¨tc›y
 
td_ídzîo


	)

284 
sig£t_t
 
	mtd_sigmask
;

285 
u_ch¨
 
	mtd_rqödex
;

286 
u_ch¨
 
	mtd_ba£_¥i
;

287 
u_ch¨
 
	mtd_¥i‹ôy
;

288 
u_ch¨
 
	mtd_¥i_˛ass
;

289 
u_ch¨
 
	mtd_u£r_¥i
;

290 
u_ch¨
 
	mtd_ba£_u£r_¥i
;

291 
	#td_ídc›y
 
td_pcb


	)

297 
pcb
 *
	mtd_pcb
;

299 
	mTDS_INACTIVE
 = 0x0,

300 
	mTDS_INHIBITED
,

301 
	mTDS_CAN_RUN
,

302 
	mTDS_RUNQ
,

303 
	mTDS_RUNNING


304 } 
	mtd_°©e
;

305 
ªgi°î_t
 
	mtd_ªtvÆ
[2];

306 
ˇŒout
 
	mtd_¶pˇŒout
;

307 
å≠‰ame
 *
	mtd_‰ame
;

308 
vm_obje˘
 *
	mtd_k°ack_obj
;

309 
vm_off£t_t
 
	mtd_k°ack
;

310 
	mtd_k°ack_∑ges
;

311 vﬁ©ûê
u_öt
 
	mtd_¸ô√°
;

312 
mdthªad
 
	mtd_md
;

313 
td_sched
 *
	mtd_sched
;

314 
kaudô_ªc‹d
 *
	mtd_¨
;

315 
Õohód
 
	mtd_Õrof
[2];

316 
kdåa˚_thªad
 *
	mtd_dåa˚
;

317 
	mtd_î∫o
;

318 
v√t
 *
	mtd_v√t
;

319 c⁄° *
	mtd_v√t_Õush
;

320 
å≠‰ame
 *
	mtd_öå_‰ame
;

321 
¥oc
 *
	mtd_rÂpwaô_p
;

322 
vm_∑ge
 **
	mtd_ma
;

323 
	mtd_ma_˙t
;

324 *
	mtd_su
;

325 
u_öt
 
	mtd_dbg_sc_code
;

326 
u_öt
 
	mtd_dbg_sc_«rg
;

327 *
	mtd_emuld©a
;

330 
mtx
 *
thªad_lock_block
(
thªad
 *);

331 
thªad_lock_unblock
(
thªad
 *, 
mtx
 *);

332 
thªad_lock_£t
(
thªad
 *, 
mtx
 *);

333 
	#THREAD_LOCK_ASSERT
(
td
, 
ty≥
) \

335 
mtx
 *
__m
 = (
td
)->
td_lock
; \

336 i‡(
__m
 !&
blocked_lock
) \

337 
	`mtx_as£π
(
__m
, (
ty≥
)); \

338 } 0)

	)

340 #ifde‡
INVARIANTS


341 
	#THREAD_LOCKPTR_ASSERT
(
td
, 
lock
) \

343 
mtx
 *
__m
 = (
td
)->
td_lock
; \

344 
	`KASSERT
((
__m
 =&
blocked_lock
 || __m =(
lock
)), \

345 ("Thªad %∞lock %∞d€†nŸ m©ch %p", 
td
, 
__m
, (
lock
))); \

346 } 0)

	)

348 
	#THREAD_LOCKPTR_ASSERT
(
td
, 
lock
)

	)

355 
	#TDF_BORROWING
 0x00000001

	)

356 
	#TDF_INPANIC
 0x00000002

	)

357 
	#TDF_INMEM
 0x00000004

	)

358 
	#TDF_SINTR
 0x00000008

	)

359 
	#TDF_TIMEOUT
 0x00000010

	)

360 
	#TDF_IDLETD
 0x00000020

	)

361 
	#TDF_CANSWAP
 0x00000040

	)

362 
	#TDF_SLEEPABORT
 0x00000080

	)

363 
	#TDF_KTH_SUSP
 0x00000100

	)

364 
	#TDF_ALLPROCSUSP
 0x00000200

	)

365 
	#TDF_BOUNDARY
 0x00000400

	)

366 
	#TDF_ASTPENDING
 0x00000800

	)

367 
	#TDF_TIMOFAIL
 0x00001000

	)

368 
	#TDF_SBDRY
 0x00002000

	)

369 
	#TDF_UPIBLOCKED
 0x00004000

	)

370 
	#TDF_NEEDSUSPCHK
 0x00008000

	)

371 
	#TDF_NEEDRESCHED
 0x00010000

	)

372 
	#TDF_NEEDSIGCHK
 0x00020000

	)

373 
	#TDF_NOLOAD
 0x00040000

	)

374 
	#TDF_UNUSED19
 0x00080000

	)

375 
	#TDF_THRWAKEUP
 0x00100000

	)

376 
	#TDF_UNUSED21
 0x00200000

	)

377 
	#TDF_SWAPINREQ
 0x00400000

	)

378 
	#TDF_UNUSED23
 0x00800000

	)

379 
	#TDF_SCHED0
 0x01000000

	)

380 
	#TDF_SCHED1
 0x02000000

	)

381 
	#TDF_SCHED2
 0x04000000

	)

382 
	#TDF_SCHED3
 0x08000000

	)

383 
	#TDF_ALRMPEND
 0x10000000

	)

384 
	#TDF_PROFPEND
 0x20000000

	)

385 
	#TDF_MACPEND
 0x40000000

	)

388 
	#TDB_SUSPEND
 0x00000001

	)

389 
	#TDB_XSIG
 0x00000002

	)

390 
	#TDB_USERWR
 0x00000004

	)

391 
	#TDB_SCE
 0x00000008

	)

392 
	#TDB_SCX
 0x00000010

	)

393 
	#TDB_EXEC
 0x00000020

	)

394 
	#TDB_FORK
 0x00000040

	)

396 
	#TDB_STOPATFORK
 0x00000080

	)

398 
	#TDB_CHILD
 0x00000100

	)

404 
	#TDP_OLDMASK
 0x00000001

	)

405 
	#TDP_INKTR
 0x00000002

	)

406 
	#TDP_INKTRACE
 0x00000004

	)

407 
	#TDP_BUFNEED
 0x00000008

	)

408 
	#TDP_COWINPROGRESS
 0x00000010

	)

409 
	#TDP_ALTSTACK
 0x00000020

	)

410 
	#TDP_DEADLKTREAT
 0x00000040

	)

411 
	#TDP_NOFAULTING
 0x00000080

	)

412 
	#TDP_UNUSED9
 0x00000100

	)

413 
	#TDP_OWEUPC
 0x00000200

	)

414 
	#TDP_ITHREAD
 0x00000400

	)

415 
	#TDP_SYNCIO
 0x00000800

	)

416 
	#TDP_SCHED1
 0x00001000

	)

417 
	#TDP_SCHED2
 0x00002000

	)

418 
	#TDP_SCHED3
 0x00004000

	)

419 
	#TDP_SCHED4
 0x00008000

	)

420 
	#TDP_GEOM
 0x00010000

	)

421 
	#TDP_SOFTDEP
 0x00020000

	)

422 
	#TDP_NORUNNINGBUF
 0x00040000

	)

423 
	#TDP_WAKEUP
 0x00080000

	)

424 
	#TDP_INBDFLUSH
 0x00100000

	)

425 
	#TDP_KTHREAD
 0x00200000

	)

426 
	#TDP_CALLCHAIN
 0x00400000

	)

427 
	#TDP_IGNSUSP
 0x00800000

	)

428 
	#TDP_AUDITREC
 0x01000000

	)

429 
	#TDP_RFPPWAIT
 0x02000000

	)

430 
	#TDP_RESETSPUR
 0x04000000

	)

431 
	#TDP_NERRNO
 0x08000000

	)

432 
	#TDP_UIOHELD
 0x10000000

	)

433 
	#TDP_UNUSED29
 0x20000000

	)

434 
	#TDP_EXECVMSPC
 0x40000000

	)

440 
	#TDI_SUSPENDED
 0x0001

	)

441 
	#TDI_SLEEPING
 0x0002

	)

442 
	#TDI_SWAPPED
 0x0004

	)

443 
	#TDI_LOCK
 0x0008

	)

444 
	#TDI_IWAIT
 0x0010

	)

446 
	#TD_IS_SLEEPING
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SLEEPING
)

	)

447 
	#TD_ON_SLEEPQ
(
td
Ë(—d)->
td_wch™
 !
NULL
)

	)

448 
	#TD_IS_SUSPENDED
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SUSPENDED
)

	)

449 
	#TD_IS_SWAPPED
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_SWAPPED
)

	)

450 
	#TD_ON_LOCK
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_LOCK
)

	)

451 
	#TD_AWAITING_INTR
(
td
Ë(—d)->
td_öhibô‹s
 & 
TDI_IWAIT
)

	)

452 
	#TD_IS_RUNNING
(
td
Ë(—d)->
td_°©e
 =
TDS_RUNNING
)

	)

453 
	#TD_ON_RUNQ
(
td
Ë(—d)->
td_°©e
 =
TDS_RUNQ
)

	)

454 
	#TD_CAN_RUN
(
td
Ë(—d)->
td_°©e
 =
TDS_CAN_RUN
)

	)

455 
	#TD_IS_INHIBITED
(
td
Ë(—d)->
td_°©e
 =
TDS_INHIBITED
)

	)

456 
	#TD_ON_UPILOCK
(
td
Ë(—d)->
td_Êags
 & 
TDF_UPIBLOCKED
)

	)

457 
	#TD_IS_IDLETHREAD
(
td
Ë(—d)->
td_Êags
 & 
TDF_IDLETD
)

	)

460 
	#TD_SET_INHIB
(
td
, 
öhib
) do { \

461 (
td
)->
td_°©e
 = 
TDS_INHIBITED
; \

462 (
td
)->
td_öhibô‹s
 |(
öhib
); \

463 } 0)

	)

465 
	#TD_CLR_INHIB
(
td
, 
öhib
) do { \

466 i‡(((
td
)->
td_öhibô‹s
 & (
öhib
)) && \

467 (((
td
)->
td_öhibô‹s
 &~(
öhib
)) == 0)) \

468 (
td
)->
td_°©e
 = 
TDS_CAN_RUN
; \

469 } 0)

	)

471 
	#TD_SET_SLEEPING
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SLEEPING
)

	)

472 
	#TD_SET_SWAPPED
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SWAPPED
)

	)

473 
	#TD_SET_LOCK
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_LOCK
)

	)

474 
	#TD_SET_SUSPENDED
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_SUSPENDED
)

	)

475 
	#TD_SET_IWAIT
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_IWAIT
)

	)

476 
	#TD_SET_EXITING
(
td
Ë
	`TD_SET_INHIB
(—d), 
TDI_EXITING
)

	)

478 
	#TD_CLR_SLEEPING
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SLEEPING
)

	)

479 
	#TD_CLR_SWAPPED
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SWAPPED
)

	)

480 
	#TD_CLR_LOCK
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_LOCK
)

	)

481 
	#TD_CLR_SUSPENDED
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_SUSPENDED
)

	)

482 
	#TD_CLR_IWAIT
(
td
Ë
	`TD_CLR_INHIB
(—d), 
TDI_IWAIT
)

	)

484 
	#TD_SET_RUNNING
(
td
Ë—d)->
td_°©e
 = 
TDS_RUNNING


	)

485 
	#TD_SET_RUNQ
(
td
Ë—d)->
td_°©e
 = 
TDS_RUNQ


	)

486 
	#TD_SET_CAN_RUN
(
td
Ë—d)->
td_°©e
 = 
TDS_CAN_RUN


	)

491 
	s¥oc
 {

492 
LIST_ENTRY
(
¥oc
Ë
	mp_li°
;

493 
TAILQ_HEAD
(, 
thªad
Ë
	mp_thªads
;

494 
mtx
 
	mp_¶ock
;

495 
u¸ed
 *
	mp_u¸ed
;

496 
fûedesc
 *
	mp_fd
;

497 
fûedesc_to_Àadî
 *
	mp_fdtﬁ
;

498 
p°©s
 *
	mp_°©s
;

499 
∂imô
 *
	mp_limô
;

500 
ˇŒout
 
	mp_limco
;

501 
siga˘s
 *
	mp_siga˘s
;

503 
	mp_Êag
;

504 
	mp_Êag2
;

506 
	mPRS_NEW
 = 0,

507 
	mPRS_NORMAL
,

508 
	mPRS_ZOMBIE


509 } 
	mp_°©e
;

510 
pid_t
 
	mp_pid
;

511 
LIST_ENTRY
(
¥oc
Ë
	mp_hash
;

512 
LIST_ENTRY
(
¥oc
Ë
	mp_pgli°
;

513 
¥oc
 *
	mp_µå
;

514 
LIST_ENTRY
(
¥oc
Ë
	mp_siblög
;

515 
LIST_HEAD
(, 
¥oc
Ë
	mp_chûdªn
;

516 
mtx
 
	mp_mtx
;

517 
ksigöfo
 *
	mp_ksi
;

518 
sigqueue_t
 
	mp_sigqueue
;

519 
	#p_sigli°
 
p_sigqueue
.
sq_sig«ls


	)

522 
	#p_°¨tzîo
 
p_›pid


	)

523 
pid_t
 
	mp_›pid
;

524 
vm•a˚
 *
	mp_vm•a˚
;

525 
u_öt
 
	mp_swtick
;

526 
ôimîvÆ
 
	mp_ªÆtimî
;

527 
rußge
 
	mp_ru
;

528 
rußge_ext
 
	mp_rux
;

529 
rußge_ext
 
	mp_¸ux
;

530 
	mp_¥o·hªads
;

531 vﬁ©ûê
	mp_exôthªads
;

532 
	mp_åa˚Êag
;

533 
vnode
 *
	mp_åa˚vp
;

534 
u¸ed
 *
	mp_åa˚¸ed
;

535 
vnode
 *
	mp_ãxtvp
;

536 
u_öt
 
	mp_lock
;

537 
sigiﬁ°
 
	mp_sigiﬁ°
;

538 
	mp_sig∑ª¡
;

539 
	mp_sig
;

540 
u_l⁄g
 
	mp_code
;

541 
u_öt
 
	mp_°›s
;

542 
u_öt
 
	mp_°y≥
;

543 
	mp_°ï
;

544 
u_ch¨
 
	mp_pfsÊags
;

545 
∆möfo
 *
	mp_∆möfo
;

546 
kaioöfo
 *
	mp_aioöfo
;

547 
thªad
 *
	mp_sögÀthªad
;

548 
	mp_su•cou¡
;

549 
thªad
 *
	mp_xthªad
;

550 
	mp_bound¨y_cou¡
;

551 
	mp_≥ndög˙t
;

552 
ôimîs
 *
	mp_ôimîs
;

553 
¥ocdesc
 *
	mp_¥ocdesc
;

555 
	#p_ídzîo
 
p_magic


	)

558 
	#p_°¨tc›y
 
p_ídzîo


	)

559 
u_öt
 
	mp_magic
;

560 
	mp_o§ñ
;

562 
	mp_comm
[
MAXCOMLEN
 + 1];

563 *
	mp_∑d0
;

564 
sy£¡vec
 *
	mp_sy£¡
;

565 
∑rgs
 *
	mp_¨gs
;

566 
æim_t
 
	mp_˝ulimô
;

567 sig√d 
	mp_ni˚
;

568 
	mp_fibnum
;

570 
	#p_ídc›y
 
p_x°©


	)

572 
u_sh‹t
 
	mp_x°©
;

573 
k∆i°
 
	mp_kli°
;

574 
	mp_numthªads
;

575 
md¥oc
 
	mp_md
;

576 
ˇŒout
 
	mp_ôˇŒout
;

577 
u_sh‹t
 
	mp_acÊag
;

578 
¥oc
 *
	mp_≥îs
;

579 
¥oc
 *
	mp_Àadî
;

580 *
	mp_emuld©a
;

581 
œbñ
 *
	mp_œbñ
;

582 
p_sched
 *
	mp_sched
;

583 
STAILQ_HEAD
(, 
kå_ªque°
Ë
	mp_kå
;

584 
LIST_HEAD
(, 
mqueue_nŸifõr
Ë
	mp_mqnŸifõr
;

585 
kdåa˚_¥oc
 *
	mp_dåa˚
;

586 
cv
 
	mp_pwaô
;

587 
cv
 
	mp_dbgwaô
;

589 
uöt64_t
 
	mp_¥ev_ru¡ime
;

590 
øc˘
 *
	mp_øc˘
;

591 
u_ch¨
 
	mp_thrŸéed
;

598 
LIST_ENTRY
(
¥oc
Ë
	mp_‹ph™
;

599 
LIST_HEAD
(, 
¥oc
Ë
	mp_‹ph™s
;

600 
u_öt
 
	mp_åìÊag
;

601 
¥oc
 *
	mp_ª≠î
;

602 
LIST_HEAD
(, 
¥oc
Ë
	mp_ª≠li°
;

604 
LIST_ENTRY
(
¥oc
Ë
	mp_ª≠siblög
;

606 
pid_t
 
	mp_ª≠subåì
;

609 
pgΩ
 *
	mp_pgΩ
;

610 
fûem⁄
 *
	mp_fûem⁄
;

613 
	#p_£ssi⁄
 
p_pgΩ
->
pg_£ssi⁄


	)

614 
	#p_pgid
 
p_pgΩ
->
pg_id


	)

616 
	#NOCPU
 0xf‡

	)

618 
	#PROC_SLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¶ock
)

	)

619 
	#PROC_SUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¶ock
)

	)

620 
	#PROC_SLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¶ock
, (ty≥))

	)

622 
	#PROC_STATLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¶ock
)

	)

623 
	#PROC_STATUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¶ock
)

	)

624 
	#PROC_STATLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¶ock
, (ty≥))

	)

626 
	#PROC_ITIMLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¶ock
)

	)

627 
	#PROC_ITIMUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¶ock
)

	)

628 
	#PROC_ITIMLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¶ock
, (ty≥))

	)

630 
	#PROC_PROFLOCK
(
p
Ë
	`mtx_lock_•ö
(&’)->
p_¶ock
)

	)

631 
	#PROC_PROFUNLOCK
(
p
Ë
	`mtx_u∆ock_•ö
(&’)->
p_¶ock
)

	)

632 
	#PROC_PROFLOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_¶ock
, (ty≥))

	)

635 
	#P_ADVLOCK
 0x00001

	)

636 
	#P_CONTROLT
 0x00002

	)

637 
	#P_KTHREAD
 0x00004

	)

638 
	#P_FOLLOWFORK
 0x00008

	)

639 
	#P_PPWAIT
 0x00010

	)

640 
	#P_PROFIL
 0x00020

	)

641 
	#P_STOPPROF
 0x00040

	)

642 
	#P_HADTHREADS
 0x00080

	)

643 
	#P_SUGID
 0x00100

	)

644 
	#P_SYSTEM
 0x00200

	)

645 
	#P_SINGLE_EXIT
 0x00400

	)

646 
	#P_TRACED
 0x00800

	)

647 
	#P_WAITED
 0x01000

	)

648 
	#P_WEXIT
 0x02000

	)

649 
	#P_EXEC
 0x04000

	)

650 
	#P_WKILLED
 0x08000

	)

651 
	#P_CONTINUED
 0x10000

	)

652 
	#P_STOPPED_SIG
 0x20000

	)

653 
	#P_STOPPED_TRACE
 0x40000

	)

654 
	#P_STOPPED_SINGLE
 0x80000

	)

655 
	#P_PROTECTED
 0x100000

	)

656 
	#P_SIGEVENT
 0x200000

	)

657 
	#P_SINGLE_BOUNDARY
 0x400000

	)

658 
	#P_HWPMC
 0x800000

	)

659 
	#P_JAILED
 0x1000000

	)

660 
	#P_TOTAL_STOP
 0x2000000

	)

661 
	#P_INEXEC
 0x4000000

	)

662 
	#P_STATCHILD
 0x8000000

	)

663 
	#P_INMEM
 0x10000000

	)

664 
	#P_SWAPPINGOUT
 0x20000000

	)

665 
	#P_SWAPPINGIN
 0x40000000

	)

666 
	#P_PPTRACE
 0x80000000

	)

668 
	#P_STOPPED
 (
P_STOPPED_SIG
|
P_STOPPED_SINGLE
|
P_STOPPED_TRACE
)

	)

669 
	#P_SHOULDSTOP
(
p
Ë(’)->
p_Êag
 & 
P_STOPPED
)

	)

670 
	#P_KILLED
(
p
Ë(’)->
p_Êag
 & 
P_WKILLED
)

	)

673 
	#P2_INHERIT_PROTECTED
 0x00000001

	)

674 
	#P2_NOTRACE
 0x00000002

	)

675 
	#P2_NOTRACE_EXEC
 0x00000004

	)

676 
	#P2_AST_SU
 0x00000008

	)

679 
	#P_TREE_ORPHANED
 0x00000001

	)

680 
	#P_TREE_FIRST_ORPHAN
 0x00000002

	)

682 
	#P_TREE_REAPER
 0x00000004

	)

688 
	#SIDL
 1

	)

689 
	#SRUN
 2

	)

690 
	#SSLEEP
 3

	)

691 
	#SSTOP
 4

	)

692 
	#SZOMB
 5

	)

693 
	#SWAIT
 6

	)

694 
	#SLOCK
 7

	)

696 
	#P_MAGIC
 0xbìfÁ˚

	)

698 #ifde‡
_KERNEL


701 
	#SW_TYPE_MASK
 0xf‡

	)

702 
	#SWT_NONE
 0

	)

703 
	#SWT_PREEMPT
 1

	)

704 
	#SWT_OWEPREEMPT
 2

	)

705 
	#SWT_TURNSTILE
 3

	)

706 
	#SWT_SLEEPQ
 4

	)

707 
	#SWT_SLEEPQTIMO
 5

	)

708 
	#SWT_RELINQUISH
 6

	)

709 
	#SWT_NEEDRESCHED
 7

	)

710 
	#SWT_IDLE
 8

	)

711 
	#SWT_IWAIT
 9

	)

712 
	#SWT_SUSPEND
 10

	)

713 
	#SWT_REMOTEPREEMPT
 11

	)

714 
	#SWT_REMOTEWAKEIDLE
 12

	)

715 
	#SWT_COUNT
 13

	)

717 
	#SW_VOL
 0x0100

	)

718 
	#SW_INVOL
 0x0200

	)

719 
	#SW_PREEMPT
 0x0400

	)

722 
	#SINGLE_NO_EXIT
 0

	)

723 
	#SINGLE_EXIT
 1

	)

724 
	#SINGLE_BOUNDARY
 2

	)

725 
	#SINGLE_ALLPROC
 3

	)

727 #ifde‡
MALLOC_DECLARE


728 
MALLOC_DECLARE
(
M_PARGS
);

729 
MALLOC_DECLARE
(
M_PGRP
);

730 
MALLOC_DECLARE
(
M_SESSION
);

731 
MALLOC_DECLARE
(
M_SUBPROC
);

734 
	#FOREACH_PROC_IN_SYSTEM
(
p
) \

735 
	`LIST_FOREACH
((
p
), &
ÆÕroc
, 
p_li°
)

	)

736 
	#FOREACH_THREAD_IN_PROC
(
p
, 
td
) \

737 
	`TAILQ_FOREACH
((
td
), &(
p
)->
p_thªads
, 
td_∂i°
)

	)

739 
	#FIRST_THREAD_IN_PROC
(
p
Ë
	`TAILQ_FIRST
(&’)->
p_thªads
)

	)

745 
	#PID_MAX
 99999

	)

746 
	#NO_PID
 100000

	)

747 
pid_t
 
pid_max
;

749 
	#SESS_LEADER
(
p
Ë(’)->
p_£ssi⁄
->
s_Àadî
 =’))

	)

752 
	#STOPEVENT
(
p
, 
e
, 
v
) do { \

753 i‡((
p
)->
p_°›s
 & (
e
)) { \

754 
	`PROC_LOCK
(
p
); \

755 
	`°›evít
((
p
), (
e
), (
v
)); \

756 
	`PROC_UNLOCK
(
p
); \

758 } 0)

	)

759 
	#_STOPEVENT
(
p
, 
e
, 
v
) do { \

760 
	`PROC_LOCK_ASSERT
(
p
, 
MA_OWNED
); \

761 
	`WITNESS_WARN
(
WARN_GIANTOK
 | 
WARN_SLEEPOK
, &
p
->
p_mtx
.
lock_obje˘
, \

762 "checkög st›evíà%d", (
e
)); \

763 i‡((
p
)->
p_°›s
 & (
e
)) \

764 
	`°›evít
((
p
), (
e
), (
v
)); \

765 } 0)

	)

768 
	#PROC_LOCK
(
p
Ë
	`mtx_lock
(&’)->
p_mtx
)

	)

769 
	#PROC_TRYLOCK
(
p
Ë
	`mtx_åylock
(&’)->
p_mtx
)

	)

770 
	#PROC_UNLOCK
(
p
Ë
	`mtx_u∆ock
(&’)->
p_mtx
)

	)

771 
	#PROC_LOCKED
(
p
Ë
	`mtx_ow√d
(&’)->
p_mtx
)

	)

772 
	#PROC_LOCK_ASSERT
(
p
, 
ty≥
Ë
	`mtx_as£π
(&’)->
p_mtx
, (ty≥))

	)

775 
	#PGRP_LOCK
(
pg
Ë
	`mtx_lock
(&’g)->
pg_mtx
)

	)

776 
	#PGRP_UNLOCK
(
pg
Ë
	`mtx_u∆ock
(&’g)->
pg_mtx
)

	)

777 
	#PGRP_LOCKED
(
pg
Ë
	`mtx_ow√d
(&’g)->
pg_mtx
)

	)

778 
	#PGRP_LOCK_ASSERT
(
pg
, 
ty≥
Ë
	`mtx_as£π
(&’g)->
pg_mtx
, (ty≥))

	)

780 
	#PGRP_LOCK_PGSIGNAL
(
pg
) do { \

781 i‡((
pg
Ë!
NULL
) \

782 
	`PGRP_LOCK
(
pg
); \

783 } 0)

	)

784 
	#PGRP_UNLOCK_PGSIGNAL
(
pg
) do { \

785 i‡((
pg
Ë!
NULL
) \

786 
	`PGRP_UNLOCK
(
pg
); \

787 } 0)

	)

790 
	#SESS_LOCK
(
s
Ë
	`mtx_lock
(&(s)->
s_mtx
)

	)

791 
	#SESS_UNLOCK
(
s
Ë
	`mtx_u∆ock
(&(s)->
s_mtx
)

	)

792 
	#SESS_LOCKED
(
s
Ë
	`mtx_ow√d
(&(s)->
s_mtx
)

	)

793 
	#SESS_LOCK_ASSERT
(
s
, 
ty≥
Ë
	`mtx_as£π
(&(s)->
s_mtx
, (ty≥))

	)

796 
	#PHOLD
(
p
) do { \

797 
	`PROC_LOCK
(
p
); \

798 
	`_PHOLD
(
p
); \

799 
	`PROC_UNLOCK
(
p
); \

800 } 0)

	)

801 
	#_PHOLD
(
p
) do { \

802 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

803 
	`KASSERT
(!((
p
)->
p_Êag
 & 
P_WEXIT
Ë|| (pË=
cuΩroc
, \

805 (
p
)->
p_lock
++; \

806 i‡(((
p
)->
p_Êag
 & 
P_INMEM
) == 0) \

807 
	`Áu…ö
((
p
)); \

808 } 0)

	)

809 
	#PROC_ASSERT_HELD
(
p
) do { \

810 
	`KASSERT
((
p
)->
p_lock
 > 0, ("processÇot held")); \

811 } 0)

	)

813 
	#PRELE
(
p
) do { \

814 
	`PROC_LOCK
((
p
)); \

815 
	`_PRELE
((
p
)); \

816 
	`PROC_UNLOCK
((
p
)); \

817 } 0)

	)

818 
	#_PRELE
(
p
) do { \

819 
	`PROC_LOCK_ASSERT
((
p
), 
MA_OWNED
); \

820 
	`PROC_ASSERT_HELD
(
p
); \

821 (--(
p
)->
p_lock
); \

822 i‡(((
p
)->
p_Êag
 & 
P_WEXIT
Ë&& (p)->
p_lock
 == 0) \

823 
	`wakeup
(&(
p
)->
p_lock
); \

824 } 0)

	)

825 
	#PROC_ASSERT_NOT_HELD
(
p
) do { \

826 
	`KASSERT
((
p
)->
p_lock
 == 0, ("process held")); \

827 } 0)

	)

830 
	#thªad_ß„tosw≠out
(
td
Ë(—d)->
td_Êags
 & 
TDF_CANSWAP
)

	)

833 
	#THREAD_NO_SLEEPING
(Ë((
cuπhªad
)->
td_no_¶ìpög
++)

	)

835 
	#THREAD_SLEEPING_OK
(Ë((
cuπhªad
)->
td_no_¶ìpög
--)

	)

837 
	#THREAD_CAN_SLEEP
(Ë((
cuπhªad
)->
td_no_¶ìpög
 =0)

	)

839 
	#PIDHASH
(
pid
Ë(&
pidhashtbl
[’idË& 
pidhash
])

	)

840 
LIST_HEAD
(
pidhashhód
, 
¥oc
Ë*
pidhashtbl
;

841 
u_l⁄g
 
pidhash
;

842 
	#TIDHASH
(
tid
Ë(&
tidhashtbl
[—idË& 
tidhash
])

	)

843 
LIST_HEAD
(
tidhashhód
, 
thªad
Ë*
tidhashtbl
;

844 
u_l⁄g
 
tidhash
;

845 
rwlock
 
tidhash_lock
;

847 
	#PGRPHASH
(
pgid
Ë(&
pgΩhashtbl
[’gidË& 
pgΩhash
])

	)

848 
LIST_HEAD
(
pgΩhashhód
, 
pgΩ
Ë*
pgΩhashtbl
;

849 
u_l⁄g
 
pgΩhash
;

851 
sx
 
ÆÕroc_lock
;

852 
ÆÕroc_gí
;

853 
sx
 
¥o˘ªe_lock
;

854 
mtx
 
µìrs_lock
;

855 
¥oc
 
¥oc0
;

856 
thªad
 
thªad0
;

857 
vm•a˚
 
vm•a˚0
;

858 
hogticks
;

859 
œ°pid
;

860 
≈rocs
, 
max¥oc
;

861 
max¥o˝îuid
;

862 
u_l⁄g
 
ps_¨g_ˇche_limô
;

864 
LIST_HEAD
(
¥o˛i°
, 
¥oc
);

865 
TAILQ_HEAD
(
¥ocqueue
, 
¥oc
);

866 
TAILQ_HEAD
(
thªadqueue
, 
thªad
);

867 
¥o˛i°
 
ÆÕroc
;

868 
¥o˛i°
 
zomb¥oc
;

869 
¥oc
 *
öô¥oc
, *
∑gïroc
;

871 
uma_z⁄e
 *
¥oc_z⁄e
;

873 
¥oc
 *
pföd
(
pid_t
);

874 
¥oc
 *
pföd_locked
(
pid_t
 
pid
);

875 
pgΩ
 *
pgföd
(
pid_t
);

876 
¥oc
 *
zpföd
(
pid_t
);

881 
	#PGET_HOLD
 0x00001

	)

882 
	#PGET_CANSEE
 0x00002

	)

883 
	#PGET_CANDEBUG
 0x00004

	)

884 
	#PGET_ISCURRENT
 0x00008

	)

885 
	#PGET_NOTWEXIT
 0x00010

	)

886 
	#PGET_NOTINEXEC
 0x00020

	)

887 
	#PGET_NOTID
 0x00040

	)

889 
	#PGET_WANTREAD
 (
PGET_HOLD
 | 
PGET_CANDEBUG
 | 
PGET_NOTWEXIT
)

	)

891 
pgë
(
pid_t
 
pid
, 
Êags
, 
¥oc
 **
µ
);

893 
a°
(
å≠‰ame
 *
‰amï
);

894 
thªad
 *
choo£thªad
();

895 
¸_ˇnsig«l
(
u¸ed
 *
¸ed
, 
¥oc
 *¥oc, 
signum
);

896 
íãΩgΩ
(
¥oc
 *
p
, 
pid_t
 
pgid
, 
pgΩ
 *pgrp,

897 
£ssi⁄
 *
£ss
);

898 
íãπhi•gΩ
(
¥oc
 *
p
, 
pgΩ
 *pgrp);

899 
Áu…ö
(
¥oc
 *
p
);

900 
fixjobc
(
¥oc
 *
p
, 
pgΩ
 *pgΩ, 
íãrög
);

901 
f‹k1
(
thªad
 *, , , 
¥oc
 **, *, );

902 
f‹k_exô
((*)(*, 
å≠‰ame
 *), *,

903 
å≠‰ame
 *);

904 
	`f‹k_ªtu∫
(
thªad
 *, 
å≠‰ame
 *);

905 
	`ö„ri‹
(
¥oc
 *
p
);

906 
	`kîn_yõld
();

907 
	`kick_¥oc0
();

908 
	`ÀavïgΩ
(
¥oc
 *
p
);

909 
	`maybe_¥ìm±
(
thªad
 *
td
);

910 
	`maybe_yõld
();

911 
	`mi_swôch
(
Êags
, 
thªad
 *
√wtd
);

912 
	`p_ˇndebug
(
thªad
 *
td
, 
¥oc
 *
p
);

913 
	`p_ˇn£e
(
thªad
 *
td
, 
¥oc
 *
p
);

914 
	`p_ˇnsched
(
thªad
 *
td
, 
¥oc
 *
p
);

915 
	`p_ˇnsig«l
(
thªad
 *
td
, 
¥oc
 *
p
, 
signum
);

916 
	`p_ˇnwaô
(
thªad
 *
td
, 
¥oc
 *
p
);

917 
∑rgs
 *
	`∑rgs_Æloc
(
Àn
);

918 
	`∑rgs_dr›
(
∑rgs
 *
∑
);

919 
	`∑rgs_hﬁd
(
∑rgs
 *
∑
);

920 
	`¥oc_gë¨gv
(
thªad
 *
td
, 
¥oc
 *
p
, 
sbuf
 *
sb
);

921 
	`¥oc_gëauxv
(
thªad
 *
td
, 
¥oc
 *
p
, 
sbuf
 *
sb
);

922 
	`¥oc_gëívv
(
thªad
 *
td
, 
¥oc
 *
p
, 
sbuf
 *
sb
);

923 
	`¥ocöô
();

924 
	`¥oc_lökup0
(
¥oc
 *
p
, 
thªad
 *
td
);

925 
	`¥oc_lökup
(
¥oc
 *
p
, 
thªad
 *
td
);

926 
¥oc
 *
	`¥oc_ªÆ∑ª¡
(¥o¯*
chûd
);

927 
	`¥oc_ª≠
(
thªad
 *
td
, 
¥oc
 *
p
, *
°©us
, 
›ti⁄s
);

928 
	`¥oc_ª∑ª¡
(
¥oc
 *
chûd
, ¥o¯*
√w∑ª¡
);

929 
p°©s
 *
	`p°©s_Æloc
();

930 
	`p°©s_f‹k
(
p°©s
 *
§c
, p°©†*
d°
);

931 
	`p°©s_‰ì
(
p°©s
 *
ps
);

932 
	`ª≠î_ab™d⁄_chûdªn
(
¥oc
 *
p
, 
boﬁ
 
exôög
);

933 
	`£cuªÀvñ_ge
(
u¸ed
 *
¸
, 
Àvñ
);

934 
	`£cuªÀvñ_gt
(
u¸ed
 *
¸
, 
Àvñ
);

935 
	`£ss_hﬁd
(
£ssi⁄
 *);

936 
	`£ss_ªÀa£
(
£ssi⁄
 *);

937 
	`£åu¬abÀ
(
thªad
 *);

938 
	`£tsugid
(
¥oc
 *
p
);

939 
	`should_yõld
();

940 
	`sig⁄°ack
(
size_t
 
•
);

941 
	`°›evít
(
¥oc
 *, 
u_öt
, u_int);

942 
thªad
 *
	`tdföd
(
lwpid_t
, 
pid_t
);

943 
	`thªadöô
();

944 
	`tidhash_add
(
thªad
 *);

945 
	`tidhash_ªmove
(
thªad
 *);

946 
	`˝u_idÀ
();

947 
	`˝u_idÀ_wakeup
();

948 (*
˝u_idÀ_hook
)(
sbötime_t
);

949 
	`˝u_swôch
(
thªad
 *, thªad *, 
mtx
 *);

950 
	$˝u_throw
(
thªad
 *, thªad *Ë
__dód2
;

951 
	`un¶ìp
(
thªad
 *);

952 
	`u£ºë
(
thªad
 *, 
å≠‰ame
 *);

954 
	`˝u_exô
(
thªad
 *);

955 
	$exô1
(
thªad
 *, Ë
__dód2
;

956 
	`˝u_„tch_sysˇŒ_¨gs
(
thªad
 *
td
, 
sysˇŒ_¨gs
 *
ß
);

957 
	`˝u_f‹k
(
thªad
 *, 
¥oc
 *, thread *, );

958 
	`˝u_£t_f‹k_h™dÀr
(
thªad
 *, (*)(*), *);

959 
	`˝u_£t_sysˇŒ_ªtvÆ
(
thªad
 *, );

960 
	`˝u_£t_upˇŒ
(
thªad
 *
td
, thªad *
td0
);

961 
	`˝u_£t_upˇŒ_k£
(
thªad
 *, (*)(*), *,

962 
°ack_t
 *);

963 
	`˝u_£t_u£r_és
(
thªad
 *, *
és_ba£
);

964 
	`˝u_thªad_Æloc
(
thªad
 *);

965 
	`˝u_thªad_˛ón
(
thªad
 *);

966 
	`˝u_thªad_exô
(
thªad
 *);

967 
	`˝u_thªad_‰ì
(
thªad
 *);

968 
	`˝u_thªad_sw≠ö
(
thªad
 *);

969 
	`˝u_thªad_sw≠out
(
thªad
 *);

970 
thªad
 *
	`thªad_Æloc
(
∑ges
);

971 
	`thªad_Æloc_°ack
(
thªad
 *, 
∑ges
);

972 
	`thªad_¸óã
(
thªad
 *
td
, 
π¥io
 *
πp
,

973 (*
öôülize_thªad
)(
thªad
 *, *), *
thunk
);

974 
	$thªad_exô
(Ë
__dód2
;

975 
	`thªad_‰ì
(
thªad
 *
td
);

976 
	`thªad_lök
(
thªad
 *
td
, 
¥oc
 *
p
);

977 
	`thªad_ª≠
();

978 
	`thªad_sögÀ
(
¥oc
 *
p
, 
how
);

979 
	`thªad_sögÀ_íd
(
¥oc
 *
p
, 
how
);

980 
	`thªad_°ash
(
thªad
 *
td
);

981 
	`thªad_°›≥d
(
¥oc
 *
p
);

982 
	`chûd¥oc_°›≥d
(
¥oc
 *
chûd
, 
ªas⁄
);

983 
	`chûd¥oc_c⁄töued
(
¥oc
 *
chûd
);

984 
	`chûd¥oc_exôed
(
¥oc
 *
chûd
);

985 
	`thªad_su•íd_check
(
how
);

986 
boﬁ
 
	`thªad_su•íd_check_√eded
();

987 
	`thªad_su•íd_swôch
(
thªad
 *, 
¥oc
 *
p
);

988 
	`thªad_su•íd_⁄e
(
thªad
 *
td
);

989 
	`thªad_u∆ök
(
thªad
 *
td
);

990 
	`thªad_unsu•íd
(
¥oc
 *
p
);

991 
	`thªad_waô
(
¥oc
 *
p
);

992 
thªad
 *
	`thªad_föd
(
¥oc
 *
p
, 
lwpid_t
 
tid
);

994 
	`°›_Æl_¥oc
();

995 
	`ªsume_Æl_¥oc
();

997 
__ölöe
 

998 
	$cuπhªad_pÊags_£t
(
Êags
)

1000 
thªad
 *
td
;

1001 
ßve
;

1003 
td
 = 
cuπhªad
;

1004 
ßve
 = ~
Êags
 | (
td
->
td_pÊags
 & flags);

1005 
td
->
td_pÊags
 |
Êags
;

1006  (
ßve
);

1007 
	}
}

1009 
__ölöe
 

1010 
	$cuπhªad_pÊags_ª°‹e
(
ßve
)

1013 
cuπhªad
->
td_pÊags
 &
ßve
;

1014 
	}
}

	@/usr/include/sys/protosw.h

33 #i‚de‡
_SYS_PROTOSW_H_


34 
	#_SYS_PROTOSW_H_


	)

37 
	gmbuf
;

38 
	gthªad
;

39 
	gsockaddr
;

40 
	gsockë
;

41 
	gsock›t
;

67 
	t¥_öput_t
 (
	tmbuf
 *, );

68 
	t¥_öput6_t
 (
	tmbuf
 **, *, );

69 
	t¥_ouçut_t
 (
	tmbuf
 *, 
	tsockë
 *);

70 
	t¥_˘löput_t
 (, 
	tsockaddr
 *, *);

71 
	t¥_˘louçut_t
 (
	tsockë
 *, 
	tsock›t
 *);

72 
	t¥_öô_t
 ();

73 
	t¥_de°roy_t
 ();

74 
	t¥_Á°timo_t
 ();

75 
	t¥_¶owtimo_t
 ();

76 
	t¥_døö_t
 ();

78 
	s¥Ÿosw
 {

79 
	m¥_ty≥
;

80 
domaö
 *
	m¥_domaö
;

81 
	m¥_¥Ÿocﬁ
;

82 
	m¥_Êags
;

84 
¥_öput_t
 *
	m¥_öput
;

85 
¥_ouçut_t
 *
	m¥_ouçut
;

86 
¥_˘löput_t
 *
	m¥_˘löput
;

87 
¥_˘louçut_t
 *
	m¥_˘louçut
;

89 
¥_öô_t
 *
	m¥_öô
;

90 
¥_de°roy_t
 *
	m¥_de°roy
;

91 
¥_Á°timo_t
 *
	m¥_Á°timo
;

92 
¥_¶owtimo_t
 *
	m¥_¶owtimo
;

93 
¥_døö_t
 *
	m¥_døö
;

95 
¥_u§ªqs
 *
	m¥_u§ªqs
;

99 
	#PR_SLOWHZ
 2

	)

100 
	#PR_FASTHZ
 5

	)

106 
	#PROTO_SPACER
 32767

	)

117 
	#PR_ATOMIC
 0x01

	)

118 
	#PR_ADDR
 0x02

	)

119 
	#PR_CONNREQUIRED
 0x04

	)

120 
	#PR_WANTRCVD
 0x08

	)

121 
	#PR_RIGHTS
 0x10

	)

122 
	#PR_IMPLOPCL
 0x20

	)

123 
	#PR_LASTHDR
 0x40

	)

132 
	#PRU_ATTACH
 0

	)

133 
	#PRU_DETACH
 1

	)

134 
	#PRU_BIND
 2

	)

135 
	#PRU_LISTEN
 3

	)

136 
	#PRU_CONNECT
 4

	)

137 
	#PRU_ACCEPT
 5

	)

138 
	#PRU_DISCONNECT
 6

	)

139 
	#PRU_SHUTDOWN
 7

	)

140 
	#PRU_RCVD
 8

	)

141 
	#PRU_SEND
 9

	)

142 
	#PRU_ABORT
 10

	)

143 
	#PRU_CONTROL
 11

	)

144 
	#PRU_SENSE
 12

	)

145 
	#PRU_RCVOOB
 13

	)

146 
	#PRU_SENDOOB
 14

	)

147 
	#PRU_SOCKADDR
 15

	)

148 
	#PRU_PEERADDR
 16

	)

149 
	#PRU_CONNECT2
 17

	)

151 
	#PRU_FASTTIMO
 18

	)

152 
	#PRU_SLOWTIMO
 19

	)

153 
	#PRU_PROTORCV
 20

	)

154 
	#PRU_PROTOSEND
 21

	)

156 
	#PRU_SEND_EOF
 22

	)

157 
	#PRU_SOSETLABEL
 23

	)

158 
	#PRU_CLOSE
 24

	)

159 
	#PRU_FLUSH
 25

	)

160 
	#PRU_NREQ
 25

	)

162 #ifde‡
PRUREQUESTS


163 c⁄° *
	g¥uªque°s
[] = {

174 #ifdef 
_KERNEL


176 
	gi‚ë
;

177 
	g°©
;

178 
	gu¸ed
;

179 
	guio
;

188 
	s¥_u§ªqs
 {

189 (*
	m¥u_ab‹t
)(
sockë
 *
	mso
);

190 (*
	m¥u_ac˚±
)(
sockë
 *
	mso
, 
sockaddr
 **
	m«m
);

191 (*
	m¥u_©èch
)(
sockë
 *
	mso
, 
	m¥Ÿo
, 
thªad
 *
	mtd
);

192 (*
	m¥u_böd
)(
sockë
 *
	mso
, 
sockaddr
 *
	m«m
,

193 
thªad
 *
	mtd
);

194 (*
	m¥u_c⁄√˘
)(
sockë
 *
	mso
, 
sockaddr
 *
	m«m
,

195 
thªad
 *
	mtd
);

196 (*
	m¥u_c⁄√˘2
)(
sockë
 *
	mso1
, sockë *
	mso2
);

197 (*
	m¥u_c⁄åﬁ
)(
sockë
 *
	mso
, 
u_l⁄g
 
	mcmd
, 
ˇddr_t
 
	md©a
,

198 
i‚ë
 *
	miÂ
, 
thªad
 *
	mtd
);

199 (*
	m¥u_dëach
)(
sockë
 *
	mso
);

200 (*
	m¥u_disc⁄√˘
)(
sockë
 *
	mso
);

201 (*
	m¥u_li°í
)(
sockë
 *
	mso
, 
	mbacklog
,

202 
thªad
 *
	mtd
);

203 (*
	m¥u_≥îaddr
)(
sockë
 *
	mso
, 
sockaddr
 **
	m«m
);

204 (*
	m¥u_rcvd
)(
sockë
 *
	mso
, 
	mÊags
);

205 (*
	m¥u_rcvoob
)(
sockë
 *
	mso
, 
mbuf
 *
	mm
, 
	mÊags
);

206 (*
	m¥u_£nd
)(
sockë
 *
	mso
, 
	mÊags
, 
mbuf
 *
	mm
,

207 
sockaddr
 *
	maddr
, 
mbuf
 *
	mc⁄åﬁ
,

208 
thªad
 *
	mtd
);

209 
	#PRUS_OOB
 0x1

	)

210 
	#PRUS_EOF
 0x2

	)

211 
	#PRUS_MORETOCOME
 0x4

	)

212 (*
	m¥u_£n£
)(
sockë
 *
	mso
, 
°©
 *
	msb
);

213 (*
	m¥u_shutdown
)(
sockë
 *
	mso
);

214 (*
	m¥u_Êush
)(
sockë
 *
	mso
, 
	mdúe˘i⁄
);

215 (*
	m¥u_sockaddr
)(
sockë
 *
	mso
, 
sockaddr
 **
	m«m
);

216 (*
	m¥u_so£nd
)(
sockë
 *
	mso
, 
sockaddr
 *
	maddr
,

217 
uio
 *
	muio
, 
mbuf
 *
	mt›
, mbu‡*
	mc⁄åﬁ
,

218 
	mÊags
, 
thªad
 *
	mtd
);

219 (*
	m¥u_s‹e˚ive
)(
sockë
 *
	mso
, 
sockaddr
 **
	m∑ddr
,

220 
uio
 *
	muio
, 
mbuf
 **
	mmp0
, mbu‡**
	mc⁄åﬁp
,

221 *
	mÊag•
);

222 (*
	m¥u_s›ﬁl
)(
sockë
 *
	mso
, 
	mevíts
,

223 
u¸ed
 *
	m¸ed
, 
thªad
 *
	mtd
);

224 (*
	m¥u_so£éabñ
)(
sockë
 *
	mso
);

225 (*
	m¥u_˛o£
)(
sockë
 *
	mso
);

226 (*
	m¥u_böd©
)(
	mfd
, 
sockë
 *
	mso
, 
sockaddr
 *
	m«m
,

227 
thªad
 *
	mtd
);

228 (*
	m¥u_c⁄√˘©
)(
	mfd
, 
sockë
 *
	mso
,

229 
sockaddr
 *
	m«m
, 
thªad
 *
	mtd
);

235 
¥u_ac˚±_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 **
«m
);

236 
¥u_©èch_nŸsuµ
(
sockë
 *
so
, 
¥Ÿo
, 
thªad
 *
td
);

237 
¥u_böd_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 *
«m
,

238 
thªad
 *
td
);

239 
¥u_böd©_nŸsuµ
(
fd
, 
sockë
 *
so
, 
sockaddr
 *
«m
,

240 
thªad
 *
td
);

241 
¥u_c⁄√˘_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 *
«m
,

242 
thªad
 *
td
);

243 
¥u_c⁄√˘©_nŸsuµ
(
fd
, 
sockë
 *
so
, 
sockaddr
 *
«m
,

244 
thªad
 *
td
);

245 
¥u_c⁄√˘2_nŸsuµ
(
sockë
 *
so1
, sockë *
so2
);

246 
¥u_c⁄åﬁ_nŸsuµ
(
sockë
 *
so
, 
u_l⁄g
 
cmd
, 
ˇddr_t
 
d©a
,

247 
i‚ë
 *
iÂ
, 
thªad
 *
td
);

248 
¥u_disc⁄√˘_nŸsuµ
(
sockë
 *
so
);

249 
¥u_li°í_nŸsuµ
(
sockë
 *
so
, 
backlog
, 
thªad
 *
td
);

250 
¥u_≥îaddr_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 **
«m
);

251 
¥u_rcvd_nŸsuµ
(
sockë
 *
so
, 
Êags
);

252 
¥u_rcvoob_nŸsuµ
(
sockë
 *
so
, 
mbuf
 *
m
, 
Êags
);

253 
¥u_£nd_nŸsuµ
(
sockë
 *
so
, 
Êags
, 
mbuf
 *
m
,

254 
sockaddr
 *
addr
, 
mbuf
 *
c⁄åﬁ
, 
thªad
 *
td
);

255 
¥u_£n£_nuŒ
(
sockë
 *
so
, 
°©
 *
sb
);

256 
¥u_shutdown_nŸsuµ
(
sockë
 *
so
);

257 
¥u_sockaddr_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 **
«m
);

258 
¥u_so£nd_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 *
addr
,

259 
uio
 *uio, 
mbuf
 *
t›
, mbu‡*
c⁄åﬁ
, 
Êags
,

260 
thªad
 *
td
);

261 
¥u_s‹e˚ive_nŸsuµ
(
sockë
 *
so
, 
sockaddr
 **
∑ddr
,

262 
uio
 *uio, 
mbuf
 **
mp0
, mbu‡**
c⁄åﬁp
,

263 *
Êag•
);

264 
¥u_s›ﬁl_nŸsuµ
(
sockë
 *
so
, 
evíts
, 
u¸ed
 *
¸ed
,

265 
thªad
 *
td
);

275 
	#PRC_IFDOWN
 0

	)

276 
	#PRC_ROUTEDEAD
 1

	)

277 
	#PRC_IFUP
 2

	)

278 
	#PRC_QUENCH2
 3

	)

279 
	#PRC_QUENCH
 4

	)

280 
	#PRC_MSGSIZE
 5

	)

281 
	#PRC_HOSTDEAD
 6

	)

282 
	#PRC_HOSTUNREACH
 7

	)

283 
	#PRC_UNREACH_NET
 8

	)

284 
	#PRC_UNREACH_HOST
 9

	)

285 
	#PRC_UNREACH_PROTOCOL
 10

	)

286 
	#PRC_UNREACH_PORT
 11

	)

288 
	#PRC_UNREACH_SRCFAIL
 13

	)

289 
	#PRC_REDIRECT_NET
 14

	)

290 
	#PRC_REDIRECT_HOST
 15

	)

291 
	#PRC_REDIRECT_TOSNET
 16

	)

292 
	#PRC_REDIRECT_TOSHOST
 17

	)

293 
	#PRC_TIMXCEED_INTRANS
 18

	)

294 
	#PRC_TIMXCEED_REASS
 19

	)

295 
	#PRC_PARAMPROB
 20

	)

296 
	#PRC_UNREACH_ADMIN_PROHIB
 21

	)

298 
	#PRC_NCMDS
 22

	)

300 
	#PRC_IS_REDIRECT
(
cmd
) \

301 ((
cmd
Ë>
PRC_REDIRECT_NET
 && (cmdË<
PRC_REDIRECT_TOSHOST
)

	)

303 #ifde‡
PRCREQUESTS


304 *
	g¥¸eque°s
[] = {

327 
	#PRCO_GETOPT
 0

	)

328 
	#PRCO_SETOPT
 1

	)

330 
	#PRCO_NCMDS
 2

	)

332 #ifde‡
PRCOREQUESTS


333 *
	g¥c‹eque°s
[] = {

338 #ifde‡
_KERNEL


339 
pf˘löput
(, 
sockaddr
 *);

340 
pf˘löput2
(, 
sockaddr
 *, *);

341 
domaö
 *
pfföddomaö
(
Ámûy
);

342 
¥Ÿosw
 *
pfföd¥Ÿo
(
Ámûy
, 
¥Ÿocﬁ
, 
ty≥
);

343 
¥Ÿosw
 *
pffödty≥
(
Ámûy
, 
ty≥
);

344 
pf_¥Ÿo_ªgi°î
(
Ámûy
, 
¥Ÿosw
 *
≈r
);

345 
pf_¥Ÿo_uƒegi°î
(
Ámûy
, 
¥Ÿocﬁ
, 
ty≥
);

	@/usr/include/sys/queue.h

33 #i‚de‡
_SYS_QUEUE_H_


34 
	#_SYS_QUEUE_H_


	)

36 
	~<sys/cdefs.h
>

111 #ifde‡
QUEUE_MACRO_DEBUG


113 
	sqm_åa˚
 {

114 
	mœ°löe
;

115 
	m¥evlöe
;

116 c⁄° *
	mœ°fûe
;

117 c⁄° *
	m¥evfûe
;

120 
	#TRACEBUF
 
qm_åa˚
 
åa˚
;

	)

121 
	#TRACEBUF_INITIALIZER
 { 
__LINE__
, 0, 
__FILE__
, 
NULL
 } ,

	)

122 
	#TRASHIT
(
x
Ëdÿ{(xË(*)-1;} 0)

	)

123 
	#QMD_SAVELINK
(
«me
, 
lök
Ë**«mê(*)&÷ök)

	)

125 
	#QMD_TRACE_HEAD
(
hód
) do { \

126 (
hód
)->
åa˚
.
¥evlöe
 = (hód)->åa˚.
œ°löe
; \

127 (
hód
)->
åa˚
.
¥evfûe
 = (hód)->åa˚.
œ°fûe
; \

128 (
hód
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

129 (
hód
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

130 } 0)

	)

132 
	#QMD_TRACE_ELEM
(
ñem
) do { \

133 (
ñem
)->
åa˚
.
¥evlöe
 = (ñem)->åa˚.
œ°löe
; \

134 (
ñem
)->
åa˚
.
¥evfûe
 = (ñem)->åa˚.
œ°fûe
; \

135 (
ñem
)->
åa˚
.
œ°löe
 = 
__LINE__
; \

136 (
ñem
)->
åa˚
.
œ°fûe
 = 
__FILE__
; \

137 } 0)

	)

140 
	#QMD_TRACE_ELEM
(
ñem
)

	)

141 
	#QMD_TRACE_HEAD
(
hód
)

	)

142 
	#QMD_SAVELINK
(
«me
, 
lök
)

	)

143 
	#TRACEBUF


	)

144 
	#TRACEBUF_INITIALIZER


	)

145 
	#TRASHIT
(
x
)

	)

148 #ifde‡
__˝lu•lus


152 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

154 
	#QUEUE_TYPEOF
(
ty≥
Ë
	)
type

160 
	#SLIST_HEAD
(
«me
, 
ty≥
) \

161 
	s«me
 { \

162 
ty≥
 *
¶h_fú°
; \

163 }

	)

165 
	#SLIST_CLASS_HEAD
(
«me
, 
ty≥
) \

166 
	s«me
 { \

167 
˛ass
 
ty≥
 *
¶h_fú°
; \

168 }

	)

170 
	#SLIST_HEAD_INITIALIZER
(
hód
) \

171 { 
NULL
 }

	)

173 
	#SLIST_ENTRY
(
ty≥
) \

175 
ty≥
 *
¶e_√xt
; \

176 }

	)

178 
	#SLIST_CLASS_ENTRY
(
ty≥
) \

180 
˛ass
 
ty≥
 *
¶e_√xt
; \

181 }

	)

186 
	#SLIST_EMPTY
(
hód
Ë((hód)->
¶h_fú°
 =
NULL
)

	)

188 
	#SLIST_FIRST
(
hód
Ë((hód)->
¶h_fú°
)

	)

190 
	#SLIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

191 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

192 (
v¨
); \

193 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

195 
	#SLIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

196 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

197 (
v¨
); \

198 (
v¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
))

	)

200 
	#SLIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

201 (
v¨
Ë
	`SLIST_FIRST
((
hód
)); \

202 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

203 (
v¨
Ë(
tv¨
))

	)

205 
	#SLIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

206 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`SLIST_FIRST
((
hód
))); \

207 (
v¨
Ë&& ((
tv¨
Ë
	`SLIST_NEXT
((v¨), 
fõld
), 1); \

208 (
v¨
Ë(
tv¨
))

	)

210 
	#SLIST_FOREACH_PREVPTR
(
v¨
, 
v¨p
, 
hód
, 
fõld
) \

211 (
v¨p
Ë&
	`SLIST_FIRST
((
hód
)); \

212 ((
v¨
Ë*(
v¨p
)Ë!
NULL
; \

213 (
v¨p
Ë&
	`SLIST_NEXT
((
v¨
), 
fõld
))

	)

215 
	#SLIST_INIT
(
hód
) do { \

216 
	`SLIST_FIRST
((
hód
)Ë
NULL
; \

217 } 0)

	)

219 
	#SLIST_INSERT_AFTER
(
¶i°ñm
, 
ñm
, 
fõld
) do { \

220 
	`SLIST_NEXT
((
ñm
), 
fõld
ËSLIST_NEXT((
¶i°ñm
), field); \

221 
	`SLIST_NEXT
((
¶i°ñm
), 
fõld
Ë(
ñm
); \

222 } 0)

	)

224 
	#SLIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

225 
	`SLIST_NEXT
((
ñm
), 
fõld
Ë
	`SLIST_FIRST
((
hód
)); \

226 
	`SLIST_FIRST
((
hód
)Ë(
ñm
); \

227 } 0)

	)

229 
	#SLIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
¶e_√xt
)

	)

231 
	#SLIST_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

232 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
¶e_√xt
); \

233 i‡(
	`SLIST_FIRST
((
hód
)Ë=(
ñm
)) { \

234 
	`SLIST_REMOVE_HEAD
((
hód
), 
fõld
); \

237 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`SLIST_FIRST
(
hód
); \

238 
	`SLIST_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

239 
cuªlm
 = 
	`SLIST_NEXT
(cuªlm, 
fõld
); \

240 
	`SLIST_REMOVE_AFTER
(
cuªlm
, 
fõld
); \

242 
	`TRASHIT
(*
ﬁd√xt
); \

243 } 0)

	)

245 
	#SLIST_REMOVE_AFTER
(
ñm
, 
fõld
) do { \

246 
	`SLIST_NEXT
(
ñm
, 
fõld
) = \

247 
	`SLIST_NEXT
(SLIST_NEXT(
ñm
, 
fõld
), field); \

248 } 0)

	)

250 
	#SLIST_REMOVE_HEAD
(
hód
, 
fõld
) do { \

251 
	`SLIST_FIRST
((
hód
)Ë
	`SLIST_NEXT
(SLIST_FIRST((hód)), 
fõld
); \

252 } 0)

	)

254 
	#SLIST_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

255 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`SLIST_FIRST
(
hód1
); \

256 
	`SLIST_FIRST
(
hód1
ËSLIST_FIRST(
hód2
); \

257 
	`SLIST_FIRST
(
hód2
Ë
sw≠_fú°
; \

258 } 0)

	)

263 
	#STAILQ_HEAD
(
«me
, 
ty≥
) \

264 
	s«me
 { \

265 
ty≥
 *
°qh_fú°
; \

266 
ty≥
 **
°qh_œ°
; \

267 }

	)

269 
	#STAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

270 
	s«me
 { \

271 
˛ass
 
ty≥
 *
°qh_fú°
; \

272 
˛ass
 
ty≥
 **
°qh_œ°
; \

273 }

	)

275 
	#STAILQ_HEAD_INITIALIZER
(
hód
) \

276 { 
NULL
, &(
hód
).
°qh_fú°
 }

	)

278 
	#STAILQ_ENTRY
(
ty≥
) \

280 
ty≥
 *
°qe_√xt
; \

281 }

	)

283 
	#STAILQ_CLASS_ENTRY
(
ty≥
) \

285 
˛ass
 
ty≥
 *
°qe_√xt
; \

286 }

	)

291 
	#STAILQ_CONCAT
(
hód1
, 
hód2
) do { \

292 i‡(!
	`STAILQ_EMPTY
((
hód2
))) { \

293 *(
hód1
)->
°qh_œ°
 = (
hód2
)->
°qh_fú°
; \

294 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

295 
	`STAILQ_INIT
((
hód2
)); \

297 } 0)

	)

299 
	#STAILQ_EMPTY
(
hód
Ë((hód)->
°qh_fú°
 =
NULL
)

	)

301 
	#STAILQ_FIRST
(
hód
Ë((hód)->
°qh_fú°
)

	)

303 
	#STAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

304 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

305 (
v¨
); \

306 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

308 
	#STAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

309 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

310 (
v¨
); \

311 (
v¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
))

	)

313 
	#STAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

314 (
v¨
Ë
	`STAILQ_FIRST
((
hód
)); \

315 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

316 (
v¨
Ë(
tv¨
))

	)

318 
	#STAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

319 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`STAILQ_FIRST
((
hód
))); \

320 (
v¨
Ë&& ((
tv¨
Ë
	`STAILQ_NEXT
((v¨), 
fõld
), 1); \

321 (
v¨
Ë(
tv¨
))

	)

323 
	#STAILQ_INIT
(
hód
) do { \

324 
	`STAILQ_FIRST
((
hód
)Ë
NULL
; \

325 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

326 } 0)

	)

328 
	#STAILQ_INSERT_AFTER
(
hód
, 
tqñm
, 
ñm
, 
fõld
) do { \

329 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
ËSTAILQ_NEXT((
tqñm
), fõld)Ë=
NULL
)\

330 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

331 
	`STAILQ_NEXT
((
tqñm
), 
fõld
Ë(
ñm
); \

332 } 0)

	)

334 
	#STAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

335 i‡((
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
	`STAILQ_FIRST
((
hód
))Ë=
NULL
) \

336 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

337 
	`STAILQ_FIRST
((
hód
)Ë(
ñm
); \

338 } 0)

	)

340 
	#STAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

341 
	`STAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

342 *(
hód
)->
°qh_œ°
 = (
ñm
); \

343 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

344 } 0)

	)

346 
	#STAILQ_LAST
(
hód
, 
ty≥
, 
fõld
) \

347 (
	`STAILQ_EMPTY
((
hód
)Ë? 
NULL
 : \

348 
	`__c⁄èöîof
((
hód
)->
°qh_œ°
, \

349 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
°qe_√xt
))

	)

351 
	#STAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
°qe_√xt
)

	)

353 
	#STAILQ_REMOVE
(
hód
, 
ñm
, 
ty≥
, 
fõld
) do { \

354 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
°qe_√xt
); \

355 i‡(
	`STAILQ_FIRST
((
hód
)Ë=(
ñm
)) { \

356 
	`STAILQ_REMOVE_HEAD
((
hód
), 
fõld
); \

359 
	`QUEUE_TYPEOF
(
ty≥
Ë*
cuªlm
 = 
	`STAILQ_FIRST
(
hód
); \

360 
	`STAILQ_NEXT
(
cuªlm
, 
fõld
Ë!(
ñm
)) \

361 
cuªlm
 = 
	`STAILQ_NEXT
(cuªlm, 
fõld
); \

362 
	`STAILQ_REMOVE_AFTER
(
hód
, 
cuªlm
, 
fõld
); \

364 
	`TRASHIT
(*
ﬁd√xt
); \

365 } 0)

	)

367 
	#STAILQ_REMOVE_AFTER
(
hód
, 
ñm
, 
fõld
) do { \

368 i‡((
	`STAILQ_NEXT
(
ñm
, 
fõld
) = \

369 
	`STAILQ_NEXT
(STAILQ_NEXT(
ñm
, 
fõld
), fõld)Ë=
NULL
) \

370 (
hód
)->
°qh_œ°
 = &
	`STAILQ_NEXT
((
ñm
), 
fõld
); \

371 } 0)

	)

373 
	#STAILQ_REMOVE_HEAD
(
hód
, 
fõld
) do { \

374 i‡((
	`STAILQ_FIRST
((
hód
)) = \

375 
	`STAILQ_NEXT
(
	`STAILQ_FIRST
((
hód
)), 
fõld
)Ë=
NULL
) \

376 (
hód
)->
°qh_œ°
 = &
	`STAILQ_FIRST
((head)); \

377 } 0)

	)

379 
	#STAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
) do { \

380 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = 
	`STAILQ_FIRST
(
hód1
); \

381 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
°qh_œ°
; \

382 
	`STAILQ_FIRST
(
hód1
ËSTAILQ_FIRST(
hód2
); \

383 (
hód1
)->
°qh_œ°
 = (
hód2
)->stqh_last; \

384 
	`STAILQ_FIRST
(
hód2
Ë
sw≠_fú°
; \

385 (
hód2
)->
°qh_œ°
 = 
sw≠_œ°
; \

386 i‡(
	`STAILQ_EMPTY
(
hód1
)) \

387 (
hód1
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head1); \

388 i‡(
	`STAILQ_EMPTY
(
hód2
)) \

389 (
hód2
)->
°qh_œ°
 = &
	`STAILQ_FIRST
(head2); \

390 } 0)

	)

396 
	#LIST_HEAD
(
«me
, 
ty≥
) \

397 
	s«me
 { \

398 
ty≥
 *
lh_fú°
; \

399 }

	)

401 
	#LIST_CLASS_HEAD
(
«me
, 
ty≥
) \

402 
	s«me
 { \

403 
˛ass
 
ty≥
 *
lh_fú°
; \

404 }

	)

406 
	#LIST_HEAD_INITIALIZER
(
hód
) \

407 { 
NULL
 }

	)

409 
	#LIST_ENTRY
(
ty≥
) \

411 
ty≥
 *
À_√xt
; \

412 
ty≥
 **
À_¥ev
; \

413 }

	)

415 
	#LIST_CLASS_ENTRY
(
ty≥
) \

417 
˛ass
 
ty≥
 *
À_√xt
; \

418 
˛ass
 
ty≥
 **
À_¥ev
; \

419 }

	)

425 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

426 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
) do { \

427 i‡(
	`LIST_FIRST
((
hód
)Ë!
NULL
 && \

428 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 != \

429 &
	`LIST_FIRST
((
hód
))) \

430 
	`∑nic
("BadÜi° hód %∞fú°->¥ev !hód", (
hód
)); \

431 } 0)

	)

433 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
) do { \

434 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

435 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 != \

436 &((
ñm
)->
fõld
.
À_√xt
)) \

437 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

438 } 0)

	)

440 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
) do { \

441 i‡(*(
ñm
)->
fõld
.
À_¥ev
 != (elm)) \

442 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

443 } 0)

	)

445 
	#QMD_LIST_CHECK_HEAD
(
hód
, 
fõld
)

	)

446 
	#QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
)

	)

447 
	#QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
)

	)

450 
	#LIST_EMPTY
(
hód
Ë((hód)->
lh_fú°
 =
NULL
)

	)

452 
	#LIST_FIRST
(
hód
Ë((hód)->
lh_fú°
)

	)

454 
	#LIST_FOREACH
(
v¨
, 
hód
, 
fõld
) \

455 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

456 (
v¨
); \

457 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

459 
	#LIST_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

460 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

461 (
v¨
); \

462 (
v¨
Ë
	`LIST_NEXT
((v¨), 
fõld
))

	)

464 
	#LIST_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

465 (
v¨
Ë
	`LIST_FIRST
((
hód
)); \

466 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

467 (
v¨
Ë(
tv¨
))

	)

469 
	#LIST_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

470 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`LIST_FIRST
((
hód
))); \

471 (
v¨
Ë&& ((
tv¨
Ë
	`LIST_NEXT
((v¨), 
fõld
), 1); \

472 (
v¨
Ë(
tv¨
))

	)

474 
	#LIST_INIT
(
hód
) do { \

475 
	`LIST_FIRST
((
hód
)Ë
NULL
; \

476 } 0)

	)

478 
	#LIST_INSERT_AFTER
(
li°ñm
, 
ñm
, 
fõld
) do { \

479 
	`QMD_LIST_CHECK_NEXT
(
li°ñm
, 
fõld
); \

480 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
ËLIST_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

481 
	`LIST_NEXT
((
li°ñm
), 
fõld
)->fõld.
À_¥ev
 = \

482 &
	`LIST_NEXT
((
ñm
), 
fõld
); \

483 
	`LIST_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

484 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
li°ñm
), field); \

485 } 0)

	)

487 
	#LIST_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

488 
	`QMD_LIST_CHECK_PREV
(
li°ñm
, 
fõld
); \

489 (
ñm
)->
fõld
.
À_¥ev
 = (
li°ñm
)->field.le_prev; \

490 
	`LIST_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

491 *(
li°ñm
)->
fõld
.
À_¥ev
 = (
ñm
); \

492 (
li°ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field); \

493 } 0)

	)

495 
	#LIST_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

496 
	`QMD_LIST_CHECK_HEAD
((
hód
), 
fõld
); \

497 i‡((
	`LIST_NEXT
((
ñm
), 
fõld
Ë
	`LIST_FIRST
((
hód
))Ë!
NULL
) \

498 
	`LIST_FIRST
((
hód
))->
fõld
.
À_¥ev
 = &
	`LIST_NEXT
((
ñm
), field);\

499 
	`LIST_FIRST
((
hód
)Ë(
ñm
); \

500 (
ñm
)->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód
)); \

501 } 0)

	)

503 
	#LIST_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
À_√xt
)

	)

505 
	#LIST_PREV
(
ñm
, 
hód
, 
ty≥
, 
fõld
) \

506 ((
ñm
)->
fõld
.
À_¥ev
 =&
	`LIST_FIRST
((
hód
)Ë? 
NULL
 : \

507 
	`__c⁄èöîof
((
ñm
)->
fõld
.
À_¥ev
, \

508 
	`QUEUE_TYPEOF
(
ty≥
), 
fõld
.
À_√xt
))

	)

510 
	#LIST_REMOVE
(
ñm
, 
fõld
) do { \

511 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
À_√xt
); \

512 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
À_¥ev
); \

513 
	`QMD_LIST_CHECK_NEXT
(
ñm
, 
fõld
); \

514 
	`QMD_LIST_CHECK_PREV
(
ñm
, 
fõld
); \

515 i‡(
	`LIST_NEXT
((
ñm
), 
fõld
Ë!
NULL
) \

516 
	`LIST_NEXT
((
ñm
), 
fõld
)->fõld.
À_¥ev
 = \

517 (
ñm
)->
fõld
.
À_¥ev
; \

518 *(
ñm
)->
fõld
.
À_¥ev
 = 
	`LIST_NEXT
((elm), field); \

519 
	`TRASHIT
(*
ﬁd√xt
); \

520 
	`TRASHIT
(*
ﬁd¥ev
); \

521 } 0)

	)

523 
	#LIST_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

524 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_tmp
 = 
	`LIST_FIRST
(
hód1
); \

525 
	`LIST_FIRST
((
hód1
)ËLIST_FIRST((
hód2
)); \

526 
	`LIST_FIRST
((
hód2
)Ë
sw≠_tmp
; \

527 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód1
))Ë!
NULL
) \

528 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód1
)); \

529 i‡((
sw≠_tmp
 = 
	`LIST_FIRST
((
hód2
))Ë!
NULL
) \

530 
sw≠_tmp
->
fõld
.
À_¥ev
 = &
	`LIST_FIRST
((
hód2
)); \

531 } 0)

	)

536 
	#TAILQ_HEAD
(
«me
, 
ty≥
) \

537 
	s«me
 { \

538 
ty≥
 *
tqh_fú°
; \

539 
ty≥
 **
tqh_œ°
; \

540 
TRACEBUF
 \

541 }

	)

543 
	#TAILQ_CLASS_HEAD
(
«me
, 
ty≥
) \

544 
	s«me
 { \

545 
˛ass
 
ty≥
 *
tqh_fú°
; \

546 
˛ass
 
ty≥
 **
tqh_œ°
; \

547 
TRACEBUF
 \

548 }

	)

550 
	#TAILQ_HEAD_INITIALIZER
(
hód
) \

551 { 
NULL
, &(
hód
).
tqh_fú°
, 
TRACEBUF_INITIALIZER
 }

	)

553 
	#TAILQ_ENTRY
(
ty≥
) \

555 
ty≥
 *
tqe_√xt
; \

556 
ty≥
 **
tqe_¥ev
; \

557 
TRACEBUF
 \

558 }

	)

560 
	#TAILQ_CLASS_ENTRY
(
ty≥
) \

562 
˛ass
 
ty≥
 *
tqe_√xt
; \

563 
˛ass
 
ty≥
 **
tqe_¥ev
; \

564 
TRACEBUF
 \

565 }

	)

570 #i‡(
deföed
(
_KERNEL
Ë&& deföed(
INVARIANTS
))

571 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
) do { \

572 i‡(!
	`TAILQ_EMPTY
(
hód
) && \

573 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 != \

574 &
	`TAILQ_FIRST
((
hód
))) \

575 
	`∑nic
("BadÅaûq hód %∞fú°->¥ev !hód", (
hód
)); \

576 } 0)

	)

578 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
) do { \

579 i‡(*(
hód
)->
tqh_œ°
 !
NULL
) \

580 
	`∑nic
("BadÅaûq NEXT(%p->tqh_œ°Ë!NULL", (
hód
)); \

581 } 0)

	)

583 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
) do { \

584 i‡(
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë!
NULL
 && \

585 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 != \

586 &((
ñm
)->
fõld
.
tqe_√xt
)) \

587 
	`∑nic
("BadÜökÉlm %∞√xt->¥ev !ñm", (
ñm
)); \

588 } 0)

	)

590 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
) do { \

591 i‡(*(
ñm
)->
fõld
.
tqe_¥ev
 != (elm)) \

592 
	`∑nic
("BadÜökÉlm %∞¥ev->√xà!ñm", (
ñm
)); \

593 } 0)

	)

595 
	#QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
)

	)

596 
	#QMD_TAILQ_CHECK_TAIL
(
hód
, 
hód«me
)

	)

597 
	#QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
)

	)

598 
	#QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
)

	)

601 
	#TAILQ_CONCAT
(
hód1
, 
hód2
, 
fõld
) do { \

602 i‡(!
	`TAILQ_EMPTY
(
hód2
)) { \

603 *(
hód1
)->
tqh_œ°
 = (
hód2
)->
tqh_fú°
; \

604 (
hód2
)->
tqh_fú°
->
fõld
.
tqe_¥ev
 = (
hód1
)->
tqh_œ°
; \

605 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

606 
	`TAILQ_INIT
((
hód2
)); \

607 
	`QMD_TRACE_HEAD
(
hód1
); \

608 
	`QMD_TRACE_HEAD
(
hód2
); \

610 } 0)

	)

612 
	#TAILQ_EMPTY
(
hód
Ë((hód)->
tqh_fú°
 =
NULL
)

	)

614 
	#TAILQ_FIRST
(
hód
Ë((hód)->
tqh_fú°
)

	)

616 
	#TAILQ_FOREACH
(
v¨
, 
hód
, 
fõld
) \

617 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

618 (
v¨
); \

619 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

621 
	#TAILQ_FOREACH_FROM
(
v¨
, 
hód
, 
fõld
) \

622 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

623 (
v¨
); \

624 (
v¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
))

	)

626 
	#TAILQ_FOREACH_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

627 (
v¨
Ë
	`TAILQ_FIRST
((
hód
)); \

628 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

629 (
v¨
Ë(
tv¨
))

	)

631 
	#TAILQ_FOREACH_FROM_SAFE
(
v¨
, 
hód
, 
fõld
, 
tv¨
) \

632 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_FIRST
((
hód
))); \

633 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_NEXT
((v¨), 
fõld
), 1); \

634 (
v¨
Ë(
tv¨
))

	)

636 
	#TAILQ_FOREACH_REVERSE
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

637 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

638 (
v¨
); \

639 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

641 
	#TAILQ_FOREACH_REVERSE_FROM
(
v¨
, 
hód
, 
hód«me
, 
fõld
) \

642 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

643 (
v¨
); \

644 (
v¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
))

	)

646 
	#TAILQ_FOREACH_REVERSE_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

647 (
v¨
Ë
	`TAILQ_LAST
((
hód
), 
hód«me
); \

648 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

649 (
v¨
Ë(
tv¨
))

	)

651 
	#TAILQ_FOREACH_REVERSE_FROM_SAFE
(
v¨
, 
hód
, 
hód«me
, 
fõld
, 
tv¨
) \

652 (
v¨
Ë((v¨Ë? (v¨Ë: 
	`TAILQ_LAST
((
hód
), 
hód«me
)); \

653 (
v¨
Ë&& ((
tv¨
Ë
	`TAILQ_PREV
((v¨), 
hód«me
, 
fõld
), 1); \

654 (
v¨
Ë(
tv¨
))

	)

656 
	#TAILQ_INIT
(
hód
) do { \

657 
	`TAILQ_FIRST
((
hód
)Ë
NULL
; \

658 (
hód
)->
tqh_œ°
 = &
	`TAILQ_FIRST
((head)); \

659 
	`QMD_TRACE_HEAD
(
hód
); \

660 } 0)

	)

662 
	#TAILQ_INSERT_AFTER
(
hód
, 
li°ñm
, 
ñm
, 
fõld
) do { \

663 
	`QMD_TAILQ_CHECK_NEXT
(
li°ñm
, 
fõld
); \

664 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
ËTAILQ_NEXT((
li°ñm
), fõld)Ë!
NULL
)\

665 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

666 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

668 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

669 
	`QMD_TRACE_HEAD
(
hód
); \

671 
	`TAILQ_NEXT
((
li°ñm
), 
fõld
Ë(
ñm
); \

672 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
li°ñm
), field); \

673 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

674 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

675 } 0)

	)

677 
	#TAILQ_INSERT_BEFORE
(
li°ñm
, 
ñm
, 
fõld
) do { \

678 
	`QMD_TAILQ_CHECK_PREV
(
li°ñm
, 
fõld
); \

679 (
ñm
)->
fõld
.
tqe_¥ev
 = (
li°ñm
)->field.tqe_prev; \

680 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë(
li°ñm
); \

681 *(
li°ñm
)->
fõld
.
tqe_¥ev
 = (
ñm
); \

682 (
li°ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_NEXT
((
ñm
), field); \

683 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

684 
	`QMD_TRACE_ELEM
(&(
li°ñm
)->
fõld
); \

685 } 0)

	)

687 
	#TAILQ_INSERT_HEAD
(
hód
, 
ñm
, 
fõld
) do { \

688 
	`QMD_TAILQ_CHECK_HEAD
(
hód
, 
fõld
); \

689 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
	`TAILQ_FIRST
((
hód
))Ë!
NULL
) \

690 
	`TAILQ_FIRST
((
hód
))->
fõld
.
tqe_¥ev
 = \

691 &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

693 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

694 
	`TAILQ_FIRST
((
hód
)Ë(
ñm
); \

695 (
ñm
)->
fõld
.
tqe_¥ev
 = &
	`TAILQ_FIRST
((
hód
)); \

696 
	`QMD_TRACE_HEAD
(
hód
); \

697 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

698 } 0)

	)

700 
	#TAILQ_INSERT_TAIL
(
hód
, 
ñm
, 
fõld
) do { \

701 
	`QMD_TAILQ_CHECK_TAIL
(
hód
, 
fõld
); \

702 
	`TAILQ_NEXT
((
ñm
), 
fõld
Ë
NULL
; \

703 (
ñm
)->
fõld
.
tqe_¥ev
 = (
hód
)->
tqh_œ°
; \

704 *(
hód
)->
tqh_œ°
 = (
ñm
); \

705 (
hód
)->
tqh_œ°
 = &
	`TAILQ_NEXT
((
ñm
), 
fõld
); \

706 
	`QMD_TRACE_HEAD
(
hód
); \

707 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

708 } 0)

	)

710 
	#TAILQ_LAST
(
hód
, 
hód«me
) \

711 (*(((
hód«me
 *)((
hód
)->
tqh_œ°
))->tqh_œ°))

	)

713 
	#TAILQ_NEXT
(
ñm
, 
fõld
Ë(”lm)->fõld.
tqe_√xt
)

	)

715 
	#TAILQ_PREV
(
ñm
, 
hód«me
, 
fõld
) \

716 (*(((
hód«me
 *)((
ñm
)->
fõld
.
tqe_¥ev
))->
tqh_œ°
))

	)

718 
	#TAILQ_REMOVE
(
hód
, 
ñm
, 
fõld
) do { \

719 
	`QMD_SAVELINK
(
ﬁd√xt
, (
ñm
)->
fõld
.
tqe_√xt
); \

720 
	`QMD_SAVELINK
(
ﬁd¥ev
, (
ñm
)->
fõld
.
tqe_¥ev
); \

721 
	`QMD_TAILQ_CHECK_NEXT
(
ñm
, 
fõld
); \

722 
	`QMD_TAILQ_CHECK_PREV
(
ñm
, 
fõld
); \

723 i‡((
	`TAILQ_NEXT
((
ñm
), 
fõld
)Ë!
NULL
) \

724 
	`TAILQ_NEXT
((
ñm
), 
fõld
)->fõld.
tqe_¥ev
 = \

725 (
ñm
)->
fõld
.
tqe_¥ev
; \

727 (
hód
)->
tqh_œ°
 = (
ñm
)->
fõld
.
tqe_¥ev
; \

728 
	`QMD_TRACE_HEAD
(
hód
); \

730 *(
ñm
)->
fõld
.
tqe_¥ev
 = 
	`TAILQ_NEXT
((elm), field); \

731 
	`TRASHIT
(*
ﬁd√xt
); \

732 
	`TRASHIT
(*
ﬁd¥ev
); \

733 
	`QMD_TRACE_ELEM
(&(
ñm
)->
fõld
); \

734 } 0)

	)

736 
	#TAILQ_SWAP
(
hód1
, 
hód2
, 
ty≥
, 
fõld
) do { \

737 
	`QUEUE_TYPEOF
(
ty≥
Ë*
sw≠_fú°
 = (
hód1
)->
tqh_fú°
; \

738 
	`QUEUE_TYPEOF
(
ty≥
Ë**
sw≠_œ°
 = (
hód1
)->
tqh_œ°
; \

739 (
hód1
)->
tqh_fú°
 = (
hód2
)->tqh_first; \

740 (
hód1
)->
tqh_œ°
 = (
hód2
)->tqh_last; \

741 (
hód2
)->
tqh_fú°
 = 
sw≠_fú°
; \

742 (
hód2
)->
tqh_œ°
 = 
sw≠_œ°
; \

743 i‡((
sw≠_fú°
 = (
hód1
)->
tqh_fú°
Ë!
NULL
) \

744 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód1
)->
tqh_fú°
; \

746 (
hód1
)->
tqh_œ°
 = &(hód1)->
tqh_fú°
; \

747 i‡((
sw≠_fú°
 = (
hód2
)->
tqh_fú°
Ë!
NULL
) \

748 
sw≠_fú°
->
fõld
.
tqe_¥ev
 = &(
hód2
)->
tqh_fú°
; \

750 (
hód2
)->
tqh_œ°
 = &(hód2)->
tqh_fú°
; \

751 } 0)

	)

	@/usr/include/sys/sglist.h

39 #i‚de‡
__SGLIST_H__


40 
	#__SGLIST_H__


	)

42 
	~<sys/ªfcou¡.h
>

44 
	ssgli°_£g
 {

45 
vm_∑ddr_t
 
	mss_∑ddr
;

46 
size_t
 
	mss_Àn
;

49 
	ssgli°
 {

50 
sgli°_£g
 *
	msg_£gs
;

51 
	msg_ªfs
;

52 
u_sh‹t
 
	msg_n£g
;

53 
u_sh‹t
 
	msg_max£g
;

56 
	gbio
;

57 
	gmbuf
;

58 
	guio
;

60 
__ölöe
 

61 
	$sgli°_öô
(
sgli°
 *
sg
, 
u_sh‹t
 
max£gs
, 
sgli°_£g
 *
£gs
)

64 
sg
->
sg_£gs
 = 
£gs
;

65 
sg
->
sg_n£g
 = 0;

66 
sg
->
sg_max£g
 = 
max£gs
;

67 
	`ªfcou¡_öô
(&
sg
->
sg_ªfs
, 1);

68 
	}
}

70 
__ölöe
 

71 
	$sgli°_ª£t
(
sgli°
 *
sg
)

74 
sg
->
sg_n£g
 = 0;

75 
	}
}

77 
__ölöe
 
sgli°
 *

78 
	$sgli°_hﬁd
(
sgli°
 *
sg
)

81 
	`ªfcou¡_acquúe
(&
sg
->
sg_ªfs
);

82  (
sg
);

83 
	}
}

85 
sgli°
 *
sgli°_Æloc
(
n£gs
, 
mÊags
);

86 
sgli°_≠≥nd
(
sgli°
 *
sg
, *
buf
, 
size_t
 
Àn
);

87 
sgli°_≠≥nd_bio
(
sgli°
 *
sg
, 
bio
 *
bp
);

88 
sgli°_≠≥nd_mbuf
(
sgli°
 *
sg
, 
mbuf
 *
m0
);

89 
sgli°_≠≥nd_phys
(
sgli°
 *
sg
, 
vm_∑ddr_t
 
∑ddr
,

90 
size_t
 
Àn
);

91 
sgli°_≠≥nd_uio
(
sgli°
 *
sg
, 
uio
 *uio);

92 
sgli°_≠≥nd_u£r
(
sgli°
 *
sg
, *
buf
, 
size_t
 
Àn
,

93 
thªad
 *
td
);

94 
sgli°
 *
sgli°_buûd
(*
buf
, 
size_t
 
Àn
, 
mÊags
);

95 
sgli°
 *
sgli°_˛⁄e
(sgli° *
sg
, 
mÊags
);

96 
sgli°_c⁄sume_uio
(
sgli°
 *
sg
, 
uio
 *uio, 
size_t
 
ªsid
);

97 
sgli°_cou¡
(*
buf
, 
size_t
 
Àn
);

98 
sgli°_‰ì
(
sgli°
 *
sg
);

99 
sgli°_joö
(
sgli°
 *
fú°
, sgli° *
£c⁄d
);

100 
size_t
 
sgli°_Àngth
(
sgli°
 *
sg
);

101 
sgli°_¶i˚
(
sgli°
 *
‹igöÆ
, sgli° **
¶i˚
,

102 
size_t
 
off£t
, size_à
Àngth
, 
mÊags
);

103 
sgli°_•lô
(
sgli°
 *
‹igöÆ
, sgli° **
hód
,

104 
size_t
 
Àngth
, 
mÊags
);

	@/usr/include/sys/socket.h

33 #i‚de‡
_SYS_SOCKET_H_


34 
	#_SYS_SOCKET_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

39 
	~<machöe/_Æign.h
>

48 #i‡
__BSD_VISIBLE


49 #i‚de‡
_GID_T_DECLARED


50 
__gid_t
 
	tgid_t
;

51 
	#_GID_T_DECLARED


	)

54 #i‚de‡
_OFF_T_DECLARED


55 
__off_t
 
	toff_t
;

56 
	#_OFF_T_DECLARED


	)

59 #i‚de‡
_PID_T_DECLARED


60 
__pid_t
 
	tpid_t
;

61 
	#_PID_T_DECLARED


	)

65 #i‚de‡
_SA_FAMILY_T_DECLARED


66 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

67 
	#_SA_FAMILY_T_DECLARED


	)

70 #i‚de‡
_SOCKLEN_T_DECLARED


71 
__sockÀn_t
 
	tsockÀn_t
;

72 
	#_SOCKLEN_T_DECLARED


	)

75 #i‚de‡
_SSIZE_T_DECLARED


76 
__ssize_t
 
	tssize_t
;

77 
	#_SSIZE_T_DECLARED


	)

80 #i‡
__BSD_VISIBLE


81 #i‚de‡
_UID_T_DECLARED


82 
__uid_t
 
	tuid_t
;

83 
	#_UID_T_DECLARED


	)

90 
	#SOCK_STREAM
 1

	)

91 
	#SOCK_DGRAM
 2

	)

92 
	#SOCK_RAW
 3

	)

93 #i‡
__BSD_VISIBLE


94 
	#SOCK_RDM
 4

	)

96 
	#SOCK_SEQPACKET
 5

	)

98 #i‡
__BSD_VISIBLE


102 
	#SOCK_CLOEXEC
 0x10000000

	)

103 
	#SOCK_NONBLOCK
 0x20000000

	)

109 
	#SO_DEBUG
 0x0001

	)

110 
	#SO_ACCEPTCONN
 0x0002

	)

111 
	#SO_REUSEADDR
 0x0004

	)

112 
	#SO_KEEPALIVE
 0x0008

	)

113 
	#SO_DONTROUTE
 0x0010

	)

114 
	#SO_BROADCAST
 0x0020

	)

115 #i‡
__BSD_VISIBLE


116 
	#SO_USELOOPBACK
 0x0040

	)

118 
	#SO_LINGER
 0x0080

	)

119 
	#SO_OOBINLINE
 0x0100

	)

120 #i‡
__BSD_VISIBLE


121 
	#SO_REUSEPORT
 0x0200

	)

122 
	#SO_TIMESTAMP
 0x0400

	)

123 
	#SO_NOSIGPIPE
 0x0800

	)

124 
	#SO_ACCEPTFILTER
 0x1000

	)

125 
	#SO_BINTIME
 0x2000

	)

127 
	#SO_NO_OFFLOAD
 0x4000

	)

128 
	#SO_NO_DDP
 0x8000

	)

133 
	#SO_SNDBUF
 0x1001

	)

134 
	#SO_RCVBUF
 0x1002

	)

135 
	#SO_SNDLOWAT
 0x1003

	)

136 
	#SO_RCVLOWAT
 0x1004

	)

137 
	#SO_SNDTIMEO
 0x1005

	)

138 
	#SO_RCVTIMEO
 0x1006

	)

139 
	#SO_ERROR
 0x1007

	)

140 
	#SO_TYPE
 0x1008

	)

141 #i‡
__BSD_VISIBLE


142 
	#SO_LABEL
 0x1009

	)

143 
	#SO_PEERLABEL
 0x1010

	)

144 
	#SO_LISTENQLIMIT
 0x1011

	)

145 
	#SO_LISTENQLEN
 0x1012

	)

146 
	#SO_LISTENINCQLEN
 0x1013

	)

147 
	#SO_SETFIB
 0x1014

	)

148 
	#SO_USER_COOKIE
 0x1015

	)

149 
	#SO_PROTOCOL
 0x1016

	)

150 
	#SO_PROTOTYPE
 
SO_PROTOCOL


	)

158 #i‡
__BSD_VISIBLE


159 
	#SO_VENDOR
 0x80000000

	)

165 
	slögî
 {

166 
	ml_⁄off
;

167 
	ml_lögî
;

170 #i‡
__BSD_VISIBLE


171 
	sac˚±_fûãr_¨g
 {

172 
	maf_«me
[16];

173 
	maf_¨g
[256-16];

180 
	#SOL_SOCKET
 0xfff‡

	)

185 
	#AF_UNSPEC
 0

	)

186 #i‡
__BSD_VISIBLE


187 
	#AF_LOCAL
 
AF_UNIX


	)

189 
	#AF_UNIX
 1

	)

190 
	#AF_INET
 2

	)

191 #i‡
__BSD_VISIBLE


192 
	#AF_IMPLINK
 3

	)

193 
	#AF_PUP
 4

	)

194 
	#AF_CHAOS
 5

	)

195 
	#AF_NETBIOS
 6

	)

196 
	#AF_ISO
 7

	)

197 
	#AF_OSI
 
AF_ISO


	)

198 
	#AF_ECMA
 8

	)

199 
	#AF_DATAKIT
 9

	)

200 
	#AF_CCITT
 10

	)

201 
	#AF_SNA
 11

	)

202 
	#AF_DEC√t
 12

	)

203 
	#AF_DLI
 13

	)

204 
	#AF_LAT
 14

	)

205 
	#AF_HYLINK
 15

	)

206 
	#AF_APPLETALK
 16

	)

207 
	#AF_ROUTE
 17

	)

208 
	#AF_LINK
 18

	)

209 
	#p£udo_AF_XTP
 19

	)

210 
	#AF_COIP
 20

	)

211 
	#AF_CNT
 21

	)

212 
	#p£udo_AF_RTIP
 22

	)

213 
	#AF_IPX
 23

	)

214 
	#AF_SIP
 24

	)

215 
	#p£udo_AF_PIP
 25

	)

216 
	#AF_ISDN
 26

	)

217 
	#AF_E164
 
AF_ISDN


	)

218 
	#p£udo_AF_KEY
 27

	)

220 
	#AF_INET6
 28

	)

221 #i‡
__BSD_VISIBLE


222 
	#AF_NATM
 29

	)

223 
	#AF_ATM
 30

	)

224 
	#p£udo_AF_HDRCMPLT
 31

	)

227 
	#AF_NETGRAPH
 32

	)

228 
	#AF_SLOW
 33

	)

229 
	#AF_SCLUSTER
 34

	)

230 
	#AF_ARP
 35

	)

231 
	#AF_BLUETOOTH
 36

	)

232 
	#AF_IEEE80211
 37

	)

233 
	#AF_INET_SDP
 40

	)

234 
	#AF_INET6_SDP
 42

	)

235 
	#AF_MAX
 42

	)

241 
	#AF_VENDOR00
 39

	)

242 
	#AF_VENDOR01
 41

	)

243 
	#AF_VENDOR02
 43

	)

244 
	#AF_VENDOR03
 45

	)

245 
	#AF_VENDOR04
 47

	)

246 
	#AF_VENDOR05
 49

	)

247 
	#AF_VENDOR06
 51

	)

248 
	#AF_VENDOR07
 53

	)

249 
	#AF_VENDOR08
 55

	)

250 
	#AF_VENDOR09
 57

	)

251 
	#AF_VENDOR10
 59

	)

252 
	#AF_VENDOR11
 61

	)

253 
	#AF_VENDOR12
 63

	)

254 
	#AF_VENDOR13
 65

	)

255 
	#AF_VENDOR14
 67

	)

256 
	#AF_VENDOR15
 69

	)

257 
	#AF_VENDOR16
 71

	)

258 
	#AF_VENDOR17
 73

	)

259 
	#AF_VENDOR18
 75

	)

260 
	#AF_VENDOR19
 77

	)

261 
	#AF_VENDOR20
 79

	)

262 
	#AF_VENDOR21
 81

	)

263 
	#AF_VENDOR22
 83

	)

264 
	#AF_VENDOR23
 85

	)

265 
	#AF_VENDOR24
 87

	)

266 
	#AF_VENDOR25
 89

	)

267 
	#AF_VENDOR26
 91

	)

268 
	#AF_VENDOR27
 93

	)

269 
	#AF_VENDOR28
 95

	)

270 
	#AF_VENDOR29
 97

	)

271 
	#AF_VENDOR30
 99

	)

272 
	#AF_VENDOR31
 101

	)

273 
	#AF_VENDOR32
 103

	)

274 
	#AF_VENDOR33
 105

	)

275 
	#AF_VENDOR34
 107

	)

276 
	#AF_VENDOR35
 109

	)

277 
	#AF_VENDOR36
 111

	)

278 
	#AF_VENDOR37
 113

	)

279 
	#AF_VENDOR38
 115

	)

280 
	#AF_VENDOR39
 117

	)

281 
	#AF_VENDOR40
 119

	)

282 
	#AF_VENDOR41
 121

	)

283 
	#AF_VENDOR42
 123

	)

284 
	#AF_VENDOR43
 125

	)

285 
	#AF_VENDOR44
 127

	)

286 
	#AF_VENDOR45
 129

	)

287 
	#AF_VENDOR46
 131

	)

288 
	#AF_VENDOR47
 133

	)

295 
	ssockaddr
 {

296 
	mß_Àn
;

297 
ß_Ámûy_t
 
	mß_Ámûy
;

298 
	mß_d©a
[14];

300 #i‡
__BSD_VISIBLE


301 
	#SOCK_MAXADDRLEN
 255

	)

307 
	ssock¥Ÿo
 {

308 
	m•_Ámûy
;

309 
	m•_¥Ÿocﬁ
;

313 
	~<sys/_sockaddr_°‹age.h
>

315 #i‡
__BSD_VISIBLE


319 
	#PF_UNSPEC
 
AF_UNSPEC


	)

320 
	#PF_LOCAL
 
AF_LOCAL


	)

321 
	#PF_UNIX
 
PF_LOCAL


	)

322 
	#PF_INET
 
AF_INET


	)

323 
	#PF_IMPLINK
 
AF_IMPLINK


	)

324 
	#PF_PUP
 
AF_PUP


	)

325 
	#PF_CHAOS
 
AF_CHAOS


	)

326 
	#PF_NETBIOS
 
AF_NETBIOS


	)

327 
	#PF_ISO
 
AF_ISO


	)

328 
	#PF_OSI
 
AF_ISO


	)

329 
	#PF_ECMA
 
AF_ECMA


	)

330 
	#PF_DATAKIT
 
AF_DATAKIT


	)

331 
	#PF_CCITT
 
AF_CCITT


	)

332 
	#PF_SNA
 
AF_SNA


	)

333 
	#PF_DEC√t
 
AF_DEC√t


	)

334 
	#PF_DLI
 
AF_DLI


	)

335 
	#PF_LAT
 
AF_LAT


	)

336 
	#PF_HYLINK
 
AF_HYLINK


	)

337 
	#PF_APPLETALK
 
AF_APPLETALK


	)

338 
	#PF_ROUTE
 
AF_ROUTE


	)

339 
	#PF_LINK
 
AF_LINK


	)

340 
	#PF_XTP
 
p£udo_AF_XTP


	)

341 
	#PF_COIP
 
AF_COIP


	)

342 
	#PF_CNT
 
AF_CNT


	)

343 
	#PF_SIP
 
AF_SIP


	)

344 
	#PF_IPX
 
AF_IPX


	)

345 
	#PF_RTIP
 
p£udo_AF_RTIP


	)

346 
	#PF_PIP
 
p£udo_AF_PIP


	)

347 
	#PF_ISDN
 
AF_ISDN


	)

348 
	#PF_KEY
 
p£udo_AF_KEY


	)

349 
	#PF_INET6
 
AF_INET6


	)

350 
	#PF_NATM
 
AF_NATM


	)

351 
	#PF_ATM
 
AF_ATM


	)

352 
	#PF_NETGRAPH
 
AF_NETGRAPH


	)

353 
	#PF_SLOW
 
AF_SLOW


	)

354 
	#PF_SCLUSTER
 
AF_SCLUSTER


	)

355 
	#PF_ARP
 
AF_ARP


	)

356 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

357 
	#PF_IEEE80211
 
AF_IEEE80211


	)

358 
	#PF_INET_SDP
 
AF_INET_SDP


	)

359 
	#PF_INET6_SDP
 
AF_INET6_SDP


	)

361 
	#PF_MAX
 
AF_MAX


	)

371 
	#NET_MAXID
 
AF_MAX


	)

381 
	#NET_RT_DUMP
 1

	)

382 
	#NET_RT_FLAGS
 2

	)

383 
	#NET_RT_IFLIST
 3

	)

384 
	#NET_RT_IFMALIST
 4

	)

385 
	#NET_RT_IFLISTL
 5

	)

387 
	#NET_RT_MAXID
 6

	)

394 
	#SOMAXCONN
 128

	)

400 
	smsghdr
 {

401 *
	mmsg_«me
;

402 
sockÀn_t
 
	mmsg_«mñí
;

403 
iovec
 *
	mmsg_iov
;

404 
	mmsg_iovÀn
;

405 *
	mmsg_c⁄åﬁ
;

406 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

407 
	mmsg_Êags
;

410 
	#MSG_OOB
 0x1

	)

411 
	#MSG_PEEK
 0x2

	)

412 
	#MSG_DONTROUTE
 0x4

	)

413 
	#MSG_EOR
 0x8

	)

414 
	#MSG_TRUNC
 0x10

	)

415 
	#MSG_CTRUNC
 0x20

	)

416 
	#MSG_WAITALL
 0x40

	)

417 #i‡
__POSIX_VISIBLE
 >= 200809

418 
	#MSG_NOSIGNAL
 0x20000

	)

420 #i‡
__BSD_VISIBLE


421 
	#MSG_DONTWAIT
 0x80

	)

422 
	#MSG_EOF
 0x100

	)

423 
	#MSG_NOTIFICATION
 0x2000

	)

424 
	#MSG_NBIO
 0x4000

	)

425 
	#MSG_COMPAT
 0x8000

	)

426 
	#MSG_CMSG_CLOEXEC
 0x40000

	)

428 #ifde‡
_KERNEL


429 
	#MSG_SOCALLBCK
 0x10000

	)

438 
	scmsghdr
 {

439 
sockÀn_t
 
	mcmsg_Àn
;

440 
	mcmsg_Àvñ
;

441 
	mcmsg_ty≥
;

445 #i‡
__BSD_VISIBLE


451 
	#CMGROUP_MAX
 16

	)

460 
	scmsg¸ed
 {

461 
pid_t
 
	mcm¸ed_pid
;

462 
uid_t
 
	mcm¸ed_uid
;

463 
uid_t
 
	mcm¸ed_euid
;

464 
gid_t
 
	mcm¸ed_gid
;

465 
	mcm¸ed_ngroups
;

466 
gid_t
 
	mcm¸ed_groups
[
CMGROUP_MAX
];

472 
	ssock¸ed
 {

473 
uid_t
 
	msc_uid
;

474 
uid_t
 
	msc_euid
;

475 
gid_t
 
	msc_gid
;

476 
gid_t
 
	msc_egid
;

477 
	msc_ngroups
;

478 
gid_t
 
	msc_groups
[1];

484 
	#SOCKCREDSIZE
(
ngΩs
) \

485 ((
sock¸ed
Ë+ ((
gid_t
Ë* ((
ngΩs
Ë- 1)))

	)

490 
	#CMSG_DATA
(
cmsg
) ((*)(cmsg) + \

491 
	`_ALIGN
((
cmsghdr
)))

	)

494 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
) \

495 ((*)(
cmsg
Ë=
NULL
 ? 
	`CMSG_FIRSTHDR
(
mhdr
) : \

496 ((*)(
cmsg
Ë+ 
	`_ALIGN
(((
cmsghdr
 *)(cmsg))->
cmsg_Àn
) + \

497 
	`_ALIGN
((
cmsghdr
)) > \

498 (*)(
mhdr
)->
msg_c⁄åﬁ
 + (mhdr)->
msg_c⁄åﬁÀn
) ? \

499 (
cmsghdr
 *)0 : \

500 (
cmsghdr
 *)(*)((*)(
cmsg
) + \

501 
	`_ALIGN
(((
cmsghdr
 *)(
cmsg
))->
cmsg_Àn
)))

	)

507 
	#CMSG_FIRSTHDR
(
mhdr
) \

508 ((
mhdr
)->
msg_c⁄åﬁÀn
 >(
cmsghdr
) ? \

509 (
cmsghdr
 *)(
mhdr
)->
msg_c⁄åﬁ
 : \

510 (
cmsghdr
 *)
NULL
)

	)

512 #i‡
__BSD_VISIBLE


514 
	#CMSG_SPACE
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ _ALIGN÷))

	)

515 
	#CMSG_LEN
(
l
Ë(
	`_ALIGN
((
cmsghdr
)Ë+ (l))

	)

518 #ifde‡
_KERNEL


519 
	#CMSG_ALIGN
(
n
Ë
	`_ALIGN
“)

	)

523 
	#SCM_RIGHTS
 0x01

	)

524 #i‡
__BSD_VISIBLE


525 
	#SCM_TIMESTAMP
 0x02

	)

526 
	#SCM_CREDS
 0x03

	)

527 
	#SCM_BINTIME
 0x04

	)

530 #i‡
__BSD_VISIBLE


534 
	sosockaddr
 {

535 
	mß_Ámûy
;

536 
	mß_d©a
[14];

542 
	somsghdr
 {

543 *
	mmsg_«me
;

544 
	mmsg_«mñí
;

545 
iovec
 *
	mmsg_iov
;

546 
	mmsg_iovÀn
;

547 *
	mmsg_ac¸ights
;

548 
	mmsg_ac¸ight¶í
;

555 
	#SHUT_RD
 0

	)

556 
	#SHUT_WR
 1

	)

557 
	#SHUT_RDWR
 2

	)

559 #i‡
__BSD_VISIBLE


562 
	#PRU_FLUSH_RD
 
SHUT_RD


	)

563 
	#PRU_FLUSH_WR
 
SHUT_WR


	)

564 
	#PRU_FLUSH_RDWR
 
SHUT_RDWR


	)

568 #i‡
__BSD_VISIBLE


572 
	ssf_hdå
 {

573 
iovec
 *
	mhódîs
;

574 
	mhdr_˙t
;

575 
iovec
 *
	måaûîs
;

576 
	mål_˙t
;

582 
	#SF_NODISKIO
 0x00000001

	)

583 
	#SF_MNOWAIT
 0x00000002

	)

584 
	#SF_SYNC
 0x00000004

	)

586 #ifde‡
_KERNEL


587 
	#SFK_COMPAT
 0x00000001

	)

591 #i‚def 
_KERNEL


593 
	~<sys/cdefs.h
>

595 
__BEGIN_DECLS


596 
ac˚±
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

597 
böd
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

598 
c⁄√˘
(, c⁄° 
sockaddr
 *, 
sockÀn_t
);

599 #i‡
__BSD_VISIBLE


600 
ac˚±4
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict, );

601 
böd©
(, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

602 
c⁄√˘©
(, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

604 
gë≥î«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

605 
gësock«me
(, 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

606 
gësock›t
(, , , * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

607 
li°í
(, );

608 
ssize_t
 
ªcv
(, *, 
size_t
, );

609 
ssize_t
 
ªcv‰om
(, *, 
size_t
, , 
sockaddr
 * 
__ª°ri˘
, 
sockÀn_t
 * __restrict);

610 
ssize_t
 
ªcvmsg
(, 
msghdr
 *, );

611 
ssize_t
 
£nd
(, c⁄° *, 
size_t
, );

612 
ssize_t
 
£ndto
(, const *,

613 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

614 
ssize_t
 
£ndmsg
(, c⁄° 
msghdr
 *, );

615 #i‡
__BSD_VISIBLE


616 
£ndfûe
(, , 
off_t
, 
size_t
, 
sf_hdå
 *, off_t *, );

617 
£tfib
();

619 
£tsock›t
(, , , c⁄° *, 
sockÀn_t
);

620 
shutdown
(, );

621 
sock©m¨k
();

622 
sockë
(, , );

623 
sockë∑ú
(, , , *);

624 
	g__END_DECLS


628 #ifde‡
_KERNEL


629 
	gsockë
;

631 
t˝cb
 *
so_sŸŸ˝cb
(
sockë
 *
so
);

632 
öpcb
 *
so_sŸoöpcb
(
sockë
 *
so
);

633 
sockbuf
 *
so_sockbuf_¢d
(
sockë
 *);

634 
sockbuf
 *
so_sockbuf_rcv
(
sockë
 *);

636 
so_°©e_gë
(c⁄° 
sockë
 *);

637 
so_°©e_£t
(
sockë
 *, );

639 
so_›ti⁄s_gë
(c⁄° 
sockë
 *);

640 
so_›ti⁄s_£t
(
sockë
 *, );

642 
so_îr‹_gë
(c⁄° 
sockë
 *);

643 
so_îr‹_£t
(
sockë
 *, );

645 
so_lögî_gë
(c⁄° 
sockë
 *);

646 
so_lögî_£t
(
sockë
 *, );

648 
¥Ÿosw
 *
so_¥Ÿosw_gë
(c⁄° 
sockë
 *);

649 
so_¥Ÿosw_£t
(
sockë
 *, 
¥Ÿosw
 *);

651 
so_s‹wakeup_locked
(
sockë
 *
so
);

652 
so_sowwakeup_locked
(
sockë
 *
so
);

654 
so_s‹wakeup
(
sockë
 *
so
);

655 
so_sowwakeup
(
sockë
 *
so
);

657 
so_lock
(
sockë
 *
so
);

658 
so_u∆ock
(
sockë
 *
so
);

660 
so_li°íîs_≠∂y_Æl
(
sockë
 *
so
, (*
func
)(sockë *, *), *
¨g
);

	@/usr/include/sys/socketvar.h

34 #i‚de‡
_SYS_SOCKETVAR_H_


35 
	#_SYS_SOCKETVAR_H_


	)

37 
	~<sys/queue.h
>

38 
	~<sys/£löfo.h
>

39 
	~<sys/_lock.h
>

40 
	~<sys/_muãx.h
>

41 
	~<sys/_sx.h
>

42 
	~<sys/sockbuf.h
>

43 
	~<sys/sock°©e.h
>

44 #ifde‡
_KERNEL


45 
	~<sys/sock›t.h
>

48 
	gv√t
;

56 
u_quad_t
 
	tso_gí_t
;

58 
	gsockë
;

71 
	ssockë
 {

72 
	mso_cou¡
;

73 
	mso_ty≥
;

74 
	mso_›ti⁄s
;

75 
	mso_lögî
;

76 
	mso_°©e
;

77 
	mso_q°©e
;

78 *
	mso_pcb
;

79 
v√t
 *
	mso_v√t
;

80 
¥Ÿosw
 *
	mso_¥Ÿo
;

92 
sockë
 *
	mso_hód
;

93 
TAILQ_HEAD
(, 
sockë
Ë
	mso_öcomp
;

94 
TAILQ_HEAD
(, 
sockë
Ë
	mso_comp
;

95 
TAILQ_ENTRY
(
sockë
Ë
	mso_li°
;

96 
u_sh‹t
 
	mso_qÀn
;

97 
u_sh‹t
 
	mso_öcqÀn
;

99 
u_sh‹t
 
	mso_qlimô
;

100 
	mso_timeo
;

101 
u_sh‹t
 
	mso_îr‹
;

102 
sigio
 *
	mso_sigio
;

104 
u_l⁄g
 
	mso_oobm¨k
;

105 
TAILQ_HEAD
(, 
aiocbli°
Ë
	mso_aiojobq
;

107 
sockbuf
 
	mso_rcv
, 
	mso_¢d
;

109 
u¸ed
 *
	mso_¸ed
;

110 
œbñ
 *
	mso_œbñ
;

111 
œbñ
 *
	mso_≥îœbñ
;

113 
so_gí_t
 
	mso_gí˙t
;

114 *
	mso_emuld©a
;

115 
	sso_accf
 {

116 
ac˚±_fûãr
 *
	mso_ac˚±_fûãr
;

117 *
	mso_ac˚±_fûãr_¨g
;

118 *
	mso_ac˚±_fûãr_°r
;

119 } *
	mso_accf
;

126 
	mso_fibnum
;

127 
uöt32_t
 
	mso_u£r_cookõ
;

136 
mtx
 
ac˚±_mtx
;

137 
	#ACCEPT_LOCK_ASSERT
(Ë
	`mtx_as£π
(&
ac˚±_mtx
, 
MA_OWNED
)

	)

138 
	#ACCEPT_UNLOCK_ASSERT
(Ë
	`mtx_as£π
(&
ac˚±_mtx
, 
MA_NOTOWNED
)

	)

139 
	#ACCEPT_LOCK
(Ë
	`mtx_lock
(&
ac˚±_mtx
)

	)

140 
	#ACCEPT_UNLOCK
(Ë
	`mtx_u∆ock
(&
ac˚±_mtx
)

	)

147 
	#SOCK_MTX
(
_so
Ë
	`SOCKBUF_MTX
(&(_so)->
so_rcv
)

	)

148 
	#SOCK_LOCK
(
_so
Ë
	`SOCKBUF_LOCK
(&(_so)->
so_rcv
)

	)

149 
	#SOCK_OWNED
(
_so
Ë
	`SOCKBUF_OWNED
(&(_so)->
so_rcv
)

	)

150 
	#SOCK_UNLOCK
(
_so
Ë
	`SOCKBUF_UNLOCK
(&(_so)->
so_rcv
)

	)

151 
	#SOCK_LOCK_ASSERT
(
_so
Ë
	`SOCKBUF_LOCK_ASSERT
(&(_so)->
so_rcv
)

	)

156 
	#SQ_INCOMP
 0x0800

	)

157 
	#SQ_COMP
 0x1000

	)

162 
	sxsockë
 {

163 
size_t
 
	mxso_Àn
;

164 
sockë
 *
	mxso_so
;

165 
	mso_ty≥
;

166 
	mso_›ti⁄s
;

167 
	mso_lögî
;

168 
	mso_°©e
;

169 
ˇddr_t
 
	mso_pcb
;

170 
	mxso_¥Ÿocﬁ
;

171 
	mxso_Ámûy
;

172 
u_sh‹t
 
	mso_qÀn
;

173 
u_sh‹t
 
	mso_öcqÀn
;

174 
u_sh‹t
 
	mso_qlimô
;

175 
	mso_timeo
;

176 
u_sh‹t
 
	mso_îr‹
;

177 
pid_t
 
	mso_pgid
;

178 
u_l⁄g
 
	mso_oobm¨k
;

179 
xsockbuf
 
	mso_rcv
, 
	mso_¢d
;

180 
uid_t
 
	mso_uid
;

183 #ifde‡
_KERNEL


192 
	#SBL_WAIT
 0x00000001

	)

193 
	#SBL_NOINTR
 0x00000002

	)

194 
	#SBL_VALID
 (
SBL_WAIT
 | 
SBL_NOINTR
)

	)

199 
	#sb_nŸify
(
sb
Ë(((sb)->
sb_Êags
 & (
SB_WAIT
 | 
SB_SEL
 | 
SB_ASYNC
 | \

200 
SB_UPCALL
 | 
SB_AIO
 | 
SB_KNOTE
)Ë!0)

	)

203 
	#so£ndÆœt⁄˚
(
so
) \

204 ((
so
)->
so_¥Ÿo
->
¥_Êags
 & 
PR_ATOMIC
)

	)

207 
	#s‹ódabÀd©a
(
so
) \

208 ((
so
)->
so_rcv
.
sb_cc
 >(so)->so_rcv.
sb_low©
 || \

209 !
	`TAILQ_EMPTY
(&(
so
)->
so_comp
Ë|| (so)->
so_îr‹
)

	)

210 
	#s‹ódabÀ
(
so
) \

211 (
	`s‹ódabÀd©a
(
so
Ë|| ((so)->
so_rcv
.
sb_°©e
 & 
SBS_CANTRCVMORE
))

	)

214 
	#sowrôóbÀ
(
so
) \

215 ((
	`sb•a˚
(&(
so
)->
so_¢d
Ë>(so)->so_¢d.
sb_low©
 && \

216 (((
so
)->
so_°©e
&
SS_ISCONNECTED
) || \

217 ((
so
)->
so_¥Ÿo
->
¥_Êags
&
PR_CONNREQUIRED
)==0)) || \

218 ((
so
)->
so_¢d
.
sb_°©e
 & 
SBS_CANTSENDMORE
) || \

219 (
so
)->
so_îr‹
)

	)

226 
	#s‹ef
(
so
) do { \

227 
	`SOCK_LOCK_ASSERT
(
so
); \

228 ++(
so
)->
so_cou¡
; \

229 } 0)

	)

231 
	#s‹ñe
(
so
) do { \

232 
	`ACCEPT_LOCK_ASSERT
(); \

233 
	`SOCK_LOCK_ASSERT
(
so
); \

234 i‡((
so
)->
so_cou¡
 <= 0) \

235 
	`∑nic
("sorele"); \

236 i‡(--(
so
)->
so_cou¡
 == 0) \

237 
	`so‰ì
(
so
); \

239 
	`SOCK_UNLOCK
(
so
); \

240 
	`ACCEPT_UNLOCK
(); \

242 } 0)

	)

252 
	#s‹wakeup_locked
(
so
) do { \

253 
	`SOCKBUF_LOCK_ASSERT
(&(
so
)->
so_rcv
); \

254 i‡(
	`sb_nŸify
(&(
so
)->
so_rcv
)) \

255 
	`sowakeup
((
so
), &(so)->
so_rcv
); \

257 
	`SOCKBUF_UNLOCK
(&(
so
)->
so_rcv
); \

258 } 0)

	)

260 
	#s‹wakeup
(
so
) do { \

261 
	`SOCKBUF_LOCK
(&(
so
)->
so_rcv
); \

262 
	`s‹wakeup_locked
(
so
); \

263 } 0)

	)

265 
	#sowwakeup_locked
(
so
) do { \

266 
	`SOCKBUF_LOCK_ASSERT
(&(
so
)->
so_¢d
); \

267 i‡(
	`sb_nŸify
(&(
so
)->
so_¢d
)) \

268 
	`sowakeup
((
so
), &(so)->
so_¢d
); \

270 
	`SOCKBUF_UNLOCK
(&(
so
)->
so_¢d
); \

271 } 0)

	)

273 
	#sowwakeup
(
so
) do { \

274 
	`SOCKBUF_LOCK
(&(
so
)->
so_¢d
); \

275 
	`sowwakeup_locked
(
so
); \

276 } 0)

	)

278 
	sac˚±_fûãr
 {

279 
	maccf_«me
[16];

280 (*
	maccf_ˇŒback
)

281 (
sockë
 *
	mso
, *
	m¨g
, 
	mwaôÊag
);

282 * (*
	maccf_¸óã
)

283 (
sockë
 *
	mso
, *
	m¨g
);

284 (*
	maccf_de°roy
)

285 (
sockë
 *
	mso
);

286 
SLIST_ENTRY
(
ac˚±_fûãr
Ë
	maccf_√xt
;

289 #ifde‡
MALLOC_DECLARE


290 
MALLOC_DECLARE
(
M_ACCF
);

291 
MALLOC_DECLARE
(
M_PCB
);

292 
MALLOC_DECLARE
(
M_SONAME
);

295 
maxsockës
;

296 
u_l⁄g
 
sb_max
;

297 
so_gí_t
 
so_gí˙t
;

299 
	gmbuf
;

300 
	gsockaddr
;

301 
	gu¸ed
;

302 
	guio
;

305 
	#SO_RCV
 1

	)

306 
	#SO_SND
 2

	)

309 
	#SU_OK
 0

	)

310 
	#SU_ISCONNECTED
 1

	)

315 
sock¨gs
(
mbuf
 **
mp
, 
ˇddr_t
 
buf
, 
buÊí
, 
ty≥
);

316 
gësockaddr
(
sockaddr
 **
«mp
, 
ˇddr_t
 
uaddr
, 
size_t
 
Àn
);

317 
sﬂb‹t
(
sockë
 *
so
);

318 
sﬂc˚±
(
sockë
 *
so
, 
sockaddr
 **
«m
);

319 
socheckuid
(
sockë
 *
so
, 
uid_t
 
uid
);

320 
soböd
(
sockë
 *
so
, 
sockaddr
 *
«m
, 
thªad
 *
td
);

321 
soböd©
(
fd
, 
sockë
 *
so
, 
sockaddr
 *
«m
,

322 
thªad
 *
td
);

323 
so˛o£
(
sockë
 *
so
);

324 
soc⁄√˘
(
sockë
 *
so
, 
sockaddr
 *
«m
, 
thªad
 *
td
);

325 
soc⁄√˘©
(
fd
, 
sockë
 *
so
, 
sockaddr
 *
«m
,

326 
thªad
 *
td
);

327 
soc⁄√˘2
(
sockë
 *
so1
, sockë *
so2
);

328 
so¸óã
(
dom
, 
sockë
 **
aso
, 
ty≥
, 
¥Ÿo
,

329 
u¸ed
 *
¸ed
, 
thªad
 *
td
);

330 
sodisc⁄√˘
(
sockë
 *
so
);

331 
sockaddr
 *
sodupsockaddr
(c⁄° sockadd∏*
ß
, 
mÊags
);

332 
so‰ì
(
sockë
 *
so
);

333 
sohasoutofb™d
(
sockë
 *
so
);

334 
sﬁi°í
(
sockë
 *
so
, 
backlog
, 
thªad
 *
td
);

335 
sﬁi°í_¥Ÿo
(
sockë
 *
so
, 
backlog
);

336 
sﬁi°í_¥Ÿo_check
(
sockë
 *
so
);

337 
sockë
 *

338 
s⁄ewc⁄n
(
sockë
 *
hód
, 
c⁄n°©us
);

341 
s›ﬁl
(
sockë
 *
so
, 
evíts
, 
u¸ed
 *
a˘ive_¸ed
,

342 
thªad
 *
td
);

343 
s›ﬁl_gíîic
(
sockë
 *
so
, 
evíts
,

344 
u¸ed
 *
a˘ive_¸ed
, 
thªad
 *
td
);

345 
s‹e˚ive
(
sockë
 *
so
, 
sockaddr
 **
∑ddr
, 
uio
 *uio,

346 
mbuf
 **
mp0
, mbu‡**
c⁄åﬁp
, *
Êag•
);

347 
s‹e˚ive_°ªam
(
sockë
 *
so
, 
sockaddr
 **
∑ddr
,

348 
uio
 *uio, 
mbuf
 **
mp0
, mbu‡**
c⁄åﬁp
,

349 *
Êag•
);

350 
s‹e˚ive_dgøm
(
sockë
 *
so
, 
sockaddr
 **
∑ddr
,

351 
uio
 *uio, 
mbuf
 **
mp0
, mbu‡**
c⁄åﬁp
,

352 *
Êag•
);

353 
s‹e˚ive_gíîic
(
sockë
 *
so
, 
sockaddr
 **
∑ddr
,

354 
uio
 *uio, 
mbuf
 **
mp0
, mbu‡**
c⁄åﬁp
,

355 *
Êag•
);

356 
s‹e£rve
(
sockë
 *
so
, 
u_l⁄g
 
¢dcc
, u_l⁄g 
rcvcc
);

357 
s‹Êush
(
sockë
 *
so
);

358 
so£nd
(
sockë
 *
so
, 
sockaddr
 *
addr
, 
uio
 *uio,

359 
mbuf
 *
t›
, mbu‡*
c⁄åﬁ
, 
Êags
,

360 
thªad
 *
td
);

361 
so£nd_dgøm
(
sockë
 *
so
, 
sockaddr
 *
addr
,

362 
uio
 *uio, 
mbuf
 *
t›
, mbu‡*
c⁄åﬁ
,

363 
Êags
, 
thªad
 *
td
);

364 
so£nd_gíîic
(
sockë
 *
so
, 
sockaddr
 *
addr
,

365 
uio
 *uio, 
mbuf
 *
t›
, mbu‡*
c⁄åﬁ
,

366 
Êags
, 
thªad
 *
td
);

367 
soshutdown
(
sockë
 *
so
, 
how
);

368 
sŸoxsockë
(
sockë
 *
so
, 
xsockë
 *
xso
);

369 
soupˇŒ_˛ór
(
sockë
 *
so
, 
which
);

370 
soupˇŒ_£t
(
sockë
 *
so
, 
which
,

371 (*
func
)(
sockë
 *, *, ), *
¨g
);

372 
	`sowakeup
(
sockë
 *
so
, 
sockbuf
 *
sb
);

373 
	`£lsockë
(
sockë
 *
so
, 
evíts
, 
timevÆ
 *
tv
,

374 
thªad
 *
td
);

379 
	`ac˚±_fût_add
(
ac˚±_fûãr
 *
fût
);

380 
	`ac˚±_fût_dñ
(*
«me
);

381 
ac˚±_fûãr
 *
	`ac˚±_fût_gë
(*
«me
);

382 #ifde‡
ACCEPT_FILTER_MOD


383 #ifde‡
SYSCTL_DECL


384 
	`SYSCTL_DECL
(
_√t_öë_accf
);

386 
	`ac˚±_fût_gíîic_mod_evít
(
moduÀ_t
 
mod
, 
evít
, *
d©a
);

	@/usr/include/sys/sockopt.h

33 #i‚de‡
_SYS_SOCKOPT_H_


34 
	#_SYS_SOCKOPT_H_


	)

36 #i‚de‡
_KERNEL


41 
	gthªad
;

42 
	gsockë
;

48 
	es›t_dú
 { 
	mSOPT_GET
, 
	mSOPT_SET
 };

50 
	ssock›t
 {

51 
s›t_dú
 
	ms›t_dú
;

52 
	ms›t_Àvñ
;

53 
	ms›t_«me
;

54 *
	ms›t_vÆ
;

55 
size_t
 
	ms›t_vÆsize
;

56 
thªad
 *
	ms›t_td
;

59 
so£t›t
(
sockë
 *
so
, 
sock›t
 *
s›t
);

60 
sogë›t
(
sockë
 *
so
, 
sock›t
 *
s›t
);

61 
so›tc›yö
(
sock›t
 *
s›t
, *
buf
, 
size_t
 
Àn
, size_à
möÀn
);

62 
so›tc›yout
(
sock›t
 *
s›t
, c⁄° *
buf
, 
size_t
 
Àn
);

64 
so›t_gëm
(
sock›t
 *
s›t
, 
mbuf
 **
mp
);

65 
so›t_mc›yö
(
sock›t
 *
s›t
, 
mbuf
 *
m
);

66 
so›t_mc›yout
(
sock›t
 *
s›t
, 
mbuf
 *
m
);

67 
do_gë›t_ac˚±_fûãr
(
sockë
 *
so
, 
sock›t
 *
s›t
);

68 
do_£t›t_ac˚±_fûãr
(
sockë
 *
so
, 
sock›t
 *
s›t
);

69 
so_£tsock›t
(
sockë
 *
so
, 
Àvñ
, 
›äame
,

70 *
›tvÆ
, 
size_t
 
›éí
);

	@/usr/include/sys/stat.h

38 #i‚de‡
_SYS_STAT_H_


39 
	#_SYS_STAT_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_time•ec.h
>

43 
	~<sys/_ty≥s.h
>

45 #i‚de‡
_BLKSIZE_T_DECLARED


46 
__blksize_t
 
	tblksize_t
;

47 
	#_BLKSIZE_T_DECLARED


	)

50 #i‚de‡
_BLKCNT_T_DECLARED


51 
__blk˙t_t
 
	tblk˙t_t
;

52 
	#_BLKCNT_T_DECLARED


	)

55 #i‚de‡
_DEV_T_DECLARED


56 
__dev_t
 
	tdev_t
;

57 
	#_DEV_T_DECLARED


	)

60 #i‚de‡
_FFLAGS_T_DECLARED


61 
__fÊags_t
 
	tfÊags_t
;

62 
	#_FFLAGS_T_DECLARED


	)

65 #i‚de‡
_GID_T_DECLARED


66 
__gid_t
 
	tgid_t
;

67 
	#_GID_T_DECLARED


	)

70 #i‚de‡
_INO_T_DECLARED


71 
__öo_t
 
	töo_t
;

72 
	#_INO_T_DECLARED


	)

75 #i‚de‡
_MODE_T_DECLARED


76 
__mode_t
 
	tmode_t
;

77 
	#_MODE_T_DECLARED


	)

80 #i‚de‡
_NLINK_T_DECLARED


81 
__∆ök_t
 
	t∆ök_t
;

82 
	#_NLINK_T_DECLARED


	)

85 #i‚de‡
_OFF_T_DECLARED


86 
__off_t
 
	toff_t
;

87 
	#_OFF_T_DECLARED


	)

90 #i‚de‡
_UID_T_DECLARED


91 
__uid_t
 
	tuid_t
;

92 
	#_UID_T_DECLARED


	)

95 #i‡!
deföed
(
_KERNEL
Ë&& 
__BSD_VISIBLE


99 
	~<sys/time.h
>

102 #ifde‡
_KERNEL


103 
	so°©
 {

104 
__uöt16_t
 
	m°_dev
;

105 
öo_t
 
	m°_öo
;

106 
mode_t
 
	m°_mode
;

107 
∆ök_t
 
	m°_∆ök
;

108 
__uöt16_t
 
	m°_uid
;

109 
__uöt16_t
 
	m°_gid
;

110 
__uöt16_t
 
	m°_rdev
;

111 
__öt32_t
 
	m°_size
;

112 
time•ec
 
	m°_©im
;

113 
time•ec
 
	m°_mtim
;

114 
time•ec
 
	m°_˘im
;

115 
__öt32_t
 
	m°_blksize
;

116 
__öt32_t
 
	m°_blocks
;

117 
fÊags_t
 
	m°_Êags
;

118 
__uöt32_t
 
	m°_gí
;

122 
	s°©
 {

123 
__dev_t
 
	m°_dev
;

124 
öo_t
 
	m°_öo
;

125 
mode_t
 
	m°_mode
;

126 
∆ök_t
 
	m°_∆ök
;

127 
uid_t
 
	m°_uid
;

128 
gid_t
 
	m°_gid
;

129 
__dev_t
 
	m°_rdev
;

130 
time•ec
 
	m°_©im
;

131 
time•ec
 
	m°_mtim
;

132 
time•ec
 
	m°_˘im
;

133 
off_t
 
	m°_size
;

134 
blk˙t_t
 
	m°_blocks
;

135 
blksize_t
 
	m°_blksize
;

136 
fÊags_t
 
	m°_Êags
;

137 
__uöt32_t
 
	m°_gí
;

138 
__öt32_t
 
	m°_l•¨e
;

139 
time•ec
 
	m°_búthtim
;

148 :(8 / 2Ë* (16 - ()(
time•ec
));

149 :(8 / 2Ë* (16 - ()(
time•ec
));

152 #ifde‡
_KERNEL


153 
	sn°©
 {

154 
__dev_t
 
	m°_dev
;

155 
öo_t
 
	m°_öo
;

156 
__uöt32_t
 
	m°_mode
;

157 
__uöt32_t
 
	m°_∆ök
;

158 
uid_t
 
	m°_uid
;

159 
gid_t
 
	m°_gid
;

160 
__dev_t
 
	m°_rdev
;

161 
time•ec
 
	m°_©im
;

162 
time•ec
 
	m°_mtim
;

163 
time•ec
 
	m°_˘im
;

164 
off_t
 
	m°_size
;

165 
blk˙t_t
 
	m°_blocks
;

166 
blksize_t
 
	m°_blksize
;

167 
fÊags_t
 
	m°_Êags
;

168 
__uöt32_t
 
	m°_gí
;

169 
time•ec
 
	m°_búthtim
;

173 :(8 / 2Ë* (16 - ()(
time•ec
));

174 :(8 / 2Ë* (16 - ()(
time•ec
));

178 #i‚de‡
_KERNEL


179 
	#°_©ime
 
°_©im
.
tv_£c


	)

180 
	#°_mtime
 
°_mtim
.
tv_£c


	)

181 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

182 #i‡
__BSD_VISIBLE


183 
	#°_búthtime
 
°_búthtim
.
tv_£c


	)

187 #i‡
__BSD_VISIBLE


188 
	#°_©ime•ec
 
°_©im


	)

189 
	#°_mtime•ec
 
°_mtim


	)

190 
	#°_˘ime•ec
 
°_˘im


	)

191 
	#°_búthtime•ec
 
°_búthtim


	)

195 
	#S_ISUID
 0004000

	)

196 
	#S_ISGID
 0002000

	)

197 #i‡
__BSD_VISIBLE


198 
	#S_ISTXT
 0001000

	)

201 
	#S_IRWXU
 0000700

	)

202 
	#S_IRUSR
 0000400

	)

203 
	#S_IWUSR
 0000200

	)

204 
	#S_IXUSR
 0000100

	)

206 #i‡
__BSD_VISIBLE


207 
	#S_IREAD
 
S_IRUSR


	)

208 
	#S_IWRITE
 
S_IWUSR


	)

209 
	#S_IEXEC
 
S_IXUSR


	)

212 
	#S_IRWXG
 0000070

	)

213 
	#S_IRGRP
 0000040

	)

214 
	#S_IWGRP
 0000020

	)

215 
	#S_IXGRP
 0000010

	)

217 
	#S_IRWXO
 0000007

	)

218 
	#S_IROTH
 0000004

	)

219 
	#S_IWOTH
 0000002

	)

220 
	#S_IXOTH
 0000001

	)

222 #i‡
__XSI_VISIBLE


223 
	#S_IFMT
 0170000

	)

224 
	#S_IFIFO
 0010000

	)

225 
	#S_IFCHR
 0020000

	)

226 
	#S_IFDIR
 0040000

	)

227 
	#S_IFBLK
 0060000

	)

228 
	#S_IFREG
 0100000

	)

229 
	#S_IFLNK
 0120000

	)

230 
	#S_IFSOCK
 0140000

	)

231 
	#S_ISVTX
 0001000

	)

233 #i‡
__BSD_VISIBLE


234 
	#S_IFWHT
 0160000

	)

237 
	#S_ISDIR
(
m
Ë(((mË& 0170000Ë=0040000Ë

	)

238 
	#S_ISCHR
(
m
Ë(((mË& 0170000Ë=0020000Ë

	)

239 
	#S_ISBLK
(
m
Ë(((mË& 0170000Ë=0060000Ë

	)

240 
	#S_ISREG
(
m
Ë(((mË& 0170000Ë=0100000Ë

	)

241 
	#S_ISFIFO
(
m
Ë(((mË& 0170000Ë=0010000Ë

	)

242 #i‡
__POSIX_VISIBLE
 >= 200112

243 
	#S_ISLNK
(
m
Ë(((mË& 0170000Ë=0120000Ë

	)

244 
	#S_ISSOCK
(
m
Ë(((mË& 0170000Ë=0140000Ë

	)

246 #i‡
__BSD_VISIBLE


247 
	#S_ISWHT
(
m
Ë(((mË& 0170000Ë=0160000Ë

	)

250 #i‡
__BSD_VISIBLE


251 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

253 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISTXT
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

255 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

257 
	#S_BLKSIZE
 512

	)

264 
	#UF_SETTABLE
 0x0000fff‡

	)

265 
	#UF_NODUMP
 0x00000001

	)

266 
	#UF_IMMUTABLE
 0x00000002

	)

267 
	#UF_APPEND
 0x00000004

	)

268 
	#UF_OPAQUE
 0x00000008

	)

269 
	#UF_NOUNLINK
 0x00000010

	)

275 
	#UF_COMPRESSED
 0x00000020

	)

276 
	#UF_TRACKED
 0x00000040

	)

279 
	#UF_SYSTEM
 0x00000080

	)

280 
	#UF_SPARSE
 0x00000100

	)

281 
	#UF_OFFLINE
 0x00000200

	)

282 
	#UF_REPARSE
 0x00000400

	)

283 
	#UF_ARCHIVE
 0x00000800

	)

284 
	#UF_READONLY
 0x00001000

	)

286 
	#UF_HIDDEN
 0x00008000

	)

291 
	#SF_SETTABLE
 0xffff0000

	)

292 
	#SF_ARCHIVED
 0x00010000

	)

293 
	#SF_IMMUTABLE
 0x00020000

	)

294 
	#SF_APPEND
 0x00040000

	)

295 
	#SF_NOUNLINK
 0x00100000

	)

296 
	#SF_SNAPSHOT
 0x00200000

	)

298 #ifde‡
_KERNEL


302 
	#OPAQUE
 (
UF_OPAQUE
)

	)

303 
	#APPEND
 (
UF_APPEND
 | 
SF_APPEND
)

	)

304 
	#IMMUTABLE
 (
UF_IMMUTABLE
 | 
SF_IMMUTABLE
)

	)

305 
	#NOUNLINK
 (
UF_NOUNLINK
 | 
SF_NOUNLINK
)

	)

310 #i‡
__POSIX_VISIBLE
 >= 200809

311 
	#UTIME_NOW
 -1

	)

312 
	#UTIME_OMIT
 -2

	)

315 #i‚de‡
_KERNEL


316 
	g__BEGIN_DECLS


317 #i‡
__BSD_VISIBLE


318 
chÊags
(const *, );

319 
chÊagßt
(, const *, , );

321 
chmod
(c⁄° *, 
mode_t
);

322 #i‡
__BSD_VISIBLE


323 
fchÊags
(, );

325 #i‡
__POSIX_VISIBLE
 >= 200112

326 
fchmod
(, 
mode_t
);

328 #i‡
__POSIX_VISIBLE
 >= 200809

329 
fchmod©
(, c⁄° *, 
mode_t
, );

330 
futimís
(
fd
, c⁄° 
time•ec
 
times
[2]);

331 
utimíßt
(
fd
, c⁄° *
∑th
, c⁄° 
time•ec
 
times
[2],

332 
Êag
);

334 
f°©
(, 
°©
 *);

335 #i‡
__BSD_VISIBLE


336 
lchÊags
(const *, );

337 
lchmod
(c⁄° *, 
mode_t
);

339 #i‡
__POSIX_VISIBLE
 >= 200112

340 
l°©
(c⁄° * 
__ª°ri˘
, 
°©
 * __restrict);

342 
mkdú
(c⁄° *, 
mode_t
);

343 
mkfifo
(c⁄° *, 
mode_t
);

344 #i‡!
deföed
(
_MKNOD_DECLARED
Ë&& 
__XSI_VISIBLE


345 
mknod
(c⁄° *, 
mode_t
, 
dev_t
);

346 
	#_MKNOD_DECLARED


	)

348 
°©
(c⁄° * 
__ª°ri˘
, stat * __restrict);

349 
mode_t
 
umask
(mode_t);

350 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

351 
f°©©
(, c⁄° *, 
°©
 *, );

352 
mkdú©
(, c⁄° *, 
mode_t
);

353 
mkfifﬂt
(, c⁄° *, 
mode_t
);

355 #i‡
__BSD_VISIBLE
 || 
__XSI_VISIBLE
 >= 700

356 
mknod©
(, c⁄° *, 
mode_t
, 
dev_t
);

358 
	g__END_DECLS


	@/usr/include/sys/syslog.h

33 #i‚de‡
_SYS_SYSLOG_H_


34 
	#_SYS_SYSLOG_H_


	)

36 
	#_PATH_LOG
 "/v¨/run/log"

	)

37 
	#_PATH_LOG_PRIV
 "/v¨/run/log¥iv"

	)

38 
	#_PATH_OLDLOG
 "/dev/log"

	)

49 
	#LOG_EMERG
 0

	)

50 
	#LOG_ALERT
 1

	)

51 
	#LOG_CRIT
 2

	)

52 
	#LOG_ERR
 3

	)

53 
	#LOG_WARNING
 4

	)

54 
	#LOG_NOTICE
 5

	)

55 
	#LOG_INFO
 6

	)

56 
	#LOG_DEBUG
 7

	)

58 
	#LOG_PRIMASK
 0x07

	)

60 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

61 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

63 #ifde‡
SYSLOG_NAMES


64 
	#INTERNAL_NOPRI
 0x10

	)

66 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
((
LOG_NFACILITIES
<<3), 0)

	)

67 
	s_code
 {

68 c⁄° *
	mc_«me
;

69 
	mc_vÆ
;

70 } 
	tCODE
;

72 c⁄° 
CODE
 
	g¥i‹ôy«mes
[] = {

73 { "Æît", 
LOG_ALERT
, },

74 { "¸ô", 
LOG_CRIT
, },

75 { "debug", 
LOG_DEBUG
, },

76 { "emîg", 
LOG_EMERG
, },

77 { "îr", 
LOG_ERR
, },

78 { "îr‹", 
LOG_ERR
, },

79 { "öfo", 
LOG_INFO
, },

80 { "n⁄e", 
INTERNAL_NOPRI
, },

81 { "nŸi˚", 
LOG_NOTICE
, },

82 { "∑nic", 
LOG_EMERG
, },

83 { "w¨n", 
LOG_WARNING
, },

84 { "w¨nög", 
LOG_WARNING
, },

85 { 
NULL
, -1, }

90 
	#LOG_KERN
 (0<<3Ë

	)

91 
	#LOG_USER
 (1<<3Ë

	)

92 
	#LOG_MAIL
 (2<<3Ë

	)

93 
	#LOG_DAEMON
 (3<<3Ë

	)

94 
	#LOG_AUTH
 (4<<3Ë

	)

95 
	#LOG_SYSLOG
 (5<<3Ë

	)

96 
	#LOG_LPR
 (6<<3Ë

	)

97 
	#LOG_NEWS
 (7<<3Ë

	)

98 
	#LOG_UUCP
 (8<<3Ë

	)

99 
	#LOG_CRON
 (9<<3Ë

	)

100 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

105 
	#LOG_NTP
 (12<<3Ë

	)

106 
	#LOG_SECURITY
 (13<<3Ë

	)

107 
	#LOG_CONSOLE
 (14<<3Ë

	)

110 
	#LOG_LOCAL0
 (16<<3Ë

	)

111 
	#LOG_LOCAL1
 (17<<3Ë

	)

112 
	#LOG_LOCAL2
 (18<<3Ë

	)

113 
	#LOG_LOCAL3
 (19<<3Ë

	)

114 
	#LOG_LOCAL4
 (20<<3Ë

	)

115 
	#LOG_LOCAL5
 (21<<3Ë

	)

116 
	#LOG_LOCAL6
 (22<<3Ë

	)

117 
	#LOG_LOCAL7
 (23<<3Ë

	)

119 
	#LOG_NFACILITIES
 24

	)

120 
	#LOG_FACMASK
 0x03f8

	)

122 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

124 #ifde‡
SYSLOG_NAMES


125 c⁄° 
CODE
 
	gÁcûôy«mes
[] = {

126 { "auth", 
LOG_AUTH
, },

127 { "auth¥iv", 
LOG_AUTHPRIV
, },

128 { "c⁄sﬁe", 
LOG_CONSOLE
, },

129 { "¸⁄", 
LOG_CRON
, },

130 { "d´m⁄", 
LOG_DAEMON
, },

131 { "·p", 
LOG_FTP
, },

132 { "kîn", 
LOG_KERN
, },

133 { "Õr", 
LOG_LPR
, },

134 { "maû", 
LOG_MAIL
, },

135 { "m¨k", 
INTERNAL_MARK
, },

136 { "√ws", 
LOG_NEWS
, },

137 { "¡p", 
LOG_NTP
, },

138 { "£curôy", 
LOG_SECURITY
, },

139 { "sy¶og", 
LOG_SYSLOG
, },

140 { "u£r", 
LOG_USER
, },

141 { "uu˝", 
LOG_UUCP
, },

142 { "loˇl0", 
LOG_LOCAL0
, },

143 { "loˇl1", 
LOG_LOCAL1
, },

144 { "loˇl2", 
LOG_LOCAL2
, },

145 { "loˇl3", 
LOG_LOCAL3
, },

146 { "loˇl4", 
LOG_LOCAL4
, },

147 { "loˇl5", 
LOG_LOCAL5
, },

148 { "loˇl6", 
LOG_LOCAL6
, },

149 { "loˇl7", 
LOG_LOCAL7
, },

150 { 
NULL
, -1, }

154 #ifde‡
_KERNEL


155 
	#LOG_PRINTF
 -1

	)

161 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

162 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

170 
	#LOG_PID
 0x01

	)

171 
	#LOG_CONS
 0x02

	)

172 
	#LOG_ODELAY
 0x04

	)

173 
	#LOG_NDELAY
 0x08

	)

174 
	#LOG_NOWAIT
 0x10

	)

175 
	#LOG_PERROR
 0x20

	)

177 #ifde‡
_KERNEL


188 
	~<sys/cdefs.h
>

189 
	~<sys/_ty≥s.h
>

191 
__BEGIN_DECLS


192 
˛o£log
();

193 
›ílog
(const *, , );

194 
£éogmask
();

195 
	$sy¶og
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

196 #i‡
__BSD_VISIBLE


197 
	$vsy¶og
(, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

199 
__END_DECLS


	@/usr/include/sys/systm.h

38 #i‚de‡
_SYS_SYSTM_H_


39 
	#_SYS_SYSTM_H_


	)

41 
	~<machöe/©omic.h
>

42 
	~<machöe/˝ufunc.h
>

43 
	~<sys/ˇŒout.h
>

44 
	~<sys/cdefs.h
>

45 
	~<sys/queue.h
>

46 
	~<sys/°döt.h
>

48 
cﬁd
;

49 
su•íd_blocked
;

50 
ªboŸög
;

51 c⁄° *
∑nic°r
;

52 
vîsi⁄
[];

53 
compûî_vîsi⁄
[];

54 
c›yright
[];

55 
k°ack_∑ges
;

57 
u_l⁄g
 
∑gesizes
[];

58 
physmem
;

59 
ªÆmem
;

61 *
roŸdev«mes
[2];

63 
boŸhowto
;

64 
boŸvîbo£
;

66 
maxu£rs
;

67 
ngroups_max
;

68 
vm_gue°
;

76 
	eVM_GUEST
 { 
	mVM_GUEST_NO
 = 0, 
	mVM_GUEST_VM
, 
	mVM_GUEST_XEN
, 
	mVM_GUEST_HV
,

77 
	mVM_GUEST_VMWARE
, 
	mVM_LAST
 };

79 #i‡
deföed
(
WITNESS
Ë|| deföed(
INVARIANTS
)

80 
	$kas£π_∑nic
(c⁄° *
fmt
, ...Ë
	`__¥ötÊike
(1, 2);

83 #ifdef 
INVARIANTS


84 
	#KASSERT
(
exp
,
msg
) do { \

85 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) \

86 
kas£π_∑nic
 
msg
; \

87 
	}
} 0)

	)

88 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

89 i‡(
	`__¥edi˘_Ál£
(!(
exp
))) { \

90 
	`vn_¥ötf
(
vp
, "VNASSERT failed\n"); \

91 
kas£π_∑nic
 
msg
; \

93 } 0)

	)

95 
	#KASSERT
(
exp
,
msg
) do { \

96 } 0)

	)

98 
	#VNASSERT
(
exp
, 
vp
, 
msg
) do { \

99 } 0)

	)

102 #i‚de‡
CTASSERT


103 
	#CTASSERT
(
x
Ë
	`_Sètic_as£π
(x, "compûe-timêas£πi⁄ faûed")

	)

113 
	#ASSERT_ATOMIC_LOAD_PTR
(
v¨
, 
msg
) \

114 
	`KASSERT
((
v¨
) == (*) && \

115 ((
uöçå_t
)&(
v¨
Ë& ((*Ë- 1)Ë=0, 
msg
)

	)

120 
	#CRITICAL_ASSERT
(
td
) \

121 
	`KASSERT
((
td
)->
td_¸ô√°
 >1, ("NŸ i¿¸ôiˇ»£˘i⁄"));

	)

129 
	#SCHEDULER_STOPPED
(Ë
	`__¥edi˘_Ál£
(
cuπhªad
->
td_°›sched
)

	)

137 
o§ñd©e
;

138 
ívmode
;

139 
hötmode
;

140 
dy«mic_kív
;

141 
mtx
 
kív_lock
;

142 *
kîn_ívp
;

143 
°©ic_ív
[];

144 
°©ic_höts
[];

146 **
kívp
;

148 c⁄° *
zîo_ªgi⁄
;

150 
unm≠≥d_buf_Ælowed
;

151 
iosize_max_˛amp
;

152 
devfs_iosize_max_˛amp
;

153 
	#IOSIZE_MAX
 (
iosize_max_˛amp
 ? 
INT_MAX
 : 
SSIZE_MAX
)

	)

154 
	#DEVFS_IOSIZE_MAX
 (
devfs_iosize_max_˛amp
 ? 
INT_MAX
 : 
SSIZE_MAX
)

	)

160 
	göpcb
;

161 
	glock_obje˘
;

162 
	gmÆloc_ty≥
;

163 
	gmtx
;

164 
	g¥oc
;

165 
	gsockë
;

166 
	gthªad
;

167 
	gây
;

168 
	gu¸ed
;

169 
	guio
;

170 
	g_jmp_buf
;

171 
	gå≠‰ame
;

172 
	gevíâimî
;

174 
	$£tjmp
(
_jmp_buf
 *Ë
__ªtu∫s_twi˚
;

175 
	$l⁄gjmp
(
_jmp_buf
 *, Ë
__dód2
;

176 
	`dump°©us
(
vm_off£t_t
 
addr
, 
off_t
 
cou¡
);

177 
	`nuŒ›
();

178 
	`e›nŸsuµ
();

179 
	`uªadc
(, 
uio
 *);

180 
	`hashde°roy
(*, 
mÆloc_ty≥
 *, 
u_l⁄g
);

181 *
	`hashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
hashmask
);

182 *
	`hashöô_Êags
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
,

183 
u_l⁄g
 *
hashmask
, 
Êags
);

184 
	#HASH_NOWAIT
 0x00000001

	)

185 
	#HASH_WAITOK
 0x00000002

	)

187 *
	`phashöô
(
cou¡
, 
mÆloc_ty≥
 *
ty≥
, 
u_l⁄g
 *
√¡rõs
);

188 
	`g_waôidÀ
();

190 
	$∑nic
(c⁄° *, ...Ë
__dód2
 
	`__¥ötÊike
(1, 2);

191 
	$v∑nic
(c⁄° *, 
__va_li°
Ë
__dód2
 
	`__¥ötÊike
(1, 0);

193 
	`˝u_boŸ
();

194 
	`˝u_Êush_dˇche
(*, 
size_t
);

195 
	`˝u_roŸc⁄f
();

196 
	`¸ôiˇl_íãr
();

197 
	`¸ôiˇl_exô
();

198 
	`öô_∑øm1
();

199 
	`öô_∑øm2
(
phy•ages
);

200 
	`öô_°©ic_kív
(*, 
size_t
);

201 
	`èbÀfuŒ
(const *);

202 #ifde‡ 
EARLY_PRINTF


203 
	tóæy_putc_t
(
	tch
);

204 
óæy_putc_t
 *
óæy_putc
;

206 
	`kv¥ötf
(const *, (*)(, *), *, ,

207 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

208 
	$log
(, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

209 
	`log_c⁄sﬁe
(
uio
 *);

210 
	$a•rötf
(**
ªt
, 
mÆloc_ty≥
 *
mç
, c⁄° *
f‹m©
,

211 ...Ë
	`__¥ötÊike
(3, 4);

212 
	$¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

213 
	$¢¥ötf
(*, 
size_t
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

214 
	$•rötf
(*
buf
, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

215 
	$u¥ötf
(c⁄° *, ...Ë
	`__¥ötÊike
(1, 2);

216 
	$v¥ötf
(c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(1, 0);

217 
	$va•rötf
(**
ªt
, 
mÆloc_ty≥
 *
mç
, c⁄° *
f‹m©
,

218 
__va_li°
 
≠
Ë
	`__¥ötÊike
(3, 0);

219 
	$v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

220 
	$v¢Ωrötf
(*, 
size_t
, , c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(4, 0);

221 
	$v•rötf
(*
buf
, c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(2, 0);

222 
	$ây¥ötf
(
ây
 *, c⁄° *, ...Ë
	`__¥ötÊike
(2, 3);

223 
	$ssˇnf
(c⁄° *, c⁄° *, ...Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

224 
	$vssˇnf
(c⁄° *, c⁄° *, 
__va_li°
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

225 
	$°πﬁ
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

226 
u_l⁄g
 
	$°πoul
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

227 
quad_t
 
	$°πoq
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

228 
u_quad_t
 
	$°πouq
(c⁄° *, **, Ë
	`__n⁄nuŒ
(1);

229 
	$çrötf
(
¥oc
 *
p
, 
¥i
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

230 
	$vçrötf
(
¥oc
 *, , c⁄° *, 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

231 
	`hexdump
(c⁄° *
±r
, 
Àngth
, c⁄° *
hdr
, 
Êags
);

232 
	#HD_COLUMN_MASK
 0xff

	)

233 
	#HD_DELIM_MASK
 0xff00

	)

234 
	#HD_OMIT_COUNT
 (1 << 16)

	)

235 
	#HD_OMIT_HEX
 (1 << 17)

	)

236 
	#HD_OMIT_CHARS
 (1 << 18)

	)

238 
	#ovbc›y
(
f
, 
t
, 
l
Ë
	`bc›y
((f), (t), (l))

	)

239 
	$bc›y
(c⁄° *
‰om
, *
to
, 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

240 
	$bzîo
(*
buf
, 
size_t
 
Àn
Ë
	`__n⁄nuŒ
(1);

242 *
	$mem˝y
(*
to
, c⁄° *
‰om
, 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

243 *
	$memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
n
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

245 
	$c›y°r
(c⁄° * 
__ª°ri˘
 
kÁddr
, * __ª°ri˘ 
kdaddr
,

246 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
Ànc›õd
)

247 
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

248 
	$c›yö°r
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

249 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
Ànc›õd
)

250 
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

251 
	$c›yö
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

252 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

253 
	$c›yö_noÁu…
(c⁄° * 
__ª°ri˘
 
udaddr
, * __ª°ri˘ 
kaddr
,

254 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

255 
	$c›yout
(c⁄° * 
__ª°ri˘
 
kaddr
, * __ª°ri˘ 
udaddr
,

256 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

257 
	$c›yout_noÁu…
(c⁄° * 
__ª°ri˘
 
kaddr
, * __ª°ri˘ 
udaddr
,

258 
size_t
 
Àn
Ë
	$__n⁄nuŒ
(1Ë
	`__n⁄nuŒ
(2);

260 
	`fubyã
(vﬁ©ûêc⁄° *
ba£
);

261 
	`fuw‹d
(vﬁ©ûêc⁄° *
ba£
);

262 
	`fuw‹d16
(vﬁ©ûêc⁄° *
ba£
);

263 
öt32_t
 
	`fuw‹d32
(vﬁ©ûêc⁄° *
ba£
);

264 
öt64_t
 
	`fuw‹d64
(vﬁ©ûêc⁄° *
ba£
);

265 
	`fuew‹d
(vﬁ©ûêc⁄° *
ba£
, *
vÆ
);

266 
	`fuew‹d32
(vﬁ©ûêc⁄° *
ba£
, 
öt32_t
 *
vÆ
);

267 
	`fuew‹d64
(vﬁ©ûêc⁄° *
ba£
, 
öt64_t
 *
vÆ
);

268 
	`subyã
(vﬁ©ûê*
ba£
, 
byã
);

269 
	`suw‹d
(vﬁ©ûê*
ba£
, 
w‹d
);

270 
	`suw‹d16
(vﬁ©ûê*
ba£
, 
w‹d
);

271 
	`suw‹d32
(vﬁ©ûê*
ba£
, 
öt32_t
 
w‹d
);

272 
	`suw‹d64
(vﬁ©ûê*
ba£
, 
öt64_t
 
w‹d
);

273 
uöt32_t
 
	`ˇsuw‹d32
(vﬁ©ûêuöt32_à*
ba£
, uöt32_à
ﬁdvÆ
, uöt32_à
√wvÆ
);

274 
u_l⁄g
 
	`ˇsuw‹d
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
ﬁdvÆ
, u_l⁄g 
√wvÆ
);

275 
	`ˇsuew‹d32
(vﬁ©ûê
uöt32_t
 *
ba£
, uöt32_à
ﬁdvÆ
, uöt32_à*
ﬁdvÆp
,

276 
uöt32_t
 
√wvÆ
);

277 
	`ˇsuew‹d
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
ﬁdvÆ
, u_l⁄g *
ﬁdvÆp
,

278 
u_l⁄g
 
√wvÆ
);

280 
	`ªÆôexpúe
(*);

282 
	`sysbìp
(
hîtz
, 
≥riod
);

284 
	`h¨d˛ock
(
u£rmode
, 
uötÂå_t
 
pc
);

285 
	`h¨d˛ock_˙t
(
˙t
, 
u£rmode
);

286 
	`h¨d˛ock_˝u
(
u£rmode
);

287 
	`h¨d˛ock_sync
(
˝u
);

288 
	`so·˛ock
(*);

289 
	`°©˛ock
(
u£rmode
);

290 
	`°©˛ock_˙t
(
˙t
, 
u£rmode
);

291 
	`¥of˛ock
(
u£rmode
, 
uötÂå_t
 
pc
);

292 
	`¥of˛ock_˙t
(
˙t
, 
u£rmode
, 
uötÂå_t
 
pc
);

294 
	`h¨d˛ocköå
();

296 
	`°¨çrof˛ock
(
¥oc
 *);

297 
	`°›¥of˛ock
(
¥oc
 *);

298 
	`˝u_°¨çrof˛ock
();

299 
	`˝u_°›¥of˛ock
();

300 
sbötime_t
 
	`˝u_idÀ˛ock
();

301 
	`˝u_a˘ive˛ock
();

302 
	`˝u_√w_ˇŒout
(
˝u
, 
sbötime_t
 
bt
, sbötime_à
bt_›t
);

303 
	`˝u_ë_‰equícy
(
evíâimî
 *
ë
, 
uöt64_t
 
√w‰eq
);

304 
˝u_dì≥°_¶ìp
;

305 
˝u_dißbÀ_c2_¶ìp
;

306 
˝u_dißbÀ_c3_¶ìp
;

308 
	`¸_ˇn£e
(
u¸ed
 *
u1
, u¸ed *
u2
);

309 
	`¸_ˇn£esockë
(
u¸ed
 *
¸ed
, 
sockë
 *
so
);

310 
	`¸_ˇn£eöpcb
(
u¸ed
 *
¸ed
, 
öpcb
 *
öp
);

312 *
	`gëív
(c⁄° *
«me
);

313 
	`‰ìív
(*
ív
);

314 
	`gëív_öt
(c⁄° *
«me
, *
d©a
);

315 
	`gëív_uöt
(c⁄° *
«me
, *
d©a
);

316 
	`gëív_l⁄g
(c⁄° *
«me
, *
d©a
);

317 
	`gëív_ul⁄g
(c⁄° *
«me
, *
d©a
);

318 
	`gëív_°rög
(c⁄° *
«me
, *
d©a
, 
size
);

319 
	`gëív_quad
(c⁄° *
«me
, 
quad_t
 *
d©a
);

320 
	`£ãnv
(c⁄° *
«me
, c⁄° *
vÆue
);

321 
	`un£ãnv
(c⁄° *
«me
);

322 
	`ã°ív
(c⁄° *
«me
);

324 
	$uöt64_t
 (
	t˝u_tick_f
)();

325 
	`£t_˝utickî
(
˝u_tick_f
 *
func
, 
uöt64_t
 
‰eq
, 
v¨
);

326 
˝u_tick_f
 *
˝u_ticks
;

327 
uöt64_t
 
	`˝u_tickøã
();

328 
uöt64_t
 
	`˝utick2u£c
(uöt64_à
tick
);

330 #ifde‡
APM_FIXUP_CALLTODO


331 
timevÆ
;

332 
	`adju°_timeout_ˇŒtodo
(
timevÆ
 *
time_ch™ge
);

335 
	~<sys/libkîn.h
>

338 
	`c⁄söô
();

339 
	`˝u_öô˛ocks
();

340 
	`˝u_öô˛ocks_b•
();

341 
	`˝u_öô˛ocks_≠
();

342 
	`u§öfoöô
();

345 
	$kîn_ªboŸ
(Ë
__dód2
;

346 
	`shutdown_ni˚
();

349 
	ttimeout_t
(*);

350 
	#CALLOUT_HANDLE_INITIALIZER
(
h™dÀ
) \

351 { 
NULL
 
	}

	)
}

353 
ˇŒout_h™dÀ_öô
(
ˇŒout_h™dÀ
 *);

354 
ˇŒout_h™dÀ
 
timeout
(
timeout_t
 *, *, );

355 
u¡imeout
(
timeout_t
 *, *, 
ˇŒout_h™dÀ
);

358 
__ölöe
 
öåmask_t
 
	$•lbio
(Ë{  0; 
	}
}

359 
__ölöe
 
öåmask_t
 
	$•lˇm
(Ë{  0; 
	}
}

360 
__ölöe
 
öåmask_t
 
	$•l˛ock
(Ë{  0; 
	}
}

361 
__ölöe
 
öåmask_t
 
	$•lhigh
(Ë{  0; 
	}
}

362 
__ölöe
 
öåmask_t
 
	$•limp
(Ë{  0; 
	}
}

363 
__ölöe
 
öåmask_t
 
	$• ë
(Ë{  0; 
	}
}

364 
__ölöe
 
öåmask_t
 
	$•…ty
(Ë{  0; 
	}
}

365 
__ölöe
 
öåmask_t
 
	$•lvm
(Ë{  0; 
	}
}

366 
__ölöe
 
	$•lx
(
öåmask_t
 
ùl
 
__unu£d
Ë{ ; 
	}
}

372 
	$_¶ìp
(*
ch™
, 
lock_obje˘
 *
lock
, 
¥i
, c⁄° *
wmesg
,

373 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
Ë
	`__n⁄nuŒ
(1);

374 
	#m¶ìp
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
timo
) \

375 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

376 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

377 
	#m¶ìp_sbt
(
ch™
, 
mtx
, 
¥i
, 
wmesg
, 
bt
, 
¥
, 
Êags
) \

378 
	`_¶ìp
((
ch™
), &(
mtx
)->
lock_obje˘
, (
¥i
), (
wmesg
), (
bt
), (
¥
), \

379 (
Êags
))

	)

380 
	$m¶ìp_•ö_sbt
(*
ch™
, 
mtx
 *mtx, c⁄° *
wmesg
,

381 
sbötime_t
 
sbt
, sbötime_à
¥
, 
Êags
Ë
	`__n⁄nuŒ
(1);

382 
	#m¶ìp_•ö
(
ch™
, 
mtx
, 
wmesg
, 
timo
) \

383 
	`m¶ìp_•ö_sbt
((
ch™
), (
mtx
), (
wmesg
), 
tick_sbt
 * (
timo
), \

384 0, 
C_HARDCLOCK
)

	)

385 
	`∑u£_sbt
(c⁄° *
wmesg
, 
sbötime_t
 
sbt
, sbötime_à
¥
,

386 
Êags
);

387 
	#∑u£
(
wmesg
, 
timo
) \

388 
	`∑u£_sbt
((
wmesg
), 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

389 
	#t¶ìp
(
ch™
, 
¥i
, 
wmesg
, 
timo
) \

390 
	`_¶ìp
((
ch™
), 
NULL
, (
¥i
), (
wmesg
), 
tick_sbt
 * (
timo
), \

391 0, 
C_HARDCLOCK
)

	)

392 
	#t¶ìp_sbt
(
ch™
, 
¥i
, 
wmesg
, 
bt
, 
¥
, 
Êags
) \

393 
	`_¶ìp
((
ch™
), 
NULL
, (
¥i
), (
wmesg
), (
bt
), (
¥
), (
Êags
))

	)

394 
	$wakeup
(*
ch™
Ë
	`__n⁄nuŒ
(1);

395 
	$wakeup_⁄e
(*
ch™
Ë
	`__n⁄nuŒ
(1);

401 
cdev
;

402 
dev_t
 
	`dev2udev
(
cdev
 *
x
);

403 c⁄° *
	`devt⁄ame
(
cdev
 *cdev);

405 
	`pﬁl_no_pﬁl
(
evíts
);

408 
	`DELAY
(
u£c
);

411 
roŸ_hﬁd_tokí
;

413 
roŸ_hﬁd_tokí
 *
	`roŸ_mou¡_hﬁd
(c⁄° *
idítifõr
);

414 
	`roŸ_mou¡_ªl
(
roŸ_hﬁd_tokí
 *
h
);

415 
	`roŸ_mou¡_waô
();

416 
	`roŸ_mou¡ed
();

422 
uƒhdr
;

423 
uƒhdr
 *
	`√w_uƒhdr
(
low
, 
high
, 
mtx
 *
muãx
);

424 
	`öô_uƒhdr
(
uƒhdr
 *
uh
, 
low
, 
high
, 
mtx
 *
muãx
);

425 
	`dñëe_uƒhdr
(
uƒhdr
 *
uh
);

426 
	`˛ón_uƒhdr
(
uƒhdr
 *
uh
);

427 
	`˛ón_uƒhdæ
(
uƒhdr
 *
uh
);

428 
	`Æloc_uƒ
(
uƒhdr
 *
uh
);

429 
	`Æloc_uƒ_•ecific
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

430 
	`Æloc_uƒl
(
uƒhdr
 *
uh
);

431 
	`‰ì_uƒ
(
uƒhdr
 *
uh
, 
u_öt
 
ôem
);

433 
	`öå_¥of_°ack_u£
(
thªad
 *
td
, 
å≠‰ame
 *
‰ame
);

435 (*
so·dï_a°_˛ónup
)();

	@/usr/include/sys/types.h

38 #i‚de‡
_SYS_TYPES_H_


39 
	#_SYS_TYPES_H_


	)

41 
	~<sys/cdefs.h
>

44 
	~<machöe/ídün.h
>

45 
	~<sys/_ty≥s.h
>

47 
	~<sys/_±hªadty≥s.h
>

49 #i‡
__BSD_VISIBLE


50 
	tu_ch¨
;

51 
	tu_sh‹t
;

52 
	tu_öt
;

53 
	tu_l⁄g
;

54 #i‚de‡
_KERNEL


55 
	tush‹t
;

56 
	tuöt
;

63 
	~<sys/_°döt.h
>

65 
__uöt8_t
 
	tu_öt8_t
;

66 
__uöt16_t
 
	tu_öt16_t
;

67 
__uöt32_t
 
	tu_öt32_t
;

68 
__uöt64_t
 
	tu_öt64_t
;

70 
__uöt64_t
 
	tu_quad_t
;

71 
__öt64_t
 
	tquad_t
;

72 
quad_t
 * 
	tqaddr_t
;

74 * 
	tˇddr_t
;

75 c⁄° * 
	tc_ˇddr_t
;

77 #i‚de‡
_BLKSIZE_T_DECLARED


78 
__blksize_t
 
	tblksize_t
;

79 
	#_BLKSIZE_T_DECLARED


	)

82 
__˝uwhich_t
 
	t˝uwhich_t
;

83 
__˝uÀvñ_t
 
	t˝uÀvñ_t
;

84 
__˝u£tid_t
 
	t˝u£tid_t
;

86 #i‚de‡
_BLKCNT_T_DECLARED


87 
__blk˙t_t
 
	tblk˙t_t
;

88 
	#_BLKCNT_T_DECLARED


	)

91 #i‚de‡
_CLOCK_T_DECLARED


92 
__˛ock_t
 
	t˛ock_t
;

93 
	#_CLOCK_T_DECLARED


	)

96 #i‚de‡
_CLOCKID_T_DECLARED


97 
__˛ockid_t
 
	t˛ockid_t
;

98 
	#_CLOCKID_T_DECLARED


	)

101 
__¸ôiˇl_t
 
	t¸ôiˇl_t
;

102 
__öt64_t
 
	tdaddr_t
;

104 #i‚de‡
_DEV_T_DECLARED


105 
__dev_t
 
	tdev_t
;

106 
	#_DEV_T_DECLARED


	)

109 #i‚de‡
_FFLAGS_T_DECLARED


110 
__fÊags_t
 
	tfÊags_t
;

111 
	#_FFLAGS_T_DECLARED


	)

114 
__fix±_t
 
	tfix±_t
;

116 #i‚de‡
_FSBLKCNT_T_DECLARED


117 
__fsblk˙t_t
 
	tfsblk˙t_t
;

118 
__fsfû˙t_t
 
	tfsfû˙t_t
;

119 
	#_FSBLKCNT_T_DECLARED


	)

122 #i‚de‡
_GID_T_DECLARED


123 
__gid_t
 
	tgid_t
;

124 
	#_GID_T_DECLARED


	)

127 #i‚de‡
_IN_ADDR_T_DECLARED


128 
__uöt32_t
 
	tö_addr_t
;

129 
	#_IN_ADDR_T_DECLARED


	)

132 #i‚de‡
_IN_PORT_T_DECLARED


133 
__uöt16_t
 
	tö_p‹t_t
;

134 
	#_IN_PORT_T_DECLARED


	)

137 #i‚de‡
_ID_T_DECLARED


138 
__id_t
 
	tid_t
;

139 
	#_ID_T_DECLARED


	)

142 #i‚de‡
_INO_T_DECLARED


143 
__öo_t
 
	töo_t
;

144 
	#_INO_T_DECLARED


	)

147 #i‚de‡
_KEY_T_DECLARED


148 
__key_t
 
	tkey_t
;

149 
	#_KEY_T_DECLARED


	)

152 #i‚de‡
_LWPID_T_DECLARED


153 
__lwpid_t
 
	tlwpid_t
;

154 
	#_LWPID_T_DECLARED


	)

157 #i‚de‡
_MODE_T_DECLARED


158 
__mode_t
 
	tmode_t
;

159 
	#_MODE_T_DECLARED


	)

162 #i‚de‡
_ACCMODE_T_DECLARED


163 
__accmode_t
 
	taccmode_t
;

164 
	#_ACCMODE_T_DECLARED


	)

167 #i‚de‡
_NLINK_T_DECLARED


168 
__∆ök_t
 
	t∆ök_t
;

169 
	#_NLINK_T_DECLARED


	)

172 #i‚de‡
_OFF_T_DECLARED


173 
__off_t
 
	toff_t
;

174 
	#_OFF_T_DECLARED


	)

177 #i‚de‡
_PID_T_DECLARED


178 
__pid_t
 
	tpid_t
;

179 
	#_PID_T_DECLARED


	)

182 
__ªgi°î_t
 
	tªgi°î_t
;

184 #i‚de‡
_RLIM_T_DECLARED


185 
__æim_t
 
	tæim_t
;

186 
	#_RLIM_T_DECLARED


	)

189 
__öt64_t
 
	tsbötime_t
;

191 
__£gsz_t
 
	t£gsz_t
;

193 #i‚de‡
_SIZE_T_DECLARED


194 
__size_t
 
	tsize_t
;

195 
	#_SIZE_T_DECLARED


	)

198 #i‚de‡
_SSIZE_T_DECLARED


199 
__ssize_t
 
	tssize_t
;

200 
	#_SSIZE_T_DECLARED


	)

203 #i‚de‡
_SUSECONDS_T_DECLARED


204 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

205 
	#_SUSECONDS_T_DECLARED


	)

208 #i‚de‡
_TIME_T_DECLARED


209 
__time_t
 
	ttime_t
;

210 
	#_TIME_T_DECLARED


	)

213 #i‚de‡
_TIMER_T_DECLARED


214 
__timî_t
 
	ttimî_t
;

215 
	#_TIMER_T_DECLARED


	)

218 #i‚de‡
_MQD_T_DECLARED


219 
__mqd_t
 
	tmqd_t
;

220 
	#_MQD_T_DECLARED


	)

223 
__u_ªgi°î_t
 
	tu_ªgi°î_t
;

225 #i‚de‡
_UID_T_DECLARED


226 
__uid_t
 
	tuid_t
;

227 
	#_UID_T_DECLARED


	)

230 #i‚de‡
_USECONDS_T_DECLARED


231 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

232 
	#_USECONDS_T_DECLARED


	)

235 #i‚de‡
_CAP_RIGHTS_T_DECLARED


236 
	#_CAP_RIGHTS_T_DECLARED


	)

237 
	gˇp_rights
;

239 
ˇp_rights
 
	tˇp_rights_t
;

242 
__vm_off£t_t
 
	tvm_off£t_t
;

243 
__vm_ooff£t_t
 
	tvm_ooff£t_t
;

244 
__vm_∑ddr_t
 
	tvm_∑ddr_t
;

245 
__vm_pödex_t
 
	tvm_pödex_t
;

246 
__vm_size_t
 
	tvm_size_t
;

248 #ifde‡
_KERNEL


249 
	tboﬁón_t
;

250 
devi˚
 *
	tdevi˚_t
;

251 
__ötÂå_t
 
	tötÂå_t
;

263 
__uöt32_t
 
	töåmask_t
;

265 
__uötÂå_t
 
	tuötÂå_t
;

266 
__uöt64_t
 
	tuoff_t
;

267 
	tvm_mem©å_t
;

268 
vm_∑ge
 *
	tvm_∑ge_t
;

270 #i‡!
deföed
(
__boﬁ_åue_Ál£_¨e_deföed
Ë&& !deföed(
__˝lu•lus
)

271 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

272 
	#Ál£
 0

	)

273 
	#åue
 1

	)

274 #i‡
__STDC_VERSION__
 < 199901L && 
__GNUC__
 < 3 && !
deföed
(
__INTEL_COMPILER
)

275 
	t_Boﬁ
;

277 
_Boﬁ
 
	tboﬁ
;

280 
	#off£tof
(
ty≥
, 
fõld
Ë
	`__off£tof
—y≥, fõld)

	)

289 #ifde‡
__POPCNT__


290 
	#__bôcou¡64
(
x
Ë
	`__buûtö_p›cou¡Œ
((
__uöt64_t
)(x))

	)

291 
	#__bôcou¡32
(
x
Ë
	`__buûtö_p›cou¡
((
__uöt32_t
)(x))

	)

292 
	#__bôcou¡16
(
x
Ë
	`__buûtö_p›cou¡
((
__uöt16_t
)(x))

	)

293 
	#__bôcou¡l
(
x
Ë
	`__buûtö_p›cou¡l
(()(x))

	)

294 
	#__bôcou¡
(
x
Ë
	`__buûtö_p›cou¡
(()(x))

	)

300 
__ölöe
 
__uöt16_t


301 
	$__bôcou¡16
(
__uöt16_t
 
_x
)

304 
_x
 = (_x & 0x5555) + ((_x & 0xaaaa) >> 1);

305 
_x
 = (_x & 0x3333) + ((_x & 0xcccc) >> 2);

306 
_x
 = (_x + (_x >> 4)) & 0x0f0f;

307 
_x
 = (_x + (_x >> 8)) & 0x00ff;

308  (
_x
);

309 
	}
}

311 
__ölöe
 
__uöt32_t


312 
	$__bôcou¡32
(
__uöt32_t
 
_x
)

315 
_x
 = (_x & 0x55555555) + ((_x & 0xaaaaaaaa) >> 1);

316 
_x
 = (_x & 0x33333333) + ((_x & 0xcccccccc) >> 2);

317 
_x
 = (_x + (_x >> 4)) & 0x0f0f0f0f;

318 
_x
 = (_x + (_x >> 8));

319 
_x
 = (_x + (_x >> 16)) & 0x000000ff;

320  (
_x
);

321 
	}
}

323 #ifde‡
__LP64__


324 
__ölöe
 
__uöt64_t


325 
	$__bôcou¡64
(
__uöt64_t
 
_x
)

328 
_x
 = (_x & 0x5555555555555555) + ((_x & 0xaaaaaaaaaaaaaaaa) >> 1);

329 
_x
 = (_x & 0x3333333333333333) + ((_x & 0xcccccccccccccccc) >> 2);

330 
_x
 = (_x + (_x >> 4)) & 0x0f0f0f0f0f0f0f0f;

331 
_x
 = (_x + (_x >> 8));

332 
_x
 = (_x + (_x >> 16));

333 
_x
 = (_x + (_x >> 32)) & 0x000000ff;

334  (
_x
);

335 
	}
}

337 
	#__bôcou¡l
(
x
Ë
	`__bôcou¡64
(()(x))

	)

339 
__ölöe
 
__uöt64_t


340 
	$__bôcou¡64
(
__uöt64_t
 
_x
)

343  (
	`__bôcou¡32
(
_x
 >> 32) + __bitcount32(_x));

344 
	}
}

346 
	#__bôcou¡l
(
x
Ë
	`__bôcou¡32
(()(x))

	)

348 
	#__bôcou¡
(
x
Ë
	`__bôcou¡32
(()(x))

	)

351 #i‡
__BSD_VISIBLE


353 
	~<sys/£À˘.h
>

360 
	#maj‹
(
x
Ë(()(((
u_öt
)(xË>> 8)&0xff)Ë

	)

361 
	#mö‹
(
x
Ë(()((x)&0xffff00ff)Ë

	)

362 
	#makedev
(
x
,
y
Ë((
dev_t
)(((xË<< 8Ë| (y))Ë

	)

369 #i‚de‡
_KERNEL


370 
	g__BEGIN_DECLS


371 #i‚de‡
_FTRUNCATE_DECLARED


372 
	#_FTRUNCATE_DECLARED


	)

373 
·runˇã
(, 
off_t
);

375 #i‚de‡
_LSEEK_DECLARED


376 
	#_LSEEK_DECLARED


	)

377 
off_t
 
l£ek
(, off_t, );

379 #i‚de‡
_MMAP_DECLARED


380 
	#_MMAP_DECLARED


	)

381 * 
mm≠
(*, 
size_t
, , , , 
off_t
);

383 #i‚de‡
_TRUNCATE_DECLARED


384 
	#_TRUNCATE_DECLARED


	)

385 
åunˇã
(c⁄° *, 
off_t
);

387 
	g__END_DECLS


	@/usr/include/sys/uio.h

33 #i‚de‡
_SYS_UIO_H_


34 
	#_SYS_UIO_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

38 
	~<sys/_iovec.h
>

40 #i‚de‡
_SSIZE_T_DECLARED


41 
__ssize_t
 
	tssize_t
;

42 
	#_SSIZE_T_DECLARED


	)

45 #i‚de‡
_OFF_T_DECLARED


46 
__off_t
 
	toff_t
;

47 
	#_OFF_T_DECLARED


	)

50 #i‡
__BSD_VISIBLE


51 
	euio_rw
 { 
	mUIO_READ
, 
	mUIO_WRITE
 };

54 
	euio_£g
 {

55 
	mUIO_USERSPACE
,

56 
	mUIO_SYSSPACE
,

57 
	mUIO_NOCOPY


61 #ifde‡
_KERNEL


63 
	suio
 {

64 
iovec
 *
	muio_iov
;

65 
	muio_iov˙t
;

66 
off_t
 
	muio_off£t
;

67 
ssize_t
 
	muio_ªsid
;

68 
uio_£g
 
	muio_£gÊg
;

69 
uio_rw
 
	muio_rw
;

70 
thªad
 *
	muio_td
;

84 
	#UIO_MAXIOV
 1024

	)

86 
	gvm_obje˘
;

87 
	gvm_∑ge
;

88 
	gbus_dma_£gmít
;

90 
uio
 *
˛⁄euio
(uiÿ*
ui›
);

91 
c›yö‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

92 
size_t
 
Àn
, 
£g
);

93 
c›yöiov
(c⁄° 
iovec
 *
iovp
, 
u_öt
 
iov˙t
, iove¯**
iov
,

94 
îr‹
);

95 
c›yö°r‰om
(c⁄° * 
__ª°ri˘
 
§c
, * __ª°ri˘ 
d°
,

96 
size_t
 
Àn
, size_à* 
__ª°ri˘
 
c›õd
, 
£g
);

97 
c›yöuio
(c⁄° 
iovec
 *
iovp
, 
u_öt
 
iov˙t
, 
uio
 **
ui›
);

98 
c›yout_m≠
(
thªad
 *
td
, 
vm_off£t_t
 *
addr
, 
size_t
 
sz
);

99 
c›yout_unm≠
(
thªad
 *
td
, 
vm_off£t_t
 
addr
, 
size_t
 
sz
);

100 
physc›yö
(*
§c
, 
vm_∑ddr_t
 
d°
, 
size_t
 
Àn
);

101 
physc›yout
(
vm_∑ddr_t
 
§c
, *
d°
, 
size_t
 
Àn
);

102 
physc›yö_vli°
(
bus_dma_£gmít
 *
§c
, 
off_t
 
off£t
,

103 
vm_∑ddr_t
 
d°
, 
size_t
 
Àn
);

104 
physc›yout_vli°
(
vm_∑ddr_t
 
§c
, 
bus_dma_£gmít
 *
d°
,

105 
off_t
 
off£t
, 
size_t
 
Àn
);

106 
uiomove
(*
˝
, 
n
, 
uio
 *uio);

107 
uiomove_‰ombuf
(*
buf
, 
buÊí
, 
uio
 *uio);

108 
uiomove_‰omphys
(
vm_∑ge
 *
ma
[], 
vm_off£t_t
 
off£t
, 
n
,

109 
uio
 *uio);

110 
uiomove_noÁu…
(*
˝
, 
n
, 
uio
 *uio);

111 
uiomove_obje˘
(
vm_obje˘
 *
obj
, 
off_t
 
obj_size
, 
uio
 *uio);

115 
__BEGIN_DECLS


116 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

117 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

118 #i‡
__BSD_VISIBLE


119 
ssize_t
 
¥ódv
(, c⁄° 
iovec
 *, , 
off_t
);

120 
ssize_t
 
pwrôev
(, c⁄° 
iovec
 *, , 
off_t
);

122 
	g__END_DECLS


	@/usr/include/sys/vnode.h

33 #i‚de‡
_SYS_VNODE_H_


34 
	#_SYS_VNODE_H_


	)

36 
	~<sys/bufobj.h
>

37 
	~<sys/queue.h
>

38 
	~<sys/lock.h
>

39 
	~<sys/lockmgr.h
>

40 
	~<sys/muãx.h
>

41 
	~<sys/øngñock.h
>

42 
	~<sys/£löfo.h
>

43 
	~<sys/uio.h
>

44 
	~<sys/a˛.h
>

45 
	~<sys/kå.h
>

56 
	evty≥
 { 
	mVNON
, 
	mVREG
, 
	mVDIR
, 
	mVBLK
, 
	mVCHR
, 
	mVLNK
, 
	mVSOCK
, 
	mVFIFO
, 
	mVBAD
,

57 
	mVMARKER
 };

64 
	g«meˇche
;

66 
	svpﬁlöfo
 {

67 
mtx
 
	mvpi_lock
;

68 
£löfo
 
	mvpi_£löfo
;

69 
	mvpi_evíts
;

70 
	mvpi_ªvíts
;

95 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KVM_VNODE
)

97 
	svnode
 {

102 c⁄° *
	mv_èg
;

103 
v›_ve˘‹
 *
	mv_›
;

104 *
	mv_d©a
;

109 
mou¡
 *
	mv_mou¡
;

110 
TAILQ_ENTRY
(
vnode
Ë
	mv_nm¡vnodes
;

117 
mou¡
 *
	mvu_mou¡
;

118 
sockë
 *
	mvu_sockë
;

119 
cdev
 *
	mvu_cdev
;

120 
fifoöfo
 *
	mvu_fifoöfo
;

121 } 
	mv_un
;

127 
LIST_ENTRY
(
vnode
Ë
	mv_hashli°
;

132 
LIST_HEAD
(, 
«meˇche
Ë
	mv_ˇche_§c
;

133 
TAILQ_HEAD
(, 
«meˇche
Ë
	mv_ˇche_d°
;

134 
«meˇche
 *
	mv_ˇche_dd
;

139 
lock
 
	mv_lock
;

140 
mtx
 
	mv_öãæock
;

141 
lock
 *
	mv_v∆ock
;

146 
TAILQ_ENTRY
(
vnode
Ë
	mv_a˘‰ìli°
;

147 
bufobj
 
	mv_bufobj
;

152 
vpﬁlöfo
 *
	mv_pﬁlöfo
;

153 
œbñ
 *
	mv_œbñ
;

154 
lockf
 *
	mv_lockf
;

155 
øngñock
 
	mv_æ
;

160 
daddr_t
 
	mv_c°¨t
;

161 
daddr_t
 
	mv_œ°a
;

162 
daddr_t
 
	mv_œ°w
;

163 
	mv_˛í
;

165 
	mv_hﬁd˙t
;

166 
	mv_u£cou¡
;

167 
u_öt
 
	mv_iÊag
;

168 
u_öt
 
	mv_vÊag
;

169 
	mv_wrôecou¡
;

170 
u_öt
 
	mv_hash
;

171 
vty≥
 
	mv_ty≥
;

176 
	#v_mou¡edhîe
 
v_un
.
vu_mou¡


	)

177 
	#v_sockë
 
v_un
.
vu_sockë


	)

178 
	#v_rdev
 
v_un
.
vu_cdev


	)

179 
	#v_fifoöfo
 
v_un
.
vu_fifoöfo


	)

182 
	#v_obje˘
 
v_bufobj
.
bo_obje˘


	)

187 
	sxvnode
 {

188 
size_t
 
	mxv_size
;

189 *
	mxv_vnode
;

190 
u_l⁄g
 
	mxv_Êag
;

191 
	mxv_u£cou¡
;

192 
	mxv_wrôecou¡
;

193 
	mxv_hﬁd˙t
;

194 
u_l⁄g
 
	mxv_id
;

195 *
	mxv_mou¡
;

196 
	mxv_numouçut
;

197 
vty≥
 
	mxv_ty≥
;

199 *
	mxvu_sockë
;

200 *
	mxvu_fifo
;

201 
dev_t
 
	mxvu_rdev
;

203 
dev_t
 
	mxvu_dev
;

204 
öo_t
 
	mxvu_öo
;

205 } 
	mxv_uns
;

206 } 
	mxv_un
;

208 
	#xv_sockë
 
xv_un
.
xvu_sockë


	)

209 
	#xv_fifo
 
xv_un
.
xvu_fifo


	)

210 
	#xv_rdev
 
xv_un
.
xvu_rdev


	)

211 
	#xv_dev
 
xv_un
.
xv_uns
.
xvu_dev


	)

212 
	#xv_öo
 
xv_un
.
xv_uns
.
xvu_öo


	)

215 
	#VN_KNLIST_EMPTY
(
vp
Ë((vp)->
v_pﬁlöfo
 =
NULL
 || \

216 
	`KNLIST_EMPTY
(&(
vp
)->
v_pﬁlöfo
->
vpi_£löfo
.
si_nŸe
))

	)

218 
	#VN_KNOTE
(
vp
, 
b
, 
a
) \

220 i‡(!
	`VN_KNLIST_EMPTY
(
vp
)) \

221 
	`KNOTE
(&
vp
->
v_pﬁlöfo
->
vpi_£löfo
.
si_nŸe
, (
b
), \

222 (
a
Ë| 
KNF_NOKQLOCK
); \

223 } 0)

	)

224 
	#VN_KNOTE_LOCKED
(
vp
, 
b
Ë
	`VN_KNOTE
(vp, b, 
KNF_LISTLOCKED
)

	)

225 
	#VN_KNOTE_UNLOCKED
(
vp
, 
b
Ë
	`VN_KNOTE
(vp, b, 0)

	)

235 
	#VI_MOUNT
 0x0020

	)

236 
	#VI_AGE
 0x0040

	)

237 
	#VI_DOOMED
 0x0080

	)

238 
	#VI_FREE
 0x0100

	)

239 
	#VI_ACTIVE
 0x0200

	)

240 
	#VI_DOINGINACT
 0x0800

	)

241 
	#VI_OWEINACT
 0x1000

	)

243 
	#VV_ROOT
 0x0001

	)

244 
	#VV_ISTTY
 0x0002

	)

245 
	#VV_NOSYNC
 0x0004

	)

246 
	#VV_ETERNALDEV
 0x0008

	)

247 
	#VV_CACHEDLABEL
 0x0010

	)

248 
	#VV_TEXT
 0x0020

	)

249 
	#VV_COPYONWRITE
 0x0040

	)

250 
	#VV_SYSTEM
 0x0080

	)

251 
	#VV_PROCDEP
 0x0100

	)

252 
	#VV_NOKNOTE
 0x0200

	)

253 
	#VV_DELETED
 0x0400

	)

254 
	#VV_MD
 0x0800

	)

255 
	#VV_FORCEINSMQ
 0x1000

	)

261 
	sv©å
 {

262 
vty≥
 
	mva_ty≥
;

263 
u_sh‹t
 
	mva_mode
;

264 
	mva_∆ök
;

265 
uid_t
 
	mva_uid
;

266 
gid_t
 
	mva_gid
;

267 
dev_t
 
	mva_fsid
;

268 
	mva_fûeid
;

269 
u_quad_t
 
	mva_size
;

270 
	mva_blocksize
;

271 
time•ec
 
	mva_©ime
;

272 
time•ec
 
	mva_mtime
;

273 
time•ec
 
	mva_˘ime
;

274 
time•ec
 
	mva_búthtime
;

275 
u_l⁄g
 
	mva_gí
;

276 
u_l⁄g
 
	mva_Êags
;

277 
dev_t
 
	mva_rdev
;

278 
u_quad_t
 
	mva_byãs
;

279 
u_quad_t
 
	mva_fûîev
;

280 
u_öt
 
	mva_vaÊags
;

281 
	mva_•¨e
;

287 
	#VA_UTIMES_NULL
 0x01

	)

288 
	#VA_EXCLUSIVE
 0x02

	)

289 
	#VA_SYNC
 0x04

	)

296 
	#IO_UNIT
 0x0001

	)

297 
	#IO_APPEND
 0x0002

	)

298 
	#IO_NDELAY
 0x0004

	)

299 
	#IO_NODELOCKED
 0x0008

	)

300 
	#IO_ASYNC
 0x0010

	)

301 
	#IO_VMIO
 0x0020

	)

302 
	#IO_INVAL
 0x0040

	)

303 
	#IO_SYNC
 0x0080

	)

304 
	#IO_DIRECT
 0x0100

	)

305 
	#IO_EXT
 0x0400

	)

306 
	#IO_NORMAL
 0x0800

	)

307 
	#IO_NOMACCHECK
 0x1000

	)

308 
	#IO_BUFLOCKED
 0x2000

	)

309 
	#IO_RANGELOCKED
 0x4000

	)

311 
	#IO_SEQMAX
 0x7F

	)

312 
	#IO_SEQSHIFT
 16

	)

317 
	#VEXEC
 000000000100

	)

318 
	#VWRITE
 000000000200

	)

319 
	#VREAD
 000000000400

	)

320 
	#VADMIN
 000000010000

	)

321 
	#VAPPEND
 000000040000

	)

329 
	#VEXPLICIT_DENY
 000000100000

	)

330 
	#VREAD_NAMED_ATTRS
 000000200000

	)

331 
	#VWRITE_NAMED_ATTRS
 000000400000

	)

332 
	#VDELETE_CHILD
 000001000000

	)

333 
	#VREAD_ATTRIBUTES
 000002000000

	)

334 
	#VWRITE_ATTRIBUTES
 000004000000

	)

335 
	#VDELETE
 000010000000

	)

336 
	#VREAD_ACL
 000020000000

	)

337 
	#VWRITE_ACL
 000040000000

	)

338 
	#VWRITE_OWNER
 000100000000

	)

339 
	#VSYNCHRONIZE
 000200000000

	)

344 
	#VADMIN_PERMS
 (
VADMIN
 | 
VWRITE_ATTRIBUTES
 | 
VWRITE_ACL
 | \

345 
VWRITE_OWNER
)

	)

350 
	#VSTAT_PERMS
 (
VREAD_ATTRIBUTES
 | 
VREAD_ACL
)

	)

355 
	#VMODIFY_PERMS
 (
VWRITE
 | 
VAPPEND
 | 
VADMIN_PERMS
 | 
VDELETE_CHILD
 | \

356 
VDELETE
)

	)

361 
	#VNOVAL
 (-1)

	)

366 
	#VLKTIMEOUT
 (
hz
 / 20 + 1)

	)

368 #ifde‡
_KERNEL


370 #ifde‡
MALLOC_DECLARE


371 
MALLOC_DECLARE
(
M_VNODE
);

378 
vty≥
 
i·ovt_èb
[];

379 
vâoif_èb
[];

380 
	#IFTOVT
(
mode
Ë(
i·ovt_èb
[((modeË& 
S_IFMT
Ë>> 12])

	)

381 
	#VTTOIF
(
ödx
Ë(
vâoif_èb
[()(ödx)])

	)

382 
	#MAKEIMODE
(
ödx
, 
mode
Ë()(
	`VTTOIF
(ödxË| (mode))

	)

387 
	#SKIPSYSTEM
 0x0001

	)

388 
	#FORCECLOSE
 0x0002

	)

389 
	#WRITECLOSE
 0x0004

	)

390 
	#EARLYFLUSH
 0x0008

	)

391 
	#V_SAVE
 0x0001

	)

392 
	#V_ALT
 0x0002

	)

393 
	#V_NORMAL
 0x0004

	)

394 
	#V_CLEANONLY
 0x0008

	)

395 
	#REVOKEALL
 0x0001

	)

396 
	#V_WAIT
 0x0001

	)

397 
	#V_NOWAIT
 0x0002

	)

398 
	#V_XSLEEP
 0x0004

	)

399 
	#V_MNTREF
 0x0010

	)

401 
	#VR_START_WRITE
 0x0001

	)

402 
	#VR_NO_SUSPCLR
 0x0002

	)

404 
	#VS_SKIP_UNMOUNT
 0x0001

	)

407 
	#VREF
(
vp
Ë
	`vªf
(vp)

	)

409 #ifde‡
DIAGNOSTIC


410 
	#VATTR_NULL
(
v≠
Ë
	`v©å_nuŒ
(v≠)

	)

412 
	#VATTR_NULL
(
v≠
Ë(*(v≠Ë
va_nuŒ
Ë

	)

415 
	#NULLVP
 ((
vnode
 *)
NULL
)

	)

420 
vnode
 *
roŸvnode
;

421 
mou¡
 *
roŸdevmp
;

422 
async_io_vîsi⁄
;

423 
desúedvnodes
;

424 
uma_z⁄e
 *
«mei_z⁄e
;

425 
v©å
 
va_nuŒ
;

427 
	#VI_LOCK
(
vp
Ë
	`mtx_lock
(&(vp)->
v_öãæock
)

	)

428 
	#VI_LOCK_FLAGS
(
vp
, 
Êags
Ë
	`mtx_lock_Êags
(&(vp)->
v_öãæock
, (Êags))

	)

429 
	#VI_TRYLOCK
(
vp
Ë
	`mtx_åylock
(&(vp)->
v_öãæock
)

	)

430 
	#VI_UNLOCK
(
vp
Ë
	`mtx_u∆ock
(&(vp)->
v_öãæock
)

	)

431 
	#VI_MTX
(
vp
Ë(&(vp)->
v_öãæock
)

	)

433 
	#VN_LOCK_AREC
(
vp
Ë
	`lockÆlowªcur£
((vp)->
v_v∆ock
)

	)

434 
	#VN_LOCK_ASHARE
(
vp
Ë
	`lockÆlowsh¨e
((vp)->
v_v∆ock
)

	)

435 
	#VN_LOCK_DSHARE
(
vp
Ë
	`lockdißbÀsh¨e
((vp)->
v_v∆ock
)

	)

446 
	#VDESC_MAX_VPS
 16

	)

448 
	#VDESC_VP0_WILLRELE
 0x0001

	)

449 
	#VDESC_VP1_WILLRELE
 0x0002

	)

450 
	#VDESC_VP2_WILLRELE
 0x0004

	)

451 
	#VDESC_VP3_WILLRELE
 0x0008

	)

452 
	#VDESC_NOMAP_VPP
 0x0100

	)

453 
	#VDESC_VPP_WILLRELE
 0x0200

	)

459 
	sv›_gíîic_¨gs
 {

460 
vnode›_desc
 *
	ma_desc
;

464 
	tv›_by∑ss_t
(
	tv›_gíîic_¨gs
 *);

470 
	#VDESC_NO_OFFSET
 -1

	)

475 
	svnode›_desc
 {

476 *
	mvdesc_«me
;

477 
	mvdesc_Êags
;

478 
v›_by∑ss_t
 *
	mvdesc_ˇŒ
;

486 *
	mvdesc_vp_off£ts
;

487 
	mvdesc_vµ_off£t
;

488 
	mvdesc_¸ed_off£t
;

489 
	mvdesc_thªad_off£t
;

490 
	mvdesc_comp⁄íäame_off£t
;

493 #ifde‡
_KERNEL


497 
vnode›_desc
 *
vnode›_descs
[];

499 
	#VOPARG_OFFSETOF
(
s_ty≥
, 
fõld
Ë
	`__off£tof
(s_ty≥, fõld)

	)

500 
	#VOPARG_OFFSETTO
(
s_ty≥
, 
s_off£t
, 
°ru˘_p
) \

501 ((
s_ty≥
)(((*)(
°ru˘_p
)Ë+ (
s_off£t
)))

	)

504 #ifde‡
DEBUG_VFS_LOCKS


512 
as£π_vi_locked
(
vnode
 *
vp
, c⁄° *
°r
);

513 
as£π_vi_u∆ocked
(
vnode
 *
vp
, c⁄° *
°r
);

514 
as£π_v›_ñocked
(
vnode
 *
vp
, c⁄° *
°r
);

516 
as£π_v›_ñocked_Ÿhî
(
vnode
 *
vp
, c⁄° *
°r
);

518 
as£π_v›_locked
(
vnode
 *
vp
, c⁄° *
°r
);

520 
voi0
 
as£π_v›_¶ocked
(
vnode
 *
vp
, c⁄° *
°r
);

522 
as£π_v›_u∆ocked
(
vnode
 *
vp
, c⁄° *
°r
);

524 
	#ASSERT_VI_LOCKED
(
vp
, 
°r
Ë
	`as£π_vi_locked
((vp), (°r))

	)

525 
	#ASSERT_VI_UNLOCKED
(
vp
, 
°r
Ë
	`as£π_vi_u∆ocked
((vp), (°r))

	)

526 
	#ASSERT_VOP_ELOCKED
(
vp
, 
°r
Ë
	`as£π_v›_ñocked
((vp), (°r))

	)

528 
	#ASSERT_VOP_ELOCKED_OTHER
(
vp
, 
°r
Ë
	`as£π_v›_locked_Ÿhî
((vp), (°r))

	)

530 
	#ASSERT_VOP_LOCKED
(
vp
, 
°r
Ë
	`as£π_v›_locked
((vp), (°r))

	)

532 
	#ASSERT_VOP_SLOCKED
(
vp
, 
°r
Ë
	`as£π_v›_¶ocked
((vp), (°r))

	)

534 
	#ASSERT_VOP_UNLOCKED
(
vp
, 
°r
Ë
	`as£π_v›_u∆ocked
((vp), (°r))

	)

538 
	#ASSERT_VI_LOCKED
(
vp
, 
°r
Ë(()0)

	)

539 
	#ASSERT_VI_UNLOCKED
(
vp
, 
°r
Ë(()0)

	)

540 
	#ASSERT_VOP_ELOCKED
(
vp
, 
°r
Ë(()0)

	)

542 
	#ASSERT_VOP_ELOCKED_OTHER
(
vp
, 
°r
)

	)

544 
	#ASSERT_VOP_LOCKED
(
vp
, 
°r
Ë(()0)

	)

546 
	#ASSERT_VOP_SLOCKED
(
vp
, 
°r
)

	)

548 
	#ASSERT_VOP_UNLOCKED
(
vp
, 
°r
Ë(()0)

	)

555 
	#VCALL
(
c
Ë((c)->
a_desc
->
	`vdesc_ˇŒ
(c))

	)

557 
	#DOINGASYNC
(
vp
) \

558 (((
vp
)->
v_mou¡
->
m¡_kîn_Êag
 & 
MNTK_ASYNC
) != 0 && \

559 ((
cuπhªad
->
td_pÊags
 & 
TDP_SYNCIO
Ë=0))

	)

565 
vmiodúíabÀ
;

567 
__ölöe
 

568 
	$vn_ˇnvmio
(
vnode
 *
vp
)

570 i‡(
vp
 && (vp->
v_ty≥
 =
VREG
 || (
vmiodúíabÀ
 && vp->v_ty≥ =
VDIR
)))

571 (
TRUE
);

572 (
FALSE
);

573 
	}
}

578 
	~"vnode_if.h
"

581 
	#VN_OPEN_NOAUDIT
 0x00000001

	)

582 
	#VN_OPEN_NOCAPCHECK
 0x00000002

	)

583 
	#VN_OPEN_NAMECACHE
 0x00000004

	)

588 
	gcomp⁄íäame
;

589 
	gfûe
;

590 
	gmou¡
;

591 
	g«meid©a
;

592 
	go°©
;

593 
	gthªad
;

594 
	g¥oc
;

595 
	g°©
;

596 
	gn°©
;

597 
	gu¸ed
;

598 
	guio
;

599 
	gv©å
;

600 
	gvnode
;

602 (*
	tvn_gë_öo_t
)(
	tmou¡
 *, *, , 
	tvnode
 **);

605 
	`ˇche_ch™gesize
(
√whashsize
);

606 
	#ˇche_íãr
(
dvp
, 
vp
, 
˙p
) \

607 
	`ˇche_íãr_time
(
dvp
, 
vp
, 
˙p
, 
NULL
, NULL)

	)

608 
	`ˇche_íãr_time
(
vnode
 *
dvp
, vnodê*
vp
,

609 
comp⁄íäame
 *
˙p
, 
time•ec
 *
t•
,

610 
time•ec
 *
dt•
);

611 
	`ˇche_lookup
(
vnode
 *
dvp
, vnodê**
vµ
,

612 
comp⁄íäame
 *
˙p
, 
time•ec
 *
t•
, *
tick•
);

613 
	`ˇche_purge
(
vnode
 *
vp
);

614 
	`ˇche_purge_√g©ive
(
vnode
 *
vp
);

615 
	`ˇche_purgevfs
(
mou¡
 *
mp
);

616 
	`ch™ge_dú
(
vnode
 *
vp
, 
thªad
 *
td
);

617 
	`ch™ge_roŸ
(
vnode
 *
vp
, 
thªad
 *
td
);

618 
	`cvt°©
(
°©
 *
°
, 
o°©
 *
o°
);

619 
	`cvä°©
(
°©
 *
sb
, 
n°©
 *
nsb
);

620 
	`gë√wvnode
(c⁄° *
èg
, 
mou¡
 *
mp
, 
v›_ve˘‹
 *
v›s
,

621 
vnode
 **
vµ
);

622 
	`gë√wvnode_ª£rve
(
u_öt
 
cou¡
);

623 
	`gë√wvnode_dr›_ª£rve
();

624 
	`ösm¡que1
(
vnode
 *
vp
, 
mou¡
 *
mp
,

625 (*
då
)(
vnode
 *, *), *
då_¨g
);

626 
	`ösm¡que
(
vnode
 *
vp
, 
mou¡
 *
mp
);

627 
u_quad_t
 
	`öô_va_fûîev
();

628 
	`•ìdup_syn˚r
();

629 
	`vn_v±o˙p
(
vnode
 **
vp
, 
u¸ed
 *
¸ed
, *
buf
,

630 
u_öt
 *
buÊí
);

631 
	#ãxtvp_fuŒ∑th
(
p
, 
rb
, 
rfb
) \

632 
	`vn_fuŒ∑th
(
	`FIRST_THREAD_IN_PROC
(
p
), (p)->
p_ãxtvp
, 
rb
, 
rfb
)

	)

633 
	`vn_fuŒ∑th
(
thªad
 *
td
, 
vnode
 *
vn
,

634 **
ªtbuf
, **
‰ìbuf
);

635 
	`vn_fuŒ∑th_globÆ
(
thªad
 *
td
, 
vnode
 *
vn
,

636 **
ªtbuf
, **
‰ìbuf
);

637 
vnode
 *

638 
	`vn_dú_dd_öo
(
vnode
 *
vp
);

639 
	`vn_comm«me
(
vnode
 *
vn
, *
buf
, 
u_öt
 
buÊí
);

640 
	`vn_∑th_to_globÆ_∑th
(
thªad
 *
td
, 
vnode
 *
vp
,

641 *
∑th
, 
u_öt
 
∑thÀn
);

642 
	`vac˚ss
(
vty≥
 
ty≥
, 
mode_t
 
fûe_mode
, 
uid_t
 
fûe_uid
,

643 
gid_t
 
fûe_gid
, 
accmode_t
 
accmode
, 
u¸ed
 *
¸ed
,

644 *
¥ivu£d
);

645 
	`vac˚ss_a˛_nfs4
(
vty≥
 
ty≥
, 
uid_t
 
fûe_uid
, 
gid_t
 
fûe_gid
,

646 
a˛
 *
a˛p
, 
accmode_t
 
accmode
, 
u¸ed
 *
¸ed
,

647 *
¥ivu£d
);

648 
	`vac˚ss_a˛_posix1e
(
vty≥
 
ty≥
, 
uid_t
 
fûe_uid
,

649 
gid_t
 
fûe_gid
, 
a˛
 *a˛, 
accmode_t
 
accmode
,

650 
u¸ed
 *
¸ed
, *
¥ivu£d
);

651 
	`v©å_nuŒ
(
v©å
 *
v≠
);

652 
	`vcou¡
(
vnode
 *
vp
);

653 
	`vdr›
(
vnode
 *);

654 
	`vdr›l
(
vnode
 *);

655 
	`vÊush
(
mou¡
 *
mp
, 
roŸªfs
, 
Êags
, 
thªad
 *
td
);

656 
	`vgë
(
vnode
 *
vp
, 
lockÊag
, 
thªad
 *
td
);

657 
	`vg⁄e
(
vnode
 *
vp
);

658 
	`vhﬁd
(
vnode
 *);

659 
	`vhﬁdl
(
vnode
 *);

660 
	`vöa˘ive
(
vnode
 *, 
thªad
 *);

661 
	`vövÆbuf
(
vnode
 *
vp
, 
ßve
, 
¶pÊag
, 
¶±imeo
);

662 
	`våuncbuf
(
vnode
 *
vp
, 
u¸ed
 *
¸ed
, 
off_t
 
Àngth
,

663 
blksize
);

664 
	`vuƒef
(
vnode
 *);

665 
	$vn_¥ötf
(
vnode
 *
vp
, c⁄° *
fmt
, ...Ë
	`__¥ötÊike
(2,3);

666 
	#v¥öt
(
œbñ
, 
vp
Ë
	`vn_¥ötf
((vp), "%s\n", (œbñ))

	)

667 
	`vªcy˛e
(
vnode
 *
vp
);

668 
	`vn_bm≠_£ekhﬁe
(
vnode
 *
vp
, 
u_l⁄g
 
cmd
, 
off_t
 *
off
,

669 
u¸ed
 *
¸ed
);

670 
	`vn_˛o£
(
vnode
 *
vp
,

671 
Êags
, 
u¸ed
 *
fûe_¸ed
, 
thªad
 *
td
);

672 
	`vn_föished_wrôe
(
mou¡
 *
mp
);

673 
	`vn_föished_£c⁄d¨y_wrôe
(
mou¡
 *
mp
);

674 
	`vn_isdisk
(
vnode
 *
vp
, *
îΩ
);

675 
	`_vn_lock
(
vnode
 *
vp
, 
Êags
, *
fûe
, 
löe
);

676 
	#vn_lock
(
vp
, 
Êags
Ë
	`_vn_lock
(vp, fœgs, 
__FILE__
, 
__LINE__
)

	)

677 
	`vn_›í
(
«meid©a
 *
ndp
, *
Êagp
, 
cmode
, 
fûe
 *
Â
);

678 
	`vn_›í_¸ed
(
«meid©a
 *
ndp
, *
Êagp
, 
cmode
,

679 
u_öt
 
vn_›í_Êags
, 
u¸ed
 *
¸ed
, 
fûe
 *
Â
);

680 
	`vn_›í_vnode
(
vnode
 *
vp
, 
fmode
, 
u¸ed
 *
¸ed
,

681 
thªad
 *
td
, 
fûe
 *
Â
);

682 
	`vn_∑ges_ªmove
(
vnode
 *
vp
, 
vm_pödex_t
 
°¨t
, vm_pödex_à
íd
);

683 
	`vn_pﬁÃec‹d
(
vnode
 *
vp
, 
thªad
 *
p
, 
evíts
);

684 
	`vn_rdwr
(
uio_rw
 
rw
, 
vnode
 *
vp
, *
ba£
,

685 
Àn
, 
off_t
 
off£t
, 
uio_£g
 
£gÊg
, 
ioÊg
,

686 
u¸ed
 *
a˘ive_¸ed
, u¸ed *
fûe_¸ed
, 
ssize_t
 *
¨esid
,

687 
thªad
 *
td
);

688 
	`vn_rdwr_öchunks
(
uio_rw
 
rw
, 
vnode
 *
vp
, *
ba£
,

689 
size_t
 
Àn
, 
off_t
 
off£t
, 
uio_£g
 
£gÊg
, 
ioÊg
,

690 
u¸ed
 *
a˘ive_¸ed
, u¸ed *
fûe_¸ed
, 
size_t
 *
¨esid
,

691 
thªad
 *
td
);

692 
	`vn_æimô_fsize
(c⁄° 
vnode
 *
vn
, c⁄° 
uio
 *uio,

693 c⁄° 
thªad
 *
td
);

694 
	`vn_°©
(
vnode
 *
vp
, 
°©
 *
sb
, 
u¸ed
 *
a˘ive_¸ed
,

695 
u¸ed
 *
fûe_¸ed
, 
thªad
 *
td
);

696 
	`vn_°¨t_wrôe
(
vnode
 *
vp
, 
mou¡
 **
mµ
, 
Êags
);

697 
	`vn_°¨t_£c⁄d¨y_wrôe
(
vnode
 *
vp
, 
mou¡
 **
mµ
,

698 
Êags
);

699 
	`vn_wrôechk
(
vnode
 *
vp
);

700 
	`vn_exèâr_gë
(
vnode
 *
vp
, 
ioÊg
, 
©å«me•a˚
,

701 c⁄° *
©å«me
, *
buÊí
, *
buf
, 
thªad
 *
td
);

702 
	`vn_exèâr_£t
(
vnode
 *
vp
, 
ioÊg
, 
©å«me•a˚
,

703 c⁄° *
©å«me
, 
buÊí
, *
buf
, 
thªad
 *
td
);

704 
	`vn_exèâr_rm
(
vnode
 *
vp
, 
ioÊg
, 
©å«me•a˚
,

705 c⁄° *
©å«me
, 
thªad
 *
td
);

706 
	`vn_vgë_öo
(
vnode
 *
vp
, 
öo_t
 
öo
, 
lkÊags
,

707 
vnode
 **
rvp
);

708 
	`vn_vgë_öo_gí
(
vnode
 *
vp
, 
vn_gë_öo_t
 
Æloc
,

709 *
Æloc_¨g
, 
lkÊags
, 
vnode
 **
rvp
);

710 
	`vn_utimes_≥rm
(
vnode
 *
vp
, 
v©å
 *
v≠
,

711 
u¸ed
 *
¸ed
, 
thªad
 *
td
);

713 
	`vn_io_Áu…_uiomove
(*
d©a
, 
x„rsize
, 
uio
 *uio);

714 
	`vn_io_Áu…_pgmove
(
vm_∑ge_t
 
ma
[], 
vm_off£t_t
 
off£t
, 
x„rsize
,

715 
uio
 *uio);

717 
	#vn_øngñock_u∆ock
(
vp
, 
cookõ
) \

718 
	`øngñock_u∆ock
(&(
vp
)->
v_æ
, (
cookõ
), 
	`VI_MTX
(vp))

	)

719 
	#vn_øngñock_u∆ock_ønge
(
vp
, 
cookõ
, 
°¨t
, 
íd
) \

720 
	`øngñock_u∆ock_ønge
(&(
vp
)->
v_æ
, (
cookõ
), (
°¨t
), (
íd
), \

721 
	`VI_MTX
(
vp
))

	)

722 
	#vn_øngñock_æock
(
vp
, 
°¨t
, 
íd
) \

723 
	`øngñock_æock
(&(
vp
)->
v_æ
, (
°¨t
), (
íd
), 
	`VI_MTX
(vp))

	)

724 
	#vn_øngñock_wlock
(
vp
, 
°¨t
, 
íd
) \

725 
	`øngñock_wlock
(&(
vp
)->
v_æ
, (
°¨t
), (
íd
), 
	`VI_MTX
(vp))

	)

727 
	`vfs_ˇche_lookup
(
v›_lookup_¨gs
 *
≠
);

728 
	`vfs_time°amp
(
time•ec
 *);

729 
	`vfs_wrôe_ªsume
(
mou¡
 *
mp
, 
Êags
);

730 
	`vfs_wrôe_su•íd
(
mou¡
 *
mp
, 
Êags
);

731 
	`vfs_wrôe_su•íd_um¡
(
mou¡
 *
mp
);

732 
	`v›_°dbm≠
(
v›_bm≠_¨gs
 *);

733 
	`v›_°dfsync
(
v›_fsync_¨gs
 *);

734 
	`v›_°dgëwrôemou¡
(
v›_gëwrôemou¡_¨gs
 *);

735 
	`v›_°dgë∑ges
(
v›_gë∑ges_¨gs
 *);

736 
	`v›_°döa˘ive
(
v›_öa˘ive_¨gs
 *);

737 
	`v›_°di¶ocked
(
v›_i¶ocked_¨gs
 *);

738 
	`v›_°dkqfûãr
(
v›_kqfûãr_¨gs
 *);

739 
	`v›_°dlock
(
v›_lock1_¨gs
 *);

740 
	`v›_°dpuçages
(
v›_puçages_¨gs
 *);

741 
	`v›_°du∆ock
(
v›_u∆ock_¨gs
 *);

742 
	`v›_n›ﬁl
(
v›_pﬁl_¨gs
 *);

743 
	`v›_°dac˚ss
(
v›_ac˚ss_¨gs
 *
≠
);

744 
	`v›_°dac˚ssx
(
v›_ac˚ssx_¨gs
 *
≠
);

745 
	`v›_°dadvi£
(
v›_advi£_¨gs
 *
≠
);

746 
	`v›_°dadvlock
(
v›_advlock_¨gs
 *
≠
);

747 
	`v›_°dadvlockasync
(
v›_advlockasync_¨gs
 *
≠
);

748 
	`v›_°dadvlockpurge
(
v›_advlockpurge_¨gs
 *
≠
);

749 
	`v›_°dÆloˇã
(
v›_Æloˇã_¨gs
 *
≠
);

750 
	`v›_°d∑thc⁄f
(
v›_∑thc⁄f_¨gs
 *);

751 
	`v›_°dpﬁl
(
v›_pﬁl_¨gs
 *);

752 
	`v›_°dv±o˙p
(
v›_v±o˙p_¨gs
 *
≠
);

753 
	`v›_°dv±ofh
(
v›_v±ofh_¨gs
 *
≠
);

754 
	`v›_°du≈_böd
(
v›_u≈_böd_¨gs
 *
≠
);

755 
	`v›_°du≈_c⁄√˘
(
v›_u≈_c⁄√˘_¨gs
 *
≠
);

756 
	`v›_°du≈_dëach
(
v›_u≈_dëach_¨gs
 *
≠
);

757 
	`v›_e›nŸsuµ
(
v›_gíîic_¨gs
 *
≠
);

758 
	`v›_ebadf
(
v›_gíîic_¨gs
 *
≠
);

759 
	`v›_eövÆ
(
v›_gíîic_¨gs
 *
≠
);

760 
	`v›_í€¡
(
v›_gíîic_¨gs
 *
≠
);

761 
	`v›_íŸty
(
v›_gíîic_¨gs
 *
≠
);

762 
	`v›_nuŒ
(
v›_gíîic_¨gs
 *
≠
);

763 
	`v›_∑nic
(
v›_gíîic_¨gs
 *
≠
);

764 
	`dód_pﬁl
(
v›_pﬁl_¨gs
 *
≠
);

765 
	`dód_ªad
(
v›_ªad_¨gs
 *
≠
);

766 
	`dód_wrôe
(
v›_wrôe_¨gs
 *
≠
);

769 
	`v›_˛o£_po°
(*
a
, 
rc
);

770 
	`v›_¸óã_po°
(*
a
, 
rc
);

771 
	`v›_dñëìxèâr_po°
(*
a
, 
rc
);

772 
	`v›_lök_po°
(*
a
, 
rc
);

773 
	`v›_lock_¥e
(*
a
);

774 
	`v›_lock_po°
(*
a
, 
rc
);

775 
	`v›_lookup_po°
(*
a
, 
rc
);

776 
	`v›_lookup_¥e
(*
a
);

777 
	`v›_mkdú_po°
(*
a
, 
rc
);

778 
	`v›_mknod_po°
(*
a
, 
rc
);

779 
	`v›_›í_po°
(*
a
, 
rc
);

780 
	`v›_ªad_po°
(*
a
, 
rc
);

781 
	`v›_ªaddú_po°
(*
a
, 
rc
);

782 
	`v›_ª˛aim_po°
(*
a
, 
rc
);

783 
	`v›_ªmove_po°
(*
a
, 
rc
);

784 
	`v›_ª«me_po°
(*
a
, 
rc
);

785 
	`v›_ª«me_¥e
(*
a
);

786 
	`v›_rmdú_po°
(*
a
, 
rc
);

787 
	`v›_£èâr_po°
(*
a
, 
rc
);

788 
	`v›_£ãxèâr_po°
(*
a
, 
rc
);

789 
	`v›_°øãgy_¥e
(*
a
);

790 
	`v›_symlök_po°
(*
a
, 
rc
);

791 
	`v›_u∆ock_po°
(*
a
, 
rc
);

792 
	`v›_u∆ock_¥e
(*
a
);

794 
	`v›_ª«me_Áû
(
v›_ª«me_¨gs
 *
≠
);

796 
	#VOP_WRITE_PRE
(
≠
) \

797 
v©å
 
va
; \

798 
îr‹
; \

799 
off_t
 
osize
, 
ooff£t
, 
noff£t
; \

801 
osize
 = 
ooff£t
 = 
noff£t
 = 0; \

802 i‡(!
	`VN_KNLIST_EMPTY
((
≠
)->
a_vp
)) { \

803 
îr‹
 = 
	`VOP_GETATTR
((
≠
)->
a_vp
, &
va
, (≠)->
a_¸ed
); \

804 i‡(
îr‹
) \

805  (
îr‹
); \

806 
ooff£t
 = (
≠
)->
a_uio
->
uio_off£t
; \

807 
osize
 = (
off_t
)
va
.
va_size
; \

808 
	}

	)
}

810 
	#VOP_WRITE_POST
(
≠
, 
ªt
) \

811 
noff£t
 = (
≠
)->
a_uio
->
uio_off£t
; \

812 i‡(
noff£t
 > 
ooff£t
 && !
	`VN_KNLIST_EMPTY
((
≠
)->
a_vp
)) { \

813 
	`VFS_KNOTE_LOCKED
((
≠
)->
a_vp
, 
NOTE_WRITE
 \

814 | (
noff£t
 > 
osize
 ? 
NOTE_EXTEND
 : 0)); \

815 }

	)

817 
	#VOP_LOCK
(
vp
, 
Êags
Ë
	`VOP_LOCK1
(vp, fœgs, 
__FILE__
, 
__LINE__
)

	)

820 
vput
(
vnode
 *
vp
);

821 
vªÀ
(
vnode
 *
vp
);

822 
vªf
(
vnode
 *
vp
);

823 
vªf˙t
(
vnode
 *
vp
);

824 
v_addpﬁlöfo
(
vnode
 *
vp
);

826 
vnode_¸óã_vobje˘
(
vnode
 *
vp
, 
off_t
 
size
, 
thªad
 *
td
);

827 
vnode_de°roy_vobje˘
(
vnode
 *
vp
);

829 
v›_ve˘‹
 
fifo_•ec›s
;

830 
v›_ve˘‹
 
dód_vnode›s
;

831 
v›_ve˘‹
 
deÁu…_vnode›s
;

833 
	#VOP_PANIC
 ((*)(
uöçå_t
)
v›_∑nic
)

	)

834 
	#VOP_NULL
 ((*)(
uöçå_t
)
v›_nuŒ
)

	)

835 
	#VOP_EBADF
 ((*)(
uöçå_t
)
v›_ebadf
)

	)

836 
	#VOP_ENOTTY
 ((*)(
uöçå_t
)
v›_íŸty
)

	)

837 
	#VOP_EINVAL
 ((*)(
uöçå_t
)
v›_eövÆ
)

	)

838 
	#VOP_ENOENT
 ((*)(
uöçå_t
)
v›_í€¡
)

	)

839 
	#VOP_EOPNOTSUPP
 ((*)(
uöçå_t
)
v›_e›nŸsuµ
)

	)

842 
fifo_¥ötöfo
(
vnode
 *);

845 
	tvfs_hash_cmp_t
(
	tvnode
 *
	tvp
, *
	t¨g
);

847 
vfs_hash_ch™gesize
(
√whashsize
);

848 
vfs_hash_gë
(c⁄° 
mou¡
 *
mp
, 
u_öt
 
hash
, 
Êags
,

849 
thªad
 *
td
, 
vnode
 **
vµ
, 
vfs_hash_cmp_t
 *
‚
, *
¨g
);

850 
u_öt
 
vfs_hash_ödex
(
vnode
 *
vp
);

851 
vfs_hash_ö£π
(
vnode
 *
vp
, 
u_öt
 
hash
, 
Êags
, 
thªad
 *
td
,

852 
vnode
 **
vµ
, 
vfs_hash_cmp_t
 *
‚
, *
¨g
);

853 
vfs_hash_ªf
(c⁄° 
mou¡
 *
mp
, 
u_öt
 
hash
, 
thªad
 *
td
,

854 
vnode
 **
vµ
, 
vfs_hash_cmp_t
 *
‚
, *
¨g
);

855 
vfs_hash_ªhash
(
vnode
 *
vp
, 
u_öt
 
hash
);

856 
vfs_hash_ªmove
(
vnode
 *
vp
);

858 
vfs_kqfûãr
(
v›_kqfûãr_¨gs
 *);

859 
vfs_m¨k_©ime
(
vnode
 *
vp
, 
u¸ed
 *
¸ed
);

860 
	gdúít
;

861 
vfs_ªad_dúít
(
v›_ªaddú_¨gs
 *
≠
, 
dúít
 *
dp
, 
off_t
 
off
);

863 
vfs_unixify_accmode
(
accmode_t
 *
accmode
);

865 
vfs_u≈_ª˛aim
(
vnode
 *
vp
);

867 
£tfmode
(
thªad
 *
td
, 
u¸ed
 *
¸ed
, 
vnode
 *
vp
, 
mode
);

868 
£tfown
(
thªad
 *
td
, 
u¸ed
 *
¸ed
, 
vnode
 *
vp
, 
uid_t
 
uid
,

869 
gid_t
 
gid
);

870 
vn_chmod
(
fûe
 *
Â
, 
mode_t
 
mode
, 
u¸ed
 *
a˘ive_¸ed
,

871 
thªad
 *
td
);

872 
vn_chown
(
fûe
 *
Â
, 
uid_t
 
uid
, 
gid_t
 
gid
, 
u¸ed
 *
a˘ive_¸ed
,

873 
thªad
 *
td
);

	@/usr/include/sysexits.h

34 #i‚def 
_SYSEXITS_H_


35 
	#_SYSEXITS_H_


	)

94 
	#EX_OK
 0

	)

96 
	#EX__BASE
 64

	)

98 
	#EX_USAGE
 64

	)

99 
	#EX_DATAERR
 65

	)

100 
	#EX_NOINPUT
 66

	)

101 
	#EX_NOUSER
 67

	)

102 
	#EX_NOHOST
 68

	)

103 
	#EX_UNAVAILABLE
 69

	)

104 
	#EX_SOFTWARE
 70

	)

105 
	#EX_OSERR
 71

	)

106 
	#EX_OSFILE
 72

	)

107 
	#EX_CANTCREAT
 73

	)

108 
	#EX_IOERR
 74

	)

109 
	#EX_TEMPFAIL
 75

	)

110 
	#EX_PROTOCOL
 76

	)

111 
	#EX_NOPERM
 77

	)

112 
	#EX_CONFIG
 78

	)

114 
	#EX__MAX
 78

	)

	@/usr/include/unistd.h

33 #i‚de‡
_UNISTD_H_


34 
	#_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/uni°d.h
>

39 
	~<sys/_nuŒ.h
>

40 
	~<sys/_ty≥s.h
>

42 #i‚de‡
_GID_T_DECLARED


43 
__gid_t
 
	tgid_t
;

44 
	#_GID_T_DECLARED


	)

47 #i‚de‡
_OFF_T_DECLARED


48 
__off_t
 
	toff_t
;

49 
	#_OFF_T_DECLARED


	)

52 #i‚de‡
_PID_T_DECLARED


53 
__pid_t
 
	tpid_t
;

54 
	#_PID_T_DECLARED


	)

57 #i‚de‡
_SIZE_T_DECLARED


58 
__size_t
 
	tsize_t
;

59 
	#_SIZE_T_DECLARED


	)

62 #i‚de‡
_SSIZE_T_DECLARED


63 
__ssize_t
 
	tssize_t
;

64 
	#_SSIZE_T_DECLARED


	)

67 #i‚de‡
_UID_T_DECLARED


68 
__uid_t
 
	tuid_t
;

69 
	#_UID_T_DECLARED


	)

72 #i‚de‡
_USECONDS_T_DECLARED


73 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

74 
	#_USECONDS_T_DECLARED


	)

77 
	#STDIN_FILENO
 0

	)

78 
	#STDOUT_FILENO
 1

	)

79 
	#STDERR_FILENO
 2

	)

81 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200112

82 
	#F_ULOCK
 0

	)

83 
	#F_LOCK
 1

	)

84 
	#F_TLOCK
 2

	)

85 
	#F_TEST
 3

	)

102 
	#_POSIX_BARRIERS
 200112L

	)

103 
	#_POSIX_CPUTIME
 200112L

	)

104 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

105 
	#_POSIX_REGEXP
 1

	)

106 
	#_POSIX_SHELL
 1

	)

107 
	#_POSIX_SPAWN
 200112L

	)

108 
	#_POSIX_SPIN_LOCKS
 200112L

	)

109 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

110 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

111 
	#_POSIX_THREAD_CPUTIME
 200112L

	)

112 
	#_POSIX_THREAD_PRIO_INHERIT
 200112L

	)

113 
	#_POSIX_THREAD_PRIO_PROTECT
 200112L

	)

114 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

115 
	#_POSIX_THREAD_PROCESS_SHARED
 -1

	)

116 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 -1

	)

117 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

118 
	#_POSIX_THREADS
 200112L

	)

119 
	#_POSIX_TRACE
 -1

	)

120 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

121 
	#_POSIX_TRACE_INHERIT
 -1

	)

122 
	#_POSIX_TRACE_LOG
 -1

	)

123 
	#_POSIX2_C_BIND
 200112L

	)

124 
	#_POSIX2_C_DEV
 -1

	)

125 
	#_POSIX2_CHAR_TERM
 1

	)

126 
	#_POSIX2_FORT_DEV
 -1

	)

127 
	#_POSIX2_FORT_RUN
 200112L

	)

128 
	#_POSIX2_LOCALEDEF
 -1

	)

129 
	#_POSIX2_PBS
 -1

	)

130 
	#_POSIX2_PBS_ACCOUNTING
 -1

	)

131 
	#_POSIX2_PBS_CHECKPOINT
 -1

	)

132 
	#_POSIX2_PBS_LOCATE
 -1

	)

133 
	#_POSIX2_PBS_MESSAGE
 -1

	)

134 
	#_POSIX2_PBS_TRACK
 -1

	)

135 
	#_POSIX2_SW_DEV
 -1

	)

136 
	#_POSIX2_UPE
 200112L

	)

137 
	#_V6_ILP32_OFF32
 -1

	)

138 
	#_V6_ILP32_OFFBIG
 0

	)

139 
	#_V6_LP64_OFF64
 0

	)

140 
	#_V6_LPBIG_OFFBIG
 -1

	)

142 #i‡
__XSI_VISIBLE


143 
	#_XOPEN_CRYPT
 -1

	)

144 
	#_XOPEN_ENH_I18N
 -1

	)

145 
	#_XOPEN_LEGACY
 -1

	)

146 
	#_XOPEN_REALTIME
 -1

	)

147 
	#_XOPEN_REALTIME_THREADS
 -1

	)

148 
	#_XOPEN_UNIX
 -1

	)

152 
	#_POSIX2_VERSION
 199212L

	)

163 
	#_SC_ARG_MAX
 1

	)

164 
	#_SC_CHILD_MAX
 2

	)

165 
	#_SC_CLK_TCK
 3

	)

166 
	#_SC_NGROUPS_MAX
 4

	)

167 
	#_SC_OPEN_MAX
 5

	)

168 
	#_SC_JOB_CONTROL
 6

	)

169 
	#_SC_SAVED_IDS
 7

	)

170 
	#_SC_VERSION
 8

	)

171 
	#_SC_BC_BASE_MAX
 9

	)

172 
	#_SC_BC_DIM_MAX
 10

	)

173 
	#_SC_BC_SCALE_MAX
 11

	)

174 
	#_SC_BC_STRING_MAX
 12

	)

175 
	#_SC_COLL_WEIGHTS_MAX
 13

	)

176 
	#_SC_EXPR_NEST_MAX
 14

	)

177 
	#_SC_LINE_MAX
 15

	)

178 
	#_SC_RE_DUP_MAX
 16

	)

179 
	#_SC_2_VERSION
 17

	)

180 
	#_SC_2_C_BIND
 18

	)

181 
	#_SC_2_C_DEV
 19

	)

182 
	#_SC_2_CHAR_TERM
 20

	)

183 
	#_SC_2_FORT_DEV
 21

	)

184 
	#_SC_2_FORT_RUN
 22

	)

185 
	#_SC_2_LOCALEDEF
 23

	)

186 
	#_SC_2_SW_DEV
 24

	)

187 
	#_SC_2_UPE
 25

	)

188 
	#_SC_STREAM_MAX
 26

	)

189 
	#_SC_TZNAME_MAX
 27

	)

191 #i‡
__POSIX_VISIBLE
 >= 199309

192 
	#_SC_ASYNCHRONOUS_IO
 28

	)

193 
	#_SC_MAPPED_FILES
 29

	)

194 
	#_SC_MEMLOCK
 30

	)

195 
	#_SC_MEMLOCK_RANGE
 31

	)

196 
	#_SC_MEMORY_PROTECTION
 32

	)

197 
	#_SC_MESSAGE_PASSING
 33

	)

198 
	#_SC_PRIORITIZED_IO
 34

	)

199 
	#_SC_PRIORITY_SCHEDULING
 35

	)

200 
	#_SC_REALTIME_SIGNALS
 36

	)

201 
	#_SC_SEMAPHORES
 37

	)

202 
	#_SC_FSYNC
 38

	)

203 
	#_SC_SHARED_MEMORY_OBJECTS
 39

	)

204 
	#_SC_SYNCHRONIZED_IO
 40

	)

205 
	#_SC_TIMERS
 41

	)

206 
	#_SC_AIO_LISTIO_MAX
 42

	)

207 
	#_SC_AIO_MAX
 43

	)

208 
	#_SC_AIO_PRIO_DELTA_MAX
 44

	)

209 
	#_SC_DELAYTIMER_MAX
 45

	)

210 
	#_SC_MQ_OPEN_MAX
 46

	)

211 
	#_SC_PAGESIZE
 47

	)

212 
	#_SC_RTSIG_MAX
 48

	)

213 
	#_SC_SEM_NSEMS_MAX
 49

	)

214 
	#_SC_SEM_VALUE_MAX
 50

	)

215 
	#_SC_SIGQUEUE_MAX
 51

	)

216 
	#_SC_TIMER_MAX
 52

	)

219 #i‡
__POSIX_VISIBLE
 >= 200112

220 
	#_SC_2_PBS
 59

	)

221 
	#_SC_2_PBS_ACCOUNTING
 60

	)

222 
	#_SC_2_PBS_CHECKPOINT
 61

	)

223 
	#_SC_2_PBS_LOCATE
 62

	)

224 
	#_SC_2_PBS_MESSAGE
 63

	)

225 
	#_SC_2_PBS_TRACK
 64

	)

226 
	#_SC_ADVISORY_INFO
 65

	)

227 
	#_SC_BARRIERS
 66

	)

228 
	#_SC_CLOCK_SELECTION
 67

	)

229 
	#_SC_CPUTIME
 68

	)

230 
	#_SC_FILE_LOCKING
 69

	)

231 
	#_SC_GETGR_R_SIZE_MAX
 70

	)

232 
	#_SC_GETPW_R_SIZE_MAX
 71

	)

233 
	#_SC_HOST_NAME_MAX
 72

	)

234 
	#_SC_LOGIN_NAME_MAX
 73

	)

235 
	#_SC_MONOTONIC_CLOCK
 74

	)

236 
	#_SC_MQ_PRIO_MAX
 75

	)

237 
	#_SC_READER_WRITER_LOCKS
 76

	)

238 
	#_SC_REGEXP
 77

	)

239 
	#_SC_SHELL
 78

	)

240 
	#_SC_SPAWN
 79

	)

241 
	#_SC_SPIN_LOCKS
 80

	)

242 
	#_SC_SPORADIC_SERVER
 81

	)

243 
	#_SC_THREAD_ATTR_STACKADDR
 82

	)

244 
	#_SC_THREAD_ATTR_STACKSIZE
 83

	)

245 
	#_SC_THREAD_CPUTIME
 84

	)

246 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 85

	)

247 
	#_SC_THREAD_KEYS_MAX
 86

	)

248 
	#_SC_THREAD_PRIO_INHERIT
 87

	)

249 
	#_SC_THREAD_PRIO_PROTECT
 88

	)

250 
	#_SC_THREAD_PRIORITY_SCHEDULING
 89

	)

251 
	#_SC_THREAD_PROCESS_SHARED
 90

	)

252 
	#_SC_THREAD_SAFE_FUNCTIONS
 91

	)

253 
	#_SC_THREAD_SPORADIC_SERVER
 92

	)

254 
	#_SC_THREAD_STACK_MIN
 93

	)

255 
	#_SC_THREAD_THREADS_MAX
 94

	)

256 
	#_SC_TIMEOUTS
 95

	)

257 
	#_SC_THREADS
 96

	)

258 
	#_SC_TRACE
 97

	)

259 
	#_SC_TRACE_EVENT_FILTER
 98

	)

260 
	#_SC_TRACE_INHERIT
 99

	)

261 
	#_SC_TRACE_LOG
 100

	)

262 
	#_SC_TTY_NAME_MAX
 101

	)

263 
	#_SC_TYPED_MEMORY_OBJECTS
 102

	)

264 
	#_SC_V6_ILP32_OFF32
 103

	)

265 
	#_SC_V6_ILP32_OFFBIG
 104

	)

266 
	#_SC_V6_LP64_OFF64
 105

	)

267 
	#_SC_V6_LPBIG_OFFBIG
 106

	)

268 
	#_SC_IPV6
 118

	)

269 
	#_SC_RAW_SOCKETS
 119

	)

270 
	#_SC_SYMLOOP_MAX
 120

	)

273 #i‡
__XSI_VISIBLE


274 
	#_SC_ATEXIT_MAX
 107

	)

275 
	#_SC_IOV_MAX
 56

	)

276 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

277 
	#_SC_XOPEN_CRYPT
 108

	)

278 
	#_SC_XOPEN_ENH_I18N
 109

	)

279 
	#_SC_XOPEN_LEGACY
 110

	)

280 
	#_SC_XOPEN_REALTIME
 111

	)

281 
	#_SC_XOPEN_REALTIME_THREADS
 112

	)

282 
	#_SC_XOPEN_SHM
 113

	)

283 
	#_SC_XOPEN_STREAMS
 114

	)

284 
	#_SC_XOPEN_UNIX
 115

	)

285 
	#_SC_XOPEN_VERSION
 116

	)

286 
	#_SC_XOPEN_XCU_VERSION
 117

	)

289 #i‡
__BSD_VISIBLE


290 
	#_SC_NPROCESSORS_CONF
 57

	)

291 
	#_SC_NPROCESSORS_ONLN
 58

	)

292 
	#_SC_CPUSET_SIZE
 122

	)

296 
	#_SC_PHYS_PAGES
 121

	)

299 #i‡
__POSIX_VISIBLE
 >= 199209

300 
	#_CS_PATH
 1

	)

303 #i‡
__POSIX_VISIBLE
 >= 200112

304 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 2

	)

305 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 3

	)

306 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 4

	)

307 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 5

	)

308 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 6

	)

309 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 7

	)

310 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 8

	)

311 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 9

	)

312 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 10

	)

313 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 11

	)

314 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 12

	)

315 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 13

	)

316 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 14

	)

319 
__BEGIN_DECLS


321 
	$_exô
(Ë
__dód2
;

322 
	`ac˚ss
(const *, );

323 
	`Æ¨m
();

324 
	`chdú
(const *);

325 
	`chown
(c⁄° *, 
uid_t
, 
gid_t
);

326 
	`˛o£
();

327 
	`˛o£‰om
();

328 
	`dup
();

329 
	`dup2
(, );

330 
	`exe˛
(const *, const *, ...);

331 
	`exe˛e
(const *, const *, ...);

332 
	`exe˛p
(const *, const *, ...);

333 
	`execv
(const *, * const *);

334 
	`execve
(const *, * const *, * const *);

335 
	`execvp
(const *, * const *);

336 
pid_t
 
	`f‹k
();

337 
	`Â©hc⁄f
(, );

338 *
	`gëcwd
(*, 
size_t
);

339 
gid_t
 
	`gëegid
();

340 
uid_t
 
	`gëeuid
();

341 
gid_t
 
	`gëgid
();

342 
	`gëgroups
(, 
gid_t
 []);

343 *
	`gëlogö
();

344 
pid_t
 
	`gëpgΩ
();

345 
pid_t
 
	`gëpid
();

346 
pid_t
 
	`gëµid
();

347 
uid_t
 
	`gëuid
();

348 
	`ißây
();

349 
	`lök
(const *, const *);

350 #i‚de‡
_LSEEK_DECLARED


351 
	#_LSEEK_DECLARED


	)

352 
off_t
 
	`l£ek
(, off_t, );

354 
	`∑thc⁄f
(const *, );

355 
	`∑u£
();

356 
	`pùe
(*);

357 
ssize_t
 
	`ªad
(, *, 
size_t
);

358 
	`rmdú
(const *);

359 
	`£tgid
(
gid_t
);

360 
	`£çgid
(
pid_t
,Öid_t);

361 
pid_t
 
	`£tsid
();

362 
	`£tuid
(
uid_t
);

363 
	`¶ìp
();

364 
	`sysc⁄f
();

365 
pid_t
 
	`tcgëpgΩ
();

366 
	`tc£çgΩ
(, 
pid_t
);

367 *
	`ây«me
();

368 
	`ây«me_r
(, *, 
size_t
);

369 
	`u∆ök
(const *);

370 
ssize_t
 
	`wrôe
(, c⁄° *, 
size_t
);

373 #i‡
__POSIX_VISIBLE
 >199209 || 
__XSI_VISIBLE


374 
size_t
 
	`c⁄f°r
(, *, size_t);

375 #i‚de‡
_GETOPT_DECLARED


376 
	#_GETOPT_DECLARED


	)

377 
	`gë›t
(, * const [], const *);

379 *
›èrg
;

380 
›töd
, 
›ãº
, 
›t›t
;

385 #i‡
__POSIX_VISIBLE
 >199506 || 
__XSI_VISIBLE


386 
	`fsync
();

392 #i‚de‡
_FTRUNCATE_DECLARED


393 
	#_FTRUNCATE_DECLARED


	)

394 
	`·runˇã
(, 
off_t
);

398 #i‡
__POSIX_VISIBLE
 >= 199506

399 
	`gëlogö_r
(*, );

403 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


404 
	`fchown
(, 
uid_t
, 
gid_t
);

405 
ssize_t
 
	`ªadlök
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

407 #i‡
__POSIX_VISIBLE
 >= 200112

408 
	`gëho°«me
(*, 
size_t
);

409 
	`£ãgid
(
gid_t
);

410 
	`£ãuid
(
uid_t
);

414 #i‡
__POSIX_VISIBLE
 >200809 || 
__XSI_VISIBLE


415 
	`gësid
(
pid_t
 
_pid
);

416 
	`fchdú
();

417 
	`gëpgid
(
pid_t
 
_pid
);

418 
	`lchown
(c⁄° *, 
uid_t
, 
gid_t
);

419 
ssize_t
 
	`¥ód
(, *, 
size_t
, 
off_t
);

420 
ssize_t
 
	`pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

423 #i‚de‡
_TRUNCATE_DECLARED


424 
	#_TRUNCATE_DECLARED


	)

425 
	`åunˇã
(c⁄° *, 
off_t
);

429 #i‡
__POSIX_VISIBLE
 >200809 || 
__BSD_VISIBLE


430 
	`Ác˚sßt
(, const *, , );

431 
	`fchow«t
(, c⁄° *, 
uid_t
, 
gid_t
, );

432 
	`„xecve
(, *const [], *const []);

433 
	`lök©
(, const *, , const *, );

434 
ssize_t
 
	`ªadlök©
(, c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
size_t
);

435 
	`symlök©
(const *, , const *);

436 
	`u∆ök©
(, const *, );

444 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE
 >402 || 
__BSD_VISIBLE


445 
	`symlök
(c⁄° * 
__ª°ri˘
, const * __restrict);

449 #i‡
__XSI_VISIBLE


450 *
	`¸y±
(const *, const *);

452 
	`í¸y±
(*, );

453 
	`gëho°id
();

454 
	`lockf
(, , 
off_t
);

455 
	`ni˚
();

456 
	`£çgΩ
(
pid_t
 
_pid
,Öid_à
_pgΩ
);

457 
	`£åegid
(
gid_t
, gid_t);

458 
	`£åeuid
(
uid_t
, uid_t);

460 #i‚de‡
_SWAB_DECLARED


461 
	#_SWAB_DECLARED


	)

462 
	`swab
(c⁄° * 
__ª°ri˘
, * __ª°ri˘, 
ssize_t
);

465 
	`sync
();

469 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <500Ë|| 
__BSD_VISIBLE


470 
	`brk
(const *);

471 
	`chroŸ
(const *);

472 
	`gëdèbÀsize
();

473 
	$gë∑gesize
(Ë
__puª2
;

474 *
	`gë∑ss
(const *);

475 *
	`sbrk
(
öçå_t
);

478 #i‡(
__XSI_VISIBLE
 && __XSI_VISIBLE <600Ë|| 
__BSD_VISIBLE


479 *
	`gëwd
(*);

480 
u£c⁄ds_t


481 
	`uÆ¨m
(
u£c⁄ds_t
, useconds_t);

482 
	`u¶ìp
(
u£c⁄ds_t
);

483 
pid_t
 
	$vf‹k
(Ë
__ªtu∫s_twi˚
;

486 #i‡
__BSD_VISIBLE


487 
timevÆ
;

488 
	`ac˘
(const *);

489 
	`async_d´m⁄
();

490 
	`check_utûôy_com∑t
(const *);

492 
	`¸y±_gë_f‹m©
();

493 
	`¸y±_£t_f‹m©
(const *);

494 
	`des_cùhî
(const *, *, , );

495 
	`des_£tkey
(c⁄° *
key
);

496 
	`dup3
(, , );

497 
	`óc˚ss
(const *, );

498 
	`ídu£rshñl
();

499 
	`exe˘
(const *, * const *, * const *);

500 
	`execvP
(const *, const *, * const *);

501 
	`„©uª_¥e£¡
(const *);

502 *
	`fÊag°o°r
(
u_l⁄g
);

503 
	`gëdomaö«me
(*, );

504 
	`gëgrou∂i°
(c⁄° *, 
gid_t
, gid_t *, *);

505 
	`gëlogö˛ass
(*, 
size_t
);

506 
mode_t
 
	`gëmode
(const *, mode_t);

507 
	`gëo§ñd©e
();

508 
	`gë≥îeid
(, 
uid_t
 *, 
gid_t
 *);

509 
	`gëªsgid
(
gid_t
 *, gid_t *, gid_t *);

510 
	`gëªsuid
(
uid_t
 *, uid_t *, uid_t *);

511 *
	`gëu£rshñl
();

512 
	`öôgroups
(c⁄° *, 
gid_t
);

513 
	`úu£rok
(, , const *, const *);

514 
	`úu£rok_ß
(const *, , , const *, const *);

515 
	`is£tugid
();

516 
	`__FªeBSD_libc_íãr_ª°ri˘ed_mode
();

517 
	`Õ©hc⁄f
(const *, );

518 #i‚de‡
_MKDTEMP_DECLARED


519 *
	`mkdãmp
(*);

520 
	#_MKDTEMP_DECLARED


	)

522 #i‚def 
_MKNOD_DECLARED


523 
	`mknod
(c⁄° *, 
mode_t
, 
dev_t
);

524 
	#_MKNOD_DECLARED


	)

526 #i‚de‡
_MKSTEMP_DECLARED


527 
	`mk°emp
(*);

528 
	#_MKSTEMP_DECLARED


	)

530 
	`mk°emps
(*, );

531 #i‚de‡
_MKTEMP_DECLARED


532 *
	`mkãmp
(*);

533 
	#_MKTEMP_DECLARED


	)

535 
	`nfssvc
(, *);

536 
	`∆m_sysˇŒ
(, , , **);

537 
	`pùe2
(*, );

538 
	`¥ofû
(*, 
size_t
, 
vm_off£t_t
, );

539 
	`rcmd
(**, , const *, const *, const *, *);

540 
	`rcmd_af
(**, , const *,

542 
	`rcmdsh
(**, , const *,

544 *
	`ª_comp
(const *);

545 
	`ª_exec
(const *);

546 
	`ªboŸ
();

547 
	`ªvoke
(const *);

548 
pid_t
 
	`rf‹k
();

549 
pid_t
 
	`rf‹k_thªad
(, *, (*)(*), *);

550 
	`ºesvp‹t
(*);

551 
	`ºesvp‹t_af
(*, );

552 
	`ru£rok
(const *, , const *, const *);

553 #i‡
__BSD_VISIBLE


554 #i‚de‡
_SELECT_DECLARED


555 
	#_SELECT_DECLARED


	)

556 
	`£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

559 
	`£tdomaö«me
(const *, );

560 
	`£tgroups
(, c⁄° 
gid_t
 *);

561 
	`£tho°id
();

562 
	`£tho°«me
(const *, );

563 #i‚de‡
_SETKEY_DECLARED


564 
	`£tkey
(const *);

565 
	#_SETKEY_DECLARED


	)

567 
	`£éogö
(const *);

568 
	`£éogö˛ass
(const *);

569 *
	`£tmode
(const *);

570 
	$£çro˘ôÀ
(c⁄° *
_fmt
, ...Ë
	`__¥ötf0like
(1, 2);

571 
	`£åesgid
(
gid_t
, gid_t, gid_t);

572 
	`£åesuid
(
uid_t
, uid_t, uid_t);

573 
	`£ågid
(
gid_t
);

574 
	`£åuid
(
uid_t
);

575 
	`£tu£rshñl
();

576 
	`°πofÊags
(**, 
u_l⁄g
 *, u_long *);

577 
	`sw≠⁄
(const *);

578 
	`sw≠off
(const *);

579 
	`sysˇŒ
(, ...);

580 
off_t
 
	`__sysˇŒ
(
quad_t
, ...);

581 
	`undñëe
(const *);

582 
	`unwhôeout
(const *);

583 *
	`vÆloc
(
size_t
);

585 #i‚de‡
_OPTRESET_DECLARED


586 
	#_OPTRESET_DECLARED


	)

587 
›åe£t
;

590 
__END_DECLS


	@/usr/include/_ctype.h

42 #i‚de‡
__CTYPE_H_


43 
	#__CTYPE_H_


	)

45 
	~<sys/cdefs.h
>

46 
	~<sys/_ty≥s.h
>

48 
	#_CTYPE_A
 0x00000100L

	)

49 
	#_CTYPE_C
 0x00000200L

	)

50 
	#_CTYPE_D
 0x00000400L

	)

51 
	#_CTYPE_G
 0x00000800L

	)

52 
	#_CTYPE_L
 0x00001000L

	)

53 
	#_CTYPE_P
 0x00002000L

	)

54 
	#_CTYPE_S
 0x00004000L

	)

55 
	#_CTYPE_U
 0x00008000L

	)

56 
	#_CTYPE_X
 0x00010000L

	)

57 
	#_CTYPE_B
 0x00020000L

	)

58 
	#_CTYPE_R
 0x00040000L

	)

59 
	#_CTYPE_I
 0x00080000L

	)

60 
	#_CTYPE_T
 0x00100000L

	)

61 
	#_CTYPE_Q
 0x00200000L

	)

62 
	#_CTYPE_SW0
 0x20000000L

	)

63 
	#_CTYPE_SW1
 0x40000000L

	)

64 
	#_CTYPE_SW2
 0x80000000L

	)

65 
	#_CTYPE_SW3
 0xc0000000L

	)

66 
	#_CTYPE_SWM
 0xe0000000L

	)

67 
	#_CTYPE_SWS
 30

	)

70 
__BEGIN_DECLS


71 
	$___ru√ty≥
(
__˘_ru√_t
Ë
__puª
;

72 
__˘_ru√_t
 
	$___tﬁowî
(
__˘_ru√_t
Ë
__puª
;

73 
__˘_ru√_t
 
	$___touµî
(
__˘_ru√_t
Ë
__puª
;

74 
__END_DECLS


80 #ifde‡
_EXTERNALIZE_CTYPE_INLINES_


81 
	#_USE_CTYPE_INLINE_


	)

82 

	)

83 
	#__ölöe


	)

86 
__mb_sb_limô
;

91 #i‡!
	`deföed
(
_DONT_USE_CTYPE_INLINE_
) && \

92 (
	`deföed
(
_USE_CTYPE_INLINE_
Ë|| deföed(
__GNUC__
Ë|| 
	$deföed
(
__˝lu•lus
))

94 
	~<ru√ty≥.h
>

96 
__ölöe
 

97 
	$__maskru√
(
__˘_ru√_t
 
_c
, 
_f
)

99  ((
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥
(_c) :

100 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
]Ë& 
_f
;

101 
	}
}

103 
__ölöe
 

104 
	$__sbmaskru√
(
__˘_ru√_t
 
_c
, 
_f
)

106  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? 0 :

107 
_CuºítRu√LoˇÀ
->
__ru√ty≥
[
_c
] & 
_f
;

108 
	}
}

110 
__ölöe
 

111 
	$__i°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

113  (!!
	`__maskru√
(
_c
, 
_f
));

114 
	}
}

116 
__ölöe
 

117 
	$__sbi°y≥
(
__˘_ru√_t
 
_c
, 
_f
)

119  (!!
	`__sbmaskru√
(
_c
, 
_f
));

120 
	}
}

122 
__ölöe
 

123 
	$__is˘y≥
(
__˘_ru√_t
 
_c
, 
_f
)

125  (
_c
 < 0 || _c >= 128) ? 0 :

126 !!(
_DeÁu…Ru√LoˇÀ
.
__ru√ty≥
[
_c
] & 
_f
);

127 
	}
}

129 
__ölöe
 
__˘_ru√_t


130 
	$__touµî
(
__˘_ru√_t
 
_c
)

132  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___touµî
(_c) :

133 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

134 
	}
}

136 
__ölöe
 
__˘_ru√_t


137 
	$__sbtouµî
(
__˘_ru√_t
 
_c
)

139  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

140 
_CuºítRu√LoˇÀ
->
__m≠uµî
[
_c
];

141 
	}
}

143 
__ölöe
 
__˘_ru√_t


144 
	$__tﬁowî
(
__˘_ru√_t
 
_c
)

146  (
_c
 < 0 || _¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî
(_c) :

147 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

148 
	}
}

150 
__ölöe
 
__˘_ru√_t


151 
	$__sbtﬁowî
(
__˘_ru√_t
 
_c
)

153  (
_c
 < 0 || _¯>
__mb_sb_limô
) ? _c :

154 
_CuºítRu√LoˇÀ
->
__m≠lowî
[
_c
];

155 
	}
}

157 
__ölöe
 

158 
	$__wcwidth
(
__˘_ru√_t
 
_c
)

160 
_x
;

162 i‡(
_c
 == 0)

164 
_x
 = ()
	`__maskru√
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
);

165 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

166  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

167  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

168 
	}
}

172 
__BEGIN_DECLS


173 
__maskru√
(
__˘_ru√_t
, );

174 
__sbmaskru√
(
__˘_ru√_t
, );

175 
__i°y≥
(
__˘_ru√_t
, );

176 
__sbi°y≥
(
__˘_ru√_t
, );

177 
__is˘y≥
(
__˘_ru√_t
, );

178 
__˘_ru√_t
 
__touµî
(__ct_rune_t);

179 
__˘_ru√_t
 
__sbtouµî
(__ct_rune_t);

180 
__˘_ru√_t
 
__tﬁowî
(__ct_rune_t);

181 
__˘_ru√_t
 
__sbtﬁowî
(__ct_rune_t);

182 
__wcwidth
(
__˘_ru√_t
);

183 
	g__END_DECLS


	@/usr/include/machine/_align.h

6 
	~<x86/_Æign.h
>

	@/usr/include/machine/_limits.h

6 
	~<x86/_limôs.h
>

	@/usr/include/machine/atomic.h

28 #i‚de‡
_MACHINE_ATOMIC_H_


29 
	#_MACHINE_ATOMIC_H_


	)

31 #i‚de‡
_SYS_CDEFS_H_


32 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


35 
	#mb
(Ë
__asm
 
	`__vﬁ©ûe
("m„n˚;" : : : "mem‹y")

	)

36 
	#wmb
(Ë
__asm
 
	`__vﬁ©ûe
("s„n˚;" : : : "mem‹y")

	)

37 
	#rmb
(Ë
__asm
 
	`__vﬁ©ûe
("l„n˚;" : : : "mem‹y")

	)

76 #i‡
deföed
(
KLD_MODULE
Ë|| !deföed(
__GNUCLIKE_ASM
)

77 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

78 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
); \

79 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

81 
©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
ex≥˘
, u_öà
§c
);

82 
©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
ex≥˘
, u_l⁄g 
§c
);

83 
u_öt
 
©omic_„tchadd_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

84 
u_l⁄g
 
©omic_„tchadd_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

85 
©omic_ã°™d£t_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
);

86 
©omic_ã°™d£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
);

87 
©omic_ã°™d˛ór_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
);

88 
©omic_ã°™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
);

90 
	#ATOMIC_LOAD
(
TYPE
, 
LOP
) \

91 
u_
##
TYPE
 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûêu_##TYPE *
p
)

	)

92 
	#ATOMIC_STORE
(
TYPE
) \

93 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)

	)

101 #i‡
deföed
(
SMP
Ë|| !deföed(
_KERNEL
)

102 
	#MPLOCKED
 "lock ; "

	)

104 
	#MPLOCKED


	)

112 
	#ATOMIC_ASM
(
NAME
, 
TYPE
, 
OP
, 
CONS
, 
V
) \

113 
__ölöe
 \

114 
©omic_
##
NAME
##
_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

116 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

117 : "+m" (*
p
) \

118 : 
	`CONS
 (
V
) \

122 
__ölöe
 \

123 
©omic_
##
NAME
##
_b¨r_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

125 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
OP
 \

126 : "+m" (*
p
) \

127 : 
	`CONS
 (
V
) \

130 
__hack


	)

140 
__ölöe
 

141 
	$©omic_cmp£t_öt
(vﬁ©ûê
u_öt
 *
d°
, u_öà
ex≥˘
, u_öà
§c
)

143 
u_ch¨
 
ªs
;

145 
__asm
 
	`__vﬁ©ûe
(

146 " " 
MPLOCKED
 " "

150 : "=q" (
ªs
),

151 "+m" (*
d°
),

152 "+a" (
ex≥˘
)

153 : "r" (
§c
)

155  (
ªs
);

156 
	}
}

158 
__ölöe
 

159 
	$©omic_cmp£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
d°
, u_l⁄g 
ex≥˘
, u_l⁄g 
§c
)

161 
u_ch¨
 
ªs
;

163 
__asm
 
	`__vﬁ©ûe
(

164 " " 
MPLOCKED
 " "

168 : "=q" (
ªs
),

169 "+m" (*
d°
),

170 "+a" (
ex≥˘
)

171 : "r" (
§c
)

173  (
ªs
);

174 
	}
}

180 
__ölöe
 
u_öt


181 
	$©omic_„tchadd_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

184 
__asm
 
	`__vﬁ©ûe
(

185 " " 
MPLOCKED
 " "

188 : "+r" (
v
),

189 "+m" (*
p
)

191  (
v
);

192 
	}
}

198 
__ölöe
 
u_l⁄g


199 
	$©omic_„tchadd_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

202 
__asm
 
	`__vﬁ©ûe
(

203 " " 
MPLOCKED
 " "

206 : "+r" (
v
),

207 "+m" (*
p
)

209  (
v
);

210 
	}
}

212 
__ölöe
 

213 
	$©omic_ã°™d£t_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

215 
u_ch¨
 
ªs
;

217 
__asm
 
	`__vﬁ©ûe
(

218 " " 
MPLOCKED
 " "

222 : "=q" (
ªs
),

223 "+m" (*
p
)

224 : "Ir" (
v
 & 0x1f)

226  (
ªs
);

227 
	}
}

229 
__ölöe
 

230 
	$©omic_ã°™d£t_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
)

232 
u_ch¨
 
ªs
;

234 
__asm
 
	`__vﬁ©ûe
(

235 " " 
MPLOCKED
 " "

239 : "=q" (
ªs
),

240 "+m" (*
p
)

241 : "Jr" ((
u_l⁄g
)(
v
 & 0x3f))

243  (
ªs
);

244 
	}
}

246 
__ölöe
 

247 
	$©omic_ã°™d˛ór_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

249 
u_ch¨
 
ªs
;

251 
__asm
 
	`__vﬁ©ûe
(

252 " " 
MPLOCKED
 " "

256 : "=q" (
ªs
),

257 "+m" (*
p
)

258 : "Ir" (
v
 & 0x1f)

260  (
ªs
);

261 
	}
}

263 
__ölöe
 

264 
	$©omic_ã°™d˛ór_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, 
u_öt
 
v
)

266 
u_ch¨
 
ªs
;

268 
__asm
 
	`__vﬁ©ûe
(

269 " " 
MPLOCKED
 " "

273 : "=q" (
ªs
),

274 "+m" (*
p
)

275 : "Jr" ((
u_l⁄g
)(
v
 & 0x3f))

277  (
ªs
);

278 
	}
}

291 
	#ATOMIC_STORE
(
TYPE
) \

292 
__ölöe
 \

293 
©omic_°‹e_ªl_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
, u_##TYPE 
v
)\

295 
	`__compûî_memb¨
(); \

296 *
p
 = 
v
; \

298 
__hack


	)

300 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
SMP
)

302 
	#ATOMIC_LOAD
(
TYPE
, 
LOP
) \

303 
__ölöe
 
u_
##
TYPE
 \

304 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

306 
u_
##
TYPE
 
tmp
; \

308 
tmp
 = *
p
; \

309 
	`__compûî_memb¨
(); \

310  (
tmp
); \

312 
__hack


	)

316 
	#ATOMIC_LOAD
(
TYPE
, 
LOP
) \

317 
__ölöe
 
u_
##
TYPE
 \

318 
©omic_lﬂd_acq_
##
	`TYPE
(vﬁ©ûê
u_
##
TYPE
 *
p
) \

320 
u_
##
TYPE
 
ªs
; \

322 
__asm
 
	`__vﬁ©ûe
(
MPLOCKED
 
LOP
 \

323 : "˜" (
ªs
), \

324 "+m" (*
p
) \

326  (
ªs
); \

328 
__hack


	)

334 
ATOMIC_ASM
(
£t
, , "‹b %b1,%0", "iq", 
v
);

335 
ATOMIC_ASM
(
˛ór
, , "™db %b1,%0", "iq", ~
v
);

336 
ATOMIC_ASM
(
add
, , "addb %b1,%0", "iq", 
v
);

337 
ATOMIC_ASM
(
subåa˘
, , "subb %b1,%0", "iq", 
v
);

339 
ATOMIC_ASM
(
£t
, , "‹w %w1,%0", "ú", 
v
);

340 
ATOMIC_ASM
(
˛ór
, , "™dw %w1,%0", "ú", ~
v
);

341 
ATOMIC_ASM
(
add
, , "addw %w1,%0", "ú", 
v
);

342 
ATOMIC_ASM
(
subåa˘
, , "subw %w1,%0", "ú", 
v
);

344 
ATOMIC_ASM
(
£t
, , "‹»%1,%0", "ú", 
v
);

345 
ATOMIC_ASM
(
˛ór
, , "™d»%1,%0", "ú", ~
v
);

346 
ATOMIC_ASM
(
add
, , "add»%1,%0", "ú", 
v
);

347 
ATOMIC_ASM
(
subåa˘
, , "sub»%1,%0", "ú", 
v
);

349 
ATOMIC_ASM
(
£t
, , "‹q %1,%0", "ú", 
v
);

350 
ATOMIC_ASM
(
˛ór
, , "™dq %1,%0", "ú", ~
v
);

351 
ATOMIC_ASM
(
add
, , "addq %1,%0", "ú", 
v
);

352 
ATOMIC_ASM
(
subåa˘
, , "subq %1,%0", "ú", 
v
);

354 
ATOMIC_LOAD
(, "cmpxchgb %b0,%1");

355 
ATOMIC_LOAD
(, "cmpxchgw %w0,%1");

356 
ATOMIC_LOAD
(, "cmpxchgl %0,%1");

357 
ATOMIC_LOAD
(, "cmpxchgq %0,%1");

359 
ATOMIC_STORE
();

360 
ATOMIC_STORE
();

361 
ATOMIC_STORE
();

362 
ATOMIC_STORE
();

364 #unde‡
ATOMIC_ASM


365 #unde‡
ATOMIC_LOAD


366 #unde‡
ATOMIC_STORE


368 #i‚de‡
WANT_FUNCTIONS


371 #ifde‡
__GNUCLIKE_ASM


373 
__ölöe
 
u_öt


374 
	$©omic_sw≠_öt
(vﬁ©ûê
u_öt
 *
p
, u_öà
v
)

377 
__asm
 
	`__vﬁ©ûe
(

380 : "+r" (
v
),

381 "+m" (*
p
));

382  (
v
);

383 
	}
}

385 
__ölöe
 
u_l⁄g


386 
	$©omic_sw≠_l⁄g
(vﬁ©ûê
u_l⁄g
 *
p
, u_l⁄g 
v
)

389 
__asm
 
	`__vﬁ©ûe
(

392 : "+r" (
v
),

393 "+m" (*
p
));

394  (
v
);

395 
	}
}

399 
u_öt
 
©omic_sw≠_öt
(vﬁ©ûêu_öà*
p
, u_öà
v
);

400 
u_l⁄g
 
©omic_sw≠_l⁄g
(vﬁ©ûêu_l⁄g *
p
, u_l⁄g 
v
);

404 
	#©omic_£t_acq_ch¨
 
©omic_£t_b¨r_ch¨


	)

405 
	#©omic_£t_ªl_ch¨
 
©omic_£t_b¨r_ch¨


	)

406 
	#©omic_˛ór_acq_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

407 
	#©omic_˛ór_ªl_ch¨
 
©omic_˛ór_b¨r_ch¨


	)

408 
	#©omic_add_acq_ch¨
 
©omic_add_b¨r_ch¨


	)

409 
	#©omic_add_ªl_ch¨
 
©omic_add_b¨r_ch¨


	)

410 
	#©omic_subåa˘_acq_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

411 
	#©omic_subåa˘_ªl_ch¨
 
©omic_subåa˘_b¨r_ch¨


	)

413 
	#©omic_£t_acq_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

414 
	#©omic_£t_ªl_sh‹t
 
©omic_£t_b¨r_sh‹t


	)

415 
	#©omic_˛ór_acq_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

416 
	#©omic_˛ór_ªl_sh‹t
 
©omic_˛ór_b¨r_sh‹t


	)

417 
	#©omic_add_acq_sh‹t
 
©omic_add_b¨r_sh‹t


	)

418 
	#©omic_add_ªl_sh‹t
 
©omic_add_b¨r_sh‹t


	)

419 
	#©omic_subåa˘_acq_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

420 
	#©omic_subåa˘_ªl_sh‹t
 
©omic_subåa˘_b¨r_sh‹t


	)

422 
	#©omic_£t_acq_öt
 
©omic_£t_b¨r_öt


	)

423 
	#©omic_£t_ªl_öt
 
©omic_£t_b¨r_öt


	)

424 
	#©omic_˛ór_acq_öt
 
©omic_˛ór_b¨r_öt


	)

425 
	#©omic_˛ór_ªl_öt
 
©omic_˛ór_b¨r_öt


	)

426 
	#©omic_add_acq_öt
 
©omic_add_b¨r_öt


	)

427 
	#©omic_add_ªl_öt
 
©omic_add_b¨r_öt


	)

428 
	#©omic_subåa˘_acq_öt
 
©omic_subåa˘_b¨r_öt


	)

429 
	#©omic_subåa˘_ªl_öt
 
©omic_subåa˘_b¨r_öt


	)

430 
	#©omic_cmp£t_acq_öt
 
©omic_cmp£t_öt


	)

431 
	#©omic_cmp£t_ªl_öt
 
©omic_cmp£t_öt


	)

433 
	#©omic_£t_acq_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

434 
	#©omic_£t_ªl_l⁄g
 
©omic_£t_b¨r_l⁄g


	)

435 
	#©omic_˛ór_acq_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

436 
	#©omic_˛ór_ªl_l⁄g
 
©omic_˛ór_b¨r_l⁄g


	)

437 
	#©omic_add_acq_l⁄g
 
©omic_add_b¨r_l⁄g


	)

438 
	#©omic_add_ªl_l⁄g
 
©omic_add_b¨r_l⁄g


	)

439 
	#©omic_subåa˘_acq_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

440 
	#©omic_subåa˘_ªl_l⁄g
 
©omic_subåa˘_b¨r_l⁄g


	)

441 
	#©omic_cmp£t_acq_l⁄g
 
©omic_cmp£t_l⁄g


	)

442 
	#©omic_cmp£t_ªl_l⁄g
 
©omic_cmp£t_l⁄g


	)

444 
	#©omic_ªad™d˛ór_öt
(
p
Ë
	`©omic_sw≠_öt
’, 0)

	)

445 
	#©omic_ªad™d˛ór_l⁄g
(
p
Ë
	`©omic_sw≠_l⁄g
’, 0)

	)

448 
	#©omic_£t_8
 
©omic_£t_ch¨


	)

449 
	#©omic_£t_acq_8
 
©omic_£t_acq_ch¨


	)

450 
	#©omic_£t_ªl_8
 
©omic_£t_ªl_ch¨


	)

451 
	#©omic_˛ór_8
 
©omic_˛ór_ch¨


	)

452 
	#©omic_˛ór_acq_8
 
©omic_˛ór_acq_ch¨


	)

453 
	#©omic_˛ór_ªl_8
 
©omic_˛ór_ªl_ch¨


	)

454 
	#©omic_add_8
 
©omic_add_ch¨


	)

455 
	#©omic_add_acq_8
 
©omic_add_acq_ch¨


	)

456 
	#©omic_add_ªl_8
 
©omic_add_ªl_ch¨


	)

457 
	#©omic_subåa˘_8
 
©omic_subåa˘_ch¨


	)

458 
	#©omic_subåa˘_acq_8
 
©omic_subåa˘_acq_ch¨


	)

459 
	#©omic_subåa˘_ªl_8
 
©omic_subåa˘_ªl_ch¨


	)

460 
	#©omic_lﬂd_acq_8
 
©omic_lﬂd_acq_ch¨


	)

461 
	#©omic_°‹e_ªl_8
 
©omic_°‹e_ªl_ch¨


	)

464 
	#©omic_£t_16
 
©omic_£t_sh‹t


	)

465 
	#©omic_£t_acq_16
 
©omic_£t_acq_sh‹t


	)

466 
	#©omic_£t_ªl_16
 
©omic_£t_ªl_sh‹t


	)

467 
	#©omic_˛ór_16
 
©omic_˛ór_sh‹t


	)

468 
	#©omic_˛ór_acq_16
 
©omic_˛ór_acq_sh‹t


	)

469 
	#©omic_˛ór_ªl_16
 
©omic_˛ór_ªl_sh‹t


	)

470 
	#©omic_add_16
 
©omic_add_sh‹t


	)

471 
	#©omic_add_acq_16
 
©omic_add_acq_sh‹t


	)

472 
	#©omic_add_ªl_16
 
©omic_add_ªl_sh‹t


	)

473 
	#©omic_subåa˘_16
 
©omic_subåa˘_sh‹t


	)

474 
	#©omic_subåa˘_acq_16
 
©omic_subåa˘_acq_sh‹t


	)

475 
	#©omic_subåa˘_ªl_16
 
©omic_subåa˘_ªl_sh‹t


	)

476 
	#©omic_lﬂd_acq_16
 
©omic_lﬂd_acq_sh‹t


	)

477 
	#©omic_°‹e_ªl_16
 
©omic_°‹e_ªl_sh‹t


	)

480 
	#©omic_£t_32
 
©omic_£t_öt


	)

481 
	#©omic_£t_acq_32
 
©omic_£t_acq_öt


	)

482 
	#©omic_£t_ªl_32
 
©omic_£t_ªl_öt


	)

483 
	#©omic_˛ór_32
 
©omic_˛ór_öt


	)

484 
	#©omic_˛ór_acq_32
 
©omic_˛ór_acq_öt


	)

485 
	#©omic_˛ór_ªl_32
 
©omic_˛ór_ªl_öt


	)

486 
	#©omic_add_32
 
©omic_add_öt


	)

487 
	#©omic_add_acq_32
 
©omic_add_acq_öt


	)

488 
	#©omic_add_ªl_32
 
©omic_add_ªl_öt


	)

489 
	#©omic_subåa˘_32
 
©omic_subåa˘_öt


	)

490 
	#©omic_subåa˘_acq_32
 
©omic_subåa˘_acq_öt


	)

491 
	#©omic_subåa˘_ªl_32
 
©omic_subåa˘_ªl_öt


	)

492 
	#©omic_lﬂd_acq_32
 
©omic_lﬂd_acq_öt


	)

493 
	#©omic_°‹e_ªl_32
 
©omic_°‹e_ªl_öt


	)

494 
	#©omic_cmp£t_32
 
©omic_cmp£t_öt


	)

495 
	#©omic_cmp£t_acq_32
 
©omic_cmp£t_acq_öt


	)

496 
	#©omic_cmp£t_ªl_32
 
©omic_cmp£t_ªl_öt


	)

497 
	#©omic_sw≠_32
 
©omic_sw≠_öt


	)

498 
	#©omic_ªad™d˛ór_32
 
©omic_ªad™d˛ór_öt


	)

499 
	#©omic_„tchadd_32
 
©omic_„tchadd_öt


	)

500 
	#©omic_ã°™d£t_32
 
©omic_ã°™d£t_öt


	)

501 
	#©omic_ã°™d˛ór_32
 
©omic_ã°™d˛ór_öt


	)

504 
	#©omic_£t_64
 
©omic_£t_l⁄g


	)

505 
	#©omic_£t_acq_64
 
©omic_£t_acq_l⁄g


	)

506 
	#©omic_£t_ªl_64
 
©omic_£t_ªl_l⁄g


	)

507 
	#©omic_˛ór_64
 
©omic_˛ór_l⁄g


	)

508 
	#©omic_˛ór_acq_64
 
©omic_˛ór_acq_l⁄g


	)

509 
	#©omic_˛ór_ªl_64
 
©omic_˛ór_ªl_l⁄g


	)

510 
	#©omic_add_64
 
©omic_add_l⁄g


	)

511 
	#©omic_add_acq_64
 
©omic_add_acq_l⁄g


	)

512 
	#©omic_add_ªl_64
 
©omic_add_ªl_l⁄g


	)

513 
	#©omic_subåa˘_64
 
©omic_subåa˘_l⁄g


	)

514 
	#©omic_subåa˘_acq_64
 
©omic_subåa˘_acq_l⁄g


	)

515 
	#©omic_subåa˘_ªl_64
 
©omic_subåa˘_ªl_l⁄g


	)

516 
	#©omic_lﬂd_acq_64
 
©omic_lﬂd_acq_l⁄g


	)

517 
	#©omic_°‹e_ªl_64
 
©omic_°‹e_ªl_l⁄g


	)

518 
	#©omic_cmp£t_64
 
©omic_cmp£t_l⁄g


	)

519 
	#©omic_cmp£t_acq_64
 
©omic_cmp£t_acq_l⁄g


	)

520 
	#©omic_cmp£t_ªl_64
 
©omic_cmp£t_ªl_l⁄g


	)

521 
	#©omic_sw≠_64
 
©omic_sw≠_l⁄g


	)

522 
	#©omic_ªad™d˛ór_64
 
©omic_ªad™d˛ór_l⁄g


	)

523 
	#©omic_„tchadd_64
 
©omic_„tchadd_l⁄g


	)

524 
	#©omic_ã°™d£t_64
 
©omic_ã°™d£t_l⁄g


	)

525 
	#©omic_ã°™d˛ór_64
 
©omic_ã°™d˛ór_l⁄g


	)

528 
	#©omic_£t_±r
 
©omic_£t_l⁄g


	)

529 
	#©omic_£t_acq_±r
 
©omic_£t_acq_l⁄g


	)

530 
	#©omic_£t_ªl_±r
 
©omic_£t_ªl_l⁄g


	)

531 
	#©omic_˛ór_±r
 
©omic_˛ór_l⁄g


	)

532 
	#©omic_˛ór_acq_±r
 
©omic_˛ór_acq_l⁄g


	)

533 
	#©omic_˛ór_ªl_±r
 
©omic_˛ór_ªl_l⁄g


	)

534 
	#©omic_add_±r
 
©omic_add_l⁄g


	)

535 
	#©omic_add_acq_±r
 
©omic_add_acq_l⁄g


	)

536 
	#©omic_add_ªl_±r
 
©omic_add_ªl_l⁄g


	)

537 
	#©omic_subåa˘_±r
 
©omic_subåa˘_l⁄g


	)

538 
	#©omic_subåa˘_acq_±r
 
©omic_subåa˘_acq_l⁄g


	)

539 
	#©omic_subåa˘_ªl_±r
 
©omic_subåa˘_ªl_l⁄g


	)

540 
	#©omic_lﬂd_acq_±r
 
©omic_lﬂd_acq_l⁄g


	)

541 
	#©omic_°‹e_ªl_±r
 
©omic_°‹e_ªl_l⁄g


	)

542 
	#©omic_cmp£t_±r
 
©omic_cmp£t_l⁄g


	)

543 
	#©omic_cmp£t_acq_±r
 
©omic_cmp£t_acq_l⁄g


	)

544 
	#©omic_cmp£t_ªl_±r
 
©omic_cmp£t_ªl_l⁄g


	)

545 
	#©omic_sw≠_±r
 
©omic_sw≠_l⁄g


	)

546 
	#©omic_ªad™d˛ór_±r
 
©omic_ªad™d˛ór_l⁄g


	)

	@/usr/include/machine/cpufunc.h

39 #i‚de‡
_MACHINE_CPUFUNC_H_


40 
	#_MACHINE_CPUFUNC_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	gªgi⁄_des¸ùt‹
;

48 
	#ªadb
(
va
Ë(*(vﬁ©ûê
uöt8_t
 *Ë(va))

	)

49 
	#ªadw
(
va
Ë(*(vﬁ©ûê
uöt16_t
 *Ë(va))

	)

50 
	#ªadl
(
va
Ë(*(vﬁ©ûê
uöt32_t
 *Ë(va))

	)

51 
	#ªadq
(
va
Ë(*(vﬁ©ûê
uöt64_t
 *Ë(va))

	)

53 
	#wrôeb
(
va
, 
d
Ë(*(vﬁ©ûê
uöt8_t
 *Ë(vaË(d))

	)

54 
	#wrôew
(
va
, 
d
Ë(*(vﬁ©ûê
uöt16_t
 *Ë(vaË(d))

	)

55 
	#wrôñ
(
va
, 
d
Ë(*(vﬁ©ûê
uöt32_t
 *Ë(vaË(d))

	)

56 
	#wrôeq
(
va
, 
d
Ë(*(vﬁ©ûê
uöt64_t
 *Ë(vaË(d))

	)

58 #i‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__CC_SUPPORTS___INLINE
)

60 
__ölöe
 

61 
	$bªakpoöt
()

63 
__asm
 
	`__vﬁ©ûe
("int $3");

64 
	}
}

66 
__ölöe
 
u_öt


67 
	$bsÊ
(
u_öt
 
mask
)

69 
u_öt
 
ªsu…
;

71 
__asm
 
	`__vﬁ©ûe
("bsÊ %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

72  (
ªsu…
);

73 
	}
}

75 
__ölöe
 
u_l⁄g


76 
	$bsfq
(
u_l⁄g
 
mask
)

78 
u_l⁄g
 
ªsu…
;

80 
__asm
 
	`__vﬁ©ûe
("bsfq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

81  (
ªsu…
);

82 
	}
}

84 
__ölöe
 
u_öt


85 
	$b§l
(
u_öt
 
mask
)

87 
u_öt
 
ªsu…
;

89 
__asm
 
	`__vﬁ©ûe
("b§»%1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

90  (
ªsu…
);

91 
	}
}

93 
__ölöe
 
u_l⁄g


94 
	$b§q
(
u_l⁄g
 
mask
)

96 
u_l⁄g
 
ªsu…
;

98 
__asm
 
	`__vﬁ©ûe
("b§q %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

99  (
ªsu…
);

100 
	}
}

102 
__ölöe
 

103 
	$˛Êush
(
u_l⁄g
 
addr
)

106 
__asm
 
	`__vﬁ©ûe
("˛Êush %0" : : "m" (*(*)
addr
));

107 
	}
}

109 
__ölöe
 

110 
	$˛Êush›t
(
u_l⁄g
 
addr
)

113 
__asm
 
	`__vﬁ©ûe
(".byã 0x66;˛Êush %0" : : "m" (*(*)
addr
));

114 
	}
}

116 
__ölöe
 

117 
	$˛ts
()

120 
__asm
 
	`__vﬁ©ûe
("clts");

121 
	}
}

123 
__ölöe
 

124 
	$dißbÀ_öå
()

126 
__asm
 
	`__vﬁ©ûe
("cli" : : : "memory");

127 
	}
}

129 
__ölöe
 

130 
	$do_˝uid
(
u_öt
 
ax
, u_öà*
p
)

132 
__asm
 
	`__vﬁ©ûe
("cpuid"

133 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

134 : "0" (
ax
));

135 
	}
}

137 
__ölöe
 

138 
	$˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
)

140 
__asm
 
	`__vﬁ©ûe
("cpuid"

141 : "˜" (
p
[0]), "=b" (p[1]), "=c" (p[2]), "=d" (p[3])

142 : "0" (
ax
), "c" (
cx
));

143 
	}
}

145 
__ölöe
 

146 
	$íabÀ_öå
()

148 
__asm
 
	`__vﬁ©ûe
("sti");

149 
	}
}

151 #ifde‡
_KERNEL


153 
	#HAVE_INLINE_FFS


	)

154 
	#ffs
(
x
Ë
	`__buûtö_ffs
(x)

	)

156 
	#HAVE_INLINE_FFSL


	)

158 
__ölöe
 

159 
	$ff¶
(
mask
)

161  (
mask
 =0 ? mask : ()
	`bsfq
((
u_l⁄g
)mask) + 1);

162 
	}
}

164 
	#HAVE_INLINE_FFSLL


	)

166 
__ölöe
 

167 
	$ff¶l
(
mask
)

169  (
	`ff¶
(()
mask
));

170 
	}
}

172 
	#HAVE_INLINE_FLS


	)

174 
__ölöe
 

175 
	$Ês
(
mask
)

177  (
mask
 =0 ? mask : ()
	`b§l
((
u_öt
)mask) + 1);

178 
	}
}

180 
	#HAVE_INLINE_FLSL


	)

182 
__ölöe
 

183 
	$Ê¶
(
mask
)

185  (
mask
 =0 ? mask : ()
	`b§q
((
u_l⁄g
)mask) + 1);

186 
	}
}

188 
	#HAVE_INLINE_FLSLL


	)

190 
__ölöe
 

191 
	$Ê¶l
(
mask
)

193  (
	`Ê¶
(()
mask
));

194 
	}
}

198 
__ölöe
 

199 
	$hÆt
()

201 
__asm
 
	`__vﬁ©ûe
("hlt");

202 
	}
}

204 
__ölöe
 
u_ch¨


205 
	$öb
(
u_öt
 
p‹t
)

207 
u_ch¨
 
d©a
;

209 
__asm
 
	`__vﬁ©ûe
("öb %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

210  (
d©a
);

211 
	}
}

213 
__ölöe
 
u_öt


214 
	$öl
(
u_öt
 
p‹t
)

216 
u_öt
 
d©a
;

218 
__asm
 
	`__vﬁ©ûe
("ö»%w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

219  (
d©a
);

220 
	}
}

222 
__ölöe
 

223 
	$ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

225 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insb"

226 : "+D" (
addr
), "+c" (
cou¡
)

227 : "d" (
p‹t
)

229 
	}
}

231 
__ölöe
 

232 
	$ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

234 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insw"

235 : "+D" (
addr
), "+c" (
cou¡
)

236 : "d" (
p‹t
)

238 
	}
}

240 
__ölöe
 

241 
	$ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
)

243 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; insl"

244 : "+D" (
addr
), "+c" (
cou¡
)

245 : "d" (
p‹t
)

247 
	}
}

249 
__ölöe
 

250 
	$övd
()

252 
__asm
 
	`__vﬁ©ûe
("invd");

253 
	}
}

255 
__ölöe
 
u_sh‹t


256 
	$öw
(
u_öt
 
p‹t
)

258 
u_sh‹t
 
d©a
;

260 
__asm
 
	`__vﬁ©ûe
("öw %w1, %0" : "˜" (
d©a
Ë: "Nd" (
p‹t
));

261  (
d©a
);

262 
	}
}

264 
__ölöe
 

265 
	$outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
)

267 
__asm
 
	`__vﬁ©ûe
("outb %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

268 
	}
}

270 
__ölöe
 

271 
	$oué
(
u_öt
 
p‹t
, u_öà
d©a
)

273 
__asm
 
	`__vﬁ©ûe
("oué %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

274 
	}
}

276 
__ölöe
 

277 
	$outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

279 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsb"

280 : "+S" (
addr
), "+c" (
cou¡
)

281 : "d" (
p‹t
));

282 
	}
}

284 
__ölöe
 

285 
	$outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

287 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsw"

288 : "+S" (
addr
), "+c" (
cou¡
)

289 : "d" (
p‹t
));

290 
	}
}

292 
__ölöe
 

293 
	$out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
)

295 
__asm
 
	`__vﬁ©ûe
("cld;Ñep; outsl"

296 : "+S" (
addr
), "+c" (
cou¡
)

297 : "d" (
p‹t
));

298 
	}
}

300 
__ölöe
 

301 
	$outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
)

303 
__asm
 
	`__vﬁ©ûe
("outw %0, %w1" : : "a" (
d©a
), "Nd" (
p‹t
));

304 
	}
}

306 
__ölöe
 
u_l⁄g


307 
	$p›˙tq
(
u_l⁄g
 
mask
)

309 
u_l⁄g
 
ªsu…
;

311 
__asm
 
	`__vﬁ©ûe
("p›˙tq %1,%0" : "Ù" (
ªsu…
Ë: "rm" (
mask
));

312  (
ªsu…
);

313 
	}
}

315 
__ölöe
 

316 
	$l„n˚
()

319 
__asm
 
	`__vﬁ©ûe
("lfence" : : : "memory");

320 
	}
}

322 
__ölöe
 

323 
	$m„n˚
()

326 
__asm
 
	`__vﬁ©ûe
("mfence" : : : "memory");

327 
	}
}

329 
__ölöe
 

330 
	$ü32_∑u£
()

332 
__asm
 
	`__vﬁ©ûe
("pause");

333 
	}
}

335 
__ölöe
 
u_l⁄g


336 
	$ªad_rÊags
()

338 
u_l⁄g
 
rf
;

340 
__asm
 
	`__vﬁ©ûe
("pushfq;Ö›q %0" : "Ù" (
rf
));

341  (
rf
);

342 
	}
}

344 
__ölöe
 
uöt64_t


345 
	$rdm§
(
u_öt
 
m§
)

347 
uöt32_t
 
low
, 
high
;

349 
__asm
 
	`__vﬁ©ûe
("rdm§" : "˜" (
low
), "=d" (
high
Ë: "c" (
m§
));

350  (
low
 | ((
uöt64_t
)
high
 << 32));

351 
	}
}

353 
__ölöe
 
uöt64_t


354 
	$rdpmc
(
u_öt
 
pmc
)

356 
uöt32_t
 
low
, 
high
;

358 
__asm
 
	`__vﬁ©ûe
("rdpmc" : "˜" (
low
), "=d" (
high
Ë: "c" (
pmc
));

359  (
low
 | ((
uöt64_t
)
high
 << 32));

360 
	}
}

362 
__ölöe
 
uöt64_t


363 
	$rdtsc
()

365 
uöt32_t
 
low
, 
high
;

367 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
low
), "=d" (
high
));

368  (
low
 | ((
uöt64_t
)
high
 << 32));

369 
	}
}

371 
__ölöe
 
uöt32_t


372 
	$rdtsc32
()

374 
uöt32_t
 
rv
;

376 
__asm
 
	`__vﬁ©ûe
("rdtsc" : "˜" (
rv
) : : "edx");

377  (
rv
);

378 
	}
}

380 
__ölöe
 

381 
	$wbövd
()

383 
__asm
 
	`__vﬁ©ûe
("wbinvd");

384 
	}
}

386 
__ölöe
 

387 
	$wrôe_rÊags
(
u_l⁄g
 
rf
)

389 
__asm
 
	`__vﬁ©ûe
("pushq %0;Ö›fq" : : "r" (
rf
));

390 
	}
}

392 
__ölöe
 

393 
	$wrm§
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
)

395 
uöt32_t
 
low
, 
high
;

397 
low
 = 
√wvÆ
;

398 
high
 = 
√wvÆ
 >> 32;

399 
__asm
 
	`__vﬁ©ûe
("wrm§" : : "a" (
low
), "d" (
high
), "c" (
m§
));

400 
	}
}

402 
__ölöe
 

403 
	$lﬂd_¸0
(
u_l⁄g
 
d©a
)

406 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸0" : : "r" (
d©a
));

407 
	}
}

409 
__ölöe
 
u_l⁄g


410 
	$r¸0
()

412 
u_l⁄g
 
d©a
;

414 
__asm
 
	`__vﬁ©ûe
("movq %%¸0,%0" : "Ù" (
d©a
));

415  (
d©a
);

416 
	}
}

418 
__ölöe
 
u_l⁄g


419 
	$r¸2
()

421 
u_l⁄g
 
d©a
;

423 
__asm
 
	`__vﬁ©ûe
("movq %%¸2,%0" : "Ù" (
d©a
));

424  (
d©a
);

425 
	}
}

427 
__ölöe
 

428 
	$lﬂd_¸3
(
u_l⁄g
 
d©a
)

431 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸3" : : "r" (
d©a
) : "memory");

432 
	}
}

434 
__ölöe
 
u_l⁄g


435 
	$r¸3
()

437 
u_l⁄g
 
d©a
;

439 
__asm
 
	`__vﬁ©ûe
("movq %%¸3,%0" : "Ù" (
d©a
));

440  (
d©a
);

441 
	}
}

443 
__ölöe
 

444 
	$lﬂd_¸4
(
u_l⁄g
 
d©a
)

446 
__asm
 
	`__vﬁ©ûe
("movq %0,%%¸4" : : "r" (
d©a
));

447 
	}
}

449 
__ölöe
 
u_l⁄g


450 
	$r¸4
()

452 
u_l⁄g
 
d©a
;

454 
__asm
 
	`__vﬁ©ûe
("movq %%¸4,%0" : "Ù" (
d©a
));

455  (
d©a
);

456 
	}
}

458 
__ölöe
 
u_l⁄g


459 
	$rx¸
(
u_öt
 
ªg
)

461 
u_öt
 
low
, 
high
;

463 
__asm
 
	`__vﬁ©ûe
("xgëbv" : "˜" (
low
), "=d" (
high
Ë: "c" (
ªg
));

464  (
low
 | ((
uöt64_t
)
high
 << 32));

465 
	}
}

467 
__ölöe
 

468 
	$lﬂd_x¸
(
u_öt
 
ªg
, 
u_l⁄g
 
vÆ
)

470 
u_öt
 
low
, 
high
;

472 
low
 = 
vÆ
;

473 
high
 = 
vÆ
 >> 32;

474 
__asm
 
	`__vﬁ©ûe
("x£tbv" : : "c" (
ªg
), "a" (
low
), "d" (
high
));

475 
	}
}

480 
__ölöe
 

481 
	$öv…lb
()

484 
	`lﬂd_¸3
(
	`r¸3
());

485 
	}
}

487 #i‚de‡
CR4_PGE


488 
	#CR4_PGE
 0x00000080

	)

498 
__ölöe
 

499 
	$öv…lb_globpcid
()

501 
uöt64_t
 
¸4
;

503 
¸4
 = 
	`r¸4
();

504 
	`lﬂd_¸4
(
¸4
 & ~
CR4_PGE
);

512 
	`lﬂd_¸4
(
¸4
 | 
CR4_PGE
);

513 
	}
}

519 
__ölöe
 

520 
	$övÕg
(
u_l⁄g
 
addr
)

523 
__asm
 
	`__vﬁ©ûe
("övÕg %0" : : "m" (*(*)
addr
) : "memory");

524 
	}
}

526 
	#INVPCID_ADDR
 0

	)

527 
	#INVPCID_CTX
 1

	)

528 
	#INVPCID_CTXGLOB
 2

	)

529 
	#INVPCID_ALLCTX
 3

	)

531 
	sövpcid_des¸
 {

532 
uöt64_t
 
	mpcid
:12 
__∑cked
;

533 
uöt64_t
 
	m∑d
:52 
__∑cked
;

534 
uöt64_t
 
	maddr
;

535 } 
	g__∑cked
;

537 
__ölöe
 

538 
	$övpcid
(
övpcid_des¸
 *
d
, 
ty≥
)

542 
__asm
 
	`__vﬁ©ûe
(".byte 0x66,0x0f,0x38,0x82,0x02"

543 : : "d" (
d
), "a" ((
u_l⁄g
)
ty≥
) : "memory");

544 
	}
}

546 
__ölöe
 
u_sh‹t


547 
	$rfs
()

549 
u_sh‹t
 
£l
;

550 
__asm
 
	`__vﬁ©ûe
("movw %%fs,%0" : "Ùm" (
£l
));

551  (
£l
);

552 
	}
}

554 
__ölöe
 
u_sh‹t


555 
	$rgs
()

557 
u_sh‹t
 
£l
;

558 
__asm
 
	`__vﬁ©ûe
("movw %%gs,%0" : "Ùm" (
£l
));

559  (
£l
);

560 
	}
}

562 
__ölöe
 
u_sh‹t


563 
	$rss
()

565 
u_sh‹t
 
£l
;

566 
__asm
 
	`__vﬁ©ûe
("movw %%ss,%0" : "Ùm" (
£l
));

567  (
£l
);

568 
	}
}

570 
__ölöe
 

571 
	$lﬂd_ds
(
u_sh‹t
 
£l
)

573 
__asm
 
	`__vﬁ©ûe
("movw %0,%%ds" : : "rm" (
£l
));

574 
	}
}

576 
__ölöe
 

577 
	$lﬂd_es
(
u_sh‹t
 
£l
)

579 
__asm
 
	`__vﬁ©ûe
("movw %0,%%es" : : "rm" (
£l
));

580 
	}
}

582 
__ölöe
 

583 
	$˝u_m⁄ô‹
(c⁄° *
addr
, 
u_l⁄g
 
exãnsi⁄s
, 
u_öt
 
höts
)

586 
__asm
 
	`__vﬁ©ûe
("monitor"

587 : : "a" (
addr
), "c" (
exãnsi⁄s
), "d" (
höts
));

588 
	}
}

590 
__ölöe
 

591 
	$˝u_mwaô
(
u_l⁄g
 
exãnsi⁄s
, 
u_öt
 
höts
)

594 
__asm
 
	`__vﬁ©ûe
("mwaô" : : "a" (
höts
), "c" (
exãnsi⁄s
));

595 
	}
}

597 #ifde‡
_KERNEL


599 #i‚def 
MSR_FSBASE


600 
	#MSR_FSBASE
 0xc0000100

	)

602 
__ölöe
 

603 
	$lﬂd_fs
(
u_sh‹t
 
£l
)

606 
__asm
 
	`__vﬁ©ûe
("rdmsr; movw %0,%%fs; wrmsr"

607 : : "rm" (
£l
), "c" (
MSR_FSBASE
) : "eax", "edx");

608 
	}
}

610 #i‚def 
MSR_GSBASE


611 
	#MSR_GSBASE
 0xc0000101

	)

613 
__ölöe
 

614 
	$lﬂd_gs
(
u_sh‹t
 
£l
)

621 
__asm
 
	`__vﬁ©ûe
("pushfq; cli;Ñdmsr; movw %0,%%gs; wrmsr;Öopfq"

622 : : "rm" (
£l
), "c" (
MSR_GSBASE
) : "eax", "edx");

623 
	}
}

626 
__ölöe
 

627 
	$lﬂd_fs
(
u_sh‹t
 
£l
)

629 
__asm
 
	`__vﬁ©ûe
("movw %0,%%fs" : : "rm" (
£l
));

630 
	}
}

632 
__ölöe
 

633 
	$lﬂd_gs
(
u_sh‹t
 
£l
)

635 
__asm
 
	`__vﬁ©ûe
("movw %0,%%gs" : : "rm" (
£l
));

636 
	}
}

639 
__ölöe
 

640 
	$lidt
(
ªgi⁄_des¸ùt‹
 *
addr
)

642 
__asm
 
	`__vﬁ©ûe
("lidà(%0)" : : "r" (
addr
));

643 
	}
}

645 
__ölöe
 

646 
	$Œdt
(
u_sh‹t
 
£l
)

648 
__asm
 
	`__vﬁ©ûe
("Œdà%0" : : "r" (
£l
));

649 
	}
}

651 
__ölöe
 

652 
	$…r
(
u_sh‹t
 
£l
)

654 
__asm
 
	`__vﬁ©ûe
("…∏%0" : : "r" (
£l
));

655 
	}
}

657 
__ölöe
 
uöt64_t


658 
	$rdr0
()

660 
uöt64_t
 
d©a
;

661 
__asm
 
	`__vﬁ©ûe
("movq %%dr0,%0" : "Ù" (
d©a
));

662  (
d©a
);

663 
	}
}

665 
__ölöe
 

666 
	$lﬂd_dr0
(
uöt64_t
 
dr0
)

668 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr0" : : "r" (
dr0
));

669 
	}
}

671 
__ölöe
 
uöt64_t


672 
	$rdr1
()

674 
uöt64_t
 
d©a
;

675 
__asm
 
	`__vﬁ©ûe
("movq %%dr1,%0" : "Ù" (
d©a
));

676  (
d©a
);

677 
	}
}

679 
__ölöe
 

680 
	$lﬂd_dr1
(
uöt64_t
 
dr1
)

682 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr1" : : "r" (
dr1
));

683 
	}
}

685 
__ölöe
 
uöt64_t


686 
	$rdr2
()

688 
uöt64_t
 
d©a
;

689 
__asm
 
	`__vﬁ©ûe
("movq %%dr2,%0" : "Ù" (
d©a
));

690  (
d©a
);

691 
	}
}

693 
__ölöe
 

694 
	$lﬂd_dr2
(
uöt64_t
 
dr2
)

696 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr2" : : "r" (
dr2
));

697 
	}
}

699 
__ölöe
 
uöt64_t


700 
	$rdr3
()

702 
uöt64_t
 
d©a
;

703 
__asm
 
	`__vﬁ©ûe
("movq %%dr3,%0" : "Ù" (
d©a
));

704  (
d©a
);

705 
	}
}

707 
__ölöe
 

708 
	$lﬂd_dr3
(
uöt64_t
 
dr3
)

710 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr3" : : "r" (
dr3
));

711 
	}
}

713 
__ölöe
 
uöt64_t


714 
	$rdr4
()

716 
uöt64_t
 
d©a
;

717 
__asm
 
	`__vﬁ©ûe
("movq %%dr4,%0" : "Ù" (
d©a
));

718  (
d©a
);

719 
	}
}

721 
__ölöe
 

722 
	$lﬂd_dr4
(
uöt64_t
 
dr4
)

724 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr4" : : "r" (
dr4
));

725 
	}
}

727 
__ölöe
 
uöt64_t


728 
	$rdr5
()

730 
uöt64_t
 
d©a
;

731 
__asm
 
	`__vﬁ©ûe
("movq %%dr5,%0" : "Ù" (
d©a
));

732  (
d©a
);

733 
	}
}

735 
__ölöe
 

736 
	$lﬂd_dr5
(
uöt64_t
 
dr5
)

738 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr5" : : "r" (
dr5
));

739 
	}
}

741 
__ölöe
 
uöt64_t


742 
	$rdr6
()

744 
uöt64_t
 
d©a
;

745 
__asm
 
	`__vﬁ©ûe
("movq %%dr6,%0" : "Ù" (
d©a
));

746  (
d©a
);

747 
	}
}

749 
__ölöe
 

750 
	$lﬂd_dr6
(
uöt64_t
 
dr6
)

752 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr6" : : "r" (
dr6
));

753 
	}
}

755 
__ölöe
 
uöt64_t


756 
	$rdr7
()

758 
uöt64_t
 
d©a
;

759 
__asm
 
	`__vﬁ©ûe
("movq %%dr7,%0" : "Ù" (
d©a
));

760  (
d©a
);

761 
	}
}

763 
__ölöe
 

764 
	$lﬂd_dr7
(
uöt64_t
 
dr7
)

766 
__asm
 
	`__vﬁ©ûe
("movq %0,%%dr7" : : "r" (
dr7
));

767 
	}
}

769 
__ölöe
 
ªgi°î_t


770 
	$öå_dißbÀ
()

772 
ªgi°î_t
 
rÊags
;

774 
rÊags
 = 
	`ªad_rÊags
();

775 
	`dißbÀ_öå
();

776  (
rÊags
);

777 
	}
}

779 
__ölöe
 

780 
	$öå_ª°‹e
(
ªgi°î_t
 
rÊags
)

782 
	`wrôe_rÊags
(
rÊags
);

783 
	}
}

787 
bªakpoöt
();

788 
u_öt
 
bsÊ
(u_öà
mask
);

789 
u_öt
 
b§l
(u_öà
mask
);

790 
˛Êush
(
u_l⁄g
 
addr
);

791 
˛ts
();

792 
˝uid_cou¡
(
u_öt
 
ax
, u_öà
cx
, u_öà*
p
);

793 
dißbÀ_öå
();

794 
do_˝uid
(
u_öt
 
ax
, u_öà*
p
);

795 
íabÀ_öå
();

796 
hÆt
();

797 
ü32_∑u£
();

798 
u_ch¨
 
öb
(
u_öt
 
p‹t
);

799 
u_öt
 
öl
(u_öà
p‹t
);

800 
ösb
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

801 
ö¶
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

802 
ösw
(
u_öt
 
p‹t
, *
addr
, 
size_t
 
cou¡
);

803 
ªgi°î_t
 
öå_dißbÀ
();

804 
öå_ª°‹e
(
ªgi°î_t
 
rf
);

805 
övd
();

806 
övÕg
(
u_öt
 
addr
);

807 
öv…lb
();

808 
u_sh‹t
 
öw
(
u_öt
 
p‹t
);

809 
lidt
(
ªgi⁄_des¸ùt‹
 *
addr
);

810 
Œdt
(
u_sh‹t
 
£l
);

811 
lﬂd_¸0
(
u_l⁄g
 
¸0
);

812 
lﬂd_¸3
(
u_l⁄g
 
¸3
);

813 
lﬂd_¸4
(
u_l⁄g
 
¸4
);

814 
lﬂd_dr0
(
uöt64_t
 
dr0
);

815 
lﬂd_dr1
(
uöt64_t
 
dr1
);

816 
lﬂd_dr2
(
uöt64_t
 
dr2
);

817 
lﬂd_dr3
(
uöt64_t
 
dr3
);

818 
lﬂd_dr4
(
uöt64_t
 
dr4
);

819 
lﬂd_dr5
(
uöt64_t
 
dr5
);

820 
lﬂd_dr6
(
uöt64_t
 
dr6
);

821 
lﬂd_dr7
(
uöt64_t
 
dr7
);

822 
lﬂd_fs
(
u_sh‹t
 
£l
);

823 
lﬂd_gs
(
u_sh‹t
 
£l
);

824 
…r
(
u_sh‹t
 
£l
);

825 
outb
(
u_öt
 
p‹t
, 
u_ch¨
 
d©a
);

826 
oué
(
u_öt
 
p‹t
, u_öà
d©a
);

827 
outsb
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

828 
out¶
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

829 
outsw
(
u_öt
 
p‹t
, c⁄° *
addr
, 
size_t
 
cou¡
);

830 
outw
(
u_öt
 
p‹t
, 
u_sh‹t
 
d©a
);

831 
u_l⁄g
 
r¸0
();

832 
u_l⁄g
 
r¸2
();

833 
u_l⁄g
 
r¸3
();

834 
u_l⁄g
 
r¸4
();

835 
uöt64_t
 
rdm§
(
u_öt
 
m§
);

836 
uöt64_t
 
rdpmc
(
u_öt
 
pmc
);

837 
uöt64_t
 
rdr0
();

838 
uöt64_t
 
rdr1
();

839 
uöt64_t
 
rdr2
();

840 
uöt64_t
 
rdr3
();

841 
uöt64_t
 
rdr4
();

842 
uöt64_t
 
rdr5
();

843 
uöt64_t
 
rdr6
();

844 
uöt64_t
 
rdr7
();

845 
uöt64_t
 
rdtsc
();

846 
u_l⁄g
 
ªad_rÊags
();

847 
u_öt
 
rfs
();

848 
u_öt
 
rgs
();

849 
wbövd
();

850 
wrôe_rÊags
(
u_öt
 
rf
);

851 
wrm§
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

855 
ª£t_dbªgs
();

857 #ifde‡
_KERNEL


858 
rdm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 *
vÆ
);

859 
wrm§_ß„
(
u_öt
 
m§
, 
uöt64_t
 
√wvÆ
);

	@/usr/include/machine/elf.h

6 
	~<x86/ñf.h
>

	@/usr/include/machine/endian.h

6 
	~<x86/ídün.h
>

	@/usr/include/machine/param.h

43 #i‚de‡
_AMD64_INCLUDE_PARAM_H_


44 
	#_AMD64_INCLUDE_PARAM_H_


	)

46 
	~<machöe/_Æign.h
>

53 
	#__HAVE_ACPI


	)

54 
	#__PCI_REROUTE_INTERRUPT


	)

56 #i‚de‡
MACHINE


57 
	#MACHINE
 "amd64"

	)

59 #i‚de‡
MACHINE_ARCH


60 
	#MACHINE_ARCH
 "amd64"

	)

62 #i‚de‡
MACHINE_ARCH32


63 
	#MACHINE_ARCH32
 "i386"

	)

66 #i‡
deföed
(
SMP
Ë|| deföed(
KLD_MODULE
)

67 #i‚de‡
MAXCPU


68 
	#MAXCPU
 64

	)

71 
	#MAXCPU
 1

	)

74 #i‚de‡
MAXMEMDOM


75 
	#MAXMEMDOM
 1

	)

78 
	#ALIGNBYTES
 
_ALIGNBYTES


	)

79 
	#ALIGN
(
p
Ë
	`_ALIGN
’)

	)

86 
	#ALIGNED_POINTER
(
p
, 
t
Ë1

	)

92 
	#CACHE_LINE_SHIFT
 7

	)

93 
	#CACHE_LINE_SIZE
 (1 << 
CACHE_LINE_SHIFT
)

	)

96 
	#NPTEPG
 (
PAGE_SIZE
/( (
±_íåy_t
)))

	)

97 
	#NPTEPGSHIFT
 9

	)

98 
	#PAGE_SHIFT
 12

	)

99 
	#PAGE_SIZE
 (1<<
PAGE_SHIFT
Ë

	)

100 
	#PAGE_MASK
 (
PAGE_SIZE
-1)

	)

102 
	#NPDEPG
 (
PAGE_SIZE
/( (
pd_íåy_t
)))

	)

103 
	#NPDEPGSHIFT
 9

	)

104 
	#PDRSHIFT
 21

	)

105 
	#NBPDR
 (1<<
PDRSHIFT
Ë

	)

106 
	#PDRMASK
 (
NBPDR
-1)

	)

108 
	#NPDPEPG
 (
PAGE_SIZE
/( (
pdp_íåy_t
)))

	)

109 
	#NPDPEPGSHIFT
 9

	)

110 
	#PDPSHIFT
 30

	)

111 
	#NBPDP
 (1<<
PDPSHIFT
Ë

	)

112 
	#PDPMASK
 (
NBPDP
-1)

	)

114 
	#NPML4EPG
 (
PAGE_SIZE
/( (
pml4_íåy_t
)))

	)

115 
	#NPML4EPGSHIFT
 9

	)

116 
	#PML4SHIFT
 39

	)

117 
	#NBPML4
 (1UL<<
PML4SHIFT
)

	)

118 
	#PML4MASK
 (
NBPML4
-1)

	)

120 
	#MAXPAGESIZES
 3

	)

122 
	#IOPAGES
 2

	)

124 #i‚def 
KSTACK_PAGES


125 
	#KSTACK_PAGES
 4

	)

127 
	#KSTACK_GUARD_PAGES
 1

	)

132 
	#round_∑ge
(
x
Ë(((()(x)Ë+ 
PAGE_MASK
Ë& ~(PAGE_MASK))

	)

133 
	#åunc_∑ge
(
x
Ë(()(xË& ~(
PAGE_MASK
))

	)

134 
	#åunc_2m∑ge
(
x
Ë(()(xË& ~
PDRMASK
)

	)

135 
	#round_2m∑ge
(
x
Ë(((()(x)Ë+ 
PDRMASK
Ë& ~PDRMASK)

	)

136 
	#åunc_1g∑ge
(
x
Ë(()(xË& ~
PDPMASK
)

	)

138 
	#©›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

139 
	#±ﬂ
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

141 
	#amd64_bt›
(
x
Ë(()(xË>> 
PAGE_SHIFT
)

	)

142 
	#amd64_±ob
(
x
Ë(()(xË<< 
PAGE_SHIFT
)

	)

144 
	#pgtok
(
x
Ë(()(xË* (
PAGE_SIZE
 / 1024))

	)

146 
	#INKERNEL
(
va
Ë(((vaË>
DMAP_MIN_ADDRESS
 && (vaË< 
DMAP_MAX_ADDRESS
) \

147 || ((
va
Ë>
VM_MIN_KERNEL_ADDRESS
 && (vaË< 
VM_MAX_KERNEL_ADDRESS
))

	)

	@/usr/include/machine/pcpu.h

29 #i‚de‡
_MACHINE_PCPU_H_


30 
	#_MACHINE_PCPU_H_


	)

32 #i‚de‡
_SYS_CDEFS_H_


43 
	#PCPU_MD_FIELDS
 \

44 
pc_m⁄ô‹buf
[128] 
	`__Æig√d
(128); \

45 
p˝u
 *
pc_¥v•a˚
; \

46 
pm≠
 *
pc_cuΩm≠
; \

47 
amd64tss
 *
pc_ts•
; \

48 
amd64tss
 *
pc_comm⁄ts•
; \

49 
ªgi°î_t
 
pc_r•0
; \

50 
ªgi°î_t
 
pc_s¸©ch_r•
; \

51 
u_öt
 
pc_≠ic_id
; \

52 
u_öt
 
pc_a˝i_id
; \

54 
u£r_£gmít_des¸ùt‹
 *
pc_fs32p
; \

56 
u£r_£gmít_des¸ùt‹
 *
pc_gs32p
; \

58 
sy°em_£gmít_des¸ùt‹
 *
pc_ldt
; \

60 
sy°em_£gmít_des¸ùt‹
 *
pc_tss
; \

61 
uöt64_t
 
pc_pm_ßve_˙t
; \

62 
u_öt
 
pc_cmci_mask
; \

63 
uöt64_t
 
pc_dbªg
[16]; \

64 
pc_dbªg_cmd
; \

65 
u_öt
 
pc_v˝u_id
; \

66 
__∑d
[157]

	)

69 
	#PC_DBREG_CMD_NONE
 0

	)

70 
	#PC_DBREG_CMD_LOAD
 1

	)

72 #ifde‡
_KERNEL


74 #ifde‡
löt


76 
p˝u
 *
p˝up
;

78 
	#PCPU_GET
(
membî
Ë(
p˝up
->
pc_
 ## membî)

	)

79 
	#PCPU_ADD
(
membî
, 
vÆ
Ë(
p˝up
->
pc_
 ## membî +(vÆ))

	)

80 
	#PCPU_INC
(
membî
Ë
	`PCPU_ADD
(membî, 1)

	)

81 
	#PCPU_PTR
(
membî
Ë(&
p˝up
->
pc_
 ## membî)

	)

82 
	#PCPU_SET
(
membî
, 
vÆ
Ë(
p˝up
->
pc_
 ## membî = (vÆ))

	)

84 #ñi‡
deföed
(
__GNUCLIKE_ASM
Ë&& deföed(
__GNUCLIKE___TYPEOF
)

89 
	#__p˝u_off£t
(
«me
) \

90 
	`__off£tof
(
p˝u
, 
«me
)

	)

95 
	#__p˝u_ty≥
(
«me
) \

96 
	`__ty≥of
(((
p˝u
 *)0)->
«me
)

	)

101 
	#__PCPU_PTR
(
«me
Ë
	`__exãnsi⁄__
 ({ \

102 
	`__p˝u_ty≥
(
«me
Ë*
__p
; \

104 
__asm
 
	`__vﬁ©ûe
("movq %%gs:%1,%0;áddq %2,%0" \

105 : "Ù" (
__p
) \

106 : "m" (*(
p˝u
 *)(
	`__p˝u_off£t
(
pc_¥v•a˚
))), \

107 "i" (
	`__p˝u_off£t
(
«me
))); \

109 
__p
; \

110 })

	)

115 
	#__PCPU_GET
(
«me
Ë
	`__exãnsi⁄__
 ({ \

116 
	`__p˝u_ty≥
(
«me
Ë
__ªs
; \

117 
	s__s
 { \

118 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

119 } 
__s
; \

121 i‡((
__ªs
) == 1 || (__res) == 2 || \

122 (
__ªs
) == 4 || (__res) == 8) { \

123 
__asm
 
	`__vﬁ©ûe
("mov %%gs:%1,%0" \

124 : "Ù" (
__s
) \

125 : "m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
)))); \

126 *(
__s
 *)(*)&
__ªs
 = __s; \

128 
__ªs
 = *
	`__PCPU_PTR
(
«me
); \

130 
__ªs
; \

131 })

	)

137 
	#__PCPU_ADD
(
«me
, 
vÆ
) do { \

138 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

139 
	s__s
 { \

140 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

141 } 
__s
; \

143 
__vÆ
 = (
vÆ
); \

144 i‡((
__vÆ
) == 1 || (__val) == 2 || \

145 (
__vÆ
) == 4 || (__val) == 8) { \

146 
__s
 = *(__†*)(*)&
__vÆ
; \

147 
__asm
 
	`__vﬁ©ûe
("add %1,%%gs:%0" \

148 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

149 : "r" (
__s
)); \

151 *
	`__PCPU_PTR
(
«me
Ë+
__vÆ
; \

152 } 0)

	)

158 
	#__PCPU_INC
(
«me
) do { \

159 
	`CTASSERT
((
	`__p˝u_ty≥
(
«me
)) == 1 || \

160 (
	`__p˝u_ty≥
(
«me
)) == 2 || \

161 (
	`__p˝u_ty≥
(
«me
)) == 4 || \

162 (
	`__p˝u_ty≥
(
«me
)) == 8); \

163 i‡((
	`__p˝u_ty≥
(
«me
)) == 1) { \

164 
__asm
 
	`__vﬁ©ûe
("incb %%gs:%0" \

165 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

166 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

167 } i‡((
	`__p˝u_ty≥
(
«me
)) == 2) { \

168 
__asm
 
	`__vﬁ©ûe
("incw %%gs:%0" \

169 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

170 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

171 } i‡((
	`__p˝u_ty≥
(
«me
)) == 4) { \

172 
__asm
 
	`__vﬁ©ûe
("incl %%gs:%0" \

173 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

174 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

175 } i‡((
	`__p˝u_ty≥
(
«me
)) == 8) { \

176 
__asm
 
	`__vﬁ©ûe
("incq %%gs:%0" \

177 : "=m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name)))\

178 : "m" (*(
	`__p˝u_ty≥
(
«me
Ë*)(
	`__p˝u_off£t
(name))));\

180 } 0)

	)

185 
	#__PCPU_SET
(
«me
, 
vÆ
) { \

186 
	`__p˝u_ty≥
(
«me
Ë
__vÆ
; \

187 
	s__s
 { \

188 
u_ch¨
 
__b
[
	`MIN
((
	`__p˝u_ty≥
(
«me
)), 8)]; \

189 } 
__s
; \

191 
__vÆ
 = (
vÆ
); \

192 i‡((
__vÆ
) == 1 || (__val) == 2 || \

193 (
__vÆ
) == 4 || (__val) == 8) { \

194 
__s
 = *(__†*)(*)&
__vÆ
; \

195 
__asm
 
	`__vﬁ©ûe
("mov %1,%%gs:%0" \

196 : "=m" (*(
__s
 *)(
	`__p˝u_off£t
(
«me
))) \

197 : "r" (
__s
)); \

199 *
	`__PCPU_PTR
(
«me
Ë
__vÆ
; \

201 }

	)

203 
	#PCPU_GET
(
membî
Ë
	`__PCPU_GET
(
pc_
 ## membî)

	)

204 
	#PCPU_ADD
(
membî
, 
vÆ
Ë
	`__PCPU_ADD
(
pc_
 ## membî, vÆ)

	)

205 
	#PCPU_INC
(
membî
Ë
	`__PCPU_INC
(
pc_
 ## membî)

	)

206 
	#PCPU_PTR
(
membî
Ë
	`__PCPU_PTR
(
pc_
 ## membî)

	)

207 
	#PCPU_SET
(
membî
, 
vÆ
Ë
	`__PCPU_SET
(
pc_
 ## membî, vÆ)

	)

209 
	#OFFSETOF_CURTHREAD
 0

	)

210 #ifde‡
__˛™g__


211 #¥agm®
˛™g
 
dügno°ic
 
push


212 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wnull-dereference"

214 
__ölöe
 
__puª2
 
thªad
 *

215 
	$__cuπhªad
()

217 
thªad
 *
td
;

219 
	`__asm
("movq %%gs:%1,%0" : "Ù" (
td
)

220 : "m" (*(*)
OFFSETOF_CURTHREAD
));

221  (
td
);

222 
	}
}

223 #ifde‡
__˛™g__


224 #¥agm®
˛™g
 
dügno°ic
 
p›


226 
	#cuπhªad
 (
	`__cuπhªad
())

	)

228 
	#OFFSETOF_CURPCB
 32

	)

229 
__ölöe
 
__puª2
 
pcb
 *

230 
	$__cuΩcb
()

232 
pcb
 *pcb;

234 
	`__asm
("movq %%gs:%1,%0" : "Ù" (
pcb
Ë: "m" (*(*)
OFFSETOF_CURPCB
));

235  (
pcb
);

236 
	}
}

237 
	#cuΩcb
 (
	`__cuΩcb
())

	)

239 
	#IS_BSP
(Ë(
	`PCPU_GET
(
˝uid
Ë=0)

	)

	@/usr/include/machine/proc.h

33 #i‚de‡
_MACHINE_PROC_H_


34 
	#_MACHINE_PROC_H_


	)

36 
	~<machöe/£gmíts.h
>

38 
	s¥oc_ldt
 {

39 
ˇddr_t
 
	mldt_ba£
;

40 
	mldt_ªf˙t
;

46 
	smdthªad
 {

47 
	mmd_•ölock_cou¡
;

48 
ªgi°î_t
 
	mmd_ßved_Êags
;

49 
ªgi°î_t
 
	mmd_•urÊt_addr
;

52 
	smd¥oc
 {

53 
¥oc_ldt
 *
	mmd_ldt
;

54 
sy°em_£gmít_des¸ùt‹
 
	mmd_ldt_sd
;

57 
	#KINFO_PROC_SIZE
 1088

	)

58 
	#KINFO_PROC32_SIZE
 768

	)

60 #ifdef 
_KERNEL


63 
	#GET_STACK_USAGE
(
tŸÆ
, 
u£d
) do { \

64 
thªad
 *
td
 = 
cuπhªad
; \

65 (
tŸÆ
Ë
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
; \

66 (
u£d
Ë(*)
td
->
td_k°ack
 + \

67 
td
->
td_k°ack_∑ges
 * 
PAGE_SIZE
 - \

68 (*)&
td
; \

69 } 0)

	)

71 
£t_u£r_ldt
(
md¥oc
 *);

72 
¥oc_ldt
 *
u£r_ldt_Æloc
(
¥oc
 *, );

73 
u£r_ldt_‰ì
(
thªad
 *);

74 
u£r_ldt_dîef
(
¥oc_ldt
 *);

75 
	gsyßrch_¨gs
;

76 
syßrch_ldt
(
thªad
 *
td
, 
syßrch_¨gs
 *
u≠
, 
u≠_•a˚
);

77 
amd64_£t_ldt_d©a
(
thªad
 *
td
, 
°¨t
, 
num
,

78 
u£r_£gmít_des¸ùt‹
 *
descs
);

80 
mtx
 
dt_lock
;

81 
max_ldt_£gmít
;

83 
	ssysˇŒ_¨gs
 {

84 
u_öt
 
	mcode
;

85 
sy£¡
 *
	mˇŒp
;

86 
ªgi°î_t
 
	m¨gs
[8];

87 
	m«rg
;

	@/usr/include/netinet6/in6.h

64 #i‚de‡
__KAME_NETINET_IN_H_INCLUDED_


68 #i‚de‡
_NETINET6_IN6_H_


69 
	#_NETINET6_IN6_H_


	)

76 
	#__KAME__


	)

77 
	#__KAME_VERSION
 "FªeBSD"

	)

84 #i‡
__BSD_VISIBLE


85 
	#IPV6PORT_RESERVED
 1024

	)

86 
	#IPV6PORT_ANONMIN
 49152

	)

87 
	#IPV6PORT_ANONMAX
 65535

	)

88 
	#IPV6PORT_RESERVEDMIN
 600

	)

89 
	#IPV6PORT_RESERVEDMAX
 (
IPV6PORT_RESERVED
-1)

	)

95 
	sö6_addr
 {

97 
uöt8_t
 
	m__u6_addr8
[16];

98 
uöt16_t
 
	m__u6_addr16
[8];

99 
uöt32_t
 
	m__u6_addr32
[4];

100 } 
	m__u6_addr
;

103 
	#s6_addr
 
__u6_addr
.
__u6_addr8


	)

104 #ifde‡
_KERNEL


105 
	#s6_addr8
 
__u6_addr
.
__u6_addr8


	)

106 
	#s6_addr16
 
__u6_addr
.
__u6_addr16


	)

107 
	#s6_addr32
 
__u6_addr
.
__u6_addr32


	)

110 
	#INET6_ADDRSTRLEN
 46

	)

119 #i‡
__BSD_VISIBLE


120 
	#SIN6_LEN


	)

123 
	ssockaddr_ö6
 {

124 
uöt8_t
 
	msö6_Àn
;

125 
ß_Ámûy_t
 
	msö6_Ámûy
;

126 
ö_p‹t_t
 
	msö6_p‹t
;

127 
uöt32_t
 
	msö6_Êowöfo
;

128 
ö6_addr
 
	msö6_addr
;

129 
uöt32_t
 
	msö6_sc›e_id
;

135 #ifde‡
_KERNEL


136 
	#IN6MASK0
 {{{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }}}

	)

137 
	#IN6MASK32
 {{{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, \

138 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

139 
	#IN6MASK64
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

140 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

141 
	#IN6MASK96
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

142 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 }}}

	)

143 
	#IN6MASK128
 {{{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \

144 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf‡}}}

	)

147 #ifde‡
_KERNEL


148 c⁄° 
sockaddr_ö6
 
ß6_™y
;

150 c⁄° 
ö6_addr
 
ö6mask0
;

151 c⁄° 
ö6_addr
 
ö6mask32
;

152 c⁄° 
ö6_addr
 
ö6mask64
;

153 c⁄° 
ö6_addr
 
ö6mask96
;

154 c⁄° 
ö6_addr
 
ö6mask128
;

160 #ifde‡
_KERNEL


161 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


162 
	#IPV6_ADDR_INT32_ONE
 1

	)

163 
	#IPV6_ADDR_INT32_TWO
 2

	)

164 
	#IPV6_ADDR_INT32_MNL
 0xff010000

	)

165 
	#IPV6_ADDR_INT32_MLL
 0xff020000

	)

166 
	#IPV6_ADDR_INT32_SMP
 0x0000ffff

	)

167 
	#IPV6_ADDR_INT16_ULL
 0x„80

	)

168 
	#IPV6_ADDR_INT16_USL
 0x„c0

	)

169 
	#IPV6_ADDR_INT16_MLL
 0xff02

	)

170 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


171 
	#IPV6_ADDR_INT32_ONE
 0x01000000

	)

172 
	#IPV6_ADDR_INT32_TWO
 0x02000000

	)

173 
	#IPV6_ADDR_INT32_MNL
 0x000001ff

	)

174 
	#IPV6_ADDR_INT32_MLL
 0x000002ff

	)

175 
	#IPV6_ADDR_INT32_SMP
 0xffff0000

	)

176 
	#IPV6_ADDR_INT16_ULL
 0x80„

	)

177 
	#IPV6_ADDR_INT16_USL
 0xc0„

	)

178 
	#IPV6_ADDR_INT16_MLL
 0x02ff

	)

185 #i‡
__BSD_VISIBLE


186 
	#IN6ADDR_ANY_INIT
 \

188 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}

	)

189 
	#IN6ADDR_LOOPBACK_INIT
 \

191 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

192 
	#IN6ADDR_NODELOCAL_ALLNODES_INIT
 \

194 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

195 
	#IN6ADDR_INTFACELOCAL_ALLNODES_INIT
 \

197 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

198 
	#IN6ADDR_LINKLOCAL_ALLNODES_INIT
 \

200 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}

	)

201 
	#IN6ADDR_LINKLOCAL_ALLROUTERS_INIT
 \

203 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

	)

204 
	#IN6ADDR_LINKLOCAL_ALLV2ROUTERS_INIT
 \

206 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16 }}}

	)

209 c⁄° 
ö6_addr
 
ö6addr_™y
;

210 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

211 #i‡
__BSD_VISIBLE


212 c⁄° 
ö6_addr
 
ö6addr_nodñoˇl_Æ odes
;

213 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Æ odes
;

214 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_ÆÃouãrs
;

215 c⁄° 
ö6_addr
 
ö6addr_lökloˇl_Ælv2rouãrs
;

224 #ifde‡
_KERNEL


225 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

226 (
	`bcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

228 #i‡
__BSD_VISIBLE


229 
	#IN6_ARE_ADDR_EQUAL
(
a
, 
b
) \

230 (
	`memcmp
(&(
a
)->
s6_addr
[0], &(
b
)->s6_addr[0], (
ö6_addr
)Ë=0)

	)

237 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

238 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

239 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

240 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

241 (
a
)->
__u6_addr
.
__u6_addr32
[3] =0)

	)

246 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

247 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

248 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

249 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

250 (
a
)->
__u6_addr
.
__u6_addr32
[3] =
	`¡ohl
(1))

	)

255 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

256 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

257 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

258 (
a
)->
__u6_addr
.
__u6_addr32
[2] == 0 && \

259 (
a
)->
__u6_addr
.
__u6_addr32
[3] != 0 && \

260 (
a
)->
__u6_addr
.
__u6_addr32
[3] !
	`¡ohl
(1))

	)

265 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

266 ((
a
)->
__u6_addr
.
__u6_addr32
[0] == 0 && \

267 (
a
)->
__u6_addr
.
__u6_addr32
[1] == 0 && \

268 (
a
)->
__u6_addr
.
__u6_addr32
[2] =
	`¡ohl
(0x0000ffff))

	)

274 #ifde‡
_KERNEL


275 
	#IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

276 
	#IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

277 
	#IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

278 
	#IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

279 
	#IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

280 
	#IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

282 
	#__IPV6_ADDR_SCOPE_NODELOCAL
 0x01

	)

283 
	#__IPV6_ADDR_SCOPE_INTFACELOCAL
 0x01

	)

284 
	#__IPV6_ADDR_SCOPE_LINKLOCAL
 0x02

	)

285 
	#__IPV6_ADDR_SCOPE_SITELOCAL
 0x05

	)

286 
	#__IPV6_ADDR_SCOPE_ORGLOCAL
 0x08

	)

287 
	#__IPV6_ADDR_SCOPE_GLOBAL
 0x0e

	)

294 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

295 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0x80))

	)

296 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

297 (((
a
)->
s6_addr
[0] =0x„Ë&& ((◊)->s6_addr[1] & 0xc0Ë=0xc0))

	)

302 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(◊)->
s6_addr
[0] =0xff)

	)

304 #ifde‡
_KERNEL


305 
	#IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

307 
	#__IPV6_ADDR_MC_SCOPE
(
a
Ë(◊)->
s6_addr
[1] & 0x0f)

	)

313 #ifde‡
_KERNEL


314 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

315 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

316 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_NODELOCAL
))

	)

317 
	#IN6_IS_ADDR_MC_INTFACELOCAL
(
a
) \

318 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

319 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_INTFACELOCAL
))

	)

320 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

321 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

322 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

323 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

324 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

325 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_SITELOCAL
))

	)

326 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

327 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

328 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

329 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

330 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

331 (
	`IPV6_ADDR_MC_SCOPE
(
a
Ë=
IPV6_ADDR_SCOPE_GLOBAL
))

	)

333 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

334 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

335 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_NODELOCAL
))

	)

336 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

337 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

338 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_LINKLOCAL
))

	)

339 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

340 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

341 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_SITELOCAL
))

	)

342 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

343 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

344 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_ORGLOCAL
))

	)

345 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

346 (
	`IN6_IS_ADDR_MULTICAST
(
a
) && \

347 (
	`__IPV6_ADDR_MC_SCOPE
(
a
Ë=
__IPV6_ADDR_SCOPE_GLOBAL
))

	)

350 #ifde‡
_KERNEL


354 
	#IN6_IS_SCOPE_LINKLOCAL
(
a
) \

355 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

356 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)))

	)

357 
	#IN6_IS_SCOPE_EMBED
(
a
) \

358 ((
	`IN6_IS_ADDR_LINKLOCAL
(
a
)) || \

359 (
	`IN6_IS_ADDR_MC_LINKLOCAL
(
a
)) || \

360 (
	`IN6_IS_ADDR_MC_INTFACELOCAL
(
a
)))

	)

362 
	#IFA6_IS_DEPRECATED
(
a
) \

363 ((
a
)->
ü6_li„time
.
ü6t_∂time
 !
ND6_INFINITE_LIFETIME
 && \

364 (
u_öt32_t
)((
time_u±ime
 - (
a
)->
ü6_upd©ëime
)) > \

365 (
a
)->
ü6_li„time
.
ü6t_∂time
)

	)

366 
	#IFA6_IS_INVALID
(
a
) \

367 ((
a
)->
ü6_li„time
.
ü6t_v…ime
 !
ND6_INFINITE_LIFETIME
 && \

368 (
u_öt32_t
)((
time_u±ime
 - (
a
)->
ü6_upd©ëime
)) > \

369 (
a
)->
ü6_li„time
.
ü6t_v…ime
)

	)

375 #i‡
__BSD_VISIBLE


376 
	srouã_ö6
 {

377 
πíåy
 *
	mro_π
;

378 
Œíåy
 *
	mro_Œe
;

379 
ö6_addr
 *
	mro_ü6
;

380 
	mro_Êags
;

381 
sockaddr_ö6
 
	mro_d°
;

391 
	#IPV6_OPTIONS
 1

	)

392 
	#IPV6_RECVOPTS
 5

	)

393 
	#IPV6_RECVRETOPTS
 6

	)

394 
	#IPV6_RECVDSTADDR
 7

	)

395 
	#IPV6_RETOPTS
 8

	)

397 
	#IPV6_SOCKOPT_RESERVED1
 3

	)

398 
	#IPV6_UNICAST_HOPS
 4

	)

399 
	#IPV6_MULTICAST_IF
 9

	)

400 
	#IPV6_MULTICAST_HOPS
 10

	)

401 
	#IPV6_MULTICAST_LOOP
 11

	)

402 
	#IPV6_JOIN_GROUP
 12

	)

403 
	#IPV6_LEAVE_GROUP
 13

	)

404 
	#IPV6_PORTRANGE
 14

	)

405 
	#ICMP6_FILTER
 18

	)

407 #ifde‡
_KERNEL


408 
	#IPV6_2292PKTINFO
 19

	)

409 
	#IPV6_2292HOPLIMIT
 20

	)

410 
	#IPV6_2292NEXTHOP
 21

	)

411 
	#IPV6_2292HOPOPTS
 22

	)

412 
	#IPV6_2292DSTOPTS
 23

	)

413 
	#IPV6_2292RTHDR
 24

	)

414 
	#IPV6_2292PKTOPTIONS
 25

	)

417 
	#IPV6_CHECKSUM
 26

	)

418 
	#IPV6_V6ONLY
 27

	)

419 #i‚de‡
_KERNEL


420 
	#IPV6_BINDV6ONLY
 
IPV6_V6ONLY


	)

424 
	#IPV6_IPSEC_POLICY
 28

	)

427 
	#IPV6_FAITH
 29

	)

430 
	#IPV6_FW_ADD
 30

	)

431 
	#IPV6_FW_DEL
 31

	)

432 
	#IPV6_FW_FLUSH
 32

	)

433 
	#IPV6_FW_ZERO
 33

	)

434 
	#IPV6_FW_GET
 34

	)

438 
	#IPV6_RTHDRDSTOPTS
 35

	)

440 
	#IPV6_RECVPKTINFO
 36

	)

441 
	#IPV6_RECVHOPLIMIT
 37

	)

442 
	#IPV6_RECVRTHDR
 38

	)

443 
	#IPV6_RECVHOPOPTS
 39

	)

444 
	#IPV6_RECVDSTOPTS
 40

	)

445 #ifde‡
_KERNEL


446 
	#IPV6_RECVRTHDRDSTOPTS
 41

	)

449 
	#IPV6_USE_MIN_MTU
 42

	)

450 
	#IPV6_RECVPATHMTU
 43

	)

452 
	#IPV6_PATHMTU
 44

	)

455 
	#IPV6_REACHCONF
 45

	)

460 
	#IPV6_PKTINFO
 46

	)

461 
	#IPV6_HOPLIMIT
 47

	)

462 
	#IPV6_NEXTHOP
 48

	)

463 
	#IPV6_HOPOPTS
 49

	)

464 
	#IPV6_DSTOPTS
 50

	)

465 
	#IPV6_RTHDR
 51

	)

467 
	#IPV6_PKTOPTIONS
 52

	)

471 
	#IPV6_RECVTCLASS
 57

	)

473 
	#IPV6_AUTOFLOWLABEL
 59

	)

475 
	#IPV6_TCLASS
 61

	)

476 
	#IPV6_DONTFRAG
 62

	)

478 
	#IPV6_PREFER_TEMPADDR
 63

	)

482 
	#IPV6_BINDANY
 64

	)

488 
	#IPV6_MSFILTER
 74

	)

494 
	#IPV6_RTHDR_LOOSE
 0

	)

495 
	#IPV6_RTHDR_STRICT
 1

	)

496 
	#IPV6_RTHDR_TYPE_0
 0

	)

501 
	#IPV6_DEFAULT_MULTICAST_HOPS
 1

	)

502 
	#IPV6_DEFAULT_MULTICAST_LOOP
 1

	)

509 
	#IPV6_MIN_MEMBERSHIPS
 31

	)

510 
	#IPV6_MAX_MEMBERSHIPS
 4095

	)

516 
	#IPV6_MAX_GROUP_SRC_FILTER
 512

	)

517 
	#IPV6_MAX_SOCK_SRC_FILTER
 128

	)

522 
	sùv6_mªq
 {

523 
ö6_addr
 
	mùv6mr_mu…üddr
;

524 
	mùv6mr_öãrÁ˚
;

530 
	sö6_pktöfo
 {

531 
ö6_addr
 
	mùi6_addr
;

532 
	mùi6_ifödex
;

538 
	sù6_mtuöfo
 {

539 
sockaddr_ö6
 
	mù6m_addr
;

540 
uöt32_t
 
	mù6m_mtu
;

547 
	#IPV6_PORTRANGE_DEFAULT
 0

	)

548 
	#IPV6_PORTRANGE_HIGH
 1

	)

549 
	#IPV6_PORTRANGE_LOW
 2

	)

551 #i‡
__BSD_VISIBLE


558 
	#IPV6PROTO_MAXID
 (
IPPROTO_PIM
 + 1Ë

	)

563 
	#IPV6CTL_FORWARDING
 1

	)

564 
	#IPV6CTL_SENDREDIRECTS
 2

	)

565 
	#IPV6CTL_DEFHLIM
 3

	)

566 #ifde‡
nŸyë


567 
	#IPV6CTL_DEFMTU
 4

	)

569 
	#IPV6CTL_FORWSRCRT
 5

	)

570 
	#IPV6CTL_STATS
 6

	)

571 
	#IPV6CTL_MRTSTATS
 7

	)

572 
	#IPV6CTL_MRTPROTO
 8

	)

573 
	#IPV6CTL_MAXFRAGPACKETS
 9

	)

574 
	#IPV6CTL_SOURCECHECK
 10

	)

575 
	#IPV6CTL_SOURCECHECK_LOGINT
 11

	)

576 
	#IPV6CTL_ACCEPT_RTADV
 12

	)

577 
	#IPV6CTL_KEEPFAITH
 13

	)

578 
	#IPV6CTL_LOG_INTERVAL
 14

	)

579 
	#IPV6CTL_HDRNESTLIMIT
 15

	)

580 
	#IPV6CTL_DAD_COUNT
 16

	)

581 
	#IPV6CTL_AUTO_FLOWLABEL
 17

	)

582 
	#IPV6CTL_DEFMCASTHLIM
 18

	)

583 
	#IPV6CTL_GIF_HLIM
 19

	)

584 
	#IPV6CTL_KAME_VERSION
 20

	)

585 
	#IPV6CTL_USE_DEPRECATED
 21

	)

586 
	#IPV6CTL_RR_PRUNE
 22

	)

588 
	#IPV6CTL_MAPPED_ADDR
 23

	)

590 
	#IPV6CTL_V6ONLY
 24

	)

591 
	#IPV6CTL_RTEXPIRE
 25

	)

592 
	#IPV6CTL_RTMINEXPIRE
 26

	)

593 
	#IPV6CTL_RTMAXCACHE
 27

	)

595 
	#IPV6CTL_USETEMPADDR
 32

	)

596 
	#IPV6CTL_TEMPPLTIME
 33

	)

597 
	#IPV6CTL_TEMPVLTIME
 34

	)

598 
	#IPV6CTL_AUTO_LINKLOCAL
 35

	)

599 
	#IPV6CTL_RIP6STATS
 36

	)

600 
	#IPV6CTL_PREFER_TEMPADDR
 37

	)

601 
	#IPV6CTL_ADDRCTLPOLICY
 38

	)

602 
	#IPV6CTL_USE_DEFAULTZONE
 39

	)

604 
	#IPV6CTL_MAXFRAGS
 41

	)

606 
	#IPV6CTL_IFQ
 42

	)

607 
	#IPV6CTL_ISATAPRTR
 43

	)

609 
	#IPV6CTL_MCAST_PMTU
 44

	)

613 
	#IPV6CTL_STEALTH
 45

	)

615 
	#ICMPV6CTL_ND6_ONLINKNSRFC4861
 47

	)

616 
	#IPV6CTL_NO_RADR
 48

	)

617 
	#IPV6CTL_NORBIT_RAIF
 49

	)

619 
	#IPV6CTL_RFC6204W3
 50

	)

621 
	#IPV6CTL_MAXID
 51

	)

628 
	#M_FASTFWD_OURS
 
M_PROTO1


	)

629 
	#M_IP6_NEXTHOP
 
M_PROTO2


	)

630 
	#M_IP_NEXTHOP
 
M_PROTO2


	)

631 
	#M_SKIP_FIREWALL
 
M_PROTO3


	)

632 
	#M_AUTHIPHDR
 
M_PROTO4


	)

633 
	#M_DECRYPTED
 
M_PROTO5


	)

634 
	#M_LOOP
 
M_PROTO6


	)

635 
	#M_AUTHIPDGM
 
M_PROTO7


	)

636 
	#M_RTALERT_MLD
 
M_PROTO8


	)

638 #ifde‡
_KERNEL


639 
	gcmsghdr
;

640 
	gù6_hdr
;

642 
ö6_cksum_p£udo
(
ù6_hdr
 *, 
uöt32_t
, 
uöt8_t
, 
uöt16_t
);

643 
ö6_cksum
(
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t);

644 
ö6_cksum_∑πül
(
mbuf
 *, 
u_öt8_t
, 
u_öt32_t
, u_int32_t,

645 
u_öt32_t
);

646 
ö6_loˇœddr
(
ö6_addr
 *);

647 
ö6_loˇlù
(
ö6_addr
 *);

648 
ö6_addrsc›e
(
ö6_addr
 *);

649 
ö6_iÁddr
 *
ö6_iÁwôhiÂ
(
i‚ë
 *, 
ö6_addr
 *);

650 
ö6_if_up
(
i‚ë
 *);

651 
	gsockaddr
;

652 
u_ch¨
 
ù6_¥Ÿox
[];

654 
ö6_sö6_2_sö
(
sockaddr_ö
 *
sö
,

655 
sockaddr_ö6
 *
sö6
);

656 
ö6_sö_2_v4m≠sö6
(
sockaddr_ö
 *
sö
,

657 
sockaddr_ö6
 *
sö6
);

658 
ö6_sö6_2_sö_ö_sock
(
sockaddr
 *
«m
);

659 
ö6_sö_2_v4m≠sö6_ö_sock
(
sockaddr
 **
«m
);

660 
addr£l_pﬁicy_öô
();

662 
	#ßtosö6
(
ß
Ë((
sockaddr_ö6
 *)(ß))

	)

663 
	#sö6toß
(
sö6
Ë((
sockaddr
 *)(sö6))

	)

664 
	#iÁtoü6
(
iÁ
Ë((
ö6_iÁddr
 *)(iÁ))

	)

666 (*
Áôh¥efix_p
)(
ö6_addr
 *);

669 #i‚de‡
_SIZE_T_DECLARED


670 
__size_t
 
	tsize_t
;

671 
	#_SIZE_T_DECLARED


	)

674 #i‚de‡
_SOCKLEN_T_DECLARED


675 
__sockÀn_t
 
	tsockÀn_t
;

676 
	#_SOCKLEN_T_DECLARED


	)

679 #i‡
__BSD_VISIBLE


681 
__BEGIN_DECLS


682 
cmsghdr
;

684 
	`öë6_›ti⁄_•a˚
();

685 
	`öë6_›ti⁄_öô
(*, 
cmsghdr
 **, );

686 
	`öë6_›ti⁄_≠≥nd
(
cmsghdr
 *, c⁄° 
uöt8_t
 *,

688 
uöt8_t
 *
	`öë6_›ti⁄_Æloc
(
cmsghdr
 *, , , );

689 
	`öë6_›ti⁄_√xt
(c⁄° 
cmsghdr
 *, 
uöt8_t
 **);

690 
	`öë6_›ti⁄_föd
(c⁄° 
cmsghdr
 *, 
uöt8_t
 **, );

692 
size_t
 
	`öë6_πhdr_•a˚
(, );

693 
cmsghdr
 *
	`öë6_πhdr_öô
(*, );

694 
	`öë6_πhdr_add
(
cmsghdr
 *, c⁄° 
ö6_addr
 *,

696 
	`öë6_πhdr_œ°h›
(
cmsghdr
 *, );

698 
	`öë6_πhdr_ªvî£
(c⁄° 
cmsghdr
 *, cmsghdr *);

700 
	`öë6_πhdr_£gmíts
(c⁄° 
cmsghdr
 *);

701 
ö6_addr
 *
	`öë6_πhdr_gëaddr
(
cmsghdr
 *, );

702 
	`öë6_πhdr_gëÊags
(c⁄° 
cmsghdr
 *, );

704 
	`öë6_›t_öô
(*, 
sockÀn_t
);

705 
	`öë6_›t_≠≥nd
(*, 
sockÀn_t
, , 
uöt8_t
, socklen_t,

706 
uöt8_t
, **);

707 
	`öë6_›t_föish
(*, 
sockÀn_t
, );

708 
	`öë6_›t_£t_vÆ
(*, , *, 
sockÀn_t
);

710 
	`öë6_›t_√xt
(*, 
sockÀn_t
, , 
uöt8_t
 *, socklen_t *,

712 
	`öë6_›t_föd
(*, 
sockÀn_t
, , 
uöt8_t
, socklen_t *,

714 
	`öë6_›t_gë_vÆ
(*, , *, 
sockÀn_t
);

715 
sockÀn_t
 
	`öë6_πh_•a˚
(, );

716 *
	`öë6_πh_öô
(*, 
sockÀn_t
, , );

717 
	`öë6_πh_add
(*, c⁄° 
ö6_addr
 *);

718 
	`öë6_πh_ªvî£
(const *, *);

719 
	`öë6_πh_£gmíts
(const *);

720 
ö6_addr
 *
	`öë6_πh_gëaddr
(const *, );

721 
__END_DECLS


	@/usr/include/sys/_bus_dma.h

30 #i‚de‡
_SYS__BUS_DMA_H_


31 
	#_SYS__BUS_DMA_H_


	)

33 
	tbus_dmasync_›_t
;

43 
bus_dma_èg
 *
	tbus_dma_èg_t
;

50 
bus_dmam≠
 *
	tbus_dmam≠_t
;

57 
	mBUS_DMA_LOCK
 = 0x01,

58 
	mBUS_DMA_UNLOCK
 = 0x02,

59 } 
	tbus_dma_lock_›_t
;

61 
	tbus_dma_lock_t
(*, 
	tbus_dma_lock_›_t
);

	@/usr/include/sys/_cpuset.h

32 #i‚de‡
_SYS__CPUSET_H_


33 
	#_SYS__CPUSET_H_


	)

35 
	~<sys/_bô£t.h
>

37 #ifde‡
_KERNEL


38 
	#CPU_SETSIZE
 
MAXCPU


	)

41 
	#CPU_MAXSIZE
 256

	)

43 #i‚def 
CPU_SETSIZE


44 
	#CPU_SETSIZE
 
CPU_MAXSIZE


	)

47 
	#_NCPUBITS
 
_BITSET_BITS


	)

48 
	#_NCPUWORDS
 
	`__bô£t_w‹ds
(
CPU_SETSIZE
)

	)

50 
BITSET_DEFINE
(
_˝u£t
, 
CPU_SETSIZE
);

51 
_˝u£t
 
	t˝u£t_t
;

53 
	#CPUSET_FSET
 
	`BITSET_FSET
(
_NCPUWORDS
)

	)

54 
	#CPUSET_T_INITIALIZER
 
BITSET_T_INITIALIZER


	)

	@/usr/include/sys/_iovec.h

33 #i‚de‡
_SYS__IOVEC_H_


34 
	#_SYS__IOVEC_H_


	)

36 
	~<sys/_ty≥s.h
>

38 #i‚de‡
_SIZE_T_DECLARED


39 
__size_t
 
	tsize_t
;

40 
	#_SIZE_T_DECLARED


	)

43 
	siovec
 {

44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/sys/_lock.h

31 #i‚de‡
_SYS__LOCK_H_


32 
	#_SYS__LOCK_H_


	)

34 
	slock_obje˘
 {

35 c⁄° *
	mlo_«me
;

36 
u_öt
 
	mlo_Êags
;

37 
u_öt
 
	mlo_d©a
;

38 
wô√ss
 *
	mlo_wô√ss
;

	@/usr/include/sys/_mutex.h

31 #i‚de‡
_SYS__MUTEX_H_


32 
	#_SYS__MUTEX_H_


	)

34 
	~<machöe/∑øm.h
>

45 
	smtx
 {

46 
lock_obje˘
 
	mlock_obje˘
;

47 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

59 
	smtx_∑dÆign
 {

60 
lock_obje˘
 
	mlock_obje˘
;

61 vﬁ©ûê
uöçå_t
 
	mmtx_lock
;

62 } 
__Æig√d
(
CACHE_LINE_SIZE
);

	@/usr/include/sys/_null.h

29 #i‚de‡
NULL


31 #i‡!
deföed
(
__˝lu•lus
)

32 
	#NULL
 ((*)0)

	)

34 #i‡
__˝lu•lus
 >= 201103L

35 
	#NULL
 
nuŒ±r


	)

36 #ñi‡
deföed
(
__GNUG__
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 4

37 
	#NULL
 
__nuŒ


	)

39 #i‡
deföed
(
__LP64__
)

40 
	#NULL
 (0L)

	)

42 
	#NULL
 0

	)

	@/usr/include/sys/_pthreadtypes.h

36 #i‚de‡
_SYS__PTHREADTYPES_H_


37 
	#_SYS__PTHREADTYPES_H_


	)

44 
	g±hªad
;

45 
	g±hªad_©å
;

46 
	g±hªad_c⁄d
;

47 
	g±hªad_c⁄d_©å
;

48 
	g±hªad_muãx
;

49 
	g±hªad_muãx_©å
;

50 
	g±hªad_⁄˚
;

51 
	g±hªad_rwlock
;

52 
	g±hªad_rwlock©å
;

53 
	g±hªad_b¨rõr
;

54 
	g±hªad_b¨rõr_©å
;

55 
	g±hªad_•ölock
;

64 #i‚de‡
_PTHREAD_T_DECLARED


65 
±hªad
 *
	t±hªad_t
;

66 
	#_PTHREAD_T_DECLARED


	)

68 
±hªad_©å
 *
	t±hªad_©å_t
;

69 
±hªad_muãx
 *
	t±hªad_muãx_t
;

70 
±hªad_muãx_©å
 *
	t±hªad_muãx©å_t
;

71 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

72 
±hªad_c⁄d_©å
 *
	t±hªad_c⁄d©å_t
;

73 
	t±hªad_key_t
;

74 
±hªad_⁄˚
 
	t±hªad_⁄˚_t
;

75 
±hªad_rwlock
 *
	t±hªad_rwlock_t
;

76 
±hªad_rwlock©å
 *
	t±hªad_rwlock©å_t
;

77 
±hªad_b¨rõr
 *
	t±hªad_b¨rõr_t
;

78 
±hªad_b¨rõøâr
 *
	t±hªad_b¨rõøâr_t
;

79 
±hªad_•ölock
 *
	t±hªad_•ölock_t
;

87 *
	t±hªad_addr_t
;

88 *(*
	t±hªad_°¨åoutöe_t
)(*);

93 
	s±hªad_⁄˚
 {

94 
	m°©e
;

95 
±hªad_muãx_t
 
	mmuãx
;

	@/usr/include/sys/_rmlock.h

32 #i‚de‡
_SYS__RMLOCK_H_


33 
	#_SYS__RMLOCK_H_


	)

39 
LIST_HEAD
(
rm¥iﬁi°
,
rm_¥iŸøckî
);

41 
	srm_queue
 {

42 
rm_queue
 *vﬁ©ûê
	mrmq_√xt
;

43 
rm_queue
 *vﬁ©ûê
	mrmq_¥ev
;

46 
	srmlock
 {

47 
lock_obje˘
 
	mlock_obje˘
;

48 vﬁ©ûê
˝u£t_t
 
	mrm_wrôe˝us
;

49 
LIST_HEAD
(,
rm_¥iŸøckî
Ë
	mrm_a˘iveRódîs
;

51 
lock_obje˘
 
	m_rm_wlock_obje˘
;

52 
mtx
 
	m_rm_lock_mtx
;

53 
sx
 
	m_rm_lock_sx
;

54 } 
	m_rm_lock
;

57 
	#rm_wlock_obje˘
 
_rm_lock
.
_rm_wlock_obje˘


	)

58 
	#rm_lock_mtx
 
_rm_lock
.
_rm_lock_mtx


	)

59 
	#rm_lock_sx
 
_rm_lock
.
_rm_lock_sx


	)

61 
	srm_¥iŸøckî
 {

62 
rm_queue
 
	mrmp_˝uQueue
;

63 
rmlock
 *
	mrmp_rmlock
;

64 
thªad
 *
	mrmp_thªad
;

65 
	mrmp_Êags
;

66 
LIST_ENTRY
(
rm_¥iŸøckî
Ë
	mrmp_qíåy
;

	@/usr/include/sys/_sockaddr_storage.h

33 #i‚de‡
_SYS__SOCKADDR_STORAGE_H_


34 
	#_SYS__SOCKADDR_STORAGE_H_


	)

39 
	#_SS_MAXSIZE
 128U

	)

40 
	#_SS_ALIGNSIZE
 ((
__öt64_t
))

	)

41 
	#_SS_PAD1SIZE
 (
_SS_ALIGNSIZE
 - () - \

42 (
ß_Ámûy_t
))

	)

43 
	#_SS_PAD2SIZE
 (
_SS_MAXSIZE
 - () - \

44 (
ß_Ámûy_t
Ë- 
_SS_PAD1SIZE
 - 
_SS_ALIGNSIZE
)

	)

46 
	ssockaddr_°‹age
 {

47 
	mss_Àn
;

48 
ß_Ámûy_t
 
	mss_Ámûy
;

49 
	m__ss_∑d1
[
_SS_PAD1SIZE
];

50 
__öt64_t
 
	m__ss_Æign
;

51 
	m__ss_∑d2
[
_SS_PAD2SIZE
];

	@/usr/include/sys/_stdint.h

30 #i‚de‡
_SYS__STDINT_H_


31 
	#_SYS__STDINT_H_


	)

33 #i‚de‡
_INT8_T_DECLARED


34 
__öt8_t
 
	töt8_t
;

35 
	#_INT8_T_DECLARED


	)

38 #i‚de‡
_INT16_T_DECLARED


39 
__öt16_t
 
	töt16_t
;

40 
	#_INT16_T_DECLARED


	)

43 #i‚de‡
_INT32_T_DECLARED


44 
__öt32_t
 
	töt32_t
;

45 
	#_INT32_T_DECLARED


	)

48 #i‚de‡
_INT64_T_DECLARED


49 
__öt64_t
 
	töt64_t
;

50 
	#_INT64_T_DECLARED


	)

53 #i‚de‡
_UINT8_T_DECLARED


54 
__uöt8_t
 
	tuöt8_t
;

55 
	#_UINT8_T_DECLARED


	)

58 #i‚de‡
_UINT16_T_DECLARED


59 
__uöt16_t
 
	tuöt16_t
;

60 
	#_UINT16_T_DECLARED


	)

63 #i‚de‡
_UINT32_T_DECLARED


64 
__uöt32_t
 
	tuöt32_t
;

65 
	#_UINT32_T_DECLARED


	)

68 #i‚de‡
_UINT64_T_DECLARED


69 
__uöt64_t
 
	tuöt64_t
;

70 
	#_UINT64_T_DECLARED


	)

73 #i‚de‡
_INTPTR_T_DECLARED


74 
__öçå_t
 
	töçå_t
;

75 
	#_INTPTR_T_DECLARED


	)

77 #i‚de‡
_UINTPTR_T_DECLARED


78 
__uöçå_t
 
	tuöçå_t
;

79 
	#_UINTPTR_T_DECLARED


	)

81 #i‚de‡
_INTMAX_T_DECLARED


82 
__ötmax_t
 
	tötmax_t
;

83 
	#_INTMAX_T_DECLARED


	)

85 #i‚de‡
_UINTMAX_T_DECLARED


86 
__uötmax_t
 
	tuötmax_t
;

87 
	#_UINTMAX_T_DECLARED


	)

	@/usr/include/sys/_sx.h

31 #i‚def 
_SYS__SX_H_


32 
	#_SYS__SX_H_


	)

37 
	ssx
 {

38 
lock_obje˘
 
	mlock_obje˘
;

39 vﬁ©ûê
uöçå_t
 
	msx_lock
;

	@/usr/include/sys/_timespec.h

34 #i‚de‡
_SYS__TIMESPEC_H_


35 
	#_SYS__TIMESPEC_H_


	)

37 
	~<sys/_ty≥s.h
>

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

44 
	stime•ec
 {

45 
time_t
 
	mtv_£c
;

46 
	mtv_n£c
;

	@/usr/include/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

38 
__uöt32_t
 
	t__blksize_t
;

39 
__öt64_t
 
	t__blk˙t_t
;

40 
__öt32_t
 
	t__˛ockid_t
;

41 
__uöt32_t
 
	t__fÊags_t
;

42 
__uöt64_t
 
	t__fsblk˙t_t
;

43 
__uöt64_t
 
	t__fsfû˙t_t
;

44 
__uöt32_t
 
	t__gid_t
;

45 
__öt64_t
 
	t__id_t
;

46 
__uöt32_t
 
	t__öo_t
;

47 
	t__key_t
;

48 
__öt32_t
 
	t__lwpid_t
;

49 
__uöt16_t
 
	t__mode_t
;

50 
	t__accmode_t
;

51 
	t__∆_ôem
;

52 
__uöt16_t
 
	t__∆ök_t
;

53 
__öt64_t
 
	t__off_t
;

54 
__öt32_t
 
	t__pid_t
;

55 
__öt64_t
 
	t__æim_t
;

58 
__uöt8_t
 
	t__ß_Ámûy_t
;

59 
__uöt32_t
 
	t__sockÀn_t
;

60 
	t__su£c⁄ds_t
;

61 
__timî
 *
	t__timî_t
;

62 
__mq
 *
	t__mqd_t
;

63 
__uöt32_t
 
	t__uid_t
;

64 
	t__u£c⁄ds_t
;

65 
	t__˝uwhich_t
;

66 
	t__˝uÀvñ_t
;

67 
	t__˝u£tid_t
;

87 
	t__˘_ru√_t
;

88 
__˘_ru√_t
 
	t__ru√_t
;

89 
__˘_ru√_t
 
	t__wöt_t
;

92 #i‡!
deföed
(
__˛™g__
Ë|| !deföed(
__˝lu•lus
)

93 
__uöt_Àa°16_t
 
	t__ch¨16_t
;

94 
__uöt_Àa°32_t
 
	t__ch¨32_t
;

97 #i‡
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

98 
	#_CHAR16_T_DECLARED


	)

99 
	#_CHAR32_T_DECLARED


	)

102 
__uöt32_t
 
	t__dev_t
;

104 
__uöt32_t
 
	t__fix±_t
;

111 
	m__mb°©e8
[128];

112 
__öt64_t
 
	m_mb°©eL
;

113 } 
	t__mb°©e_t
;

	@/usr/include/sys/acl.h

36 #i‚de‡
_SYS_ACL_H_


37 
	#_SYS_ACL_H_


	)

39 
	~<sys/∑øm.h
>

40 
	~<sys/queue.h
>

41 
	~<vm/uma.h
>

47 
uöt32_t
 
	ta˛_èg_t
;

48 
uöt32_t
 
	ta˛_≥rm_t
;

49 
uöt16_t
 
	ta˛_íåy_ty≥_t
;

50 
uöt16_t
 
	ta˛_Êag_t
;

51 
	ta˛_ty≥_t
;

52 *
	ta˛_≥rm£t_t
;

53 
uöt16_t
 *
	ta˛_Êag£t_t
;

67 
	#ACL_MAX_ENTRIES
 254

	)

69 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_ACL_PRIVATE
)

71 
	#POSIX1E_ACL_ACCESS_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

72 
	#POSIX1E_ACL_ACCESS_EXTATTR_NAME
 "posix1e.a˛_ac˚ss"

	)

73 
	#POSIX1E_ACL_DEFAULT_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

74 
	#POSIX1E_ACL_DEFAULT_EXTATTR_NAME
 "posix1e.a˛_deÁu…"

	)

75 
	#NFS4_ACL_EXTATTR_NAMESPACE
 
EXTATTR_NAMESPACE_SYSTEM


	)

76 
	#NFS4_ACL_EXTATTR_NAME
 "nfs4.a˛"

	)

77 
	#OLDACL_MAX_ENTRIES
 32

	)

83 
	tﬁda˛_èg_t
;

84 
mode_t
 
	tﬁda˛_≥rm_t
;

86 
	sﬁda˛_íåy
 {

87 
ﬁda˛_èg_t
 
	m´_èg
;

88 
uid_t
 
	m´_id
;

89 
ﬁda˛_≥rm_t
 
	m´_≥rm
;

91 
ﬁda˛_íåy
 *
	tﬁda˛_íåy_t
;

93 
	sﬁda˛
 {

94 
	ma˛_˙t
;

95 
ﬁda˛_íåy
 
	ma˛_íåy
[
OLDACL_MAX_ENTRIES
];

101 
	sa˛_íåy
 {

102 
a˛_èg_t
 
	m´_èg
;

103 
uid_t
 
	m´_id
;

104 
a˛_≥rm_t
 
	m´_≥rm
;

106 
a˛_íåy_ty≥_t
 
	m´_íåy_ty≥
;

108 
a˛_Êag_t
 
	m´_Êags
;

110 
a˛_íåy
 *
	ta˛_íåy_t
;

117 
	sa˛
 {

118 
	ma˛_max˙t
;

119 
	ma˛_˙t
;

121 
	ma˛_•¨e
[4];

122 
a˛_íåy
 
	ma˛_íåy
[
ACL_MAX_ENTRIES
];

128 
	sa˛_t_°ru˘
 {

129 
a˛
 
	m©s_a˛
;

130 
	m©s_cur_íåy
;

139 
	m©s_bønd
;

141 
a˛_t_°ru˘
 *
	ta˛_t
;

145 *
	ta˛_íåy_t
;

146 *
	ta˛_t
;

153 
	#ACL_BRAND_UNKNOWN
 0

	)

154 
	#ACL_BRAND_POSIX
 1

	)

155 
	#ACL_BRAND_NFS4
 2

	)

160 
	#ACL_UNDEFINED_TAG
 0x00000000

	)

161 
	#ACL_USER_OBJ
 0x00000001

	)

162 
	#ACL_USER
 0x00000002

	)

163 
	#ACL_GROUP_OBJ
 0x00000004

	)

164 
	#ACL_GROUP
 0x00000008

	)

165 
	#ACL_MASK
 0x00000010

	)

166 
	#ACL_OTHER
 0x00000020

	)

167 
	#ACL_OTHER_OBJ
 
ACL_OTHER


	)

168 
	#ACL_EVERYONE
 0x00000040

	)

173 
	#ACL_ENTRY_TYPE_ALLOW
 0x0100

	)

174 
	#ACL_ENTRY_TYPE_DENY
 0x0200

	)

175 
	#ACL_ENTRY_TYPE_AUDIT
 0x0400

	)

176 
	#ACL_ENTRY_TYPE_ALARM
 0x0800

	)

182 
	#ACL_TYPE_ACCESS_OLD
 0x00000000

	)

183 
	#ACL_TYPE_DEFAULT_OLD
 0x00000001

	)

184 
	#ACL_TYPE_ACCESS
 0x00000002

	)

185 
	#ACL_TYPE_DEFAULT
 0x00000003

	)

186 
	#ACL_TYPE_NFS4
 0x00000004

	)

192 
	#ACL_EXECUTE
 0x0001

	)

193 
	#ACL_WRITE
 0x0002

	)

194 
	#ACL_READ
 0x0004

	)

195 
	#ACL_PERM_NONE
 0x0000

	)

196 
	#ACL_PERM_BITS
 (
ACL_EXECUTE
 | 
ACL_WRITE
 | 
ACL_READ
)

	)

197 
	#ACL_POSIX1E_BITS
 (
ACL_EXECUTE
 | 
ACL_WRITE
 | 
ACL_READ
)

	)

202 
	#ACL_READ_DATA
 0x00000008

	)

203 
	#ACL_LIST_DIRECTORY
 0x00000008

	)

204 
	#ACL_WRITE_DATA
 0x00000010

	)

205 
	#ACL_ADD_FILE
 0x00000010

	)

206 
	#ACL_APPEND_DATA
 0x00000020

	)

207 
	#ACL_ADD_SUBDIRECTORY
 0x00000020

	)

208 
	#ACL_READ_NAMED_ATTRS
 0x00000040

	)

209 
	#ACL_WRITE_NAMED_ATTRS
 0x00000080

	)

211 
	#ACL_DELETE_CHILD
 0x00000100

	)

212 
	#ACL_READ_ATTRIBUTES
 0x00000200

	)

213 
	#ACL_WRITE_ATTRIBUTES
 0x00000400

	)

214 
	#ACL_DELETE
 0x00000800

	)

215 
	#ACL_READ_ACL
 0x00001000

	)

216 
	#ACL_WRITE_ACL
 0x00002000

	)

217 
	#ACL_WRITE_OWNER
 0x00004000

	)

218 
	#ACL_SYNCHRONIZE
 0x00008000

	)

220 
	#ACL_FULL_SET
 (
ACL_READ_DATA
 | 
ACL_WRITE_DATA
 | \

221 
ACL_APPEND_DATA
 | 
ACL_READ_NAMED_ATTRS
 | 
ACL_WRITE_NAMED_ATTRS
 | \

222 
ACL_EXECUTE
 | 
ACL_DELETE_CHILD
 | 
ACL_READ_ATTRIBUTES
 | \

223 
ACL_WRITE_ATTRIBUTES
 | 
ACL_DELETE
 | 
ACL_READ_ACL
 | 
ACL_WRITE_ACL
 | \

224 
ACL_WRITE_OWNER
 | 
ACL_SYNCHRONIZE
)

	)

226 
	#ACL_MODIFY_SET
 (
ACL_FULL_SET
 & \

227 ~(
ACL_WRITE_ACL
 | 
ACL_WRITE_OWNER
))

	)

229 
	#ACL_READ_SET
 (
ACL_READ_DATA
 | 
ACL_READ_NAMED_ATTRS
 | \

230 
ACL_READ_ATTRIBUTES
 | 
ACL_READ_ACL
)

	)

232 
	#ACL_WRITE_SET
 (
ACL_WRITE_DATA
 | 
ACL_APPEND_DATA
 | \

233 
ACL_WRITE_NAMED_ATTRS
 | 
ACL_WRITE_ATTRIBUTES
)

	)

235 
	#ACL_NFS4_PERM_BITS
 
ACL_FULL_SET


	)

240 
	#ACL_FIRST_ENTRY
 0

	)

241 
	#ACL_NEXT_ENTRY
 1

	)

246 
	#ACL_ENTRY_FILE_INHERIT
 0x0001

	)

247 
	#ACL_ENTRY_DIRECTORY_INHERIT
 0x0002

	)

248 
	#ACL_ENTRY_NO_PROPAGATE_INHERIT
 0x0004

	)

249 
	#ACL_ENTRY_INHERIT_ONLY
 0x0008

	)

250 
	#ACL_ENTRY_SUCCESSFUL_ACCESS
 0x0010

	)

251 
	#ACL_ENTRY_FAILED_ACCESS
 0x0020

	)

252 
	#ACL_ENTRY_INHERITED
 0x0080

	)

254 
	#ACL_FLAGS_BITS
 (
ACL_ENTRY_FILE_INHERIT
 | \

255 
ACL_ENTRY_DIRECTORY_INHERIT
 | 
ACL_ENTRY_NO_PROPAGATE_INHERIT
 | \

256 
ACL_ENTRY_INHERIT_ONLY
 | 
ACL_ENTRY_SUCCESSFUL_ACCESS
 | \

257 
ACL_ENTRY_FAILED_ACCESS
 | 
ACL_ENTRY_INHERITED
)

	)

263 
	#ACL_UNDEFINED_ID
 ((
uid_t
)-1)

	)

268 
	#ACL_TEXT_VERBOSE
 0x01

	)

269 
	#ACL_TEXT_NUMERIC_IDS
 0x02

	)

270 
	#ACL_TEXT_APPEND_ID
 0x04

	)

278 
	#ACL_OVERRIDE_MASK
 (
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

279 
	#ACL_PRESERVE_MASK
 (~
ACL_OVERRIDE_MASK
)

	)

281 #ifde‡
_KERNEL


287 
a˛_≥rm_t
 
a˛_posix1e_mode_to_≥rm
(
a˛_èg_t
 
èg
, 
mode_t
 
mode
);

288 
a˛_íåy
 
a˛_posix1e_mode_to_íåy
(
a˛_èg_t
 
èg
, 
uid_t
 
uid
,

289 
gid_t
 
gid
, 
mode_t
 
mode
);

290 
mode_t
 
a˛_posix1e_≥rms_to_mode
(

291 
a˛_íåy
 *
a˛_u£r_obj_íåy
,

292 
a˛_íåy
 *
a˛_group_obj_íåy
,

293 
a˛_íåy
 *
a˛_Ÿhî_íåy
);

294 
mode_t
 
a˛_posix1e_a˛_to_mode
(
a˛
 *acl);

295 
mode_t
 
a˛_posix1e_√wfûemode
(mode_à
cmode
,

296 
a˛
 *
da˛
);

297 
a˛
 *
a˛_Æloc
(
Êags
);

298 
a˛_‰ì
(
a˛
 *
a˛p
);

300 
a˛_nfs4_sync_a˛_‰om_mode
(
a˛
 *
a˛p
,

301 
mode_t
 
mode
, 
fûe_ow√r_id
);

302 
a˛_nfs4_sync_mode_‰om_a˛
(
mode_t
 *
mode
,

303 c⁄° 
a˛
 *
a˛p
);

304 
a˛_nfs4_is_åivül
(c⁄° 
a˛
 *
a˛p
,

305 
fûe_ow√r_id
);

306 
a˛_nfs4_compuã_öhîôed_a˛
(

307 c⁄° 
a˛
 *
∑ª¡_a˛p
,

308 
a˛
 *
chûd_a˛p
, 
mode_t
 
mode
,

309 
fûe_ow√r_id
, 
is_dúe˘‹y
);

310 
a˛_c›y_ﬁda˛_öto_a˛
(c⁄° 
ﬁda˛
 *
sour˚
,

311 
a˛
 *
de°
);

312 
a˛_c›y_a˛_öto_ﬁda˛
(c⁄° 
a˛
 *
sour˚
,

313 
ﬁda˛
 *
de°
);

318 
MALLOC_DECLARE
(
M_ACL
);

322 
a˛_posix1e_check
(
a˛
 *acl);

323 
a˛_nfs4_check
(c⁄° 
a˛
 *
a˛p
, 
is_dúe˘‹y
);

327 #i‡
deföed
(
_ACL_PRIVATE
)

333 
__BEGIN_DECLS


334 
__a˛_a˛check_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

335 
__a˛_a˛check_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
,

336 
a˛
 *
_a˛p
);

337 
__a˛_a˛check_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
,

338 
a˛
 *
_a˛p
);

339 
__a˛_dñëe_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
);

340 
__a˛_dñëe_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

341 
__a˛_dñëe_lök
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

342 
__a˛_gë_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

343 
__a˛_gë_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

344 
__a˛_gë_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

345 
__a˛_£t_fd
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

346 
__a˛_£t_fûe
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

347 
__a˛_£t_lök
(c⁄° *
_∑th
, 
a˛_ty≥_t
 
_ty≥
, 
a˛
 *
_a˛p
);

348 
	g__END_DECLS


358 
__BEGIN_DECLS


359 
a˛_add_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

360 
a˛_add_≥rm
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

361 
a˛_ˇlc_mask
(
a˛_t
 *
_a˛_p
);

362 
a˛_˛ór_Êags_≈
(
a˛_Êag£t_t
 
_Êag£t_d
);

363 
a˛_˛ór_≥rms
(
a˛_≥rm£t_t
 
_≥rm£t_d
);

364 
a˛_c›y_íåy
(
a˛_íåy_t
 
_de°_d
,á˛_íåy_à
_§c_d
);

365 
ssize_t
 
a˛_c›y_ext
(*
_buf_p
, 
a˛_t
 
_a˛
, ssize_à
_size
);

366 
a˛_t
 
a˛_c›y_öt
(c⁄° *
_buf_p
);

367 
a˛_¸óã_íåy
(
a˛_t
 *
_a˛_p
, 
a˛_íåy_t
 *
_íåy_p
);

368 
a˛_¸óã_íåy_≈
(
a˛_t
 *
_a˛_p
, 
a˛_íåy_t
 *
_íåy_p
, 
_ödex
);

369 
a˛_dñëe_íåy
(
a˛_t
 
_a˛
, 
a˛_íåy_t
 
_íåy_d
);

370 
a˛_dñëe_íåy_≈
(
a˛_t
 
_a˛
, 
_ödex
);

371 
a˛_dñëe_fd_≈
(
_fûedes
, 
a˛_ty≥_t
 
_ty≥
);

372 
a˛_dñëe_fûe_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

373 
a˛_dñëe_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

374 
a˛_dñëe_def_fûe
(c⁄° *
_∑th_p
);

375 
a˛_dñëe_def_lök_≈
(c⁄° *
_∑th_p
);

376 
a˛_dñëe_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

377 
a˛_dñëe_≥rm
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

378 
a˛_t
 
a˛_dup
◊˛_à
_a˛
);

379 
a˛_‰ì
(*
_obj_p
);

380 
a˛_t
 
a˛_‰om_ãxt
(c⁄° *
_buf_p
);

381 
a˛_gë_bønd_≈
(
a˛_t
 
_a˛
, *
_bønd_p
);

382 
a˛_gë_íåy
(
a˛_t
 
_a˛
, 
_íåy_id
, 
a˛_íåy_t
 *
_íåy_p
);

383 
a˛_t
 
a˛_gë_fd
(
_fd
);

384 
a˛_t
 
a˛_gë_fd_≈
(
fd
, 
a˛_ty≥_t
 
_ty≥
);

385 
a˛_t
 
a˛_gë_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

386 
a˛_gë_íåy_ty≥_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_íåy_ty≥_t
 *
_íåy_ty≥_p
);

387 
a˛_t
 
a˛_gë_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
);

388 *
a˛_gë_quÆifõr
(
a˛_íåy_t
 
_íåy_d
);

389 
a˛_gë_Êag_≈
(
a˛_Êag£t_t
 
_Êag£t_d
, 
a˛_Êag_t
 
_Êag
);

390 
a˛_gë_≥rm_≈
(
a˛_≥rm£t_t
 
_≥rm£t_d
, 
a˛_≥rm_t
 
_≥rm
);

391 
a˛_gë_Êag£t_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_Êag£t_t
 *
_Êag£t_p
);

392 
a˛_gë_≥rm£t
(
a˛_íåy_t
 
_íåy_d
, 
a˛_≥rm£t_t
 *
_≥rm£t_p
);

393 
a˛_gë_èg_ty≥
(
a˛_íåy_t
 
_íåy_d
, 
a˛_èg_t
 *
_èg_ty≥_p
);

394 
a˛_t
 
a˛_öô
(
_cou¡
);

395 
a˛_£t_fd
(
_fd
, 
a˛_t
 
_a˛
);

396 
a˛_£t_fd_≈
(
_fd
, 
a˛_t
 
_a˛
, 
a˛_ty≥_t
 
_ty≥
);

397 
a˛_£t_fûe
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

398 
a˛_£t_íåy_ty≥_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_íåy_ty≥_t
 
_íåy_ty≥
);

399 
a˛_£t_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

400 
a˛_£t_Êag£t_≈
(
a˛_íåy_t
 
_íåy_d
, 
a˛_Êag£t_t
 
_Êag£t_d
);

401 
a˛_£t_≥rm£t
(
a˛_íåy_t
 
_íåy_d
, 
a˛_≥rm£t_t
 
_≥rm£t_d
);

402 
a˛_£t_quÆifõr
(
a˛_íåy_t
 
_íåy_d
, c⁄° *
_èg_quÆifõr_p
);

403 
a˛_£t_èg_ty≥
(
a˛_íåy_t
 
_íåy_d
, 
a˛_èg_t
 
_èg_ty≥
);

404 
ssize_t
 
a˛_size
(
a˛_t
 
_a˛
);

405 *
a˛_to_ãxt
(
a˛_t
 
_a˛
, 
ssize_t
 *
_Àn_p
);

406 *
a˛_to_ãxt_≈
(
a˛_t
 
_a˛
, 
ssize_t
 *
_Àn_p
, 
_Êags
);

407 
a˛_vÆid
(
a˛_t
 
_a˛
);

408 
a˛_vÆid_fd_≈
(
_fd
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

409 
a˛_vÆid_fûe_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

410 
a˛_vÆid_lök_≈
(c⁄° *
_∑th_p
, 
a˛_ty≥_t
 
_ty≥
, 
a˛_t
 
_a˛
);

411 
a˛_is_åivül_≈
(c⁄° 
a˛_t
 
_a˛
, *
_åivüÕ
);

412 
a˛_t
 
a˛_°rù_≈
(c⁄°á˛_à
_a˛
, 
ªˇlcuœã_mask
);

413 
	g__END_DECLS


	@/usr/include/sys/bufobj.h

49 #i‚de‡
_SYS_BUFOBJ_H_


50 
	#_SYS_BUFOBJ_H_


	)

52 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KVM_VNODE
)

54 
	~<sys/queue.h
>

55 
	~<sys/_lock.h
>

56 
	~<sys/_rwlock.h
>

57 
	~<sys/_p˘rõ.h
>

59 
	gbufobj
;

60 
	gbuf_›s
;

62 
buf_›s
 
buf_›s_bio
;

64 
TAILQ_HEAD
(
buÊi°s
, 
buf
);

67 
	sbufv
 {

68 
buÊi°s
 
	mbv_hd
;

69 
p˘rõ
 
	mbv_roŸ
;

70 
	mbv_˙t
;

73 
	tb_°øãgy_t
(
	tbufobj
 *, 
	tbuf
 *);

74 
	tb_wrôe_t
(
	tbuf
 *);

75 
	tb_sync_t
(
	tbufobj
 *, 
	twaôf‹
);

76 
	tb_bdÊush_t
(
	tbufobj
 *, 
	tbuf
 *);

78 
	sbuf_›s
 {

79 *
	mb›_«me
;

80 
b_wrôe_t
 *
	mb›_wrôe
;

81 
b_°øãgy_t
 *
	mb›_°øãgy
;

82 
b_sync_t
 *
	mb›_sync
;

83 
b_bdÊush_t
 *
	mb›_bdÊush
;

86 
	#BO_STRATEGY
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_°øãgy
((bo), (bp)))

	)

87 
	#BO_SYNC
(
bo
, 
w
Ë((bo)->
bo_›s
->
	`b›_sync
((bo), (w)))

	)

88 
	#BO_WRITE
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_wrôe
((bp)))

	)

89 
	#BO_BDFLUSH
(
bo
, 
bp
Ë((bo)->
bo_›s
->
	`b›_bdÊush
((bo), (bp)))

	)

91 
	sbufobj
 {

92 
rwlock
 
	mbo_lock
;

93 
buf_›s
 *
	mbo_›s
;

94 
vm_obje˘
 *
	mbo_obje˘
;

95 
LIST_ENTRY
(
bufobj
Ë
	mbo_syn˛i°
;

96 *
	mbo_¥iv©e
;

97 
vnode
 *
	m__bo_vnode
;

102 
bufv
 
	mbo_˛ón
;

103 
bufv
 
	mbo_dúty
;

104 
	mbo_numouçut
;

105 
u_öt
 
	mbo_Êag
;

106 
	mbo_bsize
;

113 
	#BO_ONWORKLST
 (1 << 0Ë

	)

114 
	#BO_WWAIT
 (1 << 1Ë

	)

115 
	#BO_DEAD
 (1 << 2Ë

	)

117 
	#BO_LOCKPTR
(
bo
Ë(&(bo)->
bo_lock
)

	)

118 
	#BO_LOCK
(
bo
Ë
	`rw_wlock
(
	`BO_LOCKPTR
((bo)))

	)

119 
	#BO_UNLOCK
(
bo
Ë
	`rw_wu∆ock
(
	`BO_LOCKPTR
((bo)))

	)

120 
	#BO_RLOCK
(
bo
Ë
	`rw_æock
(
	`BO_LOCKPTR
((bo)))

	)

121 
	#BO_RUNLOCK
(
bo
Ë
	`rw_ru∆ock
(
	`BO_LOCKPTR
((bo)))

	)

122 
	#ASSERT_BO_WLOCKED
(
bo
Ë
	`rw_as£π
(
	`BO_LOCKPTR
((bo)), 
RA_WLOCKED
)

	)

123 
	#ASSERT_BO_LOCKED
(
bo
Ë
	`rw_as£π
(
	`BO_LOCKPTR
((bo)), 
RA_LOCKED
)

	)

124 
	#ASSERT_BO_UNLOCKED
(
bo
Ë
	`rw_as£π
(
	`BO_LOCKPTR
((bo)), 
RA_UNLOCKED
)

	)

126 
bufobj_wdr›
(
bufobj
 *
bo
);

127 
bufobj_wªf
(
bufobj
 *
bo
);

128 
bufobj_wªÊ
(
bufobj
 *
bo
);

129 
bufobj_övÆbuf
(
bufobj
 *
bo
, 
Êags
, 
¶pÊag
, 
¶±imeo
);

130 
bufobj_wwaô
(
bufobj
 *
bo
, 
¶pÊag
, 
timeo
);

131 
bufsync
(
bufobj
 *
bo
, 
waôf‹
);

132 
bufbdÊush
(
bufobj
 *
bo
, 
buf
 *
bp
);

	@/usr/include/sys/callout.h

38 #i‚de‡
_SYS_CALLOUT_H_


39 
	#_SYS_CALLOUT_H_


	)

41 
	~<sys/_ˇŒout.h
>

43 
	#CALLOUT_LOCAL_ALLOC
 0x0001

	)

44 
	#CALLOUT_ACTIVE
 0x0002

	)

45 
	#CALLOUT_PENDING
 0x0004

	)

46 
	#CALLOUT_MPSAFE
 0x0008

	)

47 
	#CALLOUT_RETURNUNLOCKED
 0x0010

	)

48 
	#CALLOUT_SHAREDLOCK
 0x0020

	)

49 
	#CALLOUT_DFRMIGRATION
 0x0040

	)

50 
	#CALLOUT_PROCESSED
 0x0080

	)

51 
	#CALLOUT_DIRECT
 0x0100

	)

53 
	#C_DIRECT_EXEC
 0x0001

	)

54 
	#C_PRELBITS
 7

	)

55 
	#C_PRELRANGE
 ((1 << 
C_PRELBITS
Ë- 1)

	)

56 
	#C_PREL
(
x
Ë(((xË+ 1Ë<< 1)

	)

57 
	#C_PRELGET
(
x
Ë()((((xË>> 1Ë& 
C_PRELRANGE
Ë- 1)

	)

58 
	#C_HARDCLOCK
 0x0100

	)

59 
	#C_ABSOLUTE
 0x0200

	)

61 
	sˇŒout_h™dÀ
 {

62 
ˇŒout
 *
	mˇŒout
;

66 
	#CS_DRAIN
 0x0001

	)

67 
	#CS_MIGRBLOCK
 0x0002

	)

71 #ifde‡
_KERNEL


88 
	#ˇŒout_a˘ive
(
c
Ë((c)->
c_Êags
 & 
CALLOUT_ACTIVE
)

	)

89 
	#ˇŒout_dó˘iv©e
(
c
Ë((c)->
c_Êags
 &~
CALLOUT_ACTIVE
)

	)

90 
	#ˇŒout_døö
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 
CS_DRAIN
)

	)

91 
ˇŒout_öô
(
ˇŒout
 *, );

92 
_ˇŒout_öô_lock
(
ˇŒout
 *, 
lock_obje˘
 *, );

93 
	#ˇŒout_öô_mtx
(
c
, 
mtx
, 
Êags
) \

94 
	`_ˇŒout_öô_lock
((
c
), ((
mtx
Ë!
NULL
Ë? &(mtx)->
lock_obje˘
 : \

95 
NULL
, (
Êags
))

	)

96 
	#ˇŒout_öô_rm
(
c
, 
rm
, 
Êags
) \

97 
	`_ˇŒout_öô_lock
((
c
), ((
rm
Ë!
NULL
Ë? &‘m)->
lock_obje˘
 : \

98 
NULL
, (
Êags
))

	)

99 
	#ˇŒout_öô_rw
(
c
, 
rw
, 
Êags
) \

100 
	`_ˇŒout_öô_lock
((
c
), ((
rw
Ë!
NULL
Ë? &‘w)->
lock_obje˘
 : \

101 
NULL
, (
Êags
))

	)

102 
	#ˇŒout_≥ndög
(
c
Ë((c)->
c_iÊags
 & 
CALLOUT_PENDING
)

	)

103 
ˇŒout_ª£t_sbt_⁄
(
ˇŒout
 *, 
sbötime_t
, sbintime_t,

105 
	#ˇŒout_ª£t_sbt
(
c
, 
sbt
, 
¥
, 
‚
, 
¨g
, 
Êags
) \

106 
	`ˇŒout_ª£t_sbt_⁄
((
c
), (
sbt
), (
¥
), (
‚
), (
¨g
), -1, (
Êags
))

	)

107 
	#ˇŒout_ª£t_sbt_cur˝u
(
c
, 
sbt
, 
¥
, 
‚
, 
¨g
, 
Êags
) \

108 
	`ˇŒout_ª£t_sbt_⁄
((
c
), (
sbt
), (
¥
), (
‚
), (
¨g
), 
	`PCPU_GET
(
˝uid
),\

109 (
Êags
))

	)

110 
	#ˇŒout_ª£t_⁄
(
c
, 
to_ticks
, 
‚
, 
¨g
, 
˝u
) \

111 
	`ˇŒout_ª£t_sbt_⁄
((
c
), 
tick_sbt
 * (
to_ticks
), 0, (
‚
), (
¨g
), \

112 (
˝u
), 
C_HARDCLOCK
)

	)

113 
	#ˇŒout_ª£t
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

114 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), -1)

	)

115 
	#ˇŒout_ª£t_cur˝u
(
c
, 
⁄_tick
, 
‚
, 
¨g
) \

116 
	`ˇŒout_ª£t_⁄
((
c
), (
⁄_tick
), (
‚
), (
¨g
), 
	`PCPU_GET
(
˝uid
))

	)

117 
	#ˇŒout_scheduÀ_sbt_⁄
(
c
, 
sbt
, 
¥
, 
˝u
, 
Êags
) \

118 
	`ˇŒout_ª£t_sbt_⁄
((
c
), (
sbt
), (
¥
), (c)->
c_func
, (c)->
c_¨g
, \

119 (
˝u
), (
Êags
))

	)

120 
	#ˇŒout_scheduÀ_sbt
(
c
, 
sbt
, 
¥
, 
Êags
) \

121 
	`ˇŒout_scheduÀ_sbt_⁄
((
c
), (
sbt
), (
¥
), -1, (
Êags
))

	)

122 
	#ˇŒout_scheduÀ_sbt_cur˝u
(
c
, 
sbt
, 
¥
, 
Êags
) \

123 
	`ˇŒout_scheduÀ_sbt_⁄
((
c
), (
sbt
), (
¥
), 
	`PCPU_GET
(
˝uid
), (
Êags
))

	)

124 
	`ˇŒout_scheduÀ
(
ˇŒout
 *, );

125 
	`ˇŒout_scheduÀ_⁄
(
ˇŒout
 *, , );

126 
	#ˇŒout_scheduÀ_cur˝u
(
c
, 
⁄_tick
) \

127 
	`ˇŒout_scheduÀ_⁄
((
c
), (
⁄_tick
), 
	`PCPU_GET
(
˝uid
))

	)

128 
	#ˇŒout_°›
(
c
Ë
	`_ˇŒout_°›_ß„
(c, 0)

	)

129 
	`_ˇŒout_°›_ß„
(
ˇŒout
 *, );

130 
	`ˇŒout_¥o˚ss
(
sbötime_t
 
now
);

	@/usr/include/sys/caprights.h

32 #i‚de‡
_SYS_CAPRIGHTS_H_


33 
	#_SYS_CAPRIGHTS_H_


	)

44 
	#CAP_RIGHTS_VERSION_00
 0

	)

50 
	#CAP_RIGHTS_VERSION
 
CAP_RIGHTS_VERSION_00


	)

52 
	sˇp_rights
 {

53 
uöt64_t
 
	m¸_rights
[
CAP_RIGHTS_VERSION
 + 2];

56 #i‚def 
_CAP_RIGHTS_T_DECLARED


57 
	#_CAP_RIGHTS_T_DECLARED


	)

58 
ˇp_rights
 
	tˇp_rights_t
;

	@/usr/include/sys/conf.h

40 #i‚de‡
_SYS_CONF_H_


41 
	#_SYS_CONF_H_


	)

43 #ifde‡
_KERNEL


44 
	~<sys/evíth™dÀr.h
>

46 
	~<sys/queue.h
>

49 
	g¢≠d©a
;

50 
	gdevfs_dúít
;

51 
	gcdevsw
;

52 
	gfûe
;

54 
	scdev
 {

55 *
	msi_•¨e0
;

56 
u_öt
 
	msi_Êags
;

57 
	#SI_ETERNAL
 0x0001

	)

58 
	#SI_ALIAS
 0x0002

	)

59 
	#SI_NAMED
 0x0004

	)

60 
	#SI_CHEAPCLONE
 0x0008

	)

61 
	#SI_CHILD
 0x0010

	)

62 
	#SI_DUMPDEV
 0x0080

	)

63 
	#SI_CLONELIST
 0x0200

	)

64 
	#SI_UNMAPPED
 0x0400

	)

65 
	#SI_NOSPLIT
 0x0800

	)

66 
time•ec
 
	msi_©ime
;

67 
time•ec
 
	msi_˘ime
;

68 
time•ec
 
	msi_mtime
;

69 
uid_t
 
	msi_uid
;

70 
gid_t
 
	msi_gid
;

71 
mode_t
 
	msi_mode
;

72 
u¸ed
 *
	msi_¸ed
;

73 
	msi_drv0
;

74 
	msi_ªfcou¡
;

75 
LIST_ENTRY
(
cdev
Ë
	msi_li°
;

76 
LIST_ENTRY
(
cdev
Ë
	msi_˛⁄e
;

77 
LIST_HEAD
(, 
cdev
Ë
	msi_chûdªn
;

78 
LIST_ENTRY
(
cdev
Ë
	msi_siblögs
;

79 
cdev
 *
	msi_∑ª¡
;

80 
mou¡
 *
	msi_mou¡±
;

81 *
	msi_drv1
, *
	msi_drv2
;

82 
cdevsw
 *
	msi_devsw
;

83 
	msi_iosize_max
;

84 
u_l⁄g
 
	msi_u£cou¡
;

85 
u_l⁄g
 
	msi_thªadcou¡
;

87 
¢≠d©a
 *
	m__sid_¢≠d©a
;

88 } 
	m__si_u
;

89 
	msi_«me
[
SPECNAMELEN
 + 1];

92 
	#si_¢≠d©a
 
__si_u
.
__sid_¢≠d©a


	)

94 #ifde‡
_KERNEL


100 
	gbio
;

101 
	gbuf
;

102 
	gthªad
;

103 
	guio
;

104 
	gknŸe
;

105 
	g˛⁄edevs
;

106 
	gvm_obje˘
;

107 
	gvnode
;

125 
thªad
 
	td_thªad_t
;

127 
	td_›í_t
(
	tcdev
 *
	tdev
, 
	toÊags
, 
	tdevty≥
, 
	tthªad
 *
	ttd
);

128 
	td_fd›í_t
(
	tcdev
 *
	tdev
, 
	toÊags
, 
	tthªad
 *
	ttd
, 
	tfûe
 *
	tÂ
);

129 
	td_˛o£_t
(
	tcdev
 *
	tdev
, 
	tfÊag
, 
	tdevty≥
, 
	tthªad
 *
	ttd
);

130 
	td_°øãgy_t
(
	tbio
 *
	tbp
);

131 
	td_io˘l_t
(
	tcdev
 *
	tdev
, 
	tu_l⁄g
 
	tcmd
, 
	tˇddr_t
 
	td©a
,

132 
	tfÊag
, 
	tthªad
 *
	ttd
);

134 
	td_ªad_t
(
	tcdev
 *
	tdev
, 
	tuio
 *uio, 
	tioÊag
);

135 
	td_wrôe_t
(
	tcdev
 *
	tdev
, 
	tuio
 *uio, 
	tioÊag
);

136 
	td_pﬁl_t
(
	tcdev
 *
	tdev
, 
	tevíts
, 
	tthªad
 *
	ttd
);

137 
	td_kqfûãr_t
(
	tcdev
 *
	tdev
, 
	tknŸe
 *
	tkn
);

138 
	td_mm≠_t
(
	tcdev
 *
	tdev
, 
	tvm_ooff£t_t
 
	toff£t
, 
	tvm_∑ddr_t
 *
	t∑ddr
,

139 
	t≈rŸ
, 
	tvm_mem©å_t
 *
	tmem©å
);

140 
	td_mm≠_sögÀ_t
(
	tcdev
 *cdev, 
	tvm_ooff£t_t
 *
	toff£t
,

141 
	tvm_size_t
 
	tsize
, 
	tvm_obje˘
 **
	tobje˘
, 
	t≈rŸ
);

142 
	td_purge_t
(
	tcdev
 *
	tdev
);

144 
	tdum≥r_t
(

145 *
	t_¥iv
,

146 *
	t_vútuÆ
,

147 
	tvm_off£t_t
 
	t_physiˇl
,

148 
	toff_t
 
	t_off£t
,

149 
	tsize_t
 
	t_Àngth
);

156 
	#D_TAPE
 0x0001

	)

157 
	#D_DISK
 0x0002

	)

158 
	#D_TTY
 0x0004

	)

159 
	#D_MEM
 0x0008

	)

161 #ifde‡
_KERNEL


163 
	#D_TYPEMASK
 0xffff

	)

168 
	#D_TRACKCLOSE
 0x00080000

	)

169 
	#D_MMAP_ANON
 0x00100000

	)

170 
	#D_NEEDGIANT
 0x00400000

	)

171 
	#D_NEEDMINOR
 0x00800000

	)

176 
	#D_VERSION_00
 0x20011966

	)

177 
	#D_VERSION_01
 0x17032005

	)

178 
	#D_VERSION_02
 0x28042009

	)

179 
	#D_VERSION_03
 0x17122009

	)

180 
	#D_VERSION
 
D_VERSION_03


	)

185 
	#D_INIT
 0x80000000

	)

190 
	scdevsw
 {

191 
	md_vîsi⁄
;

192 
u_öt
 
	md_Êags
;

193 c⁄° *
	md_«me
;

194 
d_›í_t
 *
	md_›í
;

195 
d_fd›í_t
 *
	md_fd›í
;

196 
d_˛o£_t
 *
	md_˛o£
;

197 
d_ªad_t
 *
	md_ªad
;

198 
d_wrôe_t
 *
	md_wrôe
;

199 
d_io˘l_t
 *
	md_io˘l
;

200 
d_pﬁl_t
 *
	md_pﬁl
;

201 
d_mm≠_t
 *
	md_mm≠
;

202 
d_°øãgy_t
 *
	md_°øãgy
;

203 
dum≥r_t
 *
	md_dump
;

204 
d_kqfûãr_t
 *
	md_kqfûãr
;

205 
d_purge_t
 *
	md_purge
;

206 
d_mm≠_sögÀ_t
 *
	md_mm≠_sögÀ
;

208 
öt32_t
 
	md_•¨e0
[3];

209 *
	md_•¨e1
[3];

212 
LIST_HEAD
(, 
cdev
Ë
	md_devs
;

213 
	md_•¨e2
;

215 
cdevsw
 *
	mgü¡åick
;

216 
SLIST_ENTRY
(
cdevsw
Ë
	mpo°‰ì_li°
;

217 } 
	m__d_gü¡
;

219 
	#d_gü¡åick
 
__d_gü¡
.
gü¡åick


	)

220 
	#d_po°‰ì_li°
 
__d_gü¡
.
po°‰ì_li°


	)

222 
	gmoduÀ
;

224 
	sdevsw_moduÀ_d©a
 {

225 (*
	mchaöevh
)(
	mmoduÀ
 *, , *);

226 *
	mchaö¨g
;

230 
	#DEV_MODULE_ORDERED
(
«me
, 
evh
, 
¨g
, 
‹d
) \

231 
moduÀd©a_t
 
«me
##
_mod
 = { \

233 
evh
, \

234 
¨g
 \

236 
	`DECLARE_MODULE
(
«me
,Çame##
_mod
, 
SI_SUB_DRIVERS
, 
‹d
)

	)

238 
	#DEV_MODULE
(
«me
, 
evh
, 
¨g
) \

239 
	`DEV_MODULE_ORDERED
(
«me
, 
evh
, 
¨g
, 
SI_ORDER_MIDDLE
)

	)

241 
˛⁄e_£tup
(
˛⁄edevs
 **
cdp
);

242 
˛⁄e_˛ónup
(
˛⁄edevs
 **);

243 
	#CLONE_UNITMASK
 0xfffff

	)

244 
	#CLONE_FLAG0
 (
CLONE_UNITMASK
 + 1)

	)

245 
˛⁄e_¸óã
(
˛⁄edevs
 **, 
cdevsw
 *, *
unô
, 
cdev
 **
dev
, 
exåa
);

247 
	#MAKEDEV_REF
 0x01

	)

248 
	#MAKEDEV_WHTOUT
 0x02

	)

249 
	#MAKEDEV_NOWAIT
 0x04

	)

250 
	#MAKEDEV_WAITOK
 0x08

	)

251 
	#MAKEDEV_ETERNAL
 0x10

	)

252 
	#MAKEDEV_CHECKNAME
 0x20

	)

253 
	smake_dev_¨gs
 {

254 
size_t
 
	mmda_size
;

255 
	mmda_Êags
;

256 
cdevsw
 *
	mmda_devsw
;

257 
u¸ed
 *
	mmda_¸
;

258 
uid_t
 
	mmda_uid
;

259 
gid_t
 
	mmda_gid
;

260 
	mmda_mode
;

261 
	mmda_unô
;

262 *
	mmda_si_drv1
;

263 *
	mmda_si_drv2
;

265 
make_dev_¨gs_öô_im∂
(
make_dev_¨gs
 *
_¨gs
, 
size_t
 
_sz
);

266 
	#make_dev_¨gs_öô
(
a
) \

267 
	`make_dev_¨gs_öô_im∂
((
a
), (
make_dev_¨gs
))

	)

269 
cou¡_dev
(
cdev
 *
_dev
);

270 
dñi°_dev
(
cdev
 *
_dev
);

271 
de°roy_dev
(
cdev
 *
_dev
);

272 
de°roy_dev_sched
(
cdev
 *
dev
);

273 
de°roy_dev_sched_cb
(
cdev
 *
dev
, (*
cb
)(*), *
¨g
);

274 
	`de°roy_dev_døö
(
cdevsw
 *
csw
);

275 
	`døö_dev_˛⁄e_evíts
();

276 
cdevsw
 *
	`dev_ª·hªad
(
cdev
 *
_dev
, *
_ªf
);

277 
cdevsw
 *
	`devvn_ª·hªad
(
vnode
 *
vp
, 
cdev
 **
devp
, *
_ªf
);

278 
	`dev_ª…hªad
(
cdev
 *
_dev
, 
_ªf
);

279 
	`dev_dïíds
(
cdev
 *
_pdev
, cdev *
_cdev
);

280 
	`dev_ªf
(
cdev
 *
dev
);

281 
	`dev_ªÊ
(
cdev
 *
dev
);

282 
	`dev_ªl
(
cdev
 *
dev
);

283 
	`dev_°øãgy
(
cdev
 *
dev
, 
buf
 *
bp
);

284 
	`dev_°øãgy_csw
(
cdev
 *
dev
, 
cdevsw
 *
csw
, 
buf
 *
bp
);

285 
cdev
 *
	$make_dev
(
cdevsw
 *
_devsw
, 
_unô
, 
uid_t
 
_uid
, 
gid_t
 
_gid
,

286 
_≥rms
, c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(6, 7);

287 
cdev
 *
	$make_dev_¸ed
(
cdevsw
 *
_devsw
, 
_unô
,

288 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_≥rms
,

289 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(7, 8);

290 
cdev
 *
	$make_dev_¸edf
(
_Êags
,

291 
cdevsw
 *
_devsw
, 
_unô
,

292 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_mode
,

293 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(8, 9);

294 
	$make_dev_p
(
_Êags
, 
cdev
 **
_cdev
, 
cdevsw
 *
_devsw
,

295 
u¸ed
 *
_¸
, 
uid_t
 
_uid
, 
gid_t
 
_gid
, 
_mode
,

296 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(8, 9);

297 
	$make_dev_s
(
make_dev_¨gs
 *
_¨gs
, 
cdev
 **
_cdev
,

298 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(3, 4);

299 
cdev
 *
	$make_dev_Æüs
(
cdev
 *
_pdev
, c⁄° *
_fmt
, ...)

300 
	`__¥ötÊike
(2, 3);

301 
	$make_dev_Æüs_p
(
_Êags
, 
cdev
 **
_cdev
, cdev *
_pdev
,

302 c⁄° *
_fmt
, ...Ë
	`__¥ötÊike
(4, 5);

303 
	`make_dev_phy•©h_Æüs
(
_Êags
, 
cdev
 **
_cdev
,

304 
cdev
 *
_pdev
, cdev *
_ﬁd_Æüs
,

305 c⁄° *
_phy•©h
);

306 
	`dev_lock
();

307 
	`dev_u∆ock
();

308 
	`£tc⁄f
();

310 #ifde‡
KLD_MODULE


311 
	#MAKEDEV_ETERNAL_KLD
 0

	)

313 
	#MAKEDEV_ETERNAL_KLD
 
MAKEDEV_ETERNAL


	)

316 
	#dev2unô
(
d
Ë((d)->
si_drv0
)

	)

318 
	td_¥iv_dt‹_t
(*
	td©a
);

319 
	`devfs_gë_cdev¥iv
(**
d©≠
);

320 
	`devfs_£t_cdev¥iv
(*
¥iv
, 
d_¥iv_dt‹_t
 *
då
);

321 
	`devfs_˛ór_cdev¥iv
();

322 
	`devfs_Âdr›
(
fûe
 *
Â
);

324 
öo_t
 
	`devfs_Æloc_cdp_öode
();

325 
	`devfs_‰ì_cdp_öode
(
öo_t
 
öo
);

327 
	#UID_ROOT
 0

	)

328 
	#UID_BIN
 3

	)

329 
	#UID_UUCP
 66

	)

330 
	#UID_NOBODY
 65534

	)

332 
	#GID_WHEEL
 0

	)

333 
	#GID_KMEM
 2

	)

334 
	#GID_TTY
 4

	)

335 
	#GID_OPERATOR
 5

	)

336 
	#GID_BIN
 7

	)

337 
	#GID_GAMES
 13

	)

338 
	#GID_DIALER
 68

	)

339 
	#GID_NOBODY
 65534

	)

341 (*
	tdev_˛⁄e_‚
)(*
	t¨g
, 
	tu¸ed
 *
	t¸ed
, *
	t«me
,

342 
	t«mñí
, 
	tcdev
 **
	tªsu…
);

344 
	`dev_°d˛⁄e
(*
_«me
, **
_«mï
, c⁄° *
_°em
, *
_unô
);

345 
	`EVENTHANDLER_DECLARE
(
dev_˛⁄e
, 
dev_˛⁄e_‚
);

349 
	sdum≥röfo
 {

350 
dum≥r_t
 *
dum≥r
;

351 *
¥iv
;

352 
u_öt
 
blocksize
;

353 
u_öt
 
maxiosize
;

354 
off_t
 
medüoff£t
;

355 
off_t
 
medüsize
;

358 
	`£t_dum≥r
(
dum≥röfo
 *, c⁄° *
_dev«me
, 
thªad
 *
td
);

359 
	`dump_wrôe
(
dum≥röfo
 *, *, 
vm_off£t_t
, 
off_t
, 
size_t
);

360 
	`dumpsys
(
dum≥röfo
 *);

361 
	`dﬂdump
(
boﬁón_t
);

362 
dumpög
;

	@/usr/include/sys/event.h

29 #i‚de‡
_SYS_EVENT_H_


30 
	#_SYS_EVENT_H_


	)

32 
	~<sys/queue.h
>

34 
	#EVFILT_READ
 (-1)

	)

35 
	#EVFILT_WRITE
 (-2)

	)

36 
	#EVFILT_AIO
 (-3Ë

	)

37 
	#EVFILT_VNODE
 (-4Ë

	)

38 
	#EVFILT_PROC
 (-5Ë

	)

39 
	#EVFILT_SIGNAL
 (-6Ë

	)

40 
	#EVFILT_TIMER
 (-7Ë

	)

42 
	#EVFILT_FS
 (-9Ë

	)

43 
	#EVFILT_LIO
 (-10Ë

	)

44 
	#EVFILT_USER
 (-11Ë

	)

45 
	#EVFILT_SYSCOUNT
 11

	)

47 
	#EV_SET
(
kevp_
, 
a
, 
b
, 
c
, 
d
, 
e
, 
f
) do { \

48 
kevít
 *
kevp
 = (
kevp_
); \

49 (
kevp
)->
idít
 = (
a
); \

50 (
kevp
)->
fûãr
 = (
b
); \

51 (
kevp
)->
Êags
 = (
c
); \

52 (
kevp
)->
fÊags
 = (
d
); \

53 (
kevp
)->
d©a
 = (
e
); \

54 (
kevp
)->
ud©a
 = (
f
); \

55 } 0)

	)

57 
	skevít
 {

58 
uöçå_t
 
	midít
;

59 
	mfûãr
;

60 
u_sh‹t
 
	mÊags
;

61 
u_öt
 
	mfÊags
;

62 
öçå_t
 
	md©a
;

63 *
	mud©a
;

67 
	#EV_ADD
 0x0001

	)

68 
	#EV_DELETE
 0x0002

	)

69 
	#EV_ENABLE
 0x0004

	)

70 
	#EV_DISABLE
 0x0008

	)

73 
	#EV_ONESHOT
 0x0010

	)

74 
	#EV_CLEAR
 0x0020

	)

75 
	#EV_RECEIPT
 0x0040

	)

76 
	#EV_DISPATCH
 0x0080

	)

78 
	#EV_SYSFLAGS
 0xF000

	)

79 
	#EV_DROP
 0x1000

	)

80 
	#EV_FLAG1
 0x2000

	)

81 
	#EV_FLAG2
 0x4000

	)

84 
	#EV_EOF
 0x8000

	)

85 
	#EV_ERROR
 0x4000

	)

96 
	#NOTE_FFNOP
 0x00000000

	)

97 
	#NOTE_FFAND
 0x40000000

	)

98 
	#NOTE_FFOR
 0x80000000

	)

99 
	#NOTE_FFCOPY
 0xc0000000

	)

100 
	#NOTE_FFCTRLMASK
 0xc0000000

	)

101 
	#NOTE_FFLAGSMASK
 0x00ffffff

	)

103 
	#NOTE_TRIGGER
 0x01000000

	)

109 
	#NOTE_LOWAT
 0x0001

	)

114 
	#NOTE_DELETE
 0x0001

	)

115 
	#NOTE_WRITE
 0x0002

	)

116 
	#NOTE_EXTEND
 0x0004

	)

117 
	#NOTE_ATTRIB
 0x0008

	)

118 
	#NOTE_LINK
 0x0010

	)

119 
	#NOTE_RENAME
 0x0020

	)

120 
	#NOTE_REVOKE
 0x0040

	)

121 
	#NOTE_OPEN
 0x0080

	)

122 
	#NOTE_CLOSE
 0x0100

	)

124 
	#NOTE_CLOSE_WRITE
 0x0200

	)

126 
	#NOTE_READ
 0x0400

	)

131 
	#NOTE_EXIT
 0x80000000

	)

132 
	#NOTE_FORK
 0x40000000

	)

133 
	#NOTE_EXEC
 0x20000000

	)

134 
	#NOTE_PCTRLMASK
 0xf0000000

	)

135 
	#NOTE_PDATAMASK
 0x000ffff‡

	)

138 
	#NOTE_TRACK
 0x00000001

	)

139 
	#NOTE_TRACKERR
 0x00000002

	)

140 
	#NOTE_CHILD
 0x00000004

	)

143 
	#NOTE_SECONDS
 0x00000001

	)

144 
	#NOTE_MSECONDS
 0x00000002

	)

145 
	#NOTE_USECONDS
 0x00000004

	)

146 
	#NOTE_NSECONDS
 0x00000008

	)

148 
	gknŸe
;

149 
SLIST_HEAD
(
kli°
, 
knŸe
);

150 
	gkqueue
;

151 
TAILQ_HEAD
(
kqli°
, 
kqueue
);

152 
	sk∆i°
 {

153 
kli°
 
	mkl_li°
;

154 (*
	mkl_lock
)(*);

155 (*
	mkl_u∆ock
)(*);

156 (*
	mkl_as£π_locked
)(*);

157 (*
	mkl_as£π_u∆ocked
)(*);

158 *
	mkl_lock¨g
;

162 #ifde‡
_KERNEL


167 
	#KNF_LISTLOCKED
 0x0001

	)

168 
	#KNF_NOKQLOCK
 0x0002

	)

170 
	#KNOTE
(
li°
, 
hi°
, 
Êags
Ë
	`knŸe
÷i°, hi°, fœgs)

	)

171 
	#KNOTE_LOCKED
(
li°
, 
höt
Ë
	`knŸe
÷i°, höt, 
KNF_LISTLOCKED
)

	)

172 
	#KNOTE_UNLOCKED
(
li°
, 
höt
Ë
	`knŸe
÷i°, höt, 0)

	)

174 
	#KNLIST_EMPTY
(
li°
Ë
	`SLIST_EMPTY
(&÷i°)->
kl_li°
)

	)

180 
	#NOTE_SIGNAL
 0x08000000

	)

189 
	#EVENT_REGISTER
 1

	)

190 
	#EVENT_PROCESS
 2

	)

192 
	sfûãr›s
 {

193 
	mf_isfd
;

194 (*
	mf_©èch
)(
knŸe
 *
	mkn
);

195 (*
	mf_dëach
)(
knŸe
 *
	mkn
);

196 (*
	mf_evít
)(
knŸe
 *
	mkn
, 
	mhöt
);

197 (*
	mf_touch
)(
knŸe
 *
	mkn
, 
kevít
 *
	mkev
, 
u_l⁄g
 
	mty≥
);

206 
	sknŸe
 {

207 
SLIST_ENTRY
(
knŸe
Ë
	mkn_lök
;

208 
SLIST_ENTRY
(
knŸe
Ë
	mkn_£ ext
;

209 
k∆i°
 *
	mkn_k∆i°
;

210 
TAILQ_ENTRY
(
knŸe
Ë
	mkn_tqe
;

211 
kqueue
 *
	mkn_kq
;

212 
kevít
 
	mkn_kevít
;

213 
	mkn_°©us
;

214 
	#KN_ACTIVE
 0x01

	)

215 
	#KN_QUEUED
 0x02

	)

216 
	#KN_DISABLED
 0x04

	)

217 
	#KN_DETACHED
 0x08

	)

218 
	#KN_INFLUX
 0x10

	)

219 
	#KN_MARKER
 0x20

	)

220 
	#KN_KQUEUE
 0x40

	)

221 
	#KN_HASKQLOCK
 0x80

	)

222 
	#KN_SCAN
 0x100

	)

223 
	mkn_sfÊags
;

224 
öçå_t
 
	mkn_sd©a
;

226 
fûe
 *
	mp_Â
;

227 
¥oc
 *
	mp_¥oc
;

228 
aiocbli°
 *
	mp_aio
;

229 
aiﬁiojob
 *
	mp_lio
;

230 
sbötime_t
 *
	mp_√xâime
;

231 } 
	mkn_±r
;

232 
fûãr›s
 *
	mkn_f›
;

233 *
	mkn_hook
;

234 
	mkn_hookid
;

236 
	#kn_id
 
kn_kevít
.
idít


	)

237 
	#kn_fûãr
 
kn_kevít
.
fûãr


	)

238 
	#kn_Êags
 
kn_kevít
.
Êags


	)

239 
	#kn_fÊags
 
kn_kevít
.
fÊags


	)

240 
	#kn_d©a
 
kn_kevít
.
d©a


	)

241 
	#kn_Â
 
kn_±r
.
p_Â


	)

243 
	skevít_c›y›s
 {

244 *
	m¨g
;

245 (*
	mk_c›yout
)(*
	m¨g
, 
kevít
 *
	mkevp
, 
	mcou¡
);

246 (*
	mk_c›yö
)(*
	m¨g
, 
kevít
 *
	mkevp
, 
	mcou¡
);

249 
	gthªad
;

250 
	g¥oc
;

251 
	gk∆i°
;

252 
	gmtx
;

253 
	grwlock
;

255 
knŸe
(
k∆i°
 *
li°
, 
höt
, 
lockÊags
);

256 
knŸe_f‹k
(
k∆i°
 *
li°
, 
pid
);

257 
k∆i°_add
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
, 
i¶ocked
);

258 
k∆i°_ªmove
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
, 
i¶ocked
);

259 
k∆i°_ªmove_öevít
(
k∆i°
 *
k∆
, 
knŸe
 *
kn
);

260 
k∆i°_em±y
(
k∆i°
 *
k∆
);

261 
k∆i°_öô
(
k∆i°
 *
k∆
, *
lock
,

262 (*
kl_lock
)(*), (*
kl_u∆ock
)(*),

263 (*
kl_as£π_locked
)(*), (*
kl_as£π_u∆ocked
)(*));

264 
	`k∆i°_öô_mtx
(
k∆i°
 *
k∆
, 
mtx
 *
lock
);

265 
	`k∆i°_öô_rw_ªadî
(
k∆i°
 *
k∆
, 
rwlock
 *
lock
);

266 
	`k∆i°_de°roy
(
k∆i°
 *
k∆
);

267 
	`k∆i°_˛órdñ
(
k∆i°
 *
k∆
, 
thªad
 *
td
,

268 
i¶ocked
, 
kûlkn
);

269 
	#k∆i°_˛ór
(
k∆
, 
i¶ocked
) \

270 
	`k∆i°_˛órdñ
((
k∆
), 
NULL
, (
i¶ocked
), 0)

	)

271 
	#k∆i°_dñëe
(
k∆
, 
td
, 
i¶ocked
) \

272 
	`k∆i°_˛órdñ
((
k∆
), (
td
), (
i¶ocked
), 1)

	)

273 
	`knŸe_fd˛o£
(
thªad
 *
p
, 
fd
);

274 
	`kqfd_ªgi°î
(
fd
, 
kevít
 *
kev
, 
thªad
 *
p
,

275 
waôok
);

276 
	`kqueue_add_fûãr›ts
(
fût
, 
fûãr›s
 *
fût›s
);

277 
	`kqueue_dñ_fûãr›ts
(
fût
);

281 
	~<sys/cdefs.h
>

282 
time•ec
;

284 
__BEGIN_DECLS


285 
	`kqueue
();

286 
	`kevít
(
kq
, c⁄° 
kevít
 *
ch™gñi°
, 
nch™ges
,

287 
kevít
 *
evíéi°
, 
√víts
,

288 c⁄° 
time•ec
 *
timeout
);

289 
__END_DECLS


	@/usr/include/sys/eventhandler.h

29 #i‚de‡
SYS_EVENTHANDLER_H


30 
	#SYS_EVENTHANDLER_H


	)

32 
	~<sys/lock.h
>

33 
	~<sys/kå.h
>

34 
	~<sys/muãx.h
>

35 
	~<sys/queue.h
>

37 
	sevíth™dÀr_íåy
 {

38 
TAILQ_ENTRY
(
evíth™dÀr_íåy
Ë
	mì_lök
;

39 
	mì_¥i‹ôy
;

40 
	#EHE_DEAD_PRIORITY
 (-1)

	)

41 *
	mì_¨g
;

44 #ifde‡
VIMAGE


45 
	sevíth™dÀr_íåy_vimage
 {

46 (* 
	mfunc
)();

47 *
	mì_¨g
;

48 *
	m•¨ï
[2];

52 
	sevíth™dÀr_li°
 {

53 *
	mñ_«me
;

54 
	mñ_Êags
;

55 
	#EHL_INITTED
 (1<<0)

	)

56 
u_öt
 
	mñ_runcou¡
;

57 
mtx
 
	mñ_lock
;

58 
TAILQ_ENTRY
(
evíth™dÀr_li°
Ë
	mñ_lök
;

59 
TAILQ_HEAD
(,
evíth™dÀr_íåy
Ë
	mñ_íåõs
;

62 
evíth™dÀr_íåy
 *
	tevíth™dÀr_èg
;

64 
	#EHL_LOCK
(
p
Ë
	`mtx_lock
(&’)->
ñ_lock
)

	)

65 
	#EHL_UNLOCK
(
p
Ë
	`mtx_u∆ock
(&’)->
ñ_lock
)

	)

66 
	#EHL_LOCK_ASSERT
(
p
, 
x
Ë
	`mtx_as£π
(&’)->
ñ_lock
, x)

	)

71 
	#_EVENTHANDLER_INVOKE
(
«me
, 
li°
, ...) do { \

72 
evíth™dÀr_íåy
 *
_ï
; \

73 
evíth™dÀr_íåy_
 ## 
«me
 *
_t
; \

75 
	`KASSERT
((
li°
)->
ñ_Êags
 & 
EHL_INITTED
, \

77 
	`EHL_LOCK_ASSERT
((
li°
), 
MA_OWNED
); \

78 (
li°
)->
ñ_runcou¡
++; \

79 
	`KASSERT
((
li°
)->
ñ_runcou¡
 > 0, \

81 
	`CTR0
(
KTR_EVH
, "evíth™dÀr_övoke(\"" 
	`__STRING
(
«me
) "\")"); \

82 
	`TAILQ_FOREACH
(
_ï
, &((
li°
)->
ñ_íåõs
), 
ì_lök
) { \

83 i‡(
_ï
->
ì_¥i‹ôy
 !
EHE_DEAD_PRIORITY
) { \

84 
	`EHL_UNLOCK
((
li°
)); \

85 
_t
 = (
evíth™dÀr_íåy_
 ## 
«me
 *)
_ï
; \

86 
	`CTR1
(
KTR_EVH
, "eventhandler_invoke:Éxecuting %p", \

87 (*)
_t
->
eh_func
); \

88 
_t
->
	`eh_func
(
_ï
->
ì_¨g
 , ## 
__VA_ARGS__
); \

89 
	`EHL_LOCK
((
li°
)); \

92 
	`KASSERT
((
li°
)->
ñ_runcou¡
 > 0, \

94 (
li°
)->
ñ_runcou¡
--; \

95 i‡((
li°
)->
ñ_runcou¡
 == 0) \

96 
	`evíth™dÀr_¥u√_li°
(
li°
); \

97 
	`EHL_UNLOCK
((
li°
)); \

98 } 0)

	)

107 
	#EVENTHANDLER_DECLARE
(
«me
, 
ty≥
) \

108 
evíth™dÀr_íåy_
 ## 
«me
 \

110 
evíth™dÀr_íåy
 
ì
; \

111 
ty≥
 
eh_func
; \

113 
__hack


	)

115 
	#EVENTHANDLER_DEFINE
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

116 
evíth™dÀr_èg
 
«me
 ## 
_èg
; \

117 
«me
 ## 
	`_evh_öô
(*
˘x
) \

119 
«me
 ## 
_èg
 = 
	`EVENTHANDLER_REGISTER
“ame, 
func
, 
˘x
, \

120 
¥i‹ôy
); \

122 
	`SYSINIT
(
«me
 ## 
_evh_öô
, 
SI_SUB_CONFIGURE
, 
SI_ORDER_ANY
, \

123 
«me
 ## 
_evh_öô
, 
¨g
); \

124 
__hack


	)

126 
	#EVENTHANDLER_INVOKE
(
«me
, ...) \

128 
evíth™dÀr_li°
 *
_ñ
; \

130 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

131 
	`_EVENTHANDLER_INVOKE
(
«me
, 
_ñ
 , ## 
__VA_ARGS__
); \

132 } 0)

	)

134 
	#EVENTHANDLER_REGISTER
(
«me
, 
func
, 
¨g
, 
¥i‹ôy
) \

135 
	`evíth™dÀr_ªgi°î
(
NULL
, #«me, 
func
, 
¨g
, 
¥i‹ôy
)

	)

137 
	#EVENTHANDLER_DEREGISTER
(
«me
, 
èg
) \

139 
evíth™dÀr_li°
 *
_ñ
; \

141 i‡((
_ñ
 = 
	`evíth™dÀr_föd_li°
(#«me)Ë!
NULL
) \

142 
	`evíth™dÀr_dîegi°î
(
_ñ
, 
èg
); \

143 } 0)

	)

146 
evíth™dÀr_èg
 
evíth™dÀr_ªgi°î
(
evíth™dÀr_li°
 *
li°
,

147 c⁄° *
«me
, *
func
, *
¨g
, 
¥i‹ôy
);

148 
evíth™dÀr_dîegi°î
(
evíth™dÀr_li°
 *
li°
,

149 
evíth™dÀr_èg
 
èg
);

150 
evíth™dÀr_li°
 *
evíth™dÀr_föd_li°
(c⁄° *
«me
);

151 
evíth™dÀr_¥u√_li°
(
evíth™dÀr_li°
 *
li°
);

153 #ifde‡
VIMAGE


154 (*
	tvimage_ôî©‹_func_t
)(*, ...);

156 
evíth™dÀr_èg
 
	`vimage_evíth™dÀr_ªgi°î
(
evíth™dÀr_li°
 *
li°
,

157 c⁄° *
«me
, *
func
, *
¨g
, 
¥i‹ôy
,

158 
vimage_ôî©‹_func_t
);

166 
	#EVENTHANDLER_PRI_FIRST
 0

	)

167 
	#EVENTHANDLER_PRI_ANY
 10000

	)

168 
	#EVENTHANDLER_PRI_LAST
 20000

	)

171 (*
	tshutdown_‚
)(*, );

173 
	#SHUTDOWN_PRI_FIRST
 
EVENTHANDLER_PRI_FIRST


	)

174 
	#SHUTDOWN_PRI_DEFAULT
 
EVENTHANDLER_PRI_ANY


	)

175 
	#SHUTDOWN_PRI_LAST
 
EVENTHANDLER_PRI_LAST


	)

177 
	`EVENTHANDLER_DECLARE
(
shutdown_¥e_sync
, 
shutdown_‚
);

178 
	`EVENTHANDLER_DECLARE
(
shutdown_po°_sync
, 
shutdown_‚
);

179 
	`EVENTHANDLER_DECLARE
(
shutdown_föÆ
, 
shutdown_‚
);

182 (*
	tpowî_ch™ge_‚
)(*);

183 
	`EVENTHANDLER_DECLARE
(
powî_ªsume
, 
powî_ch™ge_‚
);

184 
	`EVENTHANDLER_DECLARE
(
powî_su•íd
, 
powî_ch™ge_‚
);

185 
	`EVENTHANDLER_DECLARE
(
powî_su•íd_óæy
, 
powî_ch™ge_‚
);

188 (*
	tvm_lowmem_h™dÀr_t
)(*, );

189 
	#LOWMEM_PRI_DEFAULT
 
EVENTHANDLER_PRI_FIRST


	)

190 
	`EVENTHANDLER_DECLARE
(
vm_lowmem
, 
vm_lowmem_h™dÀr_t
);

193 (*
	tmou¡roŸ_h™dÀr_t
)(*);

194 
	`EVENTHANDLER_DECLARE
(
mou¡roŸ
, 
mou¡roŸ_h™dÀr_t
);

197 
mou¡
;

198 
vnode
;

199 
thªad
;

200 (*
	tvfs_mou¡ed_nŸify_‚
)(*, 
	tmou¡
 *, 
	tvnode
 *,

201 
	tthªad
 *);

202 (*
	tvfs_unmou¡ed_nŸify_‚
)(*, 
	tmou¡
 *,

203 
	tthªad
 *);

204 
	`EVENTHANDLER_DECLARE
(
vfs_mou¡ed
, 
vfs_mou¡ed_nŸify_‚
);

205 
	`EVENTHANDLER_DECLARE
(
vfs_unmou¡ed
, 
vfs_unmou¡ed_nŸify_‚
);

208 
i‚ë
;

209 (*
	tvœn_c⁄fig_‚
)(*, 
	ti‚ë
 *, 
	tuöt16_t
);

210 (*
	tvœn_unc⁄fig_‚
)(*, 
	ti‚ë
 *, 
	tuöt16_t
);

211 
	`EVENTHANDLER_DECLARE
(
vœn_c⁄fig
, 
vœn_c⁄fig_‚
);

212 
	`EVENTHANDLER_DECLARE
(
vœn_unc⁄fig
, 
vœn_unc⁄fig_‚
);

215 
i‚ë
;

216 (*
	tbpf_åack_‚
)(*, 
	ti‚ë
 *, ,

218 
	`EVENTHANDLER_DECLARE
(
bpf_åack
, 
bpf_åack_‚
);

225 
¥oc
;

226 
image_∑øms
;

228 (*
	texôli°_‚
)(*, 
	t¥oc
 *);

229 (*
	tf‹kli°_‚
)(*, 
	t¥oc
 *, proc *, );

230 (*
	texe˛i°_‚
)(*, 
	t¥oc
 *, 
	timage_∑øms
 *);

231 (*
	t¥oc_˘‹_‚
)(*, 
	t¥oc
 *);

232 (*
	t¥oc_dt‹_‚
)(*, 
	t¥oc
 *);

233 (*
	t¥oc_öô_‚
)(*, 
	t¥oc
 *);

234 (*
	t¥oc_föi_‚
)(*, 
	t¥oc
 *);

235 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_˘‹
, 
¥oc_˘‹_‚
);

236 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_dt‹
, 
¥oc_dt‹_‚
);

237 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_öô
, 
¥oc_öô_‚
);

238 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_föi
, 
¥oc_föi_‚
);

239 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_exô
, 
exôli°_‚
);

240 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_f‹k
, 
f‹kli°_‚
);

241 
	`EVENTHANDLER_DECLARE
(
¥o˚ss_exec
, 
exe˛i°_‚
);

246 (*
	t≠p_c‹edump_°¨t_‚
)(*, 
	tthªad
 *, *
	t«me
);

247 (*
	t≠p_c‹edump_¥ogªss_‚
)(*, 
	tthªad
 *
	ttd
, 
	tbyã_cou¡
);

248 (*
	t≠p_c‹edump_föish_‚
)(*, 
	tthªad
 *
	ttd
);

249 (*
	t≠p_c‹edump_îr‹_‚
)(*, 
	tthªad
 *
	ttd
, *
	tmsg
, ...);

251 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_°¨t
, 
≠p_c‹edump_°¨t_‚
);

252 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_¥ogªss
, 
≠p_c‹edump_¥ogªss_‚
);

253 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_föish
, 
≠p_c‹edump_föish_‚
);

254 
	`EVENTHANDLER_DECLARE
(
≠p_c‹edump_îr‹
, 
≠p_c‹edump_îr‹_‚
);

256 (*
	tthªad_˘‹_‚
)(*, 
	tthªad
 *);

257 (*
	tthªad_dt‹_‚
)(*, 
	tthªad
 *);

258 (*
	tthªad_föi_‚
)(*, 
	tthªad
 *);

259 (*
	tthªad_öô_‚
)(*, 
	tthªad
 *);

260 
	`EVENTHANDLER_DECLARE
(
thªad_˘‹
, 
thªad_˘‹_‚
);

261 
	`EVENTHANDLER_DECLARE
(
thªad_dt‹
, 
thªad_dt‹_‚
);

262 
	`EVENTHANDLER_DECLARE
(
thªad_öô
, 
thªad_öô_‚
);

263 
	`EVENTHANDLER_DECLARE
(
thªad_föi
, 
thªad_föi_‚
);

265 (*
	tuma_z⁄e_ch‚
)(*);

266 
	`EVENTHANDLER_DECLARE
(
nmb˛u°îs_ch™ge
, 
uma_z⁄e_ch‚
);

267 
	`EVENTHANDLER_DECLARE
(
nmbufs_ch™ge
, 
uma_z⁄e_ch‚
);

268 
	`EVENTHANDLER_DECLARE
(
maxsockës_ch™ge
, 
uma_z⁄e_ch‚
);

271 
lökî_fûe
;

272 (*
	tkld_lﬂd_‚
)(*, 
	tlökî_fûe
 *);

273 (*
	tkld_u∆ﬂd_‚
)(*, c⁄° *, 
	tˇddr_t
, 
	tsize_t
);

274 (*
	tkld_u∆ﬂd_åy_‚
)(*, 
	tlökî_fûe
 *, *);

275 
	`EVENTHANDLER_DECLARE
(
kld_lﬂd
, 
kld_lﬂd_‚
);

276 
	`EVENTHANDLER_DECLARE
(
kld_u∆ﬂd
, 
kld_u∆ﬂd_‚
);

277 
	`EVENTHANDLER_DECLARE
(
kld_u∆ﬂd_åy
, 
kld_u∆ﬂd_åy_‚
);

280 
fb_öfo
;

281 (*
	tªgi°î_‰amebuf„r_‚
)(*, 
	tfb_öfo
 *);

282 (*
	tuƒegi°î_‰amebuf„r_‚
)(*, 
	tfb_öfo
 *);

283 
	`EVENTHANDLER_DECLARE
(
ªgi°î_‰amebuf„r
, 
ªgi°î_‰amebuf„r_‚
);

284 
	`EVENTHANDLER_DECLARE
(
uƒegi°î_‰amebuf„r
, 
uƒegi°î_‰amebuf„r_‚
);

	@/usr/include/sys/filedesc.h

33 #i‚de‡
_SYS_FILEDESC_H_


34 
	#_SYS_FILEDESC_H_


	)

36 
	~<sys/ˇ¥ights.h
>

37 
	~<sys/queue.h
>

38 
	~<sys/evít.h
>

39 
	~<sys/lock.h
>

40 
	~<sys/¥i‹ôy.h
>

41 
	~<sys/£q.h
>

42 
	~<sys/sx.h
>

44 
	~<machöe/_limôs.h
>

46 
	sfûeˇps
 {

47 
ˇp_rights_t
 
	mfc_rights
;

48 
u_l⁄g
 *
	mfc_io˘ls
;

49 
öt16_t
 
	mfc_nio˘ls
;

50 
uöt32_t
 
	mfc_f˙és
;

53 
	sfûedes˚¡
 {

54 
fûe
 *
	mfde_fûe
;

55 
fûeˇps
 
	mfde_ˇps
;

56 
uöt8_t
 
	mfde_Êags
;

57 
£q_t
 
	mfde_£q
;

59 
	#fde_rights
 
fde_ˇps
.
fc_rights


	)

60 
	#fde_f˙és
 
fde_ˇps
.
fc_f˙és


	)

61 
	#fde_io˘ls
 
fde_ˇps
.
fc_io˘ls


	)

62 
	#fde_nio˘ls
 
fde_ˇps
.
fc_nio˘ls


	)

63 
	#fde_ch™ge_size
 (
	`off£tof
(
fûedes˚¡
, 
fde_£q
))

	)

69 
	#NDSLOTTYPE
 
u_l⁄g


	)

71 
	sfûedesc
 {

72 
fûedes˚¡
 *
	mfd_ofûes
;

73 
vnode
 *
	mfd_cdú
;

74 
vnode
 *
	mfd_rdú
;

75 
vnode
 *
	mfd_jdú
;

76 
	mfd_nfûes
;

77 
NDSLOTTYPE
 *
	mfd_m≠
;

78 
	mfd_œ°fûe
;

79 
	mfd_‰ìfûe
;

80 
u_sh‹t
 
	mfd_cmask
;

81 
u_sh‹t
 
	mfd_ªf˙t
;

82 
u_sh‹t
 
	mfd_hﬁd˙t
;

83 
sx
 
	mfd_sx
;

84 
kqli°
 
	mfd_kqli°
;

85 
	mfd_hﬁdÀadîscou¡
;

86 
	mfd_hﬁdÀadîswakeup
;

88 
	#fd_£q
(
fdp
, 
fd
Ë(&(fdp)->
fd_ofûes
[(fd)].
fde_£q
)

	)

99 
	sfûedesc_to_Àadî
 {

100 
	mfdl_ªfcou¡
;

101 
	mfdl_hﬁdcou¡
;

102 
	mfdl_wakeup
;

103 
¥oc
 *
	mfdl_Àadî
;

105 
fûedesc_to_Àadî
 *
	mfdl_¥ev
;

106 
fûedesc_to_Àadî
 *
	mfdl_√xt
;

112 
	#UF_EXCLOSE
 0x01

	)

114 #ifde‡
_KERNEL


117 
	#DUP_FIXED
 0x1

	)

118 
	#DUP_FCNTL
 0x2

	)

119 
	#DUP_CLOEXEC
 0x4

	)

122 
	#FILEDESC_LOCK_INIT
(
fdp
Ë
	`sx_öô
(&(fdp)->
fd_sx
, "fûedes¯°ru˘uª")

	)

123 
	#FILEDESC_LOCK_DESTROY
(
fdp
Ë
	`sx_de°roy
(&(fdp)->
fd_sx
)

	)

124 
	#FILEDESC_LOCK
(
fdp
Ë(&(fdp)->
fd_sx
)

	)

125 
	#FILEDESC_XLOCK
(
fdp
Ë
	`sx_xlock
(&(fdp)->
fd_sx
)

	)

126 
	#FILEDESC_XUNLOCK
(
fdp
Ë
	`sx_xu∆ock
(&(fdp)->
fd_sx
)

	)

127 
	#FILEDESC_SLOCK
(
fdp
Ë
	`sx_¶ock
(&(fdp)->
fd_sx
)

	)

128 
	#FILEDESC_SUNLOCK
(
fdp
Ë
	`sx_su∆ock
(&(fdp)->
fd_sx
)

	)

130 
	#FILEDESC_LOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_LOCKED
 | \

131 
SX_NOTRECURSED
)

	)

132 
	#FILEDESC_XLOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_XLOCKED
 | \

133 
SX_NOTRECURSED
)

	)

134 
	#FILEDESC_UNLOCK_ASSERT
(
fdp
Ë
	`sx_as£π
(&(fdp)->
fd_sx
, 
SX_UNLOCKED
)

	)

136 
	gthªad
;

138 
fûeˇps_öô
(
fûeˇps
 *
fˇps
);

139 
fûeˇps_c›y
(c⁄° 
fûeˇps
 *
§c
, fûeˇp†*
d°
);

140 
fûeˇps_move
(
fûeˇps
 *
§c
, fûeˇp†*
d°
);

141 
fûeˇps_‰ì
(
fûeˇps
 *
fˇps
);

143 
˛o£f
(
fûe
 *
Â
, 
thªad
 *
td
);

144 
do_dup
(
thªad
 *
td
, 
Êags
, 
ﬁd
, 
√w
,

145 
ªgi°î_t
 *
ªtvÆ
);

146 
dupfd›í
(
thªad
 *
td
, 
fûedesc
 *
fdp
, 
dfd
, 
mode
,

147 
›íîr‹
, *
ödxp
);

148 
ÁŒoc
(
thªad
 *
td
, 
fûe
 **
ªsu…Â
, *
ªsu…fd
,

149 
Êags
);

150 
ÁŒoc_noö°Æl
(
thªad
 *
td
, 
fûe
 **
ªsu…Â
);

151 
fö°Æl
(
thªad
 *
td
, 
fûe
 *
Â
, *
ªsu…Â
, 
Êags
,

152 
fûeˇps
 *
fˇps
);

153 
fdÆloc
(
thªad
 *
td
, 
möfd
, *
ªsu…
);

154 
fdÆlo˙
(
thªad
 *
td
, 
möfd
, *
fds
, 
n
);

155 
fdavaû
(
thªad
 *
td
, 
n
);

156 
fdcheck°d
(
thªad
 *
td
);

157 
fd˛o£
(
fûedesc
 *
fdp
, 
fûe
 *
Â
, 
idx
, 
thªad
 *
td
);

158 
fd˛o£exec
(
thªad
 *
td
);

159 
fûedesc
 *
fdc›y
(fûedes¯*
fdp
);

160 
fdunsh¨e
(
thªad
 *
td
);

161 
fdesc‰ì
(
thªad
 *
td
);

162 
fûedesc
 *
fdöô
(fûedes¯*
fdp
);

163 
fûedesc
 *
fdsh¨e
(fûedes¯*
fdp
);

164 
fûedesc_to_Àadî
 *

165 
fûedesc_to_Àadî_Æloc
(
fûedesc_to_Àadî
 *
ﬁd
,

166 
fûedesc
 *
fdp
, 
¥oc
 *
Àadî
);

167 
gëvnode
(
fûedesc
 *
fdp
, 
fd
, 
ˇp_rights_t
 *
right•
,

168 
fûe
 **
Âp
);

169 
mou¡checkdús
(
vnode
 *
ﬁddp
, vnodê*
√wdp
);

170 
£tugidß„ty
(
thªad
 *
td
);

173 
fgë_u∆ocked
(
fûedesc
 *
fdp
, 
fd
, 
ˇp_rights_t
 *
√edright•
,

174 
√edf˙é
, 
fûe
 **
Âp
, 
ˇp_rights_t
 *
havîight•
);

177 
__ölöe
 
fûe
 *

178 
	$fgë_locked
(
fûedesc
 *
fdp
, 
fd
)

181 
	`FILEDESC_LOCK_ASSERT
(
fdp
);

183 i‡(
fd
 < 0 || fd > 
fdp
->
fd_œ°fûe
)

184  (
NULL
);

186  (
fdp
->
fd_ofûes
[
fd
].
fde_fûe
);

187 
	}
}

	@/usr/include/sys/ioccom.h

33 #i‚def 
_SYS_IOCCOM_H_


34 
	#_SYS_IOCCOM_H_


	)

41 
	#IOCPARM_SHIFT
 13

	)

42 
	#IOCPARM_MASK
 ((1 << 
IOCPARM_SHIFT
Ë- 1Ë

	)

43 
	#IOCPARM_LEN
(
x
Ë(((xË>> 16Ë& 
IOCPARM_MASK
)

	)

44 
	#IOCBASECMD
(
x
Ë((xË& ~(
IOCPARM_MASK
 << 16))

	)

45 
	#IOCGROUP
(
x
Ë(((xË>> 8Ë& 0xff)

	)

47 
	#IOCPARM_MAX
 (1 << 
IOCPARM_SHIFT
Ë

	)

48 
	#IOC_VOID
 0x20000000

	)

49 
	#IOC_OUT
 0x40000000

	)

50 
	#IOC_IN
 0x80000000

	)

51 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

52 
	#IOC_DIRMASK
 (
IOC_VOID
|
IOC_OUT
|
IOC_IN
)

	)

54 
	#_IOC
(
öout
,
group
,
num
,
Àn
) (() \

55 ((
öout
Ë| (((
Àn
Ë& 
IOCPARM_MASK
Ë<< 16Ë| ((
group
Ë<< 8Ë| (
num
)))

	)

56 
	#_IO
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), 0)

	)

57 
	#_IOWINT
(
g
,
n
Ë
	`_IOC
(
IOC_VOID
, (g), (n), ())

	)

58 
	#_IOR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_OUT
, (g), (n), —))

	)

59 
	#_IOW
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_IN
, (g), (n), —))

	)

61 
	#_IOWR
(
g
,
n
,
t
Ë
	`_IOC
(
IOC_INOUT
, (g), (n), —))

	)

63 #ifde‡
_KERNEL


65 #i‡
deföed
(
COMPAT_FREEBSD6
Ë|| deföed(
COMPAT_FREEBSD5
) || \

66 
deföed
(
COMPAT_FREEBSD4
Ë|| 
	$deföed
(
COMPAT_43
)

67 
	#IOCPARM_IVAL
(
x
Ë(()(
öçå_t
)(*)*(
ˇddr_t
 *)(*)(x))

	)

72 
	~<sys/cdefs.h
>

74 
__BEGIN_DECLS


75 
	`io˘l
(, , ...);

76 
__END_DECLS


	@/usr/include/sys/kobj.h

29 #i‚de‡
_SYS_KOBJ_H_


30 
	#_SYS_KOBJ_H_


	)

35 
kobj
 *
	tkobj_t
;

36 
kobj_˛ass
 *
	tkobj_˛ass_t
;

37 c⁄° 
	tkobj_mëhod
 
	tkobj_mëhod_t
;

38 (*
	tkobj›_t
)();

39 
kobj_›s
 *
	tkobj_›s_t
;

40 
kobj›_desc
 *
	tkobj›_desc_t
;

41 
mÆloc_ty≥
;

43 
	skobj_mëhod
 {

44 
kobj›_desc_t
 
desc
;

45 
kobj›_t
 
func
;

54 
	#KOBJ_CLASS_FIELDS
 \

55 c⁄° *
«me
; \

56 
kobj_mëhod_t
 *
mëhods
; \

57 
size_t
 
size
; \

58 
kobj_˛ass_t
 *
ba£˛as£s
; \

59 
u_öt
 
ªfs
; \

60 
kobj_›s_t
 
›s


	)

62 
	skobj_˛ass
 {

63 
KOBJ_CLASS_FIELDS
;

69 
	#KOBJ_FIELDS
 \

70 
kobj_›s_t
 
›s


	)

72 
	skobj
 {

73 
KOBJ_FIELDS
;

80 
	#KOBJ_CACHE_SIZE
 256

	)

82 
	skobj_›s
 {

83 
kobj_mëhod_t
 *
ˇche
[
KOBJ_CACHE_SIZE
];

84 
kobj_˛ass_t
 
˛s
;

87 
	skobj›_desc
 {

88 
id
;

89 
kobj_mëhod_t
 
deÊt
;

97 
	#KOBJMETHOD
(
NAME
, 
FUNC
) \

98 { &
NAME
##
_desc
, (
kobj›_t
Ë(1 ? 
FUNC
 : (NAME##
_t
 *)
NULL
Ë
	}

	)
}

103 
	#KOBJMETHOD_END
 { 
NULL
, NULL }

	)

108 
	#DECLARE_CLASS
(
«me
Ë
kobj_˛ass
 
	)
name

114 
	#DEFINE_CLASS
(
«me
, 
mëhods
, 
size
) \

115 
	`DEFINE_CLASS_0
(
«me
,Çamê## 
_˛ass
, 
mëhods
, 
size
)

	)

122 
	#DEFINE_CLASS_0
(
«me
, 
˛assv¨
, 
mëhods
, 
size
) \

124 
kobj_˛ass
 
˛assv¨
 = { \

125 #«me, 
mëhods
, 
size
, 
NULL
 \

126 }

	)

134 
	#DEFINE_CLASS_1
(
«me
, 
˛assv¨
, 
mëhods
, 
size
, \

135 
ba£1
) \

137 
kobj_˛ass_t
 
«me
 ## 
_ba£˛as£s
[] = \

138 { &
ba£1
, 
NULL
 }; \

139 
kobj_˛ass
 
˛assv¨
 = { \

140 #«me, 
mëhods
, 
size
, 
«me
 ## 
_ba£˛as£s
 \

141 }

	)

149 
	#DEFINE_CLASS_2
(
«me
, 
mëhods
, 
size
, \

150 
ba£1
, 
ba£2
) \

152 
kobj_˛ass_t
 
«me
 ## 
_ba£˛as£s
[] = \

153 { &
ba£1
, \

154 &
ba£2
, 
NULL
 }; \

155 
kobj_˛ass
 
«me
 ## 
_˛ass
 = { \

156 #«me, 
mëhods
, 
size
, 
«me
 ## 
_ba£˛as£s
 \

157 }

	)

165 
	#DEFINE_CLASS_3
(
«me
, 
mëhods
, 
size
, \

166 
ba£1
, 
ba£2
, 
ba£3
) \

168 
kobj_˛ass_t
 
«me
 ## 
_ba£˛as£s
[] = \

169 { &
ba£1
, \

170 &
ba£2
, \

171 &
ba£3
, 
NULL
 }; \

172 
kobj_˛ass
 
«me
 ## 
_˛ass
 = { \

173 #«me, 
mëhods
, 
size
, 
«me
 ## 
_ba£˛as£s
 \

174 }

	)

180 
kobj_˛ass_compûe
(
kobj_˛ass_t
 
˛s
);

186 
kobj_˛ass_compûe_°©ic
(
kobj_˛ass_t
 
˛s
, 
kobj_›s_t
 
›s
);

191 
kobj_˛ass_‰ì
(
kobj_˛ass_t
 
˛s
);

196 
kobj_t
 
kobj_¸óã
(
kobj_˛ass_t
 
˛s
,

197 
mÆloc_ty≥
 *
mty≥
,

198 
mÊags
);

203 
kobj_öô
(
kobj_t
 
obj
, 
kobj_˛ass_t
 
˛s
);

204 
kobj_öô_°©ic
(
kobj_t
 
obj
, 
kobj_˛ass_t
 
˛s
);

209 
kobj_dñëe
(
kobj_t
 
obj
, 
mÆloc_ty≥
 *
mty≥
);

214 #ifde‡
KOBJ_STATS


215 
u_öt
 
kobj_lookup_hôs
;

216 
u_öt
 
kobj_lookup_mis£s
;

223 #ifde‡
KOBJ_STATS


224 
	#KOBJOPLOOKUP
(
OPS
,
OP
) do { \

225 
kobj›_desc_t
 
_desc
 = &
OP
##
_
##
desc
; \

226 
kobj_mëhod_t
 **
_˚p
 = \

227 &
OPS
->
ˇche
[
_desc
->
id
 & (
KOBJ_CACHE_SIZE
-1)]; \

228 
kobj_mëhod_t
 *
_˚
 = *
_˚p
; \

229 
kobj_lookup_hôs
++; \

230 i‡(
_˚
->
desc
 !
_desc
) \

231 
_˚
 = 
	`kobj_lookup_mëhod
(
OPS
->
˛s
, \

232 
_˚p
, 
_desc
); \

233 
_m
 = 
_˚
->
func
; \

234 } 0)

	)

236 
	#KOBJOPLOOKUP
(
OPS
,
OP
) do { \

237 
kobj›_desc_t
 
_desc
 = &
OP
##
_
##
desc
; \

238 
kobj_mëhod_t
 **
_˚p
 = \

239 &
OPS
->
ˇche
[
_desc
->
id
 & (
KOBJ_CACHE_SIZE
-1)]; \

240 
kobj_mëhod_t
 *
_˚
 = *
_˚p
; \

241 i‡(
_˚
->
desc
 !
_desc
) \

242 
_˚
 = 
	`kobj_lookup_mëhod
(
OPS
->
˛s
, \

243 
_˚p
, 
_desc
); \

244 
_m
 = 
_˚
->
func
; \

245 } 0)

	)

248 
kobj_mëhod_t
* 
kobj_lookup_mëhod
(
kobj_˛ass_t
 
˛s
,

249 
kobj_mëhod_t
 **
˚p
,

250 
kobj›_desc_t
 
desc
);

256 
kobj_îr‹_mëhod
();

	@/usr/include/sys/ktr.h

36 #i‚de‡
_SYS_KTR_H_


37 
	#_SYS_KTR_H_


	)

47 
	#KTR_GEN
 0x00000001

	)

48 
	#KTR_NET
 0x00000002

	)

49 
	#KTR_DEV
 0x00000004

	)

50 
	#KTR_LOCK
 0x00000008

	)

51 
	#KTR_SMP
 0x00000010

	)

52 
	#KTR_SUBSYS
 0x00000020

	)

53 
	#KTR_PMAP
 0x00000040

	)

54 
	#KTR_MALLOC
 0x00000080

	)

55 
	#KTR_TRAP
 0x00000100

	)

56 
	#KTR_INTR
 0x00000200

	)

57 
	#KTR_SIG
 0x00000400

	)

58 
	#KTR_SPARE2
 0x00000800

	)

59 
	#KTR_PROC
 0x00001000

	)

60 
	#KTR_SYSC
 0x00002000

	)

61 
	#KTR_INIT
 0x00004000

	)

62 
	#KTR_SPARE3
 0x00008000

	)

63 
	#KTR_SPARE4
 0x00010000

	)

64 
	#KTR_EVH
 0x00020000

	)

65 
	#KTR_VFS
 0x00040000

	)

66 
	#KTR_VOP
 0x00080000

	)

67 
	#KTR_VM
 0x00100000

	)

68 
	#KTR_INET
 0x00200000

	)

69 
	#KTR_RUNQ
 0x00400000

	)

70 
	#KTR_CONTENTION
 0x00800000

	)

71 
	#KTR_UMA
 0x01000000

	)

72 
	#KTR_CALLOUT
 0x02000000

	)

73 
	#KTR_GEOM
 0x04000000

	)

74 
	#KTR_BUSDMA
 0x08000000

	)

75 
	#KTR_INET6
 0x10000000

	)

76 
	#KTR_SCHED
 0x20000000

	)

77 
	#KTR_BUF
 0x40000000

	)

78 
	#KTR_PTRACE
 0x80000000

	)

79 
	#KTR_ALL
 0xffffffff

	)

82 #ifde‡
KTR


83 #i‚de‡
KTR_COMPILE


84 
	#KTR_COMPILE
 (
KTR_ALL
)

	)

87 #unde‡
KTR_COMPILE


88 
	#KTR_COMPILE
 0

	)

95 
	#KTR_VERSION
 2

	)

97 
	#KTR_PARMS
 6

	)

99 #i‚de‡
LOCORE


101 
	~<sys/∑øm.h
>

102 
	~<sys/_˝u£t.h
>

104 
	skå_íåy
 {

105 
u_öt64_t
 
	mkå_time°amp
;

106 
	mkå_˝u
;

107 
	mkå_löe
;

108 c⁄° *
	mkå_fûe
;

109 c⁄° *
	mkå_desc
;

110 
thªad
 *
	mkå_thªad
;

111 
u_l⁄g
 
	mkå_∑rms
[
KTR_PARMS
];

114 
˝u£t_t
 
kå_˝umask
;

115 
kå_mask
;

116 
kå_íåõs
;

117 
kå_vîbo£
;

119 vﬁ©ûê
kå_idx
;

120 
kå_íåy
 *
kå_buf
;

122 #ifde‡
KTR


124 
kå_åa˚poöt
(
u_öt
 
mask
, c⁄° *
fûe
, 
löe
,

125 c⁄° *
f‹m©
, 
u_l⁄g
 
¨g1
, u_l⁄g 
¨g2
, u_l⁄g 
¨g3
,

126 
u_l⁄g
 
¨g4
, u_l⁄g 
¨g5
, u_l⁄g 
¨g6
);

128 
	#CTR6
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
) do { \

129 i‡(
KTR_COMPILE
 & (
m
)) \

130 
	`kå_åa˚poöt
((
m
), 
__FILE__
, 
__LINE__
, 
f‹m©
, \

131 (
u_l⁄g
)(
p1
), (u_l⁄g)(
p2
), (u_l⁄g)(
p3
), \

132 (
u_l⁄g
)(
p4
), (u_l⁄g)(
p5
), (u_l⁄g)(
p6
)); \

133 } 0)

	)

134 
	#CTR0
(
m
, 
f‹m©
Ë
	`CTR6
(m, f‹m©, 0, 0, 0, 0, 0, 0)

	)

135 
	#CTR1
(
m
, 
f‹m©
, 
p1
Ë
	`CTR6
(m, f‹m©,Ö1, 0, 0, 0, 0, 0)

	)

136 
	#CTR2
(
m
, 
f‹m©
, 
p1
, 
p2
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2, 0, 0, 0, 0)

	)

137 
	#CTR3
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3, 0, 0, 0)

	)

138 
	#CTR4
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3,Ö4, 0, 0)

	)

139 
	#CTR5
(
m
, 
f‹m©
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR6
(m, f‹m©,Ö1,Ö2,Ö3,Ö4,Ö5, 0)

	)

141 
	#CTR0
(
m
, 
d
Ë()0

	)

142 
	#CTR1
(
m
, 
d
, 
p1
Ë()0

	)

143 
	#CTR2
(
m
, 
d
, 
p1
, 
p2
Ë()0

	)

144 
	#CTR3
(
m
, 
d
, 
p1
, 
p2
, 
p3
Ë()0

	)

145 
	#CTR4
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë()0

	)

146 
	#CTR5
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë()0

	)

147 
	#CTR6
(
m
, 
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë()0

	)

150 
	#TR0
(
d
Ë
	`CTR0
(
KTR_GEN
, d)

	)

151 
	#TR1
(
d
, 
p1
Ë
	`CTR1
(
KTR_GEN
, d,Ö1)

	)

152 
	#TR2
(
d
, 
p1
, 
p2
Ë
	`CTR2
(
KTR_GEN
, d,Ö1,Ö2)

	)

153 
	#TR3
(
d
, 
p1
, 
p2
, 
p3
Ë
	`CTR3
(
KTR_GEN
, d,Ö1,Ö2,Ö3)

	)

154 
	#TR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR4
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4)

	)

155 
	#TR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR5
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4,Ö5)

	)

156 
	#TR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
	`CTR6
(
KTR_GEN
, d,Ö1,Ö2,Ö3,Ö4,Ö5,Ö6)

	)

179 
	#KTR_ATTR_LINKED
 "lökedto:\"%s\""

	)

180 
	#KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
) \

181 "KTRGRAPH group:\"" 
egroup
 "\", id:\"%s\", " 
ëy≥
 ",áâribuãs: "

	)

183 
	#KTR_EVENT0
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
) \

184 
	`CTR2
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë"n⁄e", idít, 
ed©
)

	)

185 
	#KTR_EVENT1
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
) \

186 
	`CTR3
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
, idít, 
ed©
, (
v0
))

	)

187 
	#KTR_EVENT2
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
, 
a1
, 
v1
) \

188 
	`CTR4
(
m
, 
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
, \

189 
idít
, 
ed©
, (
v0
), (
v1
))

	)

190 
	#KTR_EVENT3
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

191 
	`CTR5
(
m
,
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
 ", " 
a2
, \

192 
idít
, 
ed©
, (
v0
), (
v1
), (
v2
))

	)

193 
	#KTR_EVENT4
(
m
, 
egroup
, 
idít
, 
ëy≥
, 
ed©
, \

194 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

195 
	`CTR6
(
m
,
	`KTR_EFMT
(
egroup
, 
idít
, 
ëy≥
Ë
a0
 ", " 
a1
 ", " 
a2
 ", " 
a3
,\

196 
idít
, 
ed©
, (
v0
), (
v1
), (
v2
), (
v3
))

	)

201 
	#KTR_STATE0
(
m
, 
egroup
, 
idít
, 
°©e
) \

202 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
)

	)

203 
	#KTR_STATE1
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
) \

204 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
, 
a0
, (
v0
))

	)

205 
	#KTR_STATE2
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
) \

206 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°©e:\"%s\"", 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

207 
	#KTR_STATE3
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

208 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "state:\"%s\"", \

209 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

210 
	#KTR_STATE4
(
m
, 
egroup
, 
idít
, 
°©e
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

211 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "state:\"%s\"", \

212 
°©e
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

218 
	#KTR_COUNTER0
(
m
, 
egroup
, 
idít
, 
cou¡î
) \

219 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
)

	)

220 
	#KTR_COUNTER1
(
m
, 
egroup
, 
idít
, 
ed©
, 
a0
, 
v0
) \

221 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
, 
a0
, (
v0
))

	)

222 
	#KTR_COUNTER2
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
) \

223 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "cou¡î:%d", 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

224 
	#KTR_COUNTER3
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

225 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "counter:%d", \

226 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

227 
	#KTR_COUNTER4
(
m
, 
egroup
, 
idít
, 
cou¡î
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

228 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "counter:%d", \

229 
cou¡î
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

234 
	#KTR_POINT0
(
m
, 
egroup
, 
idít
, 
poöt
) \

235 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
)

	)

236 
	#KTR_POINT1
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
) \

237 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, 
a0
, (
v0
))

	)

238 
	#KTR_POINT2
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
) \

239 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, 
a0
, (
v0
), 
a1
, (
v1
))

	)

240 
	#KTR_POINT3
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
) \

241 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "poöt:\"%s\"", 
poöt
, \

242 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

243 
	#KTR_POINT4
(
m
, 
egroup
, 
idít
, 
poöt
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
)\

244 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "point:\"%s\"", \

245 
poöt
, 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

256 
	#KTR_START0
(
m
, 
egroup
, 
idít
, 
key
) \

257 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
)

	)

258 
	#KTR_START1
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
) \

259 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, 
a0
, (
v0
))

	)

260 
	#KTR_START2
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
) \

261 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, \

262 
a0
, (
v0
), 
a1
, (
v1
))

	)

263 
	#KTR_START3
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

264 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, \

265 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

266 
	#KTR_START4
(
m
, 
egroup
, 
idít
, 
key
, \

267 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

268 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "°¨t:0x%jX", (
uötmax_t
)
key
, \

269 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

276 
	#KTR_STOP0
(
m
, 
egroup
, 
idít
, 
key
) \

277 
	`KTR_EVENT0
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
)

	)

278 
	#KTR_STOP1
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
) \

279 
	`KTR_EVENT1
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, 
a0
, (
v0
))

	)

280 
	#KTR_STOP2
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
) \

281 
	`KTR_EVENT2
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, \

282 
a0
, (
v0
), 
a1
, (
v1
))

	)

283 
	#KTR_STOP3
(
m
, 
egroup
, 
idít
, 
key
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
)\

284 
	`KTR_EVENT3
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, \

285 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
))

	)

286 
	#KTR_STOP4
(
m
, 
egroup
, 
idít
, \

287 
key
, 
a0
, 
v0
, 
a1
, 
v1
, 
a2
, 
v2
, 
a3
, 
v3
) \

288 
	`KTR_EVENT4
(
m
, 
egroup
, 
idít
, "°›:0x%jX", (
uötmax_t
)
key
, \

289 
a0
, (
v0
), 
a1
, (
v1
), 
a2
, (
v2
), 
a3
, (
v3
))

	)

297 #i‡(
KTR_COMPILE
 & 
KTR_INIT
) != 0

298 
	#ITR0
(
d
Ë
	`CTR0
(
KTR_INIT
, d)

	)

299 
	#ITR1
(
d
, 
p1
Ë
	`CTR1
(
KTR_INIT
, d,Ö1)

	)

300 
	#ITR2
(
d
, 
p1
, 
p2
Ë
	`CTR2
(
KTR_INIT
, d,Ö1,Ö2)

	)

301 
	#ITR3
(
d
, 
p1
, 
p2
, 
p3
Ë
	`CTR3
(
KTR_INIT
, d,Ö1,Ö2,Ö3)

	)

302 
	#ITR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
Ë
	`CTR4
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4)

	)

303 
	#ITR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
	`CTR5
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4,Ö5)

	)

304 
	#ITR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
	`CTR6
(
KTR_INIT
, d,Ö1,Ö2,Ö3,Ö4,Ö5,Ö6)

	)

306 
	#ITR0
(
d
)

	)

307 
	#ITR1
(
d
, 
p1
)

	)

308 
	#ITR2
(
d
, 
p1
, 
p2
)

	)

309 
	#ITR3
(
d
, 
p1
, 
p2
, 
p3
)

	)

310 
	#ITR4
(
d
, 
p1
, 
p2
, 
p3
, 
p4
)

	)

311 
	#ITR5
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
)

	)

312 
	#ITR6
(
d
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
)

	)

	@/usr/include/sys/libkern.h

33 #i‚de‡
_SYS_LIBKERN_H_


34 
	#_SYS_LIBKERN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/ty≥s.h
>

38 #ifde‡
_KERNEL


39 
	~<sys/sy°m.h
>

42 #i‚def 
LIBKERN_INLINE


43 
	#LIBKERN_INLINE
 
__ölöe


	)

44 
	#LIBKERN_BODY


	)

48 
u_ch¨
 c⁄° 
bcd2bö_d©a
[];

49 
u_ch¨
 c⁄° 
bö2bcd_d©a
[];

50 c⁄° 
hex2ascii_d©a
[];

52 
	#bcd2bö
(
bcd
Ë(
bcd2bö_d©a
[bcd])

	)

53 
	#bö2bcd
(
bö
Ë(
bö2bcd_d©a
[bö])

	)

54 
	#hex2ascii
(
hex
Ë(
hex2ascii_d©a
[hex])

	)

56 
__ölöe
 
	$imax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

57 
__ölöe
 
	$imö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

58 
__ölöe
 
	$lmax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

59 
__ölöe
 
	$lmö
(
a
, 
b
Ë{  (®< b ?á : b); 
	}
}

60 
__ölöe
 
u_öt
 
	$max
(
u_öt
 
a
, u_öà
b
Ë{  (®> b ?á : b); 
	}
}

61 
__ölöe
 
u_öt
 
	$mö
(
u_öt
 
a
, u_öà
b
Ë{  (®< b ?á : b); 
	}
}

62 
__ölöe
 
quad_t
 
	$qmax
(
quad_t
 
a
, quad_à
b
Ë{  (®> b ?á : b); 
	}
}

63 
__ölöe
 
quad_t
 
	$qmö
(
quad_t
 
a
, quad_à
b
Ë{  (®< b ?á : b); 
	}
}

64 
__ölöe
 
u_l⁄g
 
	$ulmax
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®> b ?á : b); 
	}
}

65 
__ölöe
 
u_l⁄g
 
	$ulmö
(
u_l⁄g
 
a
, u_l⁄g 
b
Ë{  (®< b ?á : b); 
	}
}

66 
__ölöe
 
off_t
 
	$omax
(
off_t
 
a
, off_à
b
Ë{  (®> b ?á : b); 
	}
}

67 
__ölöe
 
off_t
 
	$omö
(
off_t
 
a
, off_à
b
Ë{  (®< b ?á : b); 
	}
}

69 
__ölöe
 
	$abs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

70 
__ölöe
 
	$œbs
(
a
Ë{  (®< 0 ? -®:á); 
	}
}

71 
__ölöe
 
quad_t
 
	$qabs
(
quad_t
 
a
Ë{  (®< 0 ? -®:á); 
	}
}

73 
	#ARC4_ENTR_NONE
 0

	)

74 
	#ARC4_ENTR_HAVE
 1

	)

75 
	#ARC4_ENTR_SEED
 2

	)

76 
¨c4ønd_öi£ed_°©e
;

79 
	gmÆloc_ty≥
;

80 
uöt32_t
 
¨c4øndom
();

81 
¨c4ønd
(*
±r
, 
u_öt
 
Àn
, 
ª£ed
);

82 
bcmp
(c⁄° *, c⁄° *, 
size_t
);

83 *
b£¨ch
(c⁄° *, c⁄° *, 
size_t
,

84 
size_t
, (*)(const *, const *));

85 #i‚def 
HAVE_INLINE_FFS


86 
	`ffs
();

88 #i‚def 
HAVE_INLINE_FFSL


89 
	`ff¶
();

91 #i‚def 
HAVE_INLINE_FLS


92 
	`Ês
();

94 #i‚def 
HAVE_INLINE_FLSL


95 
	`Ê¶
();

97 #i‚def 
HAVE_INLINE_FLSLL


98 
	`Ê¶l
();

100 
	#bôcou¡64
(
x
Ë
	`__bôcou¡64
((
uöt64_t
)(x))

	)

101 
	#bôcou¡32
(
x
Ë
	`__bôcou¡32
((
uöt32_t
)(x))

	)

102 
	#bôcou¡16
(
x
Ë
	`__bôcou¡16
((
uöt16_t
)(x))

	)

103 
	#bôcou¡l
(
x
Ë
	`__bôcou¡l
((
u_l⁄g
)(x))

	)

104 
	#bôcou¡
(
x
Ë
	`__bôcou¡
((
u_öt
)(x))

	)

106 
	`‚m©ch
(const *, const *, );

107 
	`locc
(, *, 
u_öt
);

108 *
	`memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

109 *
	`memcchr
(c⁄° *
s
, 
c
, 
size_t
 
n
);

110 
	`memcmp
(c⁄° *
b1
, c⁄° *
b2
, 
size_t
 
Àn
);

111 
	`qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
,

112 (*
com∑r
)(const *, const *));

113 
	`qs‹t_r
(*
ba£
, 
size_t
 
nmemb
, size_à
size
, *
thunk
,

114 (*
com∑r
)(*, const *, const *));

115 
u_l⁄g
 
	`øndom
();

116 
	`sˇnc
(
u_öt
, c⁄° 
u_ch¨
 *, const u_char *, );

117 
	`§™dom
(
u_l⁄g
);

118 
	`°rˇ£cmp
(const *, const *);

119 *
	`°rˇt
(* 
__ª°ri˘
, const * __restrict);

120 *
	`°rchr
(const *, );

121 
	`°rcmp
(const *, const *);

122 *
	`°r˝y
(* 
__ª°ri˘
, const * __restrict);

123 
size_t
 
	$°rc•n
(c⁄° * 
__ª°ri˘
, c⁄° * __ª°ri˘Ë
__puª
;

124 *
	`°rdup
(c⁄° *
__ª°ri˘
, 
mÆloc_ty≥
 *);

125 *
	`°∫dup
(c⁄° *
__ª°ri˘
, 
size_t
, 
mÆloc_ty≥
 *);

126 
size_t
 
	`°æˇt
(*, const *, size_t);

127 
size_t
 
	`°æ˝y
(*, const *, size_t);

128 
size_t
 
	`°æí
(const *);

129 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

130 
	`°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

131 *
	`°∫˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

132 
size_t
 
	`°∫Àn
(const *, size_t);

133 *
	`°ºchr
(const *, );

134 *
	`°r£p
(**, c⁄° *
dñim
);

135 
size_t
 
	`°r•n
(const *, const *);

136 *
	`°r°r
(const *, const *);

137 
	`°rvÆid
(c⁄° *, 
size_t
);

139 c⁄° 
uöt32_t
 
¸c32_èb
[];

141 
__ölöe
 
uöt32_t


142 
	$¸c32_øw
(c⁄° *
buf
, 
size_t
 
size
, 
uöt32_t
 
¸c
)

144 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
buf
;

146 
size
--)

147 
¸c
 = 
¸c32_èb
[(¸¯^ *
p
++) & 0xFF] ^ (crc >> 8);

148  (
¸c
);

149 
	}
}

151 
__ölöe
 
uöt32_t


152 
	$¸c32
(c⁄° *
buf
, 
size_t
 
size
)

154 
uöt32_t
 
¸c
;

156 
¸c
 = 
	`¸c32_øw
(
buf
, 
size
, ~0U);

157  (
¸c
 ^ ~0U);

158 
	}
}

160 
uöt32_t


161 
ˇlcuœã_¸c32c
(
uöt32_t
 
¸c32c
, c⁄° *
buf„r
,

162 
Àngth
);

165 
LIBKERN_INLINE
 *
mem£t
(*, , 
size_t
);

166 #ifde‡
LIBKERN_BODY


167 
LIBKERN_INLINE
 *

168 
	$mem£t
(*
b
, 
c
, 
size_t
 
Àn
)

170 *
bb
;

172 i‡(
c
 == 0)

173 
	`bzîo
(
b
, 
Àn
);

175 
bb
 = (*)
b
; 
Àn
--; )

176 *
bb
++ = 
c
;

177  (
b
);

178 
	}
}

181 
__ölöe
 *

182 
	$ödex
(c⁄° *
p
, 
ch
)

185  (
	`°rchr
(
p
, 
ch
));

186 
	}
}

188 
__ölöe
 *

189 
	$rödex
(c⁄° *
p
, 
ch
)

192  (
	`°ºchr
(
p
, 
ch
));

193 
	}
}

196 
	#FNM_NOMATCH
 1

	)

199 
	#FNM_NOESCAPE
 0x01

	)

200 
	#FNM_PATHNAME
 0x02

	)

201 
	#FNM_PERIOD
 0x04

	)

202 
	#FNM_LEADING_DIR
 0x08

	)

203 
	#FNM_CASEFOLD
 0x10

	)

204 
	#FNM_IGNORECASE
 
FNM_CASEFOLD


	)

205 
	#FNM_FILE_NAME
 
FNM_PATHNAME


	)

	@/usr/include/sys/linker_set.h

30 #i‚de‡
_SYS_LINKER_SET_H_


31 
	#_SYS_LINKER_SET_H_


	)

33 #i‚de‡
_SYS_CDEFS_H_


34 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 #ifde‡
__GNUCLIKE___SECTION


47 
	#__MAKE_SET
(
£t
, 
sym
) \

48 
	`__GLOBL
(
	`__CONCAT
(
__°¨t_£t_
,
£t
)); \

49 
	`__GLOBL
(
	`__CONCAT
(
__°›_£t_
,
£t
)); \

50 c⁄° * c⁄° 
__£t_
##
£t
##
_sym_
##
sym
 \

51 
	`__£˘i⁄
("£t_" #£tË
__u£d
 = &
sym


	)

53 #i‚de‡
löt


54 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


56 
	#__MAKE_SET
(
£t
, 
sym
Ëc⁄° * c⁄° (
__£t_
##£t##
_sym_
##sym)

	)

62 
	#TEXT_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

63 
	#DATA_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

64 
	#BSS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

65 
	#ABS_SET
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

66 
	#SET_ENTRY
(
£t
, 
sym
Ë
	`__MAKE_SET
(£t, sym)

	)

71 
	#SET_DECLARE
(
£t
, 
±y≥
) \

72 
±y≥
 
__wók_symbﬁ
 *
	`__CONCAT
(
__°¨t_£t_
,
£t
); \

73 
±y≥
 
__wók_symbﬁ
 *
	`__CONCAT
(
__°›_£t_
,
£t
)

	)

75 
	#SET_BEGIN
(
£t
) \

76 (&
	`__CONCAT
(
__°¨t_£t_
,
£t
))

	)

77 
	#SET_LIMIT
(
£t
) \

78 (&
	`__CONCAT
(
__°›_£t_
,
£t
))

	)

87 
	#SET_FOREACH
(
pv¨
, 
£t
) \

88 
pv¨
 = 
	`SET_BEGIN
(
£t
);Öv¨ < 
	`SET_LIMIT
(£t);Öv¨++)

	)

90 
	#SET_ITEM
(
£t
, 
i
) \

91 ((
	`SET_BEGIN
(
£t
))[
i
])

	)

96 
	#SET_COUNT
(
£t
) \

97 (
	`SET_LIMIT
(
£t
Ë- 
	`SET_BEGIN
(£t))

	)

	@/usr/include/sys/lock_profile.h

31 #i‚de‡
_SYS_LOCK_PROFILE_H_


32 
	#_SYS_LOCK_PROFILE_H_


	)

34 
	glock_¥ofûe_obje˘
;

35 
LIST_HEAD
(
Õohód
, 
lock_¥ofûe_obje˘
);

37 #ifde‡
_KERNEL


38 #ifde‡
LOCK_PROFILING


39 
	~<machöe/˝ufunc.h
>

40 
	~<sys/lock.h
>

42 #i‚de‡
USE_CPU_NANOSECONDS


43 
u_öt64_t
 
«no£c⁄ds
();

46 vﬁ©ûê
lock_¥of_íabÀ
;

48 
lock_¥ofûe_obèö_lock_suc˚ss
(
lock_obje˘
 *
lo
, 
c⁄ã°ed
,

49 
uöt64_t
 
waôtime
, c⁄° *
fûe
, 
löe
);

50 
lock_¥ofûe_ªÀa£_lock
(
lock_obje˘
 *
lo
);

51 
lock_¥ofûe_thªad_exô
(
thªad
 *
td
);

54 
ölöe
 

55 
	$lock_¥ofûe_obèö_lock_Áûed
(
lock_obje˘
 *
lo
, *
c⁄ã°ed
,

56 
uöt64_t
 *
waôtime
)

58 i‡(!
lock_¥of_íabÀ
 || (
lo
->
lo_Êags
 & 
LO_NOPROFILE
Ë|| *
c⁄ã°ed
)

60 *
waôtime
 = 
	`«no£c⁄ds
();

61 *
c⁄ã°ed
 = 1;

62 
	}
}

66 
	#lock_¥ofûe_ªÀa£_lock
(
lo
Ë()0

	)

67 
	#lock_¥ofûe_obèö_lock_Áûed
(
lo
, 
c⁄ã°ed
, 
waôtime
Ë()0

	)

68 
	#lock_¥ofûe_obèö_lock_suc˚ss
(
lo
, 
c⁄ã°ed
, 
waôtime
, 
fûe
, 
löe
Ë()0

	)

69 
	#lock_¥ofûe_thªad_exô
(
td
Ë()0

	)

	@/usr/include/sys/lockmgr.h

31 #i‚def 
_SYS_LOCKMGR_H_


32 
	#_SYS_LOCKMGR_H_


	)

34 
	~<sys/_lock.h
>

35 
	~<sys/_lockmgr.h
>

36 
	~<sys/_muãx.h
>

37 
	~<sys/_rwlock.h
>

39 
	#LK_SHARE
 0x01

	)

40 
	#LK_SHARED_WAITERS
 0x02

	)

41 
	#LK_EXCLUSIVE_WAITERS
 0x04

	)

42 
	#LK_EXCLUSIVE_SPINNERS
 0x08

	)

43 
	#LK_ALL_WAITERS
 \

44 (
LK_SHARED_WAITERS
 | 
LK_EXCLUSIVE_WAITERS
)

	)

45 
	#LK_FLAGMASK
 \

46 (
LK_SHARE
 | 
LK_ALL_WAITERS
 | 
LK_EXCLUSIVE_SPINNERS
)

	)

48 
	#LK_HOLDER
(
x
Ë((xË& ~
LK_FLAGMASK
)

	)

49 
	#LK_SHARERS_SHIFT
 4

	)

50 
	#LK_SHARERS
(
x
Ë(
	`LK_HOLDER
(xË>> 
LK_SHARERS_SHIFT
)

	)

51 
	#LK_SHARERS_LOCK
(
x
Ë((xË<< 
LK_SHARERS_SHIFT
 | 
LK_SHARE
)

	)

52 
	#LK_ONE_SHARER
 (1 << 
LK_SHARERS_SHIFT
)

	)

53 
	#LK_UNLOCKED
 
	`LK_SHARERS_LOCK
(0)

	)

54 
	#LK_KERNPROC
 ((
uöçå_t
)(-1Ë& ~
LK_FLAGMASK
)

	)

56 #ifde‡
_KERNEL


58 #i‡!
deföed
(
LOCK_FILE
Ë|| !deföed(
LOCK_LINE
)

62 
	gthªad
;

63 
	#lk_ªcur£
 
lock_obje˘
.
lo_d©a


	)

69 
__lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
lock_obje˘
 *
ûk
,

70 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
);

71 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

72 
_lockmgr_as£π
(c⁄° 
lock
 *
lk
, 
wh©
, c⁄° *
fûe
, 
löe
);

74 
_lockmgr_disown
(
lock
 *
lk
, c⁄° *
fûe
, 
löe
);

76 
lockÆlowªcur£
(
lock
 *
lk
);

77 
lockÆlowsh¨e
(
lock
 *
lk
);

78 
lockde°roy
(
lock
 *
lk
);

79 
lockdißbÀªcur£
(
lock
 *
lk
);

80 
lockdißbÀsh¨e
(
lock
 *
lk
);

81 
locköô
(
lock
 *
lk
, 
¥io
, c⁄° *
wmesg
, 
timo
,

82 
Êags
);

83 #ifde‡
DDB


84 
lockmgr_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

86 
lockmgr_¥ötöfo
(c⁄° 
lock
 *
lk
);

87 
lock°©us
(c⁄° 
lock
 *
lk
);

93 
__ölöe
 

94 
	$_lockmgr_¨gs
(
lock
 *
lk
, 
u_öt
 
Êags
, 
mtx
 *
ûk
, c⁄° *
wmesg
,

95 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

98  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

99 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

100 
	}
}

102 
__ölöe
 

103 
	$_lockmgr_¨gs_rw
(
lock
 *
lk
, 
u_öt
 
Êags
, 
rwlock
 *
ûk
,

104 c⁄° *
wmesg
, 
¥io
, 
timo
, c⁄° *
fûe
, 
löe
)

107  (
	`__lockmgr_¨gs
(
lk
, 
Êags
, (
ûk
 !
NULL
Ë? &ûk->
lock_obje˘
 :

108 
NULL
, 
wmesg
, 
¥io
, 
timo
, 
fûe
, 
löe
));

109 
	}
}

114 
	#lockmgr
(
lk
, 
Êags
, 
ûk
) \

115 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

116 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

117 
	#lockmgr_¨gs
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

118 
	`_lockmgr_¨gs
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

119 
LOCK_FILE
, 
LOCK_LINE
)

	)

120 
	#lockmgr_¨gs_rw
(
lk
, 
Êags
, 
ûk
, 
wmesg
, 
¥io
, 
timo
) \

121 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), (
wmesg
), (
¥io
), (
timo
), \

122 
LOCK_FILE
, 
LOCK_LINE
)

	)

123 
	#lockmgr_disown
(
lk
) \

124 
	`_lockmgr_disown
((
lk
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

125 
	#lockmgr_ªcur£d
(
lk
) \

126 ((
lk
)->
lk_ªcur£
 !0)

	)

127 
	#lockmgr_rw
(
lk
, 
Êags
, 
ûk
) \

128 
	`_lockmgr_¨gs_rw
((
lk
), (
Êags
), (
ûk
), 
LK_WMESG_DEFAULT
, \

129 
LK_PRIO_DEFAULT
, 
LK_TIMO_DEFAULT
, 
LOCK_FILE
, 
LOCK_LINE
)

	)

130 
	#lockmgr_waôîs
(
lk
) \

131 ((
lk
)->
lk_lock
 & 
LK_ALL_WAITERS
)

	)

132 #ifde‡
INVARIANTS


133 
	#lockmgr_as£π
(
lk
, 
wh©
) \

134 
	`_lockmgr_as£π
((
lk
), (
wh©
), 
LOCK_FILE
, 
LOCK_LINE
)

	)

136 
	#lockmgr_as£π
(
lk
, 
wh©
)

	)

142 
	#LK_INIT_MASK
 0x0000FF

	)

143 
	#LK_CANRECURSE
 0x000001

	)

144 
	#LK_NODUP
 0x000002

	)

145 
	#LK_NOPROFILE
 0x000004

	)

146 
	#LK_NOSHARE
 0x000008

	)

147 
	#LK_NOWITNESS
 0x000010

	)

148 
	#LK_QUIET
 0x000020

	)

149 
	#LK_ADAPTIVE
 0x000040

	)

150 
	#LK_IS_VNODE
 0x000080

	)

155 
	#LK_EATTR_MASK
 0x00FF00

	)

156 
	#LK_INTERLOCK
 0x000100

	)

157 
	#LK_NOWAIT
 0x000200

	)

158 
	#LK_RETRY
 0x000400

	)

159 
	#LK_SLEEPFAIL
 0x000800

	)

160 
	#LK_TIMELOCK
 0x001000

	)

161 
	#LK_NODDLKTREAT
 0x002000

	)

166 
	#LK_TYPE_MASK
 0xFF0000

	)

167 
	#LK_DOWNGRADE
 0x010000

	)

168 
	#LK_DRAIN
 0x020000

	)

169 
	#LK_EXCLOTHER
 0x040000

	)

170 
	#LK_EXCLUSIVE
 0x080000

	)

171 
	#LK_RELEASE
 0x100000

	)

172 
	#LK_SHARED
 0x200000

	)

173 
	#LK_UPGRADE
 0x400000

	)

174 
	#LK_TRYUPGRADE
 0x800000

	)

176 
	#LK_TOTAL_MASK
 (
LK_INIT_MASK
 | 
LK_EATTR_MASK
 | 
LK_TYPE_MASK
)

	)

181 
	#LK_WMESG_DEFAULT
 (
NULL
)

	)

182 
	#LK_PRIO_DEFAULT
 (0)

	)

183 
	#LK_TIMO_DEFAULT
 (0)

	)

188 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

189 
	#KA_LOCKED
 
LA_LOCKED


	)

190 
	#KA_SLOCKED
 
LA_SLOCKED


	)

191 
	#KA_XLOCKED
 
LA_XLOCKED


	)

192 
	#KA_UNLOCKED
 
LA_UNLOCKED


	)

193 
	#KA_RECURSED
 
LA_RECURSED


	)

194 
	#KA_NOTRECURSED
 
LA_NOTRECURSED


	)

	@/usr/include/sys/lockstat.h

33 #i‚def 
_SYS_LOCKSTAT_H


34 
	#_SYS_LOCKSTAT_H


	)

36 #ifdef 
_KERNEL


41 
	#LS_MTX_SPIN_LOCK_ACQUIRE
 0

	)

42 
	#LS_MTX_SPIN_UNLOCK_RELEASE
 1

	)

43 
	#LS_MTX_SPIN_LOCK_SPIN
 2

	)

48 
	#LS_MTX_LOCK_ACQUIRE
 3

	)

49 
	#LS_MTX_UNLOCK_RELEASE
 4

	)

50 
	#LS_MTX_LOCK_SPIN
 5

	)

51 
	#LS_MTX_LOCK_BLOCK
 6

	)

52 
	#LS_MTX_TRYLOCK_ACQUIRE
 7

	)

57 
	#LS_RW_RLOCK_ACQUIRE
 8

	)

58 
	#LS_RW_RUNLOCK_RELEASE
 9

	)

59 
	#LS_RW_WLOCK_ACQUIRE
 10

	)

60 
	#LS_RW_WUNLOCK_RELEASE
 11

	)

61 
	#LS_RW_RLOCK_SPIN
 12

	)

62 
	#LS_RW_RLOCK_BLOCK
 13

	)

63 
	#LS_RW_WLOCK_SPIN
 14

	)

64 
	#LS_RW_WLOCK_BLOCK
 15

	)

65 
	#LS_RW_TRYUPGRADE_UPGRADE
 16

	)

66 
	#LS_RW_DOWNGRADE_DOWNGRADE
 17

	)

71 
	#LS_SX_SLOCK_ACQUIRE
 18

	)

72 
	#LS_SX_SUNLOCK_RELEASE
 19

	)

73 
	#LS_SX_XLOCK_ACQUIRE
 20

	)

74 
	#LS_SX_XUNLOCK_RELEASE
 21

	)

75 
	#LS_SX_SLOCK_SPIN
 22

	)

76 
	#LS_SX_SLOCK_BLOCK
 23

	)

77 
	#LS_SX_XLOCK_SPIN
 24

	)

78 
	#LS_SX_XLOCK_BLOCK
 25

	)

79 
	#LS_SX_TRYUPGRADE_UPGRADE
 26

	)

80 
	#LS_SX_DOWNGRADE_DOWNGRADE
 27

	)

85 
	#LS_THREAD_LOCK_SPIN
 28

	)

93 
	#LS_NPROBES
 29

	)

95 
	#LS_MTX_LOCK
 "mtx_lock"

	)

96 
	#LS_MTX_UNLOCK
 "mtx_u∆ock"

	)

97 
	#LS_MTX_SPIN_LOCK
 "mtx_lock_•ö"

	)

98 
	#LS_MTX_SPIN_UNLOCK
 "mtx_u∆ock_•ö"

	)

99 
	#LS_MTX_TRYLOCK
 "mtx_åylock"

	)

100 
	#LS_RW_RLOCK
 "rw_æock"

	)

101 
	#LS_RW_WLOCK
 "rw_wlock"

	)

102 
	#LS_RW_RUNLOCK
 "rw_ru∆ock"

	)

103 
	#LS_RW_WUNLOCK
 "rw_wu∆ock"

	)

104 
	#LS_RW_TRYUPGRADE
 "rw_åy_upgøde"

	)

105 
	#LS_RW_DOWNGRADE
 "rw_downgøde"

	)

106 
	#LS_SX_SLOCK
 "sx_¶ock"

	)

107 
	#LS_SX_XLOCK
 "sx_xlock"

	)

108 
	#LS_SX_SUNLOCK
 "sx_su∆ock"

	)

109 
	#LS_SX_XUNLOCK
 "sx_xu∆ock"

	)

110 
	#LS_SX_TRYUPGRADE
 "sx_åy_upgøde"

	)

111 
	#LS_SX_DOWNGRADE
 "sx_downgøde"

	)

112 
	#LS_THREAD_LOCK
 "thªad_lock"

	)

114 
	#LS_ACQUIRE
 "acquúe"

	)

115 
	#LS_RELEASE
 "ªÀa£"

	)

116 
	#LS_SPIN
 "•ö"

	)

117 
	#LS_BLOCK
 "block"

	)

118 
	#LS_UPGRADE
 "upgøde"

	)

119 
	#LS_DOWNGRADE
 "downgøde"

	)

121 
	#LS_TYPE_ADAPTIVE
 "ad≠tive"

	)

122 
	#LS_TYPE_SPIN
 "•ö"

	)

123 
	#LS_TYPE_THREAD
 "thªad"

	)

124 
	#LS_TYPE_RW
 "rw"

	)

125 
	#LS_TYPE_SX
 "sx"

	)

127 
	#LSA_ACQUIRE
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_ACQUIRE
)

	)

128 
	#LSA_RELEASE
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_RELEASE
)

	)

129 
	#LSA_SPIN
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_SPIN
)

	)

130 
	#LSA_BLOCK
 (
LS_TYPE_ADAPTIVE
 "-" 
LS_BLOCK
)

	)

131 
	#LSS_ACQUIRE
 (
LS_TYPE_SPIN
 "-" 
LS_ACQUIRE
)

	)

132 
	#LSS_RELEASE
 (
LS_TYPE_SPIN
 "-" 
LS_RELEASE
)

	)

133 
	#LSS_SPIN
 (
LS_TYPE_SPIN
 "-" 
LS_SPIN
)

	)

134 
	#LSR_ACQUIRE
 (
LS_TYPE_RW
 "-" 
LS_ACQUIRE
)

	)

135 
	#LSR_RELEASE
 (
LS_TYPE_RW
 "-" 
LS_RELEASE
)

	)

136 
	#LSR_BLOCK
 (
LS_TYPE_RW
 "-" 
LS_BLOCK
)

	)

137 
	#LSR_SPIN
 (
LS_TYPE_RW
 "-" 
LS_SPIN
)

	)

138 
	#LSR_UPGRADE
 (
LS_TYPE_RW
 "-" 
LS_UPGRADE
)

	)

139 
	#LSR_DOWNGRADE
 (
LS_TYPE_RW
 "-" 
LS_DOWNGRADE
)

	)

140 
	#LSX_ACQUIRE
 (
LS_TYPE_SX
 "-" 
LS_ACQUIRE
)

	)

141 
	#LSX_RELEASE
 (
LS_TYPE_SX
 "-" 
LS_RELEASE
)

	)

142 
	#LSX_BLOCK
 (
LS_TYPE_SX
 "-" 
LS_BLOCK
)

	)

143 
	#LSX_SPIN
 (
LS_TYPE_SX
 "-" 
LS_SPIN
)

	)

144 
	#LSX_UPGRADE
 (
LS_TYPE_SX
 "-" 
LS_UPGRADE
)

	)

145 
	#LSX_DOWNGRADE
 (
LS_TYPE_SX
 "-" 
LS_DOWNGRADE
)

	)

146 
	#LST_SPIN
 (
LS_TYPE_THREAD
 "-" 
LS_SPIN
)

	)

152 
	glock_obje˘
;

153 
uöt32_t
 
lock°©_¥obem≠
[
LS_NPROBES
];

154 (*
	tlock°©_¥obe_func_t
)(
	tuöt32_t
, 
	tuöçå_t
 
	t¨g0
, uöçå_à
	t¨g1
,

155 
	tuöçå_t
 
	t¨g2
, uöçå_à
	t¨g3
, uöçå_à
	t¨g4
);

156 
lock°©_¥obe_func_t
 
lock°©_¥obe_func
;

157 
uöt64_t
 
	`lock°©_n£cs
(
lock_obje˘
 *);

158 
lock°©_íabÀd
;

160 #ifdef 
KDTRACE_HOOKS


164 
	#LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) do { \

165 
uöt32_t
 
id
; \

167 i‡((
id
 = 
lock°©_¥obem≠
[(
¥obe
)])) \

168 (*
lock°©_¥obe_func
)(
id
, (
uöçå_t
)(
Õ
), (
¨g1
), (
¨g2
), \

169 (
¨g3
), (
¨g4
)); \

170 
	}
} 0)

	)

172 
	#LOCKSTAT_RECORD
(
¥obe
, 
Õ
, 
¨g1
) \

173 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 0, 0, 0)

	)

175 
	#LOCKSTAT_RECORD0
(
¥obe
, 
Õ
) \

176 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 0, 0, 0, 0)

	)

178 
	#LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
¨g1
) \

179 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 0, 0, 0)

	)

181 
	#LOCKSTAT_RECORD2
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
) \

182 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 0, 0)

	)

184 
	#LOCKSTAT_RECORD3
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
) \

185 
	`LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 0)

	)

187 
	#LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
) do { \

188 
uöt32_t
 
id
; \

190 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
); \

191 i‡((
id
 = 
lock°©_¥obem≠
[(
¥obe
)])) \

192 (*
lock°©_¥obe_func
)(
id
, (
uöçå_t
)(
Õ
), 0, 0, 0, 0); \

193 } 0)

	)

195 
	#LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
) do { \

196 
uöt32_t
 
id
; \

198 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
); \

199 i‡((
id
 = 
lock°©_¥obem≠
[(
¥obe
)])) \

200 (*
lock°©_¥obe_func
)(
id
, (
uöçå_t
)(
Õ
), 0, 0, 0, 0); \

201 } 0)

	)

203 
	#LOCKSTAT_WRITER
 0

	)

204 
	#LOCKSTAT_READER
 1

	)

208 
	#LOCKSTAT_RECORD
(
¥obe
, 
Õ
, 
¨g1
)

	)

209 
	#LOCKSTAT_RECORD0
(
¥obe
, 
Õ
)

	)

210 
	#LOCKSTAT_RECORD1
(
¥obe
, 
Õ
, 
¨g1
)

	)

211 
	#LOCKSTAT_RECORD2
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
)

	)

212 
	#LOCKSTAT_RECORD3
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

213 
	#LOCKSTAT_RECORD4
(
¥obe
, 
Õ
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

215 
	#LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
¥obe
, 
Õ
, 
c
, 
wt
, 
f
, 
l
) \

216 
	`lock_¥ofûe_obèö_lock_suc˚ss
(&(
Õ
)->
lock_obje˘
, 
c
, 
wt
, 
f
, 
l
)

	)

218 
	#LOCKSTAT_PROFILE_RELEASE_LOCK
(
¥obe
, 
Õ
) \

219 
	`lock_¥ofûe_ªÀa£_lock
(&(
Õ
)->
lock_obje˘
)

	)

	@/usr/include/sys/osd.h

29 #i‚de‡
_SYS_OSD_H_


30 
	#_SYS_OSD_H_


	)

32 
	~<sys/queue.h
>

39 
	sosd
 {

40 
u_öt
 
	mosd_n¶Ÿs
;

41 **
	mosd_¶Ÿs
;

42 
LIST_ENTRY
(
osd
Ë
	mosd_√xt
;

45 #ifde‡
_KERNEL


47 
	#OSD_THREAD
 0

	)

48 
	#OSD_JAIL
 1

	)

49 
	#OSD_KHELP
 2

	)

51 
	#OSD_FIRST
 
OSD_THREAD


	)

52 
	#OSD_LAST
 
OSD_KHELP


	)

54 (*
	tosd_de°ru˘‹_t
)(*
	tvÆue
);

55 (*
	tosd_mëhod_t
)(*
	tobj
, *
	td©a
);

57 
	`osd_ªgi°î
(
u_öt
 
ty≥
, 
osd_de°ru˘‹_t
 
de°ru˘‹
,

58 
osd_mëhod_t
 *
mëhods
);

59 
	`osd_dîegi°î
(
u_öt
 
ty≥
, u_öà
¶Ÿ
);

61 
	`osd_£t
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
, *
vÆue
);

62 *
	`osd_ª£rve
(
u_öt
 
¶Ÿ
);

63 
	`osd_£t_ª£rved
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
, *
rsv
,

64 *
vÆue
);

65 
	`osd_‰ì_ª£rved
(*
rsv
);

66 *
	`osd_gë
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
);

67 
	`osd_dñ
(
u_öt
 
ty≥
, 
osd
 *osd, u_öà
¶Ÿ
);

68 
	`osd_ˇŒ
(
u_öt
 
ty≥
, u_öà
mëhod
, *
obj
, *
d©a
);

70 
	`osd_exô
(
u_öt
 
ty≥
, 
osd
 *osd);

72 
	#osd_thªad_ªgi°î
(
de°ru˘‹
) \

73 
	`osd_ªgi°î
(
OSD_THREAD
, (
de°ru˘‹
), 
NULL
)

	)

74 
	#osd_thªad_dîegi°î
(
¶Ÿ
) \

75 
	`osd_dîegi°î
(
OSD_THREAD
, (
¶Ÿ
))

	)

76 
	#osd_thªad_£t
(
td
, 
¶Ÿ
, 
vÆue
) \

77 
	`osd_£t
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
), (
vÆue
))

	)

78 
	#osd_thªad_£t_ª£rved
(
td
, 
¶Ÿ
, 
rsv
, 
vÆue
) \

79 
	`osd_£t_ª£rved
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
), (
rsv
), (
vÆue
))

	)

80 
	#osd_thªad_gë
(
td
, 
¶Ÿ
) \

81 
	`osd_gë
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
))

	)

82 
	#osd_thªad_dñ
(
td
, 
¶Ÿ
) do { \

83 
	`KASSERT
((
td
Ë=
cuπhªad
, ("Not curthread.")); \

84 
	`osd_dñ
(
OSD_THREAD
, &(
td
)->
td_osd
, (
¶Ÿ
)); \

85 
	}
} 0)

	)

86 
	#osd_thªad_ˇŒ
(
td
, 
mëhod
, 
d©a
) \

87 
	`osd_ˇŒ
(
OSD_THREAD
, (
mëhod
), (
td
), (
d©a
))

	)

88 
	#osd_thªad_exô
(
td
) \

89 
	`osd_exô
(
OSD_THREAD
, &(
td
)->
td_osd
)

	)

91 
	#osd_jaû_ªgi°î
(
de°ru˘‹
, 
mëhods
) \

92 
	`osd_ªgi°î
(
OSD_JAIL
, (
de°ru˘‹
), (
mëhods
))

	)

93 
	#osd_jaû_dîegi°î
(
¶Ÿ
) \

94 
	`osd_dîegi°î
(
OSD_JAIL
, (
¶Ÿ
))

	)

95 
	#osd_jaû_£t
(
¥
, 
¶Ÿ
, 
vÆue
) \

96 
	`osd_£t
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
), (
vÆue
))

	)

97 
	#osd_jaû_£t_ª£rved
(
¥
, 
¶Ÿ
, 
rsv
, 
vÆue
) \

98 
	`osd_£t_ª£rved
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
), (
rsv
), (
vÆue
))

	)

99 
	#osd_jaû_gë
(
¥
, 
¶Ÿ
) \

100 
	`osd_gë
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
))

	)

101 
	#osd_jaû_dñ
(
¥
, 
¶Ÿ
) \

102 
	`osd_dñ
(
OSD_JAIL
, &(
¥
)->
¥_osd
, (
¶Ÿ
))

	)

103 
	#osd_jaû_ˇŒ
(
¥
, 
mëhod
, 
d©a
) \

104 
	`osd_ˇŒ
(
OSD_JAIL
, (
mëhod
), (
¥
), (
d©a
))

	)

105 
	#osd_jaû_exô
(
¥
) \

106 
	`osd_exô
(
OSD_JAIL
, &(
¥
)->
¥_osd
)

	)

	@/usr/include/sys/priority.h

34 #i‚de‡
_SYS_PRIORITY_H_


35 
	#_SYS_PRIORITY_H_


	)

45 
	#PRI_ITHD
 1

	)

46 
	#PRI_REALTIME
 2

	)

47 
	#PRI_TIMESHARE
 3

	)

48 
	#PRI_IDLE
 4

	)

54 
	#PRI_FIFO_BIT
 8

	)

55 
	#PRI_FIFO
 (
PRI_FIFO_BIT
 | 
PRI_REALTIME
)

	)

57 
	#PRI_BASE
(
P
Ë((PË& ~
PRI_FIFO_BIT
)

	)

58 
	#PRI_IS_REALTIME
(
P
Ë(
	`PRI_BASE
(PË=
PRI_REALTIME
)

	)

59 
	#PRI_NEED_RR
(
P
Ë((PË!
PRI_FIFO
)

	)

80 
	#PRI_MIN
 (0Ë

	)

81 
	#PRI_MAX
 (255Ë

	)

83 
	#PRI_MIN_ITHD
 (
PRI_MIN
)

	)

84 
	#PRI_MAX_ITHD
 (
PRI_MIN_REALTIME
 - 1)

	)

86 
	#PI_REALTIME
 (
PRI_MIN_ITHD
 + 0)

	)

87 
	#PI_AV
 (
PRI_MIN_ITHD
 + 4)

	)

88 
	#PI_NET
 (
PRI_MIN_ITHD
 + 8)

	)

89 
	#PI_DISK
 (
PRI_MIN_ITHD
 + 12)

	)

90 
	#PI_TTY
 (
PRI_MIN_ITHD
 + 16)

	)

91 
	#PI_DULL
 (
PRI_MIN_ITHD
 + 20)

	)

92 
	#PI_SOFT
 (
PRI_MIN_ITHD
 + 24)

	)

93 
	#PI_SWI
(
x
Ë(
PI_SOFT
 + (xË* 
RQ_PPQ
)

	)

95 
	#PRI_MIN_REALTIME
 (48)

	)

96 
	#PRI_MAX_REALTIME
 (
PRI_MIN_KERN
 - 1)

	)

98 
	#PRI_MIN_KERN
 (80)

	)

99 
	#PRI_MAX_KERN
 (
PRI_MIN_TIMESHARE
 - 1)

	)

101 
	#PSWP
 (
PRI_MIN_KERN
 + 0)

	)

102 
	#PVM
 (
PRI_MIN_KERN
 + 4)

	)

103 
	#PINOD
 (
PRI_MIN_KERN
 + 8)

	)

104 
	#PRIBIO
 (
PRI_MIN_KERN
 + 12)

	)

105 
	#PVFS
 (
PRI_MIN_KERN
 + 16)

	)

106 
	#PZERO
 (
PRI_MIN_KERN
 + 20)

	)

107 
	#PSOCK
 (
PRI_MIN_KERN
 + 24)

	)

108 
	#PWAIT
 (
PRI_MIN_KERN
 + 28)

	)

109 
	#PLOCK
 (
PRI_MIN_KERN
 + 32)

	)

110 
	#PPAUSE
 (
PRI_MIN_KERN
 + 36)

	)

112 
	#PRI_MIN_TIMESHARE
 (120)

	)

113 
	#PRI_MAX_TIMESHARE
 (
PRI_MIN_IDLE
 - 1)

	)

115 
	#PUSER
 (
PRI_MIN_TIMESHARE
)

	)

117 
	#PRI_MIN_IDLE
 (224)

	)

118 
	#PRI_MAX_IDLE
 (
PRI_MAX
)

	)

120 #ifde‡
_KERNEL


122 
	#PRI_USER
 -2

	)

123 
	#PRI_UNCHANGED
 -1

	)

126 
	s¥i‹ôy
 {

127 
u_ch¨
 
	m¥i_˛ass
;

128 
u_ch¨
 
	m¥i_Àvñ
;

129 
u_ch¨
 
	m¥i_«tive
;

130 
u_ch¨
 
	m¥i_u£r
;

	@/usr/include/sys/rangelock.h

29 #i‚def 
_SYS_RANGELOCK_H


30 
	#_SYS_RANGELOCK_H


	)

32 
	~<sys/queue.h
>

34 
	#RL_LOCK_READ
 0x0001

	)

35 
	#RL_LOCK_WRITE
 0x0002

	)

36 
	#RL_LOCK_TYPE_MASK
 0x0003

	)

37 
	#RL_LOCK_GRANTED
 0x0004

	)

39 
	gæ_q_íåy
;

59 
	søngñock
 {

60 
TAILQ_HEAD
(, 
æ_q_íåy
Ë
	mæ_waôîs
;

61 
æ_q_íåy
 *
	mæ_cuºdï
;

64 #ifde‡
_KERNEL


66 
	gmtx
;

68 
øngñock_öô
(
øngñock
 *
lock
);

69 
øngñock_de°roy
(
øngñock
 *
lock
);

70 
øngñock_u∆ock
(
øngñock
 *
lock
, *
cookõ
,

71 
mtx
 *
ûk
);

72 *
øngñock_u∆ock_ønge
(
øngñock
 *
lock
, *
cookõ
,

73 
off_t
 
°¨t
, off_à
íd
, 
mtx
 *
ûk
);

74 *
øngñock_æock
(
øngñock
 *
lock
, 
off_t
 
°¨t
, off_à
íd
,

75 
mtx
 *
ûk
);

76 *
øngñock_wlock
(
øngñock
 *
lock
, 
off_t
 
°¨t
, off_à
íd
,

77 
mtx
 *
ûk
);

78 
æqíåy_‰ì
(
æ_q_íåy
 *
æqe
);

	@/usr/include/sys/refcount.h

29 #i‚de‡
__SYS_REFCOUNT_H__


30 
	#__SYS_REFCOUNT_H__


	)

32 
	~<sys/limôs.h
>

33 
	~<machöe/©omic.h
>

35 #ifde‡
_KERNEL


36 
	~<sys/sy°m.h
>

38 
	#KASSERT
(
exp
, 
msg
Ë

	)

41 
__ölöe
 

42 
	$ªfcou¡_öô
(vﬁ©ûê
u_öt
 *
cou¡
, u_öà
vÆue
)

45 *
cou¡
 = 
vÆue
;

46 
	}
}

48 
__ölöe
 

49 
	$ªfcou¡_acquúe
(vﬁ©ûê
u_öt
 *
cou¡
)

52 
	`KASSERT
(*
cou¡
 < 
UINT_MAX
, ("refcount %p overflowed", count));

53 
	`©omic_add_acq_öt
(
cou¡
, 1);

54 
	}
}

56 
__ölöe
 

57 
	$ªfcou¡_ªÀa£
(vﬁ©ûê
u_öt
 *
cou¡
)

59 
u_öt
 
ﬁd
;

62 
ﬁd
 = 
	`©omic_„tchadd_öt
(
cou¡
, -1);

63 
	`KASSERT
(
ﬁd
 > 0, ("√g©ivêªfcou¡ %p", 
cou¡
));

64  (
ﬁd
 == 1);

65 
	}
}

	@/usr/include/sys/resource.h

33 #i‚de‡
_SYS_RESOURCE_H_


34 
	#_SYS_RESOURCE_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_timevÆ.h
>

38 
	~<sys/_ty≥s.h
>

43 
	#PRIO_MIN
 -20

	)

44 
	#PRIO_MAX
 20

	)

46 
	#PRIO_PROCESS
 0

	)

47 
	#PRIO_PGRP
 1

	)

48 
	#PRIO_USER
 2

	)

57 
	#RUSAGE_SELF
 0

	)

58 
	#RUSAGE_CHILDREN
 -1

	)

59 
	#RUSAGE_THREAD
 1

	)

61 
	srußge
 {

62 
timevÆ
 
	mru_utime
;

63 
timevÆ
 
	mru_°ime
;

64 
	mru_maxrss
;

65 
	#ru_fú°
 
ru_ixrss


	)

66 
	mru_ixrss
;

67 
	mru_idrss
;

68 
	mru_i§ss
;

69 
	mru_möÊt
;

70 
	mru_majÊt
;

71 
	mru_nsw≠
;

72 
	mru_öblock
;

73 
	mru_oublock
;

74 
	mru_msg¢d
;

75 
	mru_msgrcv
;

76 
	mru_nsig«ls
;

77 
	mru_nvcsw
;

78 
	mru_nivcsw
;

79 
	#ru_œ°
 
ru_nivcsw


	)

82 #i‡
__BSD_VISIBLE


83 
	s__wrußge
 {

84 
rußge
 
	mwru_£lf
;

85 
rußge
 
	mwru_chûdªn
;

92 
	#RLIMIT_CPU
 0

	)

93 
	#RLIMIT_FSIZE
 1

	)

94 
	#RLIMIT_DATA
 2

	)

95 
	#RLIMIT_STACK
 3

	)

96 
	#RLIMIT_CORE
 4

	)

97 
	#RLIMIT_RSS
 5

	)

98 
	#RLIMIT_MEMLOCK
 6

	)

99 
	#RLIMIT_NPROC
 7

	)

100 
	#RLIMIT_NOFILE
 8

	)

101 
	#RLIMIT_SBSIZE
 9

	)

102 
	#RLIMIT_VMEM
 10

	)

103 
	#RLIMIT_AS
 
RLIMIT_VMEM


	)

104 
	#RLIMIT_NPTS
 11

	)

105 
	#RLIMIT_SWAP
 12

	)

107 
	#RLIM_NLIMITS
 13

	)

109 
	#RLIM_INFINITY
 ((
æim_t
)(((
uöt64_t
)1 << 63Ë- 1))

	)

117 #ifde‡
_RLIMIT_IDENT


118 c⁄° *
	gæimô_idít
[
RLIM_NLIMITS
] = {

135 #i‚de‡
_RLIM_T_DECLARED


136 
__æim_t
 
	tæim_t
;

137 
	#_RLIM_T_DECLARED


	)

140 
	sæimô
 {

141 
æim_t
 
	mæim_cur
;

142 
æim_t
 
	mæim_max
;

145 #i‡
__BSD_VISIBLE


147 
	s‹limô
 {

148 
__öt32_t
 
	mæim_cur
;

149 
__öt32_t
 
	mæim_max
;

152 
	slﬂdavg
 {

153 
__fix±_t
 
	mldavg
[3];

154 
	mfsˇÀ
;

157 
	#CP_USER
 0

	)

158 
	#CP_NICE
 1

	)

159 
	#CP_SYS
 2

	)

160 
	#CP_INTR
 3

	)

161 
	#CP_IDLE
 4

	)

162 
	#CPUSTATES
 5

	)

166 #ifde‡
_KERNEL


168 
lﬂdavg
 
avîu¬abÀ
;

169 
ªad_˝u_time
(*
˝_time
);

173 
__BEGIN_DECLS


175 
gë¥i‹ôy
(, );

176 
gëæimô
(, 
æimô
 *);

177 
gërußge
(, 
rußge
 *);

178 
£çri‹ôy
(, , );

179 
£ålimô
(, c⁄° 
æimô
 *);

180 
	g__END_DECLS


	@/usr/include/sys/rtprio.h

34 #i‚de‡
_SYS_RTPRIO_H_


35 
	#_SYS_RTPRIO_H_


	)

37 
	~<sys/¥i‹ôy.h
>

45 
	#RTP_PRIO_REALTIME
 
PRI_REALTIME


	)

46 
	#RTP_PRIO_NORMAL
 
PRI_TIMESHARE


	)

47 
	#RTP_PRIO_IDLE
 
PRI_IDLE


	)

52 
	#RTP_PRIO_FIFO_BIT
 
PRI_FIFO_BIT


	)

53 
	#RTP_PRIO_FIFO
 
PRI_FIFO


	)

54 
	#RTP_PRIO_BASE
(
P
Ë
	`PRI_BASE
(P)

	)

55 
	#RTP_PRIO_IS_REALTIME
(
P
Ë
	`PRI_IS_REALTIME
(P)

	)

56 
	#RTP_PRIO_NEED_RR
(
P
Ë
	`PRI_NEED_RR
(P)

	)

59 
	#RTP_PRIO_MIN
 0

	)

60 
	#RTP_PRIO_MAX
 31

	)

65 
	#RTP_LOOKUP
 0

	)

66 
	#RTP_SET
 1

	)

68 #i‚de‡
LOCORE


72 
	sπ¥io
 {

73 
u_sh‹t
 
	mty≥
;

74 
u_sh‹t
 
	m¥io
;

77 #ifde‡
_KERNEL


78 
	gthªad
;

79 
πp_to_¥i
(
π¥io
 *, 
thªad
 *);

80 
¥i_to_πp
(
thªad
 *, 
π¥io
 *);

84 #i‚de‡
_KERNEL


85 
	~<sys/cdefs.h
>

87 
__BEGIN_DECLS


88 
π¥io
(, 
pid_t
, rtprio *);

89 
π¥io_thªad
(, 
lwpid_t
, 
π¥io
 *);

90 
	g__END_DECLS


	@/usr/include/sys/runq.h

29 #i‚def 
_RUNQ_H_


30 
	#_RUNQ_H_


	)

32 
	~<machöe/runq.h
>

34 
	gthªad
;

40 
	#RQ_NQS
 (64Ë

	)

41 
	#RQ_PPQ
 (4Ë

	)

46 
TAILQ_HEAD
(
rqhód
, 
thªad
);

52 
	srqbôs
 {

53 
rqb_w‹d_t
 
	mrqb_bôs
[
RQB_LEN
];

60 
	srunq
 {

61 
rqbôs
 
	mrq_°©us
;

62 
rqhód
 
	mrq_queues
[
RQ_NQS
];

65 
runq_add
(
runq
 *, 
thªad
 *, );

66 
runq_add_¥i
(
runq
 *, 
thªad
 *, 
u_ch¨
, );

67 
runq_check
(
runq
 *);

68 
thªad
 *
runq_choo£
(
runq
 *);

69 
thªad
 *
runq_choo£_‰om
(
runq
 *, 
u_ch¨
);

70 
thªad
 *
runq_choo£_fuzz
(
runq
 *, );

71 
runq_öô
(
runq
 *);

72 
runq_ªmove
(
runq
 *, 
thªad
 *);

73 
runq_ªmove_idx
(
runq
 *, 
thªad
 *, 
u_ch¨
 *);

	@/usr/include/sys/select.h

32 #i‚de‡
_SYS_SELECT_H_


33 
	#_SYS_SELECT_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<sys/_ty≥s.h
>

38 
	~<sys/_sig£t.h
>

39 
	~<sys/_timevÆ.h
>

40 
	~<sys/time•ec.h
>

42 
	t__fd_mask
;

43 #i‡
__BSD_VISIBLE


44 
__fd_mask
 
	tfd_mask
;

47 #i‚de‡
_SIGSET_T_DECLARED


48 
	#_SIGSET_T_DECLARED


	)

49 
__sig£t_t
 
	tsig£t_t
;

58 #i‚def 
FD_SETSIZE


59 
	#FD_SETSIZE
 1024U

	)

62 
	#_NFDBITS
 ((
__fd_mask
Ë* 8Ë

	)

63 #i‡
__BSD_VISIBLE


64 
	#NFDBITS
 
_NFDBITS


	)

67 #i‚de‡
_howm™y


68 
	#_howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

71 
	sfd_£t
 {

72 
__fd_mask
 
	m__fds_bôs
[
_howm™y
(
FD_SETSIZE
, 
_NFDBITS
)];

73 } 
	tfd_£t
;

74 #i‡
__BSD_VISIBLE


75 
	#fds_bôs
 
__fds_bôs


	)

78 
	#__fd£t_mask
(
n
Ë((
__fd_mask
)1 << (“Ë% 
_NFDBITS
))

	)

79 
	#FD_CLR
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] &~
	`__fd£t_mask
“))

	)

80 #i‡
__BSD_VISIBLE


81 
	#FD_COPY
(
f
, 
t
Ë()(*—Ë*(f))

	)

83 
	#FD_ISSET
(
n
, 
p
Ë((’)->
__fds_bôs
[“)/
_NFDBITS
] & 
	`__fd£t_mask
“)Ë!0)

	)

84 
	#FD_SET
(
n
, 
p
Ë(’)->
__fds_bôs
[“)/
_NFDBITS
] |
	`__fd£t_mask
“))

	)

85 
	#FD_ZERO
(
p
) do { \

86 
fd_£t
 *
_p
; \

87 
__size_t
 
_n
; \

89 
_p
 = (
p
); \

90 
_n
 = 
	`_howm™y
(
FD_SETSIZE
, 
_NFDBITS
); \

91 
_n
 > 0) \

92 
_p
->
__fds_bôs
[--
_n
] = 0; \

93 } 0)

	)

95 #i‚de‡
_KERNEL


97 
__BEGIN_DECLS


98 
p£À˘
(, 
fd_£t
 *
__ª°ri˘
, fd_set *__restrict, fd_set *__restrict,

99 c⁄° 
time•ec
 *
__ª°ri˘
, c⁄° 
sig£t_t
 *__restrict);

100 #i‚de‡
_SELECT_DECLARED


101 
	#_SELECT_DECLARED


	)

103 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

105 
	g__END_DECLS


	@/usr/include/sys/selinfo.h

33 #i‚de‡
_SYS_SELINFO_H_


34 
	#_SYS_SELINFO_H_


	)

36 
	~<sys/evít.h
>

38 
	g£lfd
;

39 
TAILQ_HEAD
(
£lfdli°
, 
£lfd
);

45 
	s£löfo
 {

46 
£lfdli°
 
	msi_tdli°
;

47 
k∆i°
 
	msi_nŸe
;

48 
mtx
 *
	msi_mtx
;

51 
	#SEL_WAITING
(
si
Ë(!
	`TAILQ_EMPTY
(&(si)->
si_tdli°
))

	)

53 #ifde‡
_KERNEL


54 
£ldøö
(
£löfo
 *
sù
);

55 
£Ãec‹d
(
thªad
 *
£À˘‹
, 
£löfo
 *
sù
);

56 
£lwakeup
(
£löfo
 *
sù
);

57 
£lwakeuµri
(
£löfo
 *
sù
, 
¥i
);

58 
£…dföi
(
thªad
 *
td
);

	@/usr/include/sys/sigio.h

33 #i‚de‡
_SYS_SIGIO_H_


34 
	#_SYS_SIGIO_H_


	)

46 
	ssigio
 {

48 
¥oc
 *
	msiu_¥oc
;

49 
pgΩ
 *
	msiu_pgΩ
;

50 } 
	msio_u
;

51 
SLIST_ENTRY
(
sigio
Ë
	msio_pgsigio
;

52 
sigio
 **
	msio_myªf
;

54 
u¸ed
 *
	msio_u¸ed
;

55 
pid_t
 
	msio_pgid
;

57 
	#sio_¥oc
 
sio_u
.
siu_¥oc


	)

58 
	#sio_pgΩ
 
sio_u
.
siu_pgΩ


	)

60 
SLIST_HEAD
(
sigiﬁ°
, 
sigio
);

62 
pid_t
 
fgëown
(
sigio
 **
sigi›
);

63 
f£town
(
pid_t
 
pgid
, 
sigio
 **
sigi›
);

64 
fun£town
(
sigio
 **
sigi›
);

65 
fun£tow∆°
(
sigiﬁ°
 *sigiolst);

	@/usr/include/sys/signal.h

38 #i‚de‡
_SYS_SIGNAL_H_


39 
	#_SYS_SIGNAL_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_ty≥s.h
>

43 
	~<sys/_sig£t.h
>

45 
	~<machöe/_limôs.h
>

46 
	~<machöe/sig«l.h
>

51 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


52 
	#SIGHUP
 1

	)

54 
	#SIGINT
 2

	)

55 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


56 
	#SIGQUIT
 3

	)

58 
	#SIGILL
 4

	)

59 #i‡
__XSI_VISIBLE


60 
	#SIGTRAP
 5

	)

62 
	#SIGABRT
 6

	)

63 #i‡
__BSD_VISIBLE


64 
	#SIGIOT
 
SIGABRT


	)

65 
	#SIGEMT
 7

	)

67 
	#SIGFPE
 8

	)

68 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


69 
	#SIGKILL
 9

	)

71 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


72 
	#SIGBUS
 10

	)

74 
	#SIGSEGV
 11

	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIGSYS
 12

	)

78 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


79 
	#SIGPIPE
 13

	)

80 
	#SIGALRM
 14

	)

82 
	#SIGTERM
 15

	)

83 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


84 
	#SIGURG
 16

	)

86 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


87 
	#SIGSTOP
 17

	)

88 
	#SIGTSTP
 18

	)

89 
	#SIGCONT
 19

	)

90 
	#SIGCHLD
 20

	)

91 
	#SIGTTIN
 21

	)

92 
	#SIGTTOU
 22

	)

94 #i‡
__BSD_VISIBLE


95 
	#SIGIO
 23

	)

97 #i‡
__XSI_VISIBLE


98 
	#SIGXCPU
 24

	)

99 
	#SIGXFSZ
 25

	)

100 
	#SIGVTALRM
 26

	)

101 
	#SIGPROF
 27

	)

103 #i‡
__BSD_VISIBLE


104 
	#SIGWINCH
 28

	)

105 
	#SIGINFO
 29

	)

107 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


108 
	#SIGUSR1
 30

	)

109 
	#SIGUSR2
 31

	)

111 #i‡
__BSD_VISIBLE


112 
	#SIGTHR
 32

	)

113 
	#SIGLWP
 
SIGTHR


	)

114 
	#SIGLIBRT
 33

	)

117 
	#SIGRTMIN
 65

	)

118 
	#SIGRTMAX
 126

	)

120 
	#SIG_DFL
 ((
__sigh™dÀr_t
 *)0)

	)

121 
	#SIG_IGN
 ((
__sigh™dÀr_t
 *)1)

	)

122 
	#SIG_ERR
 ((
__sigh™dÀr_t
 *)-1)

	)

124 
	#SIG_HOLD
 ((
__sigh™dÀr_t
 *)3)

	)

142 
	t__sigh™dÀr_t
();

144 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


145 #i‚de‡
_SIGSET_T_DECLARED


146 
	#_SIGSET_T_DECLARED


	)

147 
__sig£t_t
 
	tsig£t_t
;

151 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE
 >= 500

152 
	usigvÆ
 {

154 
	msivÆ_öt
;

155 *
	msivÆ_±r
;

157 
	msigvÆ_öt
;

158 *
	msigvÆ_±r
;

162 #i‡
__POSIX_VISIBLE
 >= 199309

163 
	ssigevít
 {

164 
	msigev_nŸify
;

165 
	msigev_signo
;

166 
sigvÆ
 
	msigev_vÆue
;

168 
__lwpid_t
 
	m_thªadid
;

170 (*
	m_fun˘i⁄
)(
	msigvÆ
);

171 *
	m_©åibuã
;

172 } 
	m_sigev_thªad
;

173 
	m_kevít_Êags
;

174 
	m__•¨e__
[8];

175 } 
	m_sigev_un
;

178 #i‡
__BSD_VISIBLE


179 
	#sigev_nŸify_kqueue
 
sigev_signo


	)

180 
	#sigev_nŸify_kevít_Êags
 
_sigev_un
.
_kevít_Êags


	)

181 
	#sigev_nŸify_thªad_id
 
_sigev_un
.
_thªadid


	)

183 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

184 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

186 
	#SIGEV_NONE
 0

	)

187 
	#SIGEV_SIGNAL
 1

	)

188 
	#SIGEV_THREAD
 2

	)

189 #i‡
__BSD_VISIBLE


190 
	#SIGEV_KEVENT
 3

	)

191 
	#SIGEV_THREAD_ID
 4

	)

195 #i‡
__POSIX_VISIBLE
 >199309 || 
__XSI_VISIBLE


196 
	s__sigöfo
 {

197 
	msi_signo
;

198 
	msi_î∫o
;

205 
	msi_code
;

206 
__pid_t
 
	msi_pid
;

207 
__uid_t
 
	msi_uid
;

208 
	msi_°©us
;

209 *
	msi_addr
;

210 
sigvÆ
 
	msi_vÆue
;

213 
	m_å≠no
;

214 } 
	m_Áu…
;

216 
	m_timîid
;

217 
	m_ovîrun
;

218 } 
	m_timî
;

220 
	m_mqd
;

221 } 
	m_mesgq
;

223 
	m_b™d
;

224 } 
	m_pﬁl
;

226 
	m__•¨e1__
;

227 
	m__•¨e2__
[7];

228 } 
	m__•¨e__
;

229 } 
	m_ªas⁄
;

230 } 
	tsigöfo_t
;

232 
	#si_å≠no
 
_ªas⁄
.
_Áu…
.
_å≠no


	)

233 
	#si_timîid
 
_ªas⁄
.
_timî
.
_timîid


	)

234 
	#si_ovîrun
 
_ªas⁄
.
_timî
.
_ovîrun


	)

235 
	#si_mqd
 
_ªas⁄
.
_mesgq
.
_mqd


	)

236 
	#si_b™d
 
_ªas⁄
.
_pﬁl
.
_b™d


	)

240 
	#ILL_ILLOPC
 1

	)

241 
	#ILL_ILLOPN
 2

	)

242 
	#ILL_ILLADR
 3

	)

243 
	#ILL_ILLTRP
 4

	)

244 
	#ILL_PRVOPC
 5

	)

245 
	#ILL_PRVREG
 6

	)

246 
	#ILL_COPROC
 7

	)

247 
	#ILL_BADSTK
 8

	)

250 
	#BUS_ADRALN
 1

	)

251 
	#BUS_ADRERR
 2

	)

252 
	#BUS_OBJERR
 3

	)

255 
	#SEGV_MAPERR
 1

	)

256 
	#SEGV_ACCERR
 2

	)

260 
	#FPE_INTOVF
 1

	)

261 
	#FPE_INTDIV
 2

	)

262 
	#FPE_FLTDIV
 3

	)

263 
	#FPE_FLTOVF
 4

	)

264 
	#FPE_FLTUND
 5

	)

265 
	#FPE_FLTRES
 6

	)

266 
	#FPE_FLTINV
 7

	)

267 
	#FPE_FLTSUB
 8

	)

270 
	#TRAP_BRKPT
 1

	)

271 
	#TRAP_TRACE
 2

	)

272 
	#TRAP_DTRACE
 3

	)

275 
	#CLD_EXITED
 1

	)

276 
	#CLD_KILLED
 2

	)

278 
	#CLD_DUMPED
 3

	)

280 
	#CLD_TRAPPED
 4

	)

281 
	#CLD_STOPPED
 5

	)

282 
	#CLD_CONTINUED
 6

	)

285 
	#POLL_IN
 1

	)

286 
	#POLL_OUT
 2

	)

287 
	#POLL_MSG
 3

	)

288 
	#POLL_ERR
 4

	)

289 
	#POLL_PRI
 5

	)

290 
	#POLL_HUP
 6

	)

294 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


295 
	g__sigöfo
;

300 
	ssiga˘i⁄
 {

302 (*
	m__ß_h™dÀr
)();

303 (*
	m__ß_siga˘i⁄
)(, 
	m__sigöfo
 *, *);

304 } 
	m__siga˘i⁄_u
;

305 
	mß_Êags
;

306 
sig£t_t
 
	mß_mask
;

309 
	#ß_h™dÀr
 
__siga˘i⁄_u
.
__ß_h™dÀr


	)

312 #i‡
__XSI_VISIBLE


314 
	#ß_siga˘i⁄
 
__siga˘i⁄_u
.
__ß_siga˘i⁄


	)

317 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


318 
	#SA_NOCLDSTOP
 0x0008

	)

321 #i‡
__XSI_VISIBLE


322 
	#SA_ONSTACK
 0x0001

	)

323 
	#SA_RESTART
 0x0002

	)

324 
	#SA_RESETHAND
 0x0004

	)

325 
	#SA_NODEFER
 0x0010

	)

326 
	#SA_NOCLDWAIT
 0x0020

	)

327 
	#SA_SIGINFO
 0x0040

	)

330 #i‡
__BSD_VISIBLE


331 
	#NSIG
 32

	)

334 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


335 
	#SI_NOINFO
 0

	)

336 
	#SI_USER
 0x10001

	)

337 
	#SI_QUEUE
 0x10002

	)

338 
	#SI_TIMER
 0x10003

	)

340 
	#SI_ASYNCIO
 0x10004

	)

342 
	#SI_MESGQ
 0x10005

	)

344 
	#SI_KERNEL
 0x10006

	)

345 
	#SI_LWP
 0x10007

	)

347 #i‡
__BSD_VISIBLE


348 
	#SI_UNDEFINED
 0

	)

351 #i‡
__BSD_VISIBLE


352 
__sigh™dÀr_t
 *
	tsig_t
;

353 
	t__sigöfoh™dÀr_t
(, 
	t__sigöfo
 *, *);

356 #i‡
__XSI_VISIBLE


360 #i‡
__BSD_VISIBLE


361 
	ssigÆt°ack
 {

365 *
	mss_•
;

366 
__size_t
 
	mss_size
;

367 
	mss_Êags
;

368 } 
	t°ack_t
;

370 
	#SS_ONSTACK
 0x0001

	)

371 
	#SS_DISABLE
 0x0004

	)

372 
	#MINSIGSTKSZ
 
__MINSIGSTKSZ


	)

373 
	#SIGSTKSZ
 (
MINSIGSTKSZ
 + 32768Ë

	)

376 #i‡
__BSD_VISIBLE


381 
	ssigvec
 {

382 
__sigh™dÀr_t
 *
	msv_h™dÀr
;

383 
	msv_mask
;

384 
	msv_Êags
;

387 
	#SV_ONSTACK
 
SA_ONSTACK


	)

388 
	#SV_INTERRUPT
 
SA_RESTART


	)

389 
	#SV_RESETHAND
 
SA_RESETHAND


	)

390 
	#SV_NODEFER
 
SA_NODEFER


	)

391 
	#SV_NOCLDSTOP
 
SA_NOCLDSTOP


	)

392 
	#SV_SIGINFO
 
SA_SIGINFO


	)

393 
	#sv_⁄°ack
 
sv_Êags


	)

397 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
) && \

398 !
	$deföed
(
__i386__
)

399 
	sosigc⁄ãxt
 {

400 
_nŸ_u£d
;

404 #i‡
__XSI_VISIBLE


408 
	ssig°ack
 {

410 *
ss_•
;

411 
ss_⁄°ack
;

415 #i‡
__BSD_VISIBLE
 || 
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE <= 200112

420 
	#sigmask
(
m
Ë(1 << ((m)-1))

	)

423 #i‡
__BSD_VISIBLE


424 
	#BADSIG
 
SIG_ERR


	)

427 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


431 
	#SIG_BLOCK
 1

	)

432 
	#SIG_UNBLOCK
 2

	)

433 
	#SIG_SETMASK
 3

	)

440 
__BEGIN_DECLS


441 
__sigh™dÀr_t
 *
	`sig«l
(, __sighandler_t *);

442 
__END_DECLS


	@/usr/include/sys/signalvar.h

33 #i‚de‡
_SYS_SIGNALVAR_H_


34 
	#_SYS_SIGNALVAR_H_


	)

36 
	~<sys/queue.h
>

37 
	~<sys/_lock.h
>

38 
	~<sys/_muãx.h
>

39 
	~<sys/sig«l.h
>

52 
	ssiga˘s
 {

53 
sig_t
 
	mps_siga˘
[
_SIG_MAXSIG
];

54 
sig£t_t
 
	mps_ˇtchmask
[
_SIG_MAXSIG
];

55 
sig£t_t
 
	mps_sig⁄°ack
;

56 
sig£t_t
 
	mps_sigöå
;

57 
sig£t_t
 
	mps_sigª£t
;

58 
sig£t_t
 
	mps_signode„r
;

59 
sig£t_t
 
	mps_sigöfo
;

60 
sig£t_t
 
	mps_sigign‹e
;

61 
sig£t_t
 
	mps_sigˇtch
;

62 
sig£t_t
 
	mps_‰ìbsd4
;

63 
sig£t_t
 
	mps_osig£t
;

64 
sig£t_t
 
	mps_u£πømp
;

65 
	mps_Êag
;

66 
u_öt
 
	mps_ªf˙t
;

67 
mtx
 
	mps_mtx
;

70 
	#PS_NOCLDWAIT
 0x0001

	)

71 
	#PS_NOCLDSTOP
 0x0002

	)

72 
	#PS_CLDSIGIGN
 0x0004

	)

74 #ifde‡
_KERNEL


76 #ifde‡
COMPAT_43


78 
osigc⁄ãxt
 
	msi_sc
;

79 
	msi_signo
;

80 
	msi_code
;

81 
sigvÆ
 
	msi_vÆue
;

82 } 
	tosigöfo_t
;

84 
	sosiga˘i⁄
 {

86 (*
	m__ß_h™dÀr
)();

87 (*
	m__ß_siga˘i⁄
)(, 
	mosigöfo_t
 *, *);

88 } 
	m__siga˘i⁄_u
;

89 
osig£t_t
 
	mß_mask
;

90 
	mß_Êags
;

93 
	t__osigöfoh™dÀr_t
(, 
	tosigöfo_t
 *, *);

97 
	#SIG_CATCH
 ((
__sigh™dÀr_t
 *)2)

	)

103 
	#SIGACTION
(
p
, 
sig
Ë’->
p_siga˘s
->
ps_siga˘
[
	`_SIG_IDX
(sig)])

	)

110 
	#SIGADDSET
(
£t
, 
signo
) \

111 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] |
	`_SIG_BIT
(signo))

	)

113 
	#SIGDELSET
(
£t
, 
signo
) \

114 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] &~
	`_SIG_BIT
(signo))

	)

116 
	#SIGEMPTYSET
(
£t
) \

118 
__i
; \

119 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

120 (
£t
).
__bôs
[
__i
] = 0; \

121 } 0)

	)

123 
	#SIGFILLSET
(
£t
) \

125 
__i
; \

126 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

127 (
£t
).
__bôs
[
__i
] = ~0U; \

128 } 0)

	)

130 
	#SIGISMEMBER
(
£t
, 
signo
) \

131 ((
£t
).
__bôs
[
	`_SIG_WORD
(
signo
)] & 
	`_SIG_BIT
(signo))

	)

133 
	#SIGISEMPTY
(
£t
Ë(
	`__sigi£m±y
(&(£t)))

	)

134 
	#SIGNOTEMPTY
(
£t
Ë(!
	`__sigi£m±y
(&(£t)))

	)

136 
	#SIGSETEQ
(
£t1
, 
£t2
Ë(
	`__sig£ãq
(&(£t1), &(£t2)))

	)

137 
	#SIGSETNEQ
(
£t1
, 
£t2
Ë(!
	`__sig£ãq
(&(£t1), &(£t2)))

	)

139 
	#SIGSETOR
(
£t1
, 
£t2
) \

141 
__i
; \

142 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

143 (
£t1
).
__bôs
[
__i
] |(
£t2
).__bits[__i]; \

144 } 0)

	)

146 
	#SIGSETAND
(
£t1
, 
£t2
) \

148 
__i
; \

149 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

150 (
£t1
).
__bôs
[
__i
] &(
£t2
).__bits[__i]; \

151 } 0)

	)

153 
	#SIGSETNAND
(
£t1
, 
£t2
) \

155 
__i
; \

156 
__i
 = 0; __ò< 
_SIG_WORDS
; __i++) \

157 (
£t1
).
__bôs
[
__i
] &~(
£t2
).__bits[__i]; \

158 } 0)

	)

160 
	#SIGSETLO
(
£t1
, 
£t2
Ë((£t1).
__bôs
[0] = (£t2).__bôs[0])

	)

161 
	#SIGSETOLD
(
£t
, 
o£t
Ë((£t).
__bôs
[0] = (o£t))

	)

163 
	#SIG_CANTMASK
(
£t
) \

164 
	`SIGDELSET
(
£t
, 
SIGKILL
), SIGDELSET(£t, 
SIGSTOP
)

	)

166 
	#SIG_STOPSIGMASK
(
£t
) \

167 
	`SIGDELSET
(
£t
, 
SIGSTOP
), SIGDELSET(£t, 
SIGTSTP
), \

168 
	`SIGDELSET
(
£t
, 
SIGTTIN
), SIGDELSET(£t, 
SIGTTOU
)

	)

170 
	#SIG_CONTSIGMASK
(
£t
) \

171 
	`SIGDELSET
(
£t
, 
SIGCONT
)

	)

173 
	#sigˇ¡mask
 (
	`sigmask
(
SIGKILL
Ë| sigmask(
SIGSTOP
))

	)

175 
	#SIG2OSIG
(
sig
, 
osig
Ë(osig = (sig).
__bôs
[0])

	)

176 
	#OSIG2SIG
(
osig
, 
sig
Ë
	`SIGEMPTYSET
(sig); (sig).
__bôs
[0] = 
	)
osig

178 
__ölöe
 

179 
	$__sigi£m±y
(
sig£t_t
 *
£t
)

181 
i
;

183 
i
 = 0; i < 
_SIG_WORDS
; i++) {

184 i‡(
£t
->
__bôs
[
i
])

188 
	}
}

190 
__ölöe
 

191 
	$__sig£ãq
(
sig£t_t
 *
£t1
, sig£t_à*
£t2
)

193 
i
;

195 
i
 = 0; i < 
_SIG_WORDS
; i++) {

196 i‡(
£t1
->
__bôs
[
i
] !
£t2
->__bits[i])

200 
	}
}

202 
	sosigevít
 {

203 
	msigev_nŸify
;

205 
	m__sigev_signo
;

206 
	m__sigev_nŸify_kqueue
;

207 } 
	m__sigev_u
;

208 
sigvÆ
 
	msigev_vÆue
;

211 
	sksigöfo
 {

212 
TAILQ_ENTRY
(
ksigöfo
Ë
	mksi_lök
;

213 
sigöfo_t
 
	mksi_öfo
;

214 
	mksi_Êags
;

215 
sigqueue
 *
	mksi_sigq
;

216 } 
	tksigöfo_t
;

218 
	#ksi_signo
 
ksi_öfo
.
si_signo


	)

219 
	#ksi_î∫o
 
ksi_öfo
.
si_î∫o


	)

220 
	#ksi_code
 
ksi_öfo
.
si_code


	)

221 
	#ksi_pid
 
ksi_öfo
.
si_pid


	)

222 
	#ksi_uid
 
ksi_öfo
.
si_uid


	)

223 
	#ksi_°©us
 
ksi_öfo
.
si_°©us


	)

224 
	#ksi_addr
 
ksi_öfo
.
si_addr


	)

225 
	#ksi_vÆue
 
ksi_öfo
.
si_vÆue


	)

226 
	#ksi_b™d
 
ksi_öfo
.
si_b™d


	)

227 
	#ksi_å≠no
 
ksi_öfo
.
si_å≠no


	)

228 
	#ksi_ovîrun
 
ksi_öfo
.
si_ovîrun


	)

229 
	#ksi_timîid
 
ksi_öfo
.
si_timîid


	)

230 
	#ksi_mqd
 
ksi_öfo
.
si_mqd


	)

233 
	#KSI_TRAP
 0x01

	)

234 
	#KSI_EXT
 0x02

	)

235 
	#KSI_INS
 0x04

	)

236 
	#KSI_SIGQ
 0x08

	)

237 
	#KSI_HEAD
 0x10

	)

238 
	#KSI_COPYMASK
 (
KSI_TRAP
|
KSI_SIGQ
)

	)

240 
	#KSI_ONQ
(
ksi
Ë((ksi)->
ksi_sigq
 !
NULL
)

	)

242 
	ssigqueue
 {

243 
sig£t_t
 
	msq_sig«ls
;

244 
sig£t_t
 
	msq_kûl
;

245 
TAILQ_HEAD
(, 
ksigöfo
Ë
	msq_li°
;

246 
¥oc
 *
	msq_¥oc
;

247 
	msq_Êags
;

248 } 
	tsigqueue_t
;

251 
	#SQ_INIT
 0x01

	)

253 #ifde‡
_KERNEL


256 
	#SIGPENDING
(
td
) \

257 ((!
	`SIGISEMPTY
((
td
)->
td_sigli°
) && \

258 !
	`sig£tmasked
(&(
td
)->
td_sigli°
, &—d)->
td_sigmask
)) || \

259 (!
	`SIGISEMPTY
((
td
)->
td_¥oc
->
p_sigli°
) && \

260 !
	`sig£tmasked
(&(
td
)->
td_¥oc
->
p_sigli°
, &—d)->
td_sigmask
)))

	)

266 
__ölöe
 

267 
	$sig£tmasked
(
sig£t_t
 *
£t
, sig£t_à*
mask
)

269 
i
;

271 
i
 = 0; i < 
_SIG_WORDS
; i++) {

272 i‡(
£t
->
__bôs
[
i
] & ~
mask
->__bits[i])

276 
	}
}

278 
	#ksigöfo_öô
(
ksi
) \

280 
	`bzîo
(
ksi
, (
ksigöfo_t
)); \

281 } 0)

	)

283 
	#ksigöfo_öô_å≠
(
ksi
) \

285 
ksigöfo_t
 *
kp
 = 
ksi
; \

286 
	`bzîo
(
kp
, (
ksigöfo_t
)); \

287 
kp
->
ksi_Êags
 |
KSI_TRAP
; \

288 } 0)

	)

290 
__ölöe
 

291 
	$ksigöfo_c›y
(
ksigöfo_t
 *
§c
, ksigöfo_à*
d°
)

293 (
d°
)->
ksi_öfo
 = 
§c
->ksi_info;

294 (
d°
)->
ksi_Êags
 = (
§c
->ksi_Êag†& 
KSI_COPYMASK
);

295 
	}
}

297 
__ölöe
 

298 
	$ksigöfo_£t_sigev
(
ksigöfo_t
 *
d°
, 
sigevít
 *
sigev
)

300 
d°
->
ksi_signo
 = 
sigev
->
sigev_signo
;

301 
d°
->
ksi_vÆue
 = 
sigev
->
sigev_vÆue
;

302 
	}
}

304 
	gpgΩ
;

305 
	g¥oc
;

306 
	gsigio
;

307 
	gthªad
;

313 
	#SIGIO_LOCK
(Ë
	`mtx_lock
(&
sigio_lock
)

	)

314 
	#SIGIO_TRYLOCK
(Ë
	`mtx_åylock
(&
sigio_lock
)

	)

315 
	#SIGIO_UNLOCK
(Ë
	`mtx_u∆ock
(&
sigio_lock
)

	)

316 
	#SIGIO_LOCKED
(Ë
	`mtx_ow√d
(&
sigio_lock
)

	)

317 
	#SIGIO_ASSERT
(
ty≥
Ë
	`mtx_as£π
(&
sigio_lock
,Åy≥)

	)

319 
mtx
 
sigio_lock
;

322 
	#SIGPROCMASK_OLD
 0x0001

	)

323 
	#SIGPROCMASK_PROC_LOCKED
 0x0002

	)

324 
	#SIGPROCMASK_PS_LOCKED
 0x0004

	)

326 
cursig
(
thªad
 *
td
);

327 
sigde„r°›
();

328 
sigÆlow°›
();

329 
execsigs
(
¥oc
 *
p
);

330 
gsig«l
(
pgid
, 
sig
, 
ksigöfo_t
 *
ksi
);

331 
kûÕroc
(
¥oc
 *
p
, *
why
);

332 
ksigöfo_t
 * 
ksigöfo_Æloc
(
waô
);

333 
ksigöfo_‰ì
(
ksigöfo_t
 *
ksi
);

334 
pksig«l
(
¥oc
 *
p
, 
sig
, 
ksigöfo_t
 *
ksi
);

335 
pgsigio
(
sigio
 **
sigi›
, 
sig
, 
check˘ty
);

336 
pgsig«l
(
pgΩ
 *pgΩ, 
sig
, 
check˘ty
, 
ksigöfo_t
 *
ksi
);

337 
po°sig
(
sig
);

338 
kîn_psig«l
(
¥oc
 *
p
, 
sig
);

339 
±ø˚°›
(
thªad
 *
td
, 
sig
);

340 
£ndsig
(
sig_t
 
ˇtchî
, 
ksigöfo_t
 *
ksi
, 
sig£t_t
 *
ªtmask
);

341 
siga˘s
 *
siga˘s_Æloc
();

342 
siga˘s_c›y
(
siga˘s
 *
de°
, siga˘†*
§c
);

343 
siga˘s_‰ì
(
siga˘s
 *
ps
);

344 
siga˘s
 *
siga˘s_hﬁd
(siga˘†*
ps
);

345 
siga˘s_sh¨ed
(
siga˘s
 *
ps
);

346 
	$sigexô
(
thªad
 *
td
, 
sig
Ë
__dód2
;

347 
	`sigev_födtd
(
¥oc
 *
p
, 
sigevít
 *
sigev
, 
thªad
 **);

348 
	`sig_ffs
(
sig£t_t
 *
£t
);

349 
	`sigöô
(
¥oc
 *
p
);

350 
	`signŸify
(
thªad
 *
td
);

351 
	`sigqueue_dñëe
(
sigqueue
 *
queue
, 
sig
);

352 
	`sigqueue_dñëe_¥oc
(
¥oc
 *
p
, 
sig
);

353 
	`sigqueue_Êush
(
sigqueue
 *
queue
);

354 
	`sigqueue_öô
(
sigqueue
 *
queue
, 
¥oc
 *
p
);

355 
	`sigqueue_èke
(
ksigöfo_t
 *
ksi
);

356 
	`tdksig«l
(
thªad
 *
td
, 
sig
, 
ksigöfo_t
 *
ksi
);

357 
	`td£ndsig«l
(
¥oc
 *
p
, 
thªad
 *
td
, 
sig
,

358 
ksigöfo_t
 *
ksi
);

359 
	`tdsig˛ónup
(
thªad
 *
td
);

360 
	`tdsig«l
(
thªad
 *
td
, 
sig
);

361 
	`å≠sig«l
(
thªad
 *
td
, 
ksigöfo_t
 *
ksi
);

	@/usr/include/sys/sockbuf.h

33 #i‚de‡
_SYS_SOCKBUF_H_


34 
	#_SYS_SOCKBUF_H_


	)

35 
	~<sys/£löfo.h
>

36 
	~<sys/_lock.h
>

37 
	~<sys/_muãx.h
>

38 
	~<sys/_sx.h
>

40 
	#SB_MAX
 (2*1024*1024Ë

	)

45 
	#SB_WAIT
 0x04

	)

46 
	#SB_SEL
 0x08

	)

47 
	#SB_ASYNC
 0x10

	)

48 
	#SB_UPCALL
 0x20

	)

49 
	#SB_NOINTR
 0x40

	)

50 
	#SB_AIO
 0x80

	)

51 
	#SB_KNOTE
 0x100

	)

52 
	#SB_NOCOALESCE
 0x200

	)

53 
	#SB_IN_TOE
 0x400

	)

54 
	#SB_AUTOSIZE
 0x800

	)

55 
	#SB_STOP
 0x1000

	)

57 
	#SBS_CANTSENDMORE
 0x0010

	)

58 
	#SBS_CANTRCVMORE
 0x0020

	)

59 
	#SBS_RCVATMARK
 0x0040

	)

61 
	gmbuf
;

62 
	gsockaddr
;

63 
	gsockë
;

64 
	gthªad
;

66 
	sxsockbuf
 {

67 
u_öt
 
	msb_cc
;

68 
u_öt
 
	msb_hiw©
;

69 
u_öt
 
	msb_mb˙t
;

70 
u_öt
 
	msb_m˙t
;

71 
u_öt
 
	msb_c˙t
;

72 
u_öt
 
	msb_mbmax
;

73 
	msb_low©
;

74 
	msb_timeo
;

75 
	msb_Êags
;

81 
	ssockbuf
 {

82 
£löfo
 
	msb_£l
;

83 
mtx
 
	msb_mtx
;

84 
sx
 
	msb_sx
;

85 
	msb_°©e
;

86 
	#sb_°¨tzîo
 
sb_mb


	)

87 
mbuf
 *
	msb_mb
;

88 
mbuf
 *
	msb_mbèû
;

89 
mbuf
 *
	msb_œ°ªc‹d
;

91 
mbuf
 *
	msb_¢d±r
;

92 
u_öt
 
	msb_¢d±roff
;

93 
u_öt
 
	msb_cc
;

94 
u_öt
 
	msb_hiw©
;

95 
u_öt
 
	msb_mb˙t
;

96 
u_öt
 
	msb_m˙t
;

97 
u_öt
 
	msb_c˙t
;

98 
u_öt
 
	msb_mbmax
;

99 
u_öt
 
	msb_˘l
;

100 
	msb_low©
;

101 
sbötime_t
 
	msb_timeo
;

102 
	msb_Êags
;

103 (*
	msb_upˇŒ
)(
	msockë
 *, *, );

104 *
	msb_upˇŒ¨g
;

107 #ifde‡
_KERNEL


113 
	#SOCKBUF_MTX
(
_sb
Ë(&(_sb)->
sb_mtx
)

	)

114 
	#SOCKBUF_LOCK_INIT
(
_sb
, 
_«me
) \

115 
	`mtx_öô
(
	`SOCKBUF_MTX
(
_sb
), 
_«me
, 
NULL
, 
MTX_DEF
)

	)

116 
	#SOCKBUF_LOCK_DESTROY
(
_sb
Ë
	`mtx_de°roy
(
	`SOCKBUF_MTX
(_sb))

	)

117 
	#SOCKBUF_LOCK
(
_sb
Ë
	`mtx_lock
(
	`SOCKBUF_MTX
(_sb))

	)

118 
	#SOCKBUF_OWNED
(
_sb
Ë
	`mtx_ow√d
(
	`SOCKBUF_MTX
(_sb))

	)

119 
	#SOCKBUF_UNLOCK
(
_sb
Ë
	`mtx_u∆ock
(
	`SOCKBUF_MTX
(_sb))

	)

120 
	#SOCKBUF_LOCK_ASSERT
(
_sb
Ë
	`mtx_as£π
(
	`SOCKBUF_MTX
(_sb), 
MA_OWNED
)

	)

121 
	#SOCKBUF_UNLOCK_ASSERT
(
_sb
Ë
	`mtx_as£π
(
	`SOCKBUF_MTX
(_sb), 
MA_NOTOWNED
)

	)

123 
sb≠≥nd
(
sockbuf
 *
sb
, 
mbuf
 *
m
);

124 
sb≠≥nd_locked
(
sockbuf
 *
sb
, 
mbuf
 *
m
);

125 
sb≠≥nd°ªam
(
sockbuf
 *
sb
, 
mbuf
 *
m
);

126 
sb≠≥nd°ªam_locked
(
sockbuf
 *
sb
, 
mbuf
 *
m
);

127 
sb≠≥ndaddr
(
sockbuf
 *
sb
, c⁄° 
sockaddr
 *
aß
,

128 
mbuf
 *
m0
, mbu‡*
c⁄åﬁ
);

129 
sb≠≥ndaddr_locked
(
sockbuf
 *
sb
, c⁄° 
sockaddr
 *
aß
,

130 
mbuf
 *
m0
, mbu‡*
c⁄åﬁ
);

131 
sb≠≥ndaddr_no•a˚check_locked
(
sockbuf
 *
sb
,

132 c⁄° 
sockaddr
 *
aß
, 
mbuf
 *
m0
, mbu‡*
c⁄åﬁ
);

133 
sb≠≥ndc⁄åﬁ
(
sockbuf
 *
sb
, 
mbuf
 *
m0
,

134 
mbuf
 *
c⁄åﬁ
);

135 
sb≠≥ndc⁄åﬁ_locked
(
sockbuf
 *
sb
, 
mbuf
 *
m0
,

136 
mbuf
 *
c⁄åﬁ
);

137 
sb≠≥ndªc‹d
(
sockbuf
 *
sb
, 
mbuf
 *
m0
);

138 
sb≠≥ndªc‹d_locked
(
sockbuf
 *
sb
, 
mbuf
 *
m0
);

139 
sbcheck
(
sockbuf
 *
sb
);

140 
sbcom¥ess
(
sockbuf
 *
sb
, 
mbuf
 *
m
, mbu‡*
n
);

141 
mbuf
 *

142 
sb¸óãc⁄åﬁ
(
ˇddr_t
 
p
, 
size
, 
ty≥
, 
Àvñ
);

143 
sbde°roy
(
sockbuf
 *
sb
, 
sockë
 *
so
);

144 
sbdr›
(
sockbuf
 *
sb
, 
Àn
);

145 
sbdr›_locked
(
sockbuf
 *
sb
, 
Àn
);

146 
mbuf
 *

147 
sbcut_locked
(
sockbuf
 *
sb
, 
Àn
);

148 
sbdr›ªc‹d
(
sockbuf
 *
sb
);

149 
sbdr›ªc‹d_locked
(
sockbuf
 *
sb
);

150 
sbÊush
(
sockbuf
 *
sb
);

151 
sbÊush_locked
(
sockbuf
 *
sb
);

152 
sbªÀa£
(
sockbuf
 *
sb
, 
sockë
 *
so
);

153 
sbªÀa£_öã∫Æ
(
sockbuf
 *
sb
, 
sockë
 *
so
);

154 
sbªÀa£_locked
(
sockbuf
 *
sb
, 
sockë
 *
so
);

155 
sbª£rve
(
sockbuf
 *
sb
, 
u_l⁄g
 
cc
, 
sockë
 *
so
,

156 
thªad
 *
td
);

157 
sbª£rve_locked
(
sockbuf
 *
sb
, 
u_l⁄g
 
cc
, 
sockë
 *
so
,

158 
thªad
 *
td
);

159 
mbuf
 *

160 
sb¢d±r
(
sockbuf
 *
sb
, 
u_öt
 
off
, u_öà
Àn
, u_öà*
moff
);

161 
mbuf
 *

162 
sb¢dmbuf
(
sockbuf
 *
sb
, 
u_öt
 
off
, u_öà*
moff
);

163 
sbtoxsockbuf
(
sockbuf
 *
sb
, 
xsockbuf
 *
xsb
);

164 
sbwaô
(
sockbuf
 *
sb
);

165 
sblock
(
sockbuf
 *
sb
, 
Êags
);

166 
sbu∆ock
(
sockbuf
 *
sb
);

174 
__ölöe


176 
	$sb•a˚
(
sockbuf
 *
sb
)

178 
bÀ·
, 
mÀ·
;

180 i‡(
sb
->
sb_Êags
 & 
SB_STOP
)

182 
bÀ·
 = 
sb
->
sb_hiw©
 - sb->
sb_cc
;

183 
mÀ·
 = 
sb
->
sb_mbmax
 - sb->
sb_mb˙t
;

184 ((
bÀ·
 < 
mÀ·
) ? bleft : mleft);

185 
	}
}

188 
	#sbÆloc
(
sb
, 
m
) { \

189 (
sb
)->
sb_cc
 +(
m
)->
m_Àn
; \

190 i‡((
m
)->
m_ty≥
 !
MT_DATA
 && (m)->m_ty≥ !
MT_OOBDATA
) \

191 (
sb
)->
sb_˘l
 +(
m
)->
m_Àn
; \

192 (
sb
)->
sb_mb˙t
 +
MSIZE
; \

193 (
sb
)->
sb_m˙t
 += 1; \

194 i‡((
m
)->
m_Êags
 & 
M_EXT
) { \

195 (
sb
)->
sb_mb˙t
 +(
m
)->
m_ext
.
ext_size
; \

196 (
sb
)->
sb_c˙t
 += 1; \

198 }

	)

201 
	#sb‰ì
(
sb
, 
m
) { \

202 (
sb
)->
sb_cc
 -(
m
)->
m_Àn
; \

203 i‡((
m
)->
m_ty≥
 !
MT_DATA
 && (m)->m_ty≥ !
MT_OOBDATA
) \

204 (
sb
)->
sb_˘l
 -(
m
)->
m_Àn
; \

205 (
sb
)->
sb_mb˙t
 -
MSIZE
; \

206 (
sb
)->
sb_m˙t
 -= 1; \

207 i‡((
m
)->
m_Êags
 & 
M_EXT
) { \

208 (
sb
)->
sb_mb˙t
 -(
m
)->
m_ext
.
ext_size
; \

209 (
sb
)->
sb_c˙t
 -= 1; \

211 i‡((
sb
)->
sb_¢d±r
 =(
m
)) { \

212 (
sb
)->
sb_¢d±r
 = 
NULL
; \

213 (
sb
)->
sb_¢d±roff
 = 0; \

215 i‡((
sb
)->
sb_¢d±roff
 != 0) \

216 (
sb
)->
sb_¢d±roff
 -(
m
)->
m_Àn
; \

217 }

	)

219 
	#SB_EMPTY_FIXUP
(
sb
) do { \

220 i‡((
sb
)->
sb_mb
 =
NULL
) { \

221 (
sb
)->
sb_mbèû
 = 
NULL
; \

222 (
sb
)->
sb_œ°ªc‹d
 = 
NULL
; \

224 }  0)

	)

226 #ifde‡
SOCKBUF_DEBUG


227 
sbœ°ªc‹dchk
(
sockbuf
 *, const *, );

228 
	#SBLASTRECORDCHK
(
sb
Ë
	`sbœ°ªc‹dchk
((sb), 
__FILE__
, 
__LINE__
)

	)

230 
sbœ°mbufchk
(
sockbuf
 *, const *, );

231 
	#SBLASTMBUFCHK
(
sb
Ë
	`sbœ°mbufchk
((sb), 
__FILE__
, 
__LINE__
)

	)

233 
	#SBLASTRECORDCHK
(
sb
Ë

	)

234 
	#SBLASTMBUFCHK
(
sb
Ë

	)

	@/usr/include/sys/sockstate.h

33 #i‚de‡
_SYS_SOCKTATE_H_


34 
	#_SYS_SOCKTATE_H_


	)

48 
	#SS_NOFDREF
 0x0001

	)

49 
	#SS_ISCONNECTED
 0x0002

	)

50 
	#SS_ISCONNECTING
 0x0004

	)

51 
	#SS_ISDISCONNECTING
 0x0008

	)

52 
	#SS_NBIO
 0x0100

	)

53 
	#SS_ASYNC
 0x0200

	)

54 
	#SS_ISCONFIRMING
 0x0400

	)

55 
	#SS_ISDISCONNECTED
 0x2000

	)

64 
	#SS_PROTOREF
 0x4000

	)

69 
	#SBS_CANTSENDMORE
 0x0010

	)

70 
	#SBS_CANTRCVMORE
 0x0020

	)

71 
	#SBS_RCVATMARK
 0x0040

	)

73 
	gsockë
;

75 
soisc⁄√˘ed
(
sockë
 *
so
);

76 
soisc⁄√˘ög
(
sockë
 *
so
);

77 
soisdisc⁄√˘ed
(
sockë
 *
so
);

78 
soisdisc⁄√˘ög
(
sockë
 *
so
);

79 
soˇ¡rcvm‹e
(
sockë
 *
so
);

80 
soˇ¡rcvm‹e_locked
(
sockë
 *
so
);

81 
soˇ¡£ndm‹e
(
sockë
 *
so
);

82 
soˇ¡£ndm‹e_locked
(
sockë
 *
so
);

	@/usr/include/sys/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

36 
	~<sys/_°döt.h
>

38 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

39 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

40 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

41 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

43 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

44 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

45 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

46 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

48 
__öt_Á°8_t
 
	töt_Á°8_t
;

49 
__öt_Á°16_t
 
	töt_Á°16_t
;

50 
__öt_Á°32_t
 
	töt_Á°32_t
;

51 
__öt_Á°64_t
 
	töt_Á°64_t
;

53 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

54 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

55 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

56 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

59 #i‡
deföed
(
UINTPTR_MAX
Ë&& deföed(
UINT64_MAX
) && (UINTPTR_MAX == UINT64_MAX)

60 
	#__WORDSIZE
 64

	)

62 
	#__WORDSIZE
 32

	)

66 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

67 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

	@/usr/include/sys/sx.h

32 #i‚def 
_SYS_SX_H_


33 
	#_SYS_SX_H_


	)

35 
	~<sys/_lock.h
>

36 
	~<sys/_sx.h
>

38 #ifdef 
_KERNEL


39 
	~<sys/p˝u.h
>

40 
	~<sys/lock_¥ofûe.h
>

41 
	~<sys/lock°©.h
>

42 
	~<machöe/©omic.h
>

68 
	#SX_LOCK_SHARED
 0x01

	)

69 
	#SX_LOCK_SHARED_WAITERS
 0x02

	)

70 
	#SX_LOCK_EXCLUSIVE_WAITERS
 0x04

	)

71 
	#SX_LOCK_RECURSED
 0x08

	)

72 
	#SX_LOCK_FLAGMASK
 \

73 (
SX_LOCK_SHARED
 | 
SX_LOCK_SHARED_WAITERS
 | \

74 
SX_LOCK_EXCLUSIVE_WAITERS
 | 
SX_LOCK_RECURSED
)

	)

76 
	#SX_OWNER
(
x
Ë((xË& ~
SX_LOCK_FLAGMASK
)

	)

77 
	#SX_SHARERS_SHIFT
 4

	)

78 
	#SX_SHARERS
(
x
Ë(
	`SX_OWNER
(xË>> 
SX_SHARERS_SHIFT
)

	)

79 
	#SX_SHARERS_LOCK
(
x
) \

80 ((
x
Ë<< 
SX_SHARERS_SHIFT
 | 
SX_LOCK_SHARED
)

	)

81 
	#SX_ONE_SHARER
 (1 << 
SX_SHARERS_SHIFT
)

	)

83 
	#SX_LOCK_UNLOCKED
 
	`SX_SHARERS_LOCK
(0)

	)

84 
	#SX_LOCK_DESTROYED
 \

85 (
SX_LOCK_SHARED_WAITERS
 | 
SX_LOCK_EXCLUSIVE_WAITERS
)

	)

87 #ifde‡
_KERNEL


93 
sx_sysöô
(*
¨g
);

94 
	#sx_öô
(
sx
, 
desc
Ë
	`sx_öô_Êags
((sx), (desc), 0)

	)

95 
sx_öô_Êags
(
sx
 *sx, c⁄° *
des¸ùti⁄
, 
›ts
);

96 
sx_de°roy
(
sx
 *sx);

97 
sx_åy_¶ock_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

98 
sx_åy_xlock_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

99 
sx_åy_upgøde_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

100 
sx_downgøde_
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

101 
_sx_¶ock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

102 
_sx_xlock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

103 
_sx_su∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

104 
_sx_xu∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

105 
_sx_xlock_h¨d
(
sx
 *sx, 
uöçå_t
 
tid
, 
›ts
,

106 c⁄° *
fûe
, 
löe
);

107 
_sx_¶ock_h¨d
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
);

108 
_sx_xu∆ock_h¨d
(
sx
 *sx, 
uöçå_t
 
tid
, c⁄° *
fûe
, 

109 
löe
);

110 
_sx_su∆ock_h¨d
(
sx
 *sx, c⁄° *
fûe
, 
löe
);

111 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

112 
_sx_as£π
(c⁄° 
sx
 *sx, 
wh©
, c⁄° *
fûe
, 
löe
);

114 #ifde‡
DDB


115 
sx_chaö
(
thªad
 *
td
, thªad **
ow√Ω
);

118 
	ssx_¨gs
 {

119 
sx
 *
	mß_sx
;

120 c⁄° *
	mß_desc
;

121 
	mß_Êags
;

124 
	#SX_SYSINIT_FLAGS
(
«me
, 
sxa
, 
desc
, 
Êags
) \

125 
sx_¨gs
 
«me
##
_¨gs
 = { \

126 (
sxa
), \

127 (
desc
), \

128 (
Êags
) \

130 
	`SYSINIT
(
«me
##
_sx_sysöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

131 
sx_sysöô
, &
«me
##
_¨gs
); \

132 
	`SYSUNINIT
(
«me
##
_sx_sysunöô
, 
SI_SUB_LOCK
, 
SI_ORDER_MIDDLE
, \

133 
sx_de°roy
, (
sxa
))

	)

135 
	#SX_SYSINIT
(
«me
, 
sxa
, 
desc
Ë
	`SX_SYSINIT_FLAGS
“ame, sxa, desc, 0)

	)

144 
__ölöe
 

145 
	$__sx_xlock
(
sx
 *sx, 
thªad
 *
td
, 
›ts
, c⁄° *
fûe
,

146 
löe
)

148 
uöçå_t
 
tid
 = (uöçå_t)
td
;

149 
îr‹
 = 0;

151 i‡(!
	`©omic_cmp£t_acq_±r
(&
sx
->
sx_lock
, 
SX_LOCK_UNLOCKED
, 
tid
))

152 
îr‹
 = 
	`_sx_xlock_h¨d
(
sx
, 
tid
, 
›ts
, 
fûe
, 
löe
);

154 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_SX_XLOCK_ACQUIRE
,

155 
sx
, 0, 0, 
fûe
, 
löe
);

157  (
îr‹
);

158 
	}
}

161 
__ölöe
 

162 
	$__sx_xu∆ock
(
sx
 *sx, 
thªad
 *
td
, c⁄° *
fûe
, 
löe
)

164 
uöçå_t
 
tid
 = (uöçå_t)
td
;

166 i‡(!
	`©omic_cmp£t_ªl_±r
(&
sx
->
sx_lock
, 
tid
, 
SX_LOCK_UNLOCKED
))

167 
	`_sx_xu∆ock_h¨d
(
sx
, 
tid
, 
fûe
, 
löe
);

168 
	}
}

171 
__ölöe
 

172 
	$__sx_¶ock
(
sx
 *sx, 
›ts
, c⁄° *
fûe
, 
löe
)

174 
uöçå_t
 
x
 = 
sx
->
sx_lock
;

175 
îr‹
 = 0;

177 i‡(!(
x
 & 
SX_LOCK_SHARED
) ||

178 !
	`©omic_cmp£t_acq_±r
(&
sx
->
sx_lock
, 
x
, x + 
SX_ONE_SHARER
))

179 
îr‹
 = 
	`_sx_¶ock_h¨d
(
sx
, 
›ts
, 
fûe
, 
löe
);

181 
	`LOCKSTAT_PROFILE_OBTAIN_LOCK_SUCCESS
(
LS_SX_SLOCK_ACQUIRE
, 
sx
, 0,

182 0, 
fûe
, 
löe
);

184  (
îr‹
);

185 
	}
}

194 
__ölöe
 

195 
	$__sx_su∆ock
(
sx
 *sx, c⁄° *
fûe
, 
löe
)

197 
uöçå_t
 
x
 = 
sx
->
sx_lock
;

199 i‡(
x
 =(
	`SX_SHARERS_LOCK
(1Ë| 
SX_LOCK_EXCLUSIVE_WAITERS
) ||

200 !
	`©omic_cmp£t_ªl_±r
(&
sx
->
sx_lock
, 
x
, x - 
SX_ONE_SHARER
))

201 
	`_sx_su∆ock_h¨d
(
sx
, 
fûe
, 
löe
);

202 
	}
}

207 #i‚de‡
LOCK_DEBUG


210 #if (
LOCK_DEBUG
 > 0Ë|| 
deföed
(
SX_NOINLINE
)

211 
	#sx_xlock_
(
sx
, 
fûe
, 
löe
) \

212 ()
	`_sx_xlock
((
sx
), 0, (
fûe
), (
löe
))

	)

213 
	#sx_xlock_sig_
(
sx
, 
fûe
, 
löe
) \

214 
	`_sx_xlock
((
sx
), 
SX_INTERRUPTIBLE
, (
fûe
), (
löe
))

	)

215 
	#sx_xu∆ock_
(
sx
, 
fûe
, 
löe
) \

216 
	`_sx_xu∆ock
((
sx
), (
fûe
), (
löe
))

	)

217 
	#sx_¶ock_
(
sx
, 
fûe
, 
löe
) \

218 ()
	`_sx_¶ock
((
sx
), 0, (
fûe
), (
löe
))

	)

219 
	#sx_¶ock_sig_
(
sx
, 
fûe
, 
löe
) \

220 
	`_sx_¶ock
((
sx
), 
SX_INTERRUPTIBLE
, (
fûe
Ë, (
löe
))

	)

221 
	#sx_su∆ock_
(
sx
, 
fûe
, 
löe
) \

222 
	`_sx_su∆ock
((
sx
), (
fûe
), (
löe
))

	)

224 
	#sx_xlock_
(
sx
, 
fûe
, 
löe
) \

225 ()
	`__sx_xlock
((
sx
), 
cuπhªad
, 0, (
fûe
), (
löe
))

	)

226 
	#sx_xlock_sig_
(
sx
, 
fûe
, 
löe
) \

227 
	`__sx_xlock
((
sx
), 
cuπhªad
, 
SX_INTERRUPTIBLE
, (
fûe
), (
löe
))

	)

228 
	#sx_xu∆ock_
(
sx
, 
fûe
, 
löe
) \

229 
	`__sx_xu∆ock
((
sx
), 
cuπhªad
, (
fûe
), (
löe
))

	)

230 
	#sx_¶ock_
(
sx
, 
fûe
, 
löe
) \

231 ()
	`__sx_¶ock
((
sx
), 0, (
fûe
), (
löe
))

	)

232 
	#sx_¶ock_sig_
(
sx
, 
fûe
, 
löe
) \

233 
	`__sx_¶ock
((
sx
), 
SX_INTERRUPTIBLE
, (
fûe
), (
löe
))

	)

234 
	#sx_su∆ock_
(
sx
, 
fûe
, 
löe
) \

235 
	`__sx_su∆ock
((
sx
), (
fûe
), (
löe
))

	)

237 
	#sx_åy_¶ock
(
sx
Ë
	`sx_åy_¶ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

238 
	#sx_åy_xlock
(
sx
Ë
	`sx_åy_xlock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

239 
	#sx_åy_upgøde
(
sx
Ë
	`sx_åy_upgøde_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

240 
	#sx_downgøde
(
sx
Ë
	`sx_downgøde_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

241 #ifde‡
INVARIANTS


242 
	#sx_as£π_
(
sx
, 
wh©
, 
fûe
, 
löe
) \

243 
	`_sx_as£π
((
sx
), (
wh©
), (
fûe
), (
löe
))

	)

245 
	#sx_as£π_
(
sx
, 
wh©
, 
fûe
, 
löe
Ë()0

	)

248 
	#sx_xlock
(
sx
Ë
	`sx_xlock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

249 
	#sx_xlock_sig
(
sx
Ë
	`sx_xlock_sig_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

250 
	#sx_xu∆ock
(
sx
Ë
	`sx_xu∆ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

251 
	#sx_¶ock
(
sx
Ë
	`sx_¶ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

252 
	#sx_¶ock_sig
(
sx
Ë
	`sx_¶ock_sig_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

253 
	#sx_su∆ock
(
sx
Ë
	`sx_su∆ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

254 
	#sx_as£π
(
sx
, 
wh©
Ë
	`sx_as£π_
((sx), (wh©), 
__FILE__
, 
__LINE__
)

	)

260 
	#sx_xhﬁdî
(
sx
) \

261 ((
sx
)->
sx_lock
 & 
SX_LOCK_SHARED
 ? 
NULL
 : \

262 (
thªad
 *)
	`SX_OWNER
((
sx
)->
sx_lock
))

	)

264 
	#sx_xlocked
(
sx
) \

265 (((
sx
)->
sx_lock
 & ~(
SX_LOCK_FLAGMASK
 & ~
SX_LOCK_SHARED
)) == \

266 (
uöçå_t
)
cuπhªad
)

	)

268 
	#sx_u∆ock_
(
sx
, 
fûe
, 
löe
) do { \

269 i‡(
	`sx_xlocked
(
sx
)) \

270 
	`sx_xu∆ock_
(
sx
, 
fûe
, 
löe
); \

272 
	`sx_su∆ock_
(
sx
, 
fûe
, 
löe
); \

273 } 0)

	)

275 
	#sx_u∆ock
(
sx
Ë
	`sx_u∆ock_
((sx), 
LOCK_FILE
, 
LOCK_LINE
)

	)

277 
	#sx_¶ìp
(
ch™
, 
sx
, 
¥i
, 
wmesg
, 
timo
) \

278 
	`_¶ìp
((
ch™
), &(
sx
)->
lock_obje˘
, (
¥i
), (
wmesg
), \

279 
tick_sbt
 * (
timo
), 0, 
C_HARDCLOCK
)

	)

284 
	#SX_DUPOK
 0x01

	)

285 
	#SX_NOPROFILE
 0x02

	)

286 
	#SX_NOWITNESS
 0x04

	)

287 
	#SX_QUIET
 0x08

	)

288 
	#SX_NOADAPTIVE
 0x10

	)

289 
	#SX_RECURSE
 0x20

	)

294 
	#SX_INTERRUPTIBLE
 0x40

	)

296 #i‡
deföed
(
INVARIANTS
Ë|| deföed(
INVARIANT_SUPPORT
)

297 
	#SA_LOCKED
 
LA_LOCKED


	)

298 
	#SA_SLOCKED
 
LA_SLOCKED


	)

299 
	#SA_XLOCKED
 
LA_XLOCKED


	)

300 
	#SA_UNLOCKED
 
LA_UNLOCKED


	)

301 
	#SA_RECURSED
 
LA_RECURSED


	)

302 
	#SA_NOTRECURSED
 
LA_NOTRECURSED


	)

305 
	#SX_LOCKED
 
LA_LOCKED


	)

306 
	#SX_SLOCKED
 
LA_SLOCKED


	)

307 
	#SX_XLOCKED
 
LA_XLOCKED


	)

308 
	#SX_UNLOCKED
 
LA_UNLOCKED


	)

309 
	#SX_RECURSED
 
LA_RECURSED


	)

310 
	#SX_NOTRECURSED
 
LA_NOTRECURSED


	)

	@/usr/include/sys/syslimits.h

33 #i‚de‡
_SYS_SYSLIMITS_H_


34 
	#_SYS_SYSLIMITS_H_


	)

36 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
_LIMITS_H_
Ë&& !deföed(
_SYS_PARAM_H_
)

37 #i‚de‡
_SYS_CDEFS_H_


38 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


40 #ifde‡
__CC_SUPPORTS_WARNING


49 
	#ARG_MAX
 262144

	)

50 #i‚de‡
CHILD_MAX


51 
	#CHILD_MAX
 40

	)

53 
	#LINK_MAX
 32767

	)

54 
	#MAX_CANON
 255

	)

55 
	#MAX_INPUT
 255

	)

56 
	#NAME_MAX
 255

	)

57 #i‚de‡
NGROUPS_MAX


58 
	#NGROUPS_MAX
 1023

	)

60 #i‚de‡
OPEN_MAX


61 
	#OPEN_MAX
 64

	)

63 
	#PATH_MAX
 1024

	)

64 
	#PIPE_BUF
 512

	)

65 
	#IOV_MAX
 1024

	)

	@/usr/include/sys/time.h

33 #i‚de‡
_SYS_TIME_H_


34 
	#_SYS_TIME_H_


	)

36 
	~<sys/_timevÆ.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/time•ec.h
>

40 
	stimez⁄e
 {

41 
	mtz_möuãswe°
;

42 
	mtz_d°time
;

44 
	#DST_NONE
 0

	)

45 
	#DST_USA
 1

	)

46 
	#DST_AUST
 2

	)

47 
	#DST_WET
 3

	)

48 
	#DST_MET
 4

	)

49 
	#DST_EET
 5

	)

50 
	#DST_CAN
 6

	)

52 #i‡
__BSD_VISIBLE


53 
	sbötime
 {

54 
time_t
 
	m£c
;

55 
uöt64_t
 
	m‰ac
;

58 
__ölöe
 

59 
	$bötime_addx
(
bötime
 *
_bt
, 
uöt64_t
 
_x
)

61 
uöt64_t
 
_u
;

63 
_u
 = 
_bt
->
‰ac
;

64 
_bt
->
‰ac
 +
_x
;

65 i‡(
_u
 > 
_bt
->
‰ac
)

66 
_bt
->
£c
++;

67 
	}
}

69 
__ölöe
 

70 
	$bötime_add
(
bötime
 *
_bt
, c⁄° bötimê*
_bt2
)

72 
uöt64_t
 
_u
;

74 
_u
 = 
_bt
->
‰ac
;

75 
_bt
->
‰ac
 +
_bt2
->frac;

76 i‡(
_u
 > 
_bt
->
‰ac
)

77 
_bt
->
£c
++;

78 
_bt
->
£c
 +
_bt2
->sec;

79 
	}
}

81 
__ölöe
 

82 
	$bötime_sub
(
bötime
 *
_bt
, c⁄° bötimê*
_bt2
)

84 
uöt64_t
 
_u
;

86 
_u
 = 
_bt
->
‰ac
;

87 
_bt
->
‰ac
 -
_bt2
->frac;

88 i‡(
_u
 < 
_bt
->
‰ac
)

89 
_bt
->
£c
--;

90 
_bt
->
£c
 -
_bt2
->sec;

91 
	}
}

93 
__ölöe
 

94 
	$bötime_mul
(
bötime
 *
_bt
, 
u_öt
 
_x
)

96 
uöt64_t
 
_p1
, 
_p2
;

98 
_p1
 = (
_bt
->
‰ac
 & 0xffffffffuŒË* 
_x
;

99 
_p2
 = (
_bt
->
‰ac
 >> 32Ë* 
_x
 + (
_p1
 >> 32);

100 
_bt
->
£c
 *
_x
;

101 
_bt
->
£c
 +(
_p2
 >> 32);

102 
_bt
->
‰ac
 = (
_p2
 << 32Ë| (
_p1
 & 0xffffffffull);

103 
	}
}

105 
__ölöe
 

106 
	$bötime_shi·
(
bötime
 *
_bt
, 
_exp
)

109 i‡(
_exp
 > 0) {

110 
_bt
->
£c
 <<
_exp
;

111 
_bt
->
£c
 |_bt->
‰ac
 >> (64 - 
_exp
);

112 
_bt
->
‰ac
 <<
_exp
;

113 } i‡(
_exp
 < 0) {

114 
_bt
->
‰ac
 >>-
_exp
;

115 
_bt
->
‰ac
 |(
uöt64_t
)_bt->
£c
 << (64 + 
_exp
);

116 
_bt
->
£c
 >>-
_exp
;

118 
	}
}

120 
	#bötime_˛ór
(
a
Ë(◊)->
£c
 = (a)->
‰ac
 = 0)

	)

121 
	#bötime_is£t
(
a
Ë(◊)->
£c
 || (a)->
‰ac
)

	)

122 
	#bötime_cmp
(
a
, 
b
, 
cmp
) \

123 (((
a
)->
£c
 =(
b
)->sec) ? \

124 ((
a
)->
‰ac
 
	`cmp
 (
b
)->frac) : \

125 ((
a
)->
£c
 
	`cmp
 (
b
)->£c))

	)

127 
	#SBT_1S
 ((
sbötime_t
)1 << 32)

	)

128 
	#SBT_1M
 (
SBT_1S
 * 60)

	)

129 
	#SBT_1MS
 (
SBT_1S
 / 1000)

	)

130 
	#SBT_1US
 (
SBT_1S
 / 1000000)

	)

131 
	#SBT_1NS
 (
SBT_1S
 / 1000000000)

	)

132 
	#SBT_MAX
 0x7fffffffffffffff

	)

134 
__ölöe
 

135 
	$sbötime_gë£c
(
sbötime_t
 
_sbt
)

138  (
_sbt
 >> 32);

139 
	}
}

141 
__ölöe
 
sbötime_t


142 
	$bâosbt
(c⁄° 
bötime
 
_bt
)

145  (((
sbötime_t
)
_bt
.
£c
 << 32Ë+ (_bt.
‰ac
 >> 32));

146 
	}
}

148 
__ölöe
 
bötime


149 
	$sbâobt
(
sbötime_t
 
_sbt
)

151 
bötime
 
_bt
;

153 
_bt
.
£c
 = 
_sbt
 >> 32;

154 
_bt
.
‰ac
 = 
_sbt
 << 32;

155  (
_bt
);

156 
	}
}

172 
__ölöe
 

173 
	$bötime2time•ec
(c⁄° 
bötime
 *
_bt
, 
time•ec
 *
_ts
)

176 
_ts
->
tv_£c
 = 
_bt
->
£c
;

177 
_ts
->
tv_n£c
 = ((
uöt64_t
)1000000000 *

178 (
uöt32_t
)(
_bt
->
‰ac
 >> 32)) >> 32;

179 
	}
}

181 
__ölöe
 

182 
	$time•ec2bötime
(c⁄° 
time•ec
 *
_ts
, 
bötime
 *
_bt
)

185 
_bt
->
£c
 = 
_ts
->
tv_£c
;

187 
_bt
->
‰ac
 = 
_ts
->
tv_n£c
 * (
uöt64_t
)18446744073LL;

188 
	}
}

190 
__ölöe
 

191 
	$bötime2timevÆ
(c⁄° 
bötime
 *
_bt
, 
timevÆ
 *
_tv
)

194 
_tv
->
tv_£c
 = 
_bt
->
£c
;

195 
_tv
->
tv_u£c
 = ((
uöt64_t
)1000000 * (
uöt32_t
)(
_bt
->
‰ac
 >> 32)) >> 32;

196 
	}
}

198 
__ölöe
 

199 
	$timevÆ2bötime
(c⁄° 
timevÆ
 *
_tv
, 
bötime
 *
_bt
)

202 
_bt
->
£c
 = 
_tv
->
tv_£c
;

204 
_bt
->
‰ac
 = 
_tv
->
tv_u£c
 * (
uöt64_t
)18446744073709LL;

205 
	}
}

207 
__ölöe
 
time•ec


208 
	$sbâŸs
(
sbötime_t
 
_sbt
)

210 
time•ec
 
_ts
;

212 
_ts
.
tv_£c
 = 
_sbt
 >> 32;

213 
_ts
.
tv_n£c
 = ((
uöt64_t
)1000000000 * (
uöt32_t
)
_sbt
) >> 32;

214  (
_ts
);

215 
	}
}

217 
__ölöe
 
sbötime_t


218 
	$t°osbt
(
time•ec
 
_ts
)

221  (((
sbötime_t
)
_ts
.
tv_£c
 << 32) +

222 (
_ts
.
tv_n£c
 * (((
uöt64_t
)1 << 63) / 500000000) >> 32));

223 
	}
}

225 
__ölöe
 
timevÆ


226 
	$sbâŸv
(
sbötime_t
 
_sbt
)

228 
timevÆ
 
_tv
;

230 
_tv
.
tv_£c
 = 
_sbt
 >> 32;

231 
_tv
.
tv_u£c
 = ((
uöt64_t
)1000000 * (
uöt32_t
)
_sbt
) >> 32;

232  (
_tv
);

233 
	}
}

235 
__ölöe
 
sbötime_t


236 
	$tvtosbt
(
timevÆ
 
_tv
)

239  (((
sbötime_t
)
_tv
.
tv_£c
 << 32) +

240 (
_tv
.
tv_u£c
 * (((
uöt64_t
)1 << 63) / 500000) >> 32));

241 
	}
}

244 #ifde‡
_KERNEL


247 
	#time•ec˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)

248 
	#time•ecis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)

249 
	#time•eccmp
(
tvp
, 
uvp
, 
cmp
) \

250 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

251 ((
tvp
)->
tv_n£c
 
	`cmp
 (
uvp
)->tv_nsec) : \

252 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

253 
	#time•eˇdd
(
vvp
, 
uvp
) \

255 (
vvp
)->
tv_£c
 +(
uvp
)->tv_sec; \

256 (
vvp
)->
tv_n£c
 +(
uvp
)->tv_nsec; \

257 i‡((
vvp
)->
tv_n£c
 >= 1000000000) { \

258 (
vvp
)->
tv_£c
++; \

259 (
vvp
)->
tv_n£c
 -= 1000000000; \

261 } 0)

	)

262 
	#time•ecsub
(
vvp
, 
uvp
) \

264 (
vvp
)->
tv_£c
 -(
uvp
)->tv_sec; \

265 (
vvp
)->
tv_n£c
 -(
uvp
)->tv_nsec; \

266 i‡((
vvp
)->
tv_n£c
 < 0) { \

267 (
vvp
)->
tv_£c
--; \

268 (
vvp
)->
tv_n£c
 += 1000000000; \

270 } 0)

	)

274 
	#timevÆ˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

275 
	#timevÆis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

276 
	#timevÆcmp
(
tvp
, 
uvp
, 
cmp
) \

277 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

278 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

279 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

285 #i‚de‡
_KERNEL


287 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

288 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

289 
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

290 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

291 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

292 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)

293 
	#timîadd
(
tvp
, 
uvp
, 
vvp
) \

295 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯+ (
uvp
)->tv_sec; \

296 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯+ (
uvp
)->tv_usec; \

297 i‡((
vvp
)->
tv_u£c
 >= 1000000) { \

298 (
vvp
)->
tv_£c
++; \

299 (
vvp
)->
tv_u£c
 -= 1000000; \

301 } 0)

	)

302 
	#timîsub
(
tvp
, 
uvp
, 
vvp
) \

304 (
vvp
)->
tv_£c
 = (
tvp
)->tv_£¯- (
uvp
)->tv_sec; \

305 (
vvp
)->
tv_u£c
 = (
tvp
)->tv_u£¯- (
uvp
)->tv_usec; \

306 i‡((
vvp
)->
tv_u£c
 < 0) { \

307 (
vvp
)->
tv_£c
--; \

308 (
vvp
)->
tv_u£c
 += 1000000; \

310 } 0)

	)

317 
	#ITIMER_REAL
 0

	)

318 
	#ITIMER_VIRTUAL
 1

	)

319 
	#ITIMER_PROF
 2

	)

321 
	sôimîvÆ
 {

322 
timevÆ
 
	mô_öãrvÆ
;

323 
timevÆ
 
	mô_vÆue
;

329 
	s˛ocköfo
 {

330 
	mhz
;

331 
	mtick
;

332 
	m•¨e
;

333 
	m°©hz
;

334 
	m¥ofhz
;

338 #i‚de‡
CLOCK_REALTIME


339 
	#CLOCK_REALTIME
 0

	)

340 
	#CLOCK_VIRTUAL
 1

	)

341 
	#CLOCK_PROF
 2

	)

342 
	#CLOCK_MONOTONIC
 4

	)

343 
	#CLOCK_UPTIME
 5

	)

344 
	#CLOCK_UPTIME_PRECISE
 7

	)

345 
	#CLOCK_UPTIME_FAST
 8

	)

346 
	#CLOCK_REALTIME_PRECISE
 9

	)

347 
	#CLOCK_REALTIME_FAST
 10

	)

348 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

349 
	#CLOCK_MONOTONIC_FAST
 12

	)

350 
	#CLOCK_SECOND
 13

	)

351 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

352 
	#CLOCK_PROCESS_CPUTIME_ID
 15

	)

355 #i‚de‡
TIMER_ABSTIME


356 
	#TIMER_RELTIME
 0x0

	)

357 
	#TIMER_ABSTIME
 0x1

	)

360 #i‡
__BSD_VISIBLE


361 
	#CPUCLOCK_WHICH_PID
 0

	)

362 
	#CPUCLOCK_WHICH_TID
 1

	)

365 #ifde‡
_KERNEL


370 
öôtodr
(
time_t
 
ba£
);

371 
ª£âodr
();

373 vﬁ©ûê
time_t
 
time_£c⁄d
;

374 vﬁ©ûê
time_t
 
time_u±ime
;

375 
bötime
 
boŸtimebö
;

376 
timevÆ
 
boŸtime
;

377 
bötime
 
tc_tick_bt
;

378 
sbötime_t
 
tc_tick_sbt
;

379 
bötime
 
tick_bt
;

380 
sbötime_t
 
tick_sbt
;

381 
tc_¥e˚xp
;

382 
tc_timïî˚¡age
;

383 
bötime
 
bt_timëhªshﬁd
;

384 
bötime
 
bt_tickthªshﬁd
;

385 
sbötime_t
 
sbt_timëhªshﬁd
;

386 
sbötime_t
 
sbt_tickthªshﬁd
;

409 
böu±ime
(
bötime
 *
bt
);

410 
«nou±ime
(
time•ec
 *
t•
);

411 
mi¸ou±ime
(
timevÆ
 *
tvp
);

413 
__ölöe
 
sbötime_t


414 
	$sböu±ime
()

416 
bötime
 
_bt
;

418 
	`böu±ime
(&
_bt
);

419  (
	`bâosbt
(
_bt
));

420 
	}
}

422 
bötime
(bötimê*
bt
);

423 
«nŸime
(
time•ec
 *
t•
);

424 
mi¸Ÿime
(
timevÆ
 *
tvp
);

426 
gëböu±ime
(
bötime
 *
bt
);

427 
gë«nou±ime
(
time•ec
 *
t•
);

428 
gëmi¸ou±ime
(
timevÆ
 *
tvp
);

430 
__ölöe
 
sbötime_t


431 
	$gësböu±ime
()

433 
bötime
 
_bt
;

435 
	`gëböu±ime
(&
_bt
);

436  (
	`bâosbt
(
_bt
));

437 
	}
}

439 
gëbötime
(
bötime
 *
bt
);

440 
gë«nŸime
(
time•ec
 *
t•
);

441 
gëmi¸Ÿime
(
timevÆ
 *
tvp
);

444 
ôimîde¸
(
ôimîvÆ
 *
ôp
, 
u£c
);

445 
ôimîfix
(
timevÆ
 *
tv
);

446 
µ§©echeck
(
timevÆ
 *, *, );

447 
øãcheck
(
timevÆ
 *, const timeval *);

448 
timevÆadd
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

449 
timevÆsub
(
timevÆ
 *
t1
, c⁄° timevÆ *
t2
);

450 
tvtohz
(
timevÆ
 *
tv
);

452 
	#TC_DEFAULTPERC
 5

	)

454 
	#BT2FREQ
(
bt
) \

455 (((
uöt64_t
)0x8000000000000000 + ((
bt
)->
‰ac
 >> 2)) / \

456 ((
bt
)->
‰ac
 >> 1))

	)

458 
	#SBT2FREQ
(
sbt
Ë((
SBT_1S
 + ((sbtË>> 1)Ë/ (sbt))

	)

460 
	#FREQ2BT
(
‰eq
, 
bt
) \

462 (
bt
)->
£c
 = 0; \

463 (
bt
)->
‰ac
 = ((
uöt64_t
)0x8000000000000000 / (
‰eq
)) << 1; \

464 }

	)

466 
	#TIMESEL
(
sbt
, 
sbt2
) \

467 (((
sbt2
Ë>
sbt_timëhªshﬁd
) ? \

468 ((*(
sbt
Ë
	`gësböu±ime
()), 1Ë: ((*(sbtË
	`sböu±ime
()), 0))

	)

471 
	~<time.h
>

473 
	~<sys/cdefs.h
>

474 
	~<sys/£À˘.h
>

476 
__BEGIN_DECLS


477 
£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

478 
utimes
(c⁄° *, c⁄° 
timevÆ
 *);

480 #i‡
__BSD_VISIBLE


481 
adjtime
(c⁄° 
timevÆ
 *, timeval *);

482 
˛ock_gë˝u˛ockid2
(
id_t
, , 
˛ockid_t
 *);

483 
futimes
(, c⁄° 
timevÆ
 *);

484 
futimeßt
(, c⁄° *, c⁄° 
timevÆ
 [2]);

485 
lutimes
(c⁄° *, c⁄° 
timevÆ
 *);

486 
£âimeofday
(c⁄° 
timevÆ
 *, c⁄° 
timez⁄e
 *);

489 #i‡
__XSI_VISIBLE


490 
gëôimî
(, 
ôimîvÆ
 *);

491 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

494 
	g__END_DECLS


	@/usr/include/sys/ucontext.h

31 #i‚de‡
_SYS_UCONTEXT_H_


32 
	#_SYS_UCONTEXT_H_


	)

34 
	~<sys/sig«l.h
>

35 
	~<machöe/uc⁄ãxt.h
>

37 
	s__uc⁄ãxt
 {

46 
sig£t_t
 
	muc_sigmask
;

47 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

49 
__uc⁄ãxt
 *
	muc_lök
;

50 
°ack_t
 
	muc_°ack
;

51 
	muc_Êags
;

52 
	#UCF_SWAPPED
 0x00000001

	)

53 
	m__•¨e__
[4];

54 } 
	tuc⁄ãxt_t
;

56 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_FREEBSD4
)

57 #i‡
deföed
(
__i386__
)

58 
	suc⁄ãxt4
 {

59 
sig£t_t
 
	muc_sigmask
;

60 
mc⁄ãxt4
 
	muc_mc⁄ãxt
;

61 
uc⁄ãxt4
 *
	muc_lök
;

62 
°ack_t
 
	muc_°ack
;

63 
	m__•¨e__
[8];

66 
	#uc⁄ãxt4
 
uc⁄ãxt


	)

70 #i‚de‡
_KERNEL


72 
__BEGIN_DECLS


74 
	$gëc⁄ãxt
(
uc⁄ãxt_t
 *Ë
__ªtu∫s_twi˚
;

75 
uc⁄ãxt_t
 *
	`gëc⁄ãxtx
();

76 
	`£tc⁄ãxt
(c⁄° 
uc⁄ãxt_t
 *);

77 
	`makec⁄ãxt
(
uc⁄ãxt_t
 *, (*)(), , ...);

78 
	`sig«lc⁄ãxt
(
uc⁄ãxt_t
 *, , 
__sigh™dÀr_t
 *);

79 
	`sw≠c⁄ãxt
(
uc⁄ãxt_t
 *, const ucontext_t *);

81 #i‡
__BSD_VISIBLE


82 
	`__gëc⁄ãxtx_size
();

83 
	$__fûlc⁄ãxtx
(*
˘x
Ë
__ªtu∫s_twi˚
;

84 
	`__fûlc⁄ãxtx2
(*
˘x
);

87 
__END_DECLS


91 
thªad
;

98 
	#GET_MC_CLEAR_RET
 1

	)

101 
	`gë_mc⁄ãxt
(
thªad
 *, 
mc⁄ãxt_t
 *, );

102 
	`£t_mc⁄ãxt
(
thªad
 *, 
mc⁄ãxt_t
 *);

	@/usr/include/sys/ucred.h

33 #i‚de‡
_SYS_UCRED_H_


34 
	#_SYS_UCRED_H_


	)

36 
	~<bsm/audô.h
>

38 
	glogö˛ass
;

46 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_WANT_UCRED
)

47 
	su¸ed
 {

48 
u_öt
 
	m¸_ªf
;

49 
	#¸_°¨tc›y
 
¸_uid


	)

50 
uid_t
 
	m¸_uid
;

51 
uid_t
 
	m¸_ruid
;

52 
uid_t
 
	m¸_svuid
;

53 
	m¸_ngroups
;

54 
gid_t
 
	m¸_rgid
;

55 
gid_t
 
	m¸_svgid
;

56 
uidöfo
 *
	m¸_uidöfo
;

57 
uidöfo
 *
	m¸_ruidöfo
;

58 
¥is⁄
 *
	m¸_¥is⁄
;

59 
logö˛ass
 *
	m¸_logö˛ass
;

60 
u_öt
 
	m¸_Êags
;

61 *
	m¸_p•¨e2
[2];

62 
	#¸_ídc›y
 
¸_œbñ


	)

63 
œbñ
 *
	m¸_œbñ
;

64 
audôöfo_addr
 
	m¸_audô
;

65 
gid_t
 *
	m¸_groups
;

66 
	m¸_agroups
;

68 
	#NOCRED
 ((
u¸ed
 *)0Ë

	)

69 
	#FSCRED
 ((
u¸ed
 *)-1Ë

	)

72 
	#XU_NGROUPS
 16

	)

77 
	#CRED_FLAG_CAPMODE
 0x00000001

	)

82 
	sxu¸ed
 {

83 
u_öt
 
	m¸_vîsi⁄
;

84 
uid_t
 
	m¸_uid
;

85 
	m¸_ngroups
;

86 
gid_t
 
	m¸_groups
[
XU_NGROUPS
];

87 *
	m_¸_unu£d1
;

89 
	#XUCRED_VERSION
 0

	)

92 
	#¸_gid
 
¸_groups
[0]

	)

94 #ifde‡
_KERNEL


95 
	g¥oc
;

96 
	gthªad
;

98 
ch™ge_egid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
egid
);

99 
ch™ge_euid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
euù
);

100 
ch™ge_rgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
rgid
);

101 
ch™ge_ruid
(
u¸ed
 *
√w¸ed
, 
uidöfo
 *
ruù
);

102 
ch™ge_svgid
(
u¸ed
 *
√w¸ed
, 
gid_t
 
svgid
);

103 
ch™ge_svuid
(
u¸ed
 *
√w¸ed
, 
uid_t
 
svuid
);

104 
¸c›y
(
u¸ed
 *
de°
, u¸ed *
§c
);

105 
u¸ed
 *
¸c›yß„
(
¥oc
 *
p
, u¸ed *
¸
);

106 
u¸ed
 *
¸dup
(u¸ed *
¸
);

107 
¸exãnd
(
u¸ed
 *
¸
, 
n
);

108 
¸ed_upd©e_thªad
(
thªad
 *
td
);

109 
¸‰ì
(
u¸ed
 *
¸
);

110 
u¸ed
 *
¸gë
();

111 
u¸ed
 *
¸hﬁd
(u¸ed *
¸
);

112 
¸sh¨ed
(
u¸ed
 *
¸
);

113 
¸u2x
(
u¸ed
 *
¸
, 
xu¸ed
 *
x¸
);

114 
¸£tgroups
(
u¸ed
 *
¸
, 
n
, 
gid_t
 *
groups
);

115 
groupmembî
(
gid_t
 
gid
, 
u¸ed
 *
¸ed
);

	@/usr/include/sys/unistd.h

33 #i‚de‡
_SYS_UNISTD_H_


34 
	#_SYS_UNISTD_H_


	)

36 
	~<sys/cdefs.h
>

52 
	#_POSIX_ADVISORY_INFO
 200112L

	)

53 
	#_POSIX_ASYNCHRONOUS_IO
 0

	)

54 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_CLOCK_SELECTION
 (-1)

	)

56 
	#_POSIX_CPUTIME
 200112L

	)

57 
	#_POSIX_FSYNC
 200112L

	)

58 
	#_POSIX_IPV6
 0

	)

59 
	#_POSIX_JOB_CONTROL
 1

	)

60 
	#_POSIX_MAPPED_FILES
 200112L

	)

61 
	#_POSIX_MEMLOCK
 (-1)

	)

62 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

63 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

64 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

65 
	#_POSIX_MONOTONIC_CLOCK
 200112L

	)

66 
	#_POSIX_NO_TRUNC
 1

	)

67 
	#_POSIX_PRIORITIZED_IO
 (-1)

	)

68 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

69 
	#_POSIX_RAW_SOCKETS
 200112L

	)

70 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

71 
	#_POSIX_SEMAPHORES
 200112L

	)

72 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

73 
	#_POSIX_SPORADIC_SERVER
 (-1)

	)

74 
	#_POSIX_SYNCHRONIZED_IO
 (-1)

	)

75 
	#_POSIX_TIMEOUTS
 200112L

	)

76 
	#_POSIX_TIMERS
 200112L

	)

77 
	#_POSIX_TYPED_MEMORY_OBJECTS
 (-1)

	)

78 
	#_POSIX_VDISABLE
 0xff

	)

80 #i‡
__XSI_VISIBLE


81 
	#_XOPEN_SHM
 1

	)

82 
	#_XOPEN_STREAMS
 (-1)

	)

92 #ifdef 
_NOT_AVAILABLE


93 
	#_POSIX_SAVED_IDS
 1

	)

97 
	#_POSIX_VERSION
 200112L

	)

100 
	#F_OK
 0

	)

101 
	#X_OK
 0x01

	)

102 
	#W_OK
 0x02

	)

103 
	#R_OK
 0x04

	)

106 #i‚de‡
SEEK_SET


107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

111 #i‡
__BSD_VISIBLE


112 
	#SEEK_DATA
 3

	)

113 
	#SEEK_HOLE
 4

	)

116 #i‚de‡
_POSIX_SOURCE


118 
	#L_SET
 
SEEK_SET


	)

119 
	#L_INCR
 
SEEK_CUR


	)

120 
	#L_XTND
 
SEEK_END


	)

124 
	#_PC_LINK_MAX
 1

	)

125 
	#_PC_MAX_CANON
 2

	)

126 
	#_PC_MAX_INPUT
 3

	)

127 
	#_PC_NAME_MAX
 4

	)

128 
	#_PC_PATH_MAX
 5

	)

129 
	#_PC_PIPE_BUF
 6

	)

130 
	#_PC_CHOWN_RESTRICTED
 7

	)

131 
	#_PC_NO_TRUNC
 8

	)

132 
	#_PC_VDISABLE
 9

	)

134 #i‡
__POSIX_VISIBLE
 >= 199309

135 
	#_PC_ASYNC_IO
 53

	)

136 
	#_PC_PRIO_IO
 54

	)

137 
	#_PC_SYNC_IO
 55

	)

140 #i‡
__POSIX_VISIBLE
 >= 200112

141 
	#_PC_ALLOC_SIZE_MIN
 10

	)

142 
	#_PC_FILESIZEBITS
 12

	)

143 
	#_PC_REC_INCR_XFER_SIZE
 14

	)

144 
	#_PC_REC_MAX_XFER_SIZE
 15

	)

145 
	#_PC_REC_MIN_XFER_SIZE
 16

	)

146 
	#_PC_REC_XFER_ALIGN
 17

	)

147 
	#_PC_SYMLINK_MAX
 18

	)

150 #i‡
__BSD_VISIBLE


151 
	#_PC_ACL_EXTENDED
 59

	)

152 
	#_PC_ACL_PATH_MAX
 60

	)

153 
	#_PC_CAP_PRESENT
 61

	)

154 
	#_PC_INF_PRESENT
 62

	)

155 
	#_PC_MAC_PRESENT
 63

	)

156 
	#_PC_ACL_NFS4
 64

	)

160 
	#_PC_MIN_HOLE_SIZE
 21

	)

162 #i‡
__BSD_VISIBLE


168 
	#RFNAMEG
 (1<<0Ë

	)

169 
	#RFENVG
 (1<<1Ë

	)

170 
	#RFFDG
 (1<<2Ë

	)

171 
	#RFNOTEG
 (1<<3Ë

	)

172 
	#RFPROC
 (1<<4Ë

	)

173 
	#RFMEM
 (1<<5Ë

	)

174 
	#RFNOWAIT
 (1<<6Ë

	)

175 
	#RFCNAMEG
 (1<<10Ë

	)

176 
	#RFCENVG
 (1<<11Ë

	)

177 
	#RFCFDG
 (1<<12Ë

	)

178 
	#RFTHREAD
 (1<<13Ë

	)

179 
	#RFSIGSHARE
 (1<<14Ë

	)

180 
	#RFLINUXTHPN
 (1<<16Ë

	)

181 
	#RFSTOPPED
 (1<<17Ë

	)

182 
	#RFHIGHPID
 (1<<18Ë

	)

183 
	#RFTSIGZMB
 (1<<19Ë

	)

184 
	#RFTSIGSHIFT
 20

	)

185 
	#RFTSIGMASK
 0xFF

	)

186 
	#RFTSIGNUM
(
Êags
Ë(((ÊagsË>> 
RFTSIGSHIFT
Ë& 
RFTSIGMASK
)

	)

187 
	#RFTSIGFLAGS
(
signum
Ë((signumË<< 
RFTSIGSHIFT
)

	)

188 
	#RFPROCDESC
 (1<<28Ë

	)

189 
	#RFPPWAIT
 (1<<31Ë

	)

190 
	#RFFLAGS
 (
RFFDG
 | 
RFPROC
 | 
RFMEM
 | 
RFNOWAIT
 | 
RFCFDG
 | \

191 
RFTHREAD
 | 
RFSIGSHARE
 | 
RFLINUXTHPN
 | 
RFSTOPPED
 | 
RFHIGHPID
 | 
RFTSIGZMB
 | \

192 
RFPROCDESC
 | 
RFPPWAIT
)

	)

193 
	#RFKERNELONLY
 (
RFSTOPPED
 | 
RFHIGHPID
 | 
RFPPWAIT
 | 
RFPROCDESC
)

	)

	@/usr/include/sys/vmmeter.h

33 #i‚de‡
_SYS_VMMETER_H_


34 
	#_SYS_VMMETER_H_


	)

40 
	#MAXSLP
 20

	)

51 
	svmmëî
 {

55 
u_öt
 
	mv_swtch
;

56 
u_öt
 
	mv_å≠
;

57 
u_öt
 
	mv_sysˇŒ
;

58 
u_öt
 
	mv_öå
;

59 
u_öt
 
	mv_so·
;

63 
u_öt
 
	mv_vm_Áu…s
;

64 
u_öt
 
	mv_io_Áu…s
;

65 
u_öt
 
	mv_cow_Áu…s
;

66 
u_öt
 
	mv_cow_›tim
;

67 
u_öt
 
	mv_zfod
;

68 
u_öt
 
	mv_ozfod
;

69 
u_öt
 
	mv_sw≠ö
;

70 
u_öt
 
	mv_sw≠out
;

71 
u_öt
 
	mv_sw≠pgsö
;

72 
u_öt
 
	mv_sw≠pgsout
;

73 
u_öt
 
	mv_vnodeö
;

74 
u_öt
 
	mv_vnodeout
;

75 
u_öt
 
	mv_vnodïgsö
;

76 
u_öt
 
	mv_vnodïgsout
;

77 
u_öt
 
	mv_öå™s
;

78 
u_öt
 
	mv_ªa˘iv©ed
;

79 
u_öt
 
	mv_pdwakeups
;

80 
u_öt
 
	mv_pd∑ges
;

82 
u_öt
 
	mv_tˇched
;

83 
u_öt
 
	mv_d‰ì
;

84 
u_öt
 
	mv_p‰ì
;

85 
u_öt
 
	mv_t‰ì
;

89 
u_öt
 
	mv_∑ge_size
;

90 
u_öt
 
	mv_∑ge_cou¡
;

91 
u_öt
 
	mv_‰ì_ª£rved
;

92 
u_öt
 
	mv_‰ì_èrgë
;

93 
u_öt
 
	mv_‰ì_mö
;

94 
u_öt
 
	mv_‰ì_cou¡
;

95 
u_öt
 
	mv_wúe_cou¡
;

96 
u_öt
 
	mv_a˘ive_cou¡
;

97 
u_öt
 
	mv_öa˘ive_èrgë
;

98 
u_öt
 
	mv_öa˘ive_cou¡
;

99 
u_öt
 
	mv_ˇche_cou¡
;

100 
u_öt
 
	mv_ˇche_mö
;

101 
u_öt
 
	mv_ˇche_max
;

102 
u_öt
 
	mv_∑geout_‰ì_mö
;

103 
u_öt
 
	mv_öãºu±_‰ì_mö
;

104 
u_öt
 
	mv_‰ì_£vîe
;

108 
u_öt
 
	mv_f‹ks
;

109 
u_öt
 
	mv_vf‹ks
;

110 
u_öt
 
	mv_rf‹ks
;

111 
u_öt
 
	mv_kthªads
;

112 
u_öt
 
	mv_f‹k∑ges
;

113 
u_öt
 
	mv_vf‹k∑ges
;

114 
u_öt
 
	mv_rf‹k∑ges
;

115 
u_öt
 
	mv_kthªad∑ges
;

117 #ifde‡
_KERNEL


119 
vmmëî
 
˙t
;

121 
vm_∑geout_wakeup_thªsh
;

130 
__ölöe


132 
	$vm_∑ge_cou¡_£vîe
()

134  (
˙t
.
v_‰ì_£vîe
 > (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

135 
	}
}

147 
__ölöe


149 
	$vm_∑ge_cou¡_mö
()

151  (
˙t
.
v_‰ì_mö
 > (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

152 
	}
}

159 
__ölöe


161 
	$vm_∑ge_cou¡_èrgë
()

163  (
˙t
.
v_‰ì_èrgë
 > (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

164 
	}
}

171 
__ölöe


173 
	$vm_∑gög_èrgë
()

175  (
˙t
.
v_‰ì_èrgë
 - (˙t.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
));

176 
	}
}

182 
__ölöe


184 
	$vm_∑gög_√eded
()

186  (
˙t
.
v_‰ì_cou¡
 + c¡.
v_ˇche_cou¡
 <

187 (
u_öt
)
vm_∑geout_wakeup_thªsh
);

188 
	}
}

193 
	svmtŸÆ
 {

194 
öt16_t
 
	mt_rq
;

195 
öt16_t
 
	mt_dw
;

196 
öt16_t
 
	mt_pw
;

197 
öt16_t
 
	mt_¶
;

198 
öt16_t
 
	mt_sw
;

199 
öt32_t
 
	mt_vm
;

200 
öt32_t
 
	mt_avm
;

201 
öt32_t
 
	mt_rm
;

202 
öt32_t
 
	mt_¨m
;

203 
öt32_t
 
	mt_vmshr
;

204 
öt32_t
 
	mt_avmshr
;

205 
öt32_t
 
	mt_rmshr
;

206 
öt32_t
 
	mt_¨mshr
;

207 
öt32_t
 
	mt_‰ì
;

	@/usr/include/x86/bus.h

97 #i‚de‡
_X86_BUS_H_


98 
	#_X86_BUS_H_


	)

100 
	~<machöe/_bus.h
>

101 
	~<machöe/˝ufunc.h
>

103 #i‚de‡
__GNUCLIKE_ASM


104 #i‚de‡
löt


112 
	#X86_BUS_SPACE_IO
 0

	)

113 
	#X86_BUS_SPACE_MEM
 1

	)

115 
	#BUS_SPACE_MAXSIZE_24BIT
 0xFFFFFF

	)

116 
	#BUS_SPACE_MAXSIZE_32BIT
 0xFFFFFFFF

	)

117 
	#BUS_SPACE_MAXSIZE
 0xFFFFFFFF

	)

118 
	#BUS_SPACE_MAXADDR_24BIT
 0xFFFFFF

	)

119 
	#BUS_SPACE_MAXADDR_32BIT
 0xFFFFFFFF

	)

120 #i‡
deföed
(
__amd64__
Ë|| deföed(
PAE
)

121 
	#BUS_SPACE_MAXADDR
 0xFFFFFFFFFFFFFFFFULL

	)

123 
	#BUS_SPACE_MAXADDR
 0xFFFFFFFF

	)

126 
	#BUS_SPACE_INVALID_DATA
 (~0)

	)

127 
	#BUS_SPACE_UNRESTRICTED
 (~0)

	)

133 
bus_•a˚_m≠
(
bus_•a˚_èg_t
 
èg
, 
bus_addr_t
 
addr
, 
bus_size_t
 
size
,

134 
Êags
, 
bus_•a˚_h™dÀ_t
 *
bshp
);

140 
bus_•a˚_unm≠
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

141 
bus_size_t
 
size
);

147 
__ölöe
 
bus_•a˚_subªgi⁄
(
bus_•a˚_èg_t
 
t
,

148 
bus_•a˚_h™dÀ_t
 
bsh
,

149 
bus_size_t
 
off£t
, bus_size_à
size
,

150 
bus_•a˚_h™dÀ_t
 *
nbshp
);

152 
__ölöe
 

153 
	$bus_•a˚_subªgi⁄
(
bus_•a˚_èg_t
 
t
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
,

154 
bus_size_t
 
off£t
, bus_size_à
size
 
__unu£d
,

155 
bus_•a˚_h™dÀ_t
 *
nbshp
)

158 *
nbshp
 = 
bsh
 + 
off£t
;

160 
	}
}

166 
bus_•a˚_Æloc
(
bus_•a˚_èg_t
 
t
, 
bus_addr_t
 
r°¨t
,

167 
bus_addr_t
 
ªnd
, 
bus_size_t
 
size
, bus_size_à
Æign
,

168 
bus_size_t
 
bound¨y
, 
Êags
, 
bus_addr_t
 *
addΩ
,

169 
bus_•a˚_h™dÀ_t
 *
bshp
);

175 
__ölöe
 
bus_•a˚_‰ì
(
bus_•a˚_èg_t
 
t
, 
bus_•a˚_h™dÀ_t
 
bsh
,

176 
bus_size_t
 
size
);

178 
__ölöe
 

179 
	$bus_•a˚_‰ì
(
bus_•a˚_èg_t
 
t
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
 __unused,

180 
bus_size_t
 
size
 
__unu£d
)

182 
	}
}

189 
__ölöe
 
u_öt8_t
 
bus_•a˚_ªad_1
(
bus_•a˚_èg_t
 
èg
,

190 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

191 
bus_size_t
 
off£t
);

193 
__ölöe
 
u_öt16_t
 
bus_•a˚_ªad_2
(
bus_•a˚_èg_t
 
èg
,

194 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

195 
bus_size_t
 
off£t
);

197 
__ölöe
 
u_öt32_t
 
bus_•a˚_ªad_4
(
bus_•a˚_èg_t
 
èg
,

198 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

199 
bus_size_t
 
off£t
);

201 #ifde‡
__amd64__


202 
__ölöe
 
uöt64_t
 
bus_•a˚_ªad_8
(
bus_•a˚_èg_t
 
èg
,

203 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

204 
bus_size_t
 
off£t
);

207 
__ölöe
 
u_öt8_t


208 
	$bus_•a˚_ªad_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

209 
bus_size_t
 
off£t
)

212 i‡(
èg
 =
X86_BUS_SPACE_IO
)

213  (
	`öb
(
h™dÀ
 + 
off£t
));

214  (*(vﬁ©ûê
u_öt8_t
 *)(
h™dÀ
 + 
off£t
));

215 
	}
}

217 
__ölöe
 
u_öt16_t


218 
	$bus_•a˚_ªad_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

219 
bus_size_t
 
off£t
)

222 i‡(
èg
 =
X86_BUS_SPACE_IO
)

223  (
	`öw
(
h™dÀ
 + 
off£t
));

224  (*(vﬁ©ûê
u_öt16_t
 *)(
h™dÀ
 + 
off£t
));

225 
	}
}

227 
__ölöe
 
u_öt32_t


228 
	$bus_•a˚_ªad_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

229 
bus_size_t
 
off£t
)

232 i‡(
èg
 =
X86_BUS_SPACE_IO
)

233  (
	`öl
(
h™dÀ
 + 
off£t
));

234  (*(vﬁ©ûê
u_öt32_t
 *)(
h™dÀ
 + 
off£t
));

235 
	}
}

237 #ifde‡
__amd64__


238 
__ölöe
 
uöt64_t


239 
	$bus_•a˚_ªad_8
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
h™dÀ
,

240 
bus_size_t
 
off£t
)

243 i‡(
èg
 =
X86_BUS_SPACE_IO
)

244  (
BUS_SPACE_INVALID_DATA
);

245  (*(vﬁ©ûê
uöt64_t
 *)(
h™dÀ
 + 
off£t
));

246 
	}
}

253 
__ölöe
 
bus_•a˚_ªad_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

254 
bus_•a˚_h™dÀ_t
 
bsh
,

255 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
,

256 
size_t
 
cou¡
);

258 
__ölöe
 
bus_•a˚_ªad_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

259 
bus_•a˚_h™dÀ_t
 
bsh
,

260 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
,

261 
size_t
 
cou¡
);

263 
__ölöe
 
bus_•a˚_ªad_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

264 
bus_•a˚_h™dÀ_t
 
bsh
,

265 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
,

266 
size_t
 
cou¡
);

268 
__ölöe
 

269 
	$bus_•a˚_ªad_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

270 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

273 i‡(
èg
 =
X86_BUS_SPACE_IO
)

274 
	`ösb
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

276 #ifde‡
__GNUCLIKE_ASM


277 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movb (%2),%%al \n\
 \n\
 1b" :

282 "=D" (
addr
), "=c" (
cou¡
) :

283 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

287 
	}
}

289 
__ölöe
 

290 
	$bus_•a˚_ªad_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

291 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

294 i‡(
èg
 =
X86_BUS_SPACE_IO
)

295 
	`ösw
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

297 #ifde‡
__GNUCLIKE_ASM


298 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movw (%2),%%ax \n\
 \n\
 1b" :

303 "=D" (
addr
), "=c" (
cou¡
) :

304 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

308 
	}
}

310 
__ölöe
 

311 
	$bus_•a˚_ªad_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

312 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

315 i‡(
èg
 =
X86_BUS_SPACE_IO
)

316 
	`ö¶
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

318 #ifde‡
__GNUCLIKE_ASM


319 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: movl (%2),%%eax \n\
 \n\
 1b" :

324 "=D" (
addr
), "=c" (
cou¡
) :

325 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

329 
	}
}

332 
	#bus_•a˚_ªad_mu…i_8
 !!! 
bus_•a˚_ªad_mu…i_8
 
unim∂emíãd
 !!!

	)

340 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

341 
bus_•a˚_h™dÀ_t
 
bsh
,

342 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
,

343 
size_t
 
cou¡
);

345 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

346 
bus_•a˚_h™dÀ_t
 
bsh
,

347 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
,

348 
size_t
 
cou¡
);

350 
__ölöe
 
bus_•a˚_ªad_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

351 
bus_•a˚_h™dÀ_t
 
bsh
,

352 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
,

353 
size_t
 
cou¡
);

356 
__ölöe
 

357 
	$bus_•a˚_ªad_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

358 
bus_size_t
 
off£t
, 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

361 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

362 
_p‹t_
 = 
bsh
 + 
off£t
;

363 #ifde‡
__GNUCLIKE_ASM


364 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inb %w2,%%al \n\
 \n\
 %2 \n\
 1b" :

370 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

371 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

375 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

376 #ifde‡
__GNUCLIKE_ASM


377 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

381 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

382 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

386 
	}
}

388 
__ölöe
 

389 
	$bus_•a˚_ªad_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

390 
bus_size_t
 
off£t
, 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

393 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

394 
_p‹t_
 = 
bsh
 + 
off£t
;

395 #ifde‡
__GNUCLIKE_ASM


396 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inw %w2,%%ax \n\
 \n\
 $2,%2 \n\
 1b" :

402 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

403 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

407 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

408 #ifde‡
__GNUCLIKE_ASM


409 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

413 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

414 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

418 
	}
}

420 
__ölöe
 

421 
	$bus_•a˚_ªad_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

422 
bus_size_t
 
off£t
, 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

425 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

426 
_p‹t_
 = 
bsh
 + 
off£t
;

427 #ifde‡
__GNUCLIKE_ASM


428 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1: inl %w2,%%eax \n\
 \n\
 $4,%2 \n\
 1b" :

434 "=D" (
addr
), "=c" (
cou¡
), "=d" (
_p‹t_
) :

435 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

439 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

440 #ifde‡
__GNUCLIKE_ASM


441 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

445 "=D" (
addr
), "=c" (
cou¡
), "=S" (
_p‹t_
) :

446 "0" (
addr
), "1" (
cou¡
), "2" (
_p‹t_
) :

450 
	}
}

453 
	#bus_•a˚_ªad_ªgi⁄_8
 !!! 
bus_•a˚_ªad_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

461 
__ölöe
 
bus_•a˚_wrôe_1
(
bus_•a˚_èg_t
 
èg
,

462 
bus_•a˚_h™dÀ_t
 
bsh
,

463 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
);

465 
__ölöe
 
bus_•a˚_wrôe_2
(
bus_•a˚_èg_t
 
èg
,

466 
bus_•a˚_h™dÀ_t
 
bsh
,

467 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
);

469 
__ölöe
 
bus_•a˚_wrôe_4
(
bus_•a˚_èg_t
 
èg
,

470 
bus_•a˚_h™dÀ_t
 
bsh
,

471 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
);

473 #ifde‡
__amd64__


474 
__ölöe
 
bus_•a˚_wrôe_8
(
bus_•a˚_èg_t
 
èg
,

475 
bus_•a˚_h™dÀ_t
 
bsh
,

476 
bus_size_t
 
off£t
, 
uöt64_t
 
vÆue
);

479 
__ölöe
 

480 
	$bus_•a˚_wrôe_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

481 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
)

484 i‡(
èg
 =
X86_BUS_SPACE_IO
)

485 
	`outb
(
bsh
 + 
off£t
, 
vÆue
);

487 *(vﬁ©ûê
u_öt8_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

488 
	}
}

490 
__ölöe
 

491 
	$bus_•a˚_wrôe_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

492 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
)

495 i‡(
èg
 =
X86_BUS_SPACE_IO
)

496 
	`outw
(
bsh
 + 
off£t
, 
vÆue
);

498 *(vﬁ©ûê
u_öt16_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

499 
	}
}

501 
__ölöe
 

502 
	$bus_•a˚_wrôe_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

503 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
)

506 i‡(
èg
 =
X86_BUS_SPACE_IO
)

507 
	`oué
(
bsh
 + 
off£t
, 
vÆue
);

509 *(vﬁ©ûê
u_öt32_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

510 
	}
}

512 #ifde‡
__amd64__


513 
__ölöe
 

514 
	$bus_•a˚_wrôe_8
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

515 
bus_size_t
 
off£t
, 
uöt64_t
 
vÆue
)

518 i‡(
èg
 =
X86_BUS_SPACE_IO
)

521 *(vﬁ©ûê
uöt64_t
 *)(
bsh
 + 
off£t
Ë
vÆue
;

522 
	}
}

530 
__ölöe
 
bus_•a˚_wrôe_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

531 
bus_•a˚_h™dÀ_t
 
bsh
,

532 
bus_size_t
 
off£t
,

533 c⁄° 
u_öt8_t
 *
addr
,

534 
size_t
 
cou¡
);

535 
__ölöe
 
bus_•a˚_wrôe_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

536 
bus_•a˚_h™dÀ_t
 
bsh
,

537 
bus_size_t
 
off£t
,

538 c⁄° 
u_öt16_t
 *
addr
,

539 
size_t
 
cou¡
);

541 
__ölöe
 
bus_•a˚_wrôe_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

542 
bus_•a˚_h™dÀ_t
 
bsh
,

543 
bus_size_t
 
off£t
,

544 c⁄° 
u_öt32_t
 *
addr
,

545 
size_t
 
cou¡
);

547 
__ölöe
 

548 
	$bus_•a˚_wrôe_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

549 
bus_size_t
 
off£t
, c⁄° 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

552 i‡(
èg
 =
X86_BUS_SPACE_IO
)

553 
	`outsb
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

555 #ifde‡
__GNUCLIKE_ASM


556 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsb \n\
 %%al,(%2) \n\
 1b" :

561 "=S" (
addr
), "=c" (
cou¡
) :

562 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

566 
	}
}

568 
__ölöe
 

569 
	$bus_•a˚_wrôe_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

570 
bus_size_t
 
off£t
, c⁄° 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

573 i‡(
èg
 =
X86_BUS_SPACE_IO
)

574 
	`outsw
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

576 #ifde‡
__GNUCLIKE_ASM


577 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsw \n\
 %%ax,(%2) \n\
 1b" :

582 "=S" (
addr
), "=c" (
cou¡
) :

583 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

587 
	}
}

589 
__ölöe
 

590 
	$bus_•a˚_wrôe_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

591 
bus_size_t
 
off£t
, c⁄° 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

594 i‡(
èg
 =
X86_BUS_SPACE_IO
)

595 
	`out¶
(
bsh
 + 
off£t
, 
addr
, 
cou¡
);

597 #ifde‡
__GNUCLIKE_ASM


598 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsl \n\
 %%eax,(%2) \n\
 1b" :

603 "=S" (
addr
), "=c" (
cou¡
) :

604 "r" (
bsh
 + 
off£t
), "0" (
addr
), "1" (
cou¡
) :

608 
	}
}

611 
	#bus_•a˚_wrôe_mu…i_8
(
t
, 
h
, 
o
, 
a
, 
c
) \

612 !!! 
bus_•a˚_wrôe_mu…i_8
 
unim∂emíãd
 !!!

	)

620 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

621 
bus_•a˚_h™dÀ_t
 
bsh
,

622 
bus_size_t
 
off£t
,

623 c⁄° 
u_öt8_t
 *
addr
,

624 
size_t
 
cou¡
);

625 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

626 
bus_•a˚_h™dÀ_t
 
bsh
,

627 
bus_size_t
 
off£t
,

628 c⁄° 
u_öt16_t
 *
addr
,

629 
size_t
 
cou¡
);

630 
__ölöe
 
bus_•a˚_wrôe_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

631 
bus_•a˚_h™dÀ_t
 
bsh
,

632 
bus_size_t
 
off£t
,

633 c⁄° 
u_öt32_t
 *
addr
,

634 
size_t
 
cou¡
);

636 
__ölöe
 

637 
	$bus_•a˚_wrôe_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

638 
bus_size_t
 
off£t
, c⁄° 
u_öt8_t
 *
addr
, 
size_t
 
cou¡
)

641 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

642 
_p‹t_
 = 
bsh
 + 
off£t
;

643 #ifde‡
__GNUCLIKE_ASM


644 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsb \n\
 %%al,%w0 \n\
 %0 \n\
 1b" :

650 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

651 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

655 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

656 #ifde‡
__GNUCLIKE_ASM


657 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

661 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

662 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

666 
	}
}

668 
__ölöe
 

669 
	$bus_•a˚_wrôe_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

670 
bus_size_t
 
off£t
, c⁄° 
u_öt16_t
 *
addr
, 
size_t
 
cou¡
)

673 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

674 
_p‹t_
 = 
bsh
 + 
off£t
;

675 #ifde‡
__GNUCLIKE_ASM


676 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsw \n\
 %%ax,%w0 \n\
 $2,%0 \n\
 1b" :

682 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

683 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

687 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

688 #ifde‡
__GNUCLIKE_ASM


689 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

693 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

694 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

698 
	}
}

700 
__ölöe
 

701 
	$bus_•a˚_wrôe_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

702 
bus_size_t
 
off£t
, c⁄° 
u_öt32_t
 *
addr
, 
size_t
 
cou¡
)

705 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

706 
_p‹t_
 = 
bsh
 + 
off£t
;

707 #ifde‡
__GNUCLIKE_ASM


708 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
1:Üodsl \n\
 %%eax,%w0 \n\
 $4,%0 \n\
 1b" :

714 "=d" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

715 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

719 
bus_•a˚_h™dÀ_t
 
_p‹t_
 = 
bsh
 + 
off£t
;

720 #ifde‡
__GNUCLIKE_ASM


721 
__asm
 
	`__vﬁ©ûe
(" \n\
 \n\
 \n\
" :

725 "=D" (
_p‹t_
), "=S" (
addr
), "=c" (
cou¡
) :

726 "0" (
_p‹t_
), "1" (
addr
), "2" (
cou¡
) :

730 
	}
}

733 
	#bus_•a˚_wrôe_ªgi⁄_8
 \

734 !!! 
bus_•a˚_wrôe_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

742 
__ölöe
 
bus_•a˚_£t_mu…i_1
(
bus_•a˚_èg_t
 
èg
,

743 
bus_•a˚_h™dÀ_t
 
bsh
,

744 
bus_size_t
 
off£t
,

745 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
);

746 
__ölöe
 
bus_•a˚_£t_mu…i_2
(
bus_•a˚_èg_t
 
èg
,

747 
bus_•a˚_h™dÀ_t
 
bsh
,

748 
bus_size_t
 
off£t
,

749 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
);

750 
__ölöe
 
bus_•a˚_£t_mu…i_4
(
bus_•a˚_èg_t
 
èg
,

751 
bus_•a˚_h™dÀ_t
 
bsh
,

752 
bus_size_t
 
off£t
,

753 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
);

755 
__ölöe
 

756 
	$bus_•a˚_£t_mu…i_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

757 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
)

759 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

761 i‡(
èg
 =
X86_BUS_SPACE_IO
)

762 
cou¡
--)

763 
	`outb
(
addr
, 
vÆue
);

765 
cou¡
--)

766 *(vﬁ©ûê
u_öt8_t
 *)(
addr
Ë
vÆue
;

767 
	}
}

769 
__ölöe
 

770 
	$bus_•a˚_£t_mu…i_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

771 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
)

773 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

775 i‡(
èg
 =
X86_BUS_SPACE_IO
)

776 
cou¡
--)

777 
	`outw
(
addr
, 
vÆue
);

779 
cou¡
--)

780 *(vﬁ©ûê
u_öt16_t
 *)(
addr
Ë
vÆue
;

781 
	}
}

783 
__ölöe
 

784 
	$bus_•a˚_£t_mu…i_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

785 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
)

787 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

789 i‡(
èg
 =
X86_BUS_SPACE_IO
)

790 
cou¡
--)

791 
	`oué
(
addr
, 
vÆue
);

793 
cou¡
--)

794 *(vﬁ©ûê
u_öt32_t
 *)(
addr
Ë
vÆue
;

795 
	}
}

798 
	#bus_•a˚_£t_mu…i_8
 !!! 
bus_•a˚_£t_mu…i_8
 
unim∂emíãd
 !!!

	)

806 
__ölöe
 
bus_•a˚_£t_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

807 
bus_•a˚_h™dÀ_t
 
bsh
,

808 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
,

809 
size_t
 
cou¡
);

810 
__ölöe
 
bus_•a˚_£t_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

811 
bus_•a˚_h™dÀ_t
 
bsh
,

812 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
,

813 
size_t
 
cou¡
);

814 
__ölöe
 
bus_•a˚_£t_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

815 
bus_•a˚_h™dÀ_t
 
bsh
,

816 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
,

817 
size_t
 
cou¡
);

819 
__ölöe
 

820 
	$bus_•a˚_£t_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

821 
bus_size_t
 
off£t
, 
u_öt8_t
 
vÆue
, 
size_t
 
cou¡
)

823 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

825 i‡(
èg
 =
X86_BUS_SPACE_IO
)

826 ; 
cou¡
 !0; cou¡--, 
addr
++)

827 
	`outb
(
addr
, 
vÆue
);

829 ; 
cou¡
 !0; cou¡--, 
addr
++)

830 *(vﬁ©ûê
u_öt8_t
 *)(
addr
Ë
vÆue
;

831 
	}
}

833 
__ölöe
 

834 
	$bus_•a˚_£t_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

835 
bus_size_t
 
off£t
, 
u_öt16_t
 
vÆue
, 
size_t
 
cou¡
)

837 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

839 i‡(
èg
 =
X86_BUS_SPACE_IO
)

840 ; 
cou¡
 !0; cou¡--, 
addr
 += 2)

841 
	`outw
(
addr
, 
vÆue
);

843 ; 
cou¡
 !0; cou¡--, 
addr
 += 2)

844 *(vﬁ©ûê
u_öt16_t
 *)(
addr
Ë
vÆue
;

845 
	}
}

847 
__ölöe
 

848 
	$bus_•a˚_£t_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh
,

849 
bus_size_t
 
off£t
, 
u_öt32_t
 
vÆue
, 
size_t
 
cou¡
)

851 
bus_•a˚_h™dÀ_t
 
addr
 = 
bsh
 + 
off£t
;

853 i‡(
èg
 =
X86_BUS_SPACE_IO
)

854 ; 
cou¡
 !0; cou¡--, 
addr
 += 4)

855 
	`oué
(
addr
, 
vÆue
);

857 ; 
cou¡
 !0; cou¡--, 
addr
 += 4)

858 *(vﬁ©ûê
u_öt32_t
 *)(
addr
Ë
vÆue
;

859 
	}
}

862 
	#bus_•a˚_£t_ªgi⁄_8
 !!! 
bus_•a˚_£t_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

870 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
,

871 
bus_•a˚_h™dÀ_t
 
bsh1
,

872 
bus_size_t
 
off1
,

873 
bus_•a˚_h™dÀ_t
 
bsh2
,

874 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

876 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
,

877 
bus_•a˚_h™dÀ_t
 
bsh1
,

878 
bus_size_t
 
off1
,

879 
bus_•a˚_h™dÀ_t
 
bsh2
,

880 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

882 
__ölöe
 
bus_•a˚_c›y_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
,

883 
bus_•a˚_h™dÀ_t
 
bsh1
,

884 
bus_size_t
 
off1
,

885 
bus_•a˚_h™dÀ_t
 
bsh2
,

886 
bus_size_t
 
off2
, 
size_t
 
cou¡
);

888 
__ölöe
 

889 
	$bus_•a˚_c›y_ªgi⁄_1
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

890 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

891 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

893 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

894 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

896 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

897 i‡(
addr1
 >
addr2
) {

899 ; 
cou¡
 !0; cou¡--, 
addr1
++, 
addr2
++)

900 
	`outb
(
addr2
, 
	`öb
(
addr1
));

903 
addr1
 +(
cou¡
 - 1), 
addr2
 += (count - 1);

904 
cou¡
 !0; cou¡--, 
addr1
--, 
addr2
--)

905 
	`outb
(
addr2
, 
	`öb
(
addr1
));

908 i‡(
addr1
 >
addr2
) {

910 ; 
cou¡
 !0; cou¡--, 
addr1
++, 
addr2
++)

911 *(vﬁ©ûê
u_öt8_t
 *)(
addr2
) =

912 *(vﬁ©ûê
u_öt8_t
 *)(
addr1
);

915 
addr1
 +(
cou¡
 - 1), 
addr2
 += (count - 1);

916 
cou¡
 !0; cou¡--, 
addr1
--, 
addr2
--)

917 *(vﬁ©ûê
u_öt8_t
 *)(
addr2
) =

918 *(vﬁ©ûê
u_öt8_t
 *)(
addr1
);

921 
	}
}

923 
__ölöe
 

924 
	$bus_•a˚_c›y_ªgi⁄_2
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

925 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

926 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

928 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

929 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

931 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

932 i‡(
addr1
 >
addr2
) {

934 ; 
cou¡
 !0; cou¡--, 
addr1
 +2, 
addr2
 += 2)

935 
	`outw
(
addr2
, 
	`öw
(
addr1
));

938 
addr1
 +2 * (
cou¡
 - 1), 
addr2
 += 2 * (count - 1);

939 
cou¡
 !0; cou¡--, 
addr1
 -2, 
addr2
 -= 2)

940 
	`outw
(
addr2
, 
	`öw
(
addr1
));

943 i‡(
addr1
 >
addr2
) {

945 ; 
cou¡
 !0; cou¡--, 
addr1
 +2, 
addr2
 += 2)

946 *(vﬁ©ûê
u_öt16_t
 *)(
addr2
) =

947 *(vﬁ©ûê
u_öt16_t
 *)(
addr1
);

950 
addr1
 +2 * (
cou¡
 - 1), 
addr2
 += 2 * (count - 1);

951 
cou¡
 !0; cou¡--, 
addr1
 -2, 
addr2
 -= 2)

952 *(vﬁ©ûê
u_öt16_t
 *)(
addr2
) =

953 *(vﬁ©ûê
u_öt16_t
 *)(
addr1
);

956 
	}
}

958 
__ölöe
 

959 
	$bus_•a˚_c›y_ªgi⁄_4
(
bus_•a˚_èg_t
 
èg
, 
bus_•a˚_h™dÀ_t
 
bsh1
,

960 
bus_size_t
 
off1
, 
bus_•a˚_h™dÀ_t
 
bsh2
,

961 
bus_size_t
 
off2
, 
size_t
 
cou¡
)

963 
bus_•a˚_h™dÀ_t
 
addr1
 = 
bsh1
 + 
off1
;

964 
bus_•a˚_h™dÀ_t
 
addr2
 = 
bsh2
 + 
off2
;

966 i‡(
èg
 =
X86_BUS_SPACE_IO
) {

967 i‡(
addr1
 >
addr2
) {

969 ; 
cou¡
 !0; cou¡--, 
addr1
 +4, 
addr2
 += 4)

970 
	`oué
(
addr2
, 
	`öl
(
addr1
));

973 
addr1
 +4 * (
cou¡
 - 1), 
addr2
 += 4 * (count - 1);

974 
cou¡
 !0; cou¡--, 
addr1
 -4, 
addr2
 -= 4)

975 
	`oué
(
addr2
, 
	`öl
(
addr1
));

978 i‡(
addr1
 >
addr2
) {

980 ; 
cou¡
 !0; cou¡--, 
addr1
 +4, 
addr2
 += 4)

981 *(vﬁ©ûê
u_öt32_t
 *)(
addr2
) =

982 *(vﬁ©ûê
u_öt32_t
 *)(
addr1
);

985 
addr1
 +4 * (
cou¡
 - 1), 
addr2
 += 4 * (count - 1);

986 
cou¡
 !0; cou¡--, 
addr1
 -4, 
addr2
 -= 4)

987 *(vﬁ©ûê
u_öt32_t
 *)(
addr2
) =

988 *(vﬁ©ûê
u_öt32_t
 *)(
addr1
);

991 
	}
}

994 
	#bus_•a˚_c›y_ªgi⁄_8
 !!! 
bus_•a˚_c›y_ªgi⁄_8
 
unim∂emíãd
 !!!

	)

1008 
	#BUS_SPACE_BARRIER_READ
 0x01

	)

1009 
	#BUS_SPACE_BARRIER_WRITE
 0x02

	)

1011 
__ölöe
 

1012 
	$bus_•a˚_b¨rõr
(
bus_•a˚_èg_t
 
èg
 
__unu£d
, 
bus_•a˚_h™dÀ_t
 
bsh
 __unused,

1013 
bus_size_t
 
off£t
 
__unu£d
, bus_size_à
Àn
 __unu£d, 
Êags
)

1015 #ifde‡
__GNUCLIKE_ASM


1016 i‡(
Êags
 & 
BUS_SPACE_BARRIER_READ
)

1017 #ifde‡
__amd64__


1018 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,0(%%rsp)" : : : "memory");

1020 
__asm
 
	`__vﬁ©ûe
("lock;áddl $0,0(%%esp)" : : : "memory");

1023 
	`__compûî_memb¨
();

1025 
	}
}

1027 #ifde‡
BUS_SPACE_NO_LEGACY


1028 #unde‡
öb


1029 #unde‡
outb


1030 
	#öb
(
a
Ë
compûî_îr‹


	)

1031 
	#öw
(
a
Ë
compûî_îr‹


	)

1032 
	#öl
(
a
Ë
compûî_îr‹


	)

1033 
	#outb
(
a
, 
b
Ë
compûî_îr‹


	)

1034 
	#outw
(
a
, 
b
Ë
compûî_îr‹


	)

1035 
	#oué
(
a
, 
b
Ë
compûî_îr‹


	)

1038 
	~<machöe/bus_dma.h
>

1044 
	#bus_•a˚_ªad_°ªam_1
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_1
(—), (h), (o))

	)

1045 
	#bus_•a˚_ªad_°ªam_2
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_2
(—), (h), (o))

	)

1046 
	#bus_•a˚_ªad_°ªam_4
(
t
, 
h
, 
o
Ë
	`bus_•a˚_ªad_4
(—), (h), (o))

	)

1048 
	#bus_•a˚_ªad_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1049 
	`bus_•a˚_ªad_mu…i_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1050 
	#bus_•a˚_ªad_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1051 
	`bus_•a˚_ªad_mu…i_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1052 
	#bus_•a˚_ªad_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1053 
	`bus_•a˚_ªad_mu…i_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1055 
	#bus_•a˚_wrôe_°ªam_1
(
t
, 
h
, 
o
, 
v
) \

1056 
	`bus_•a˚_wrôe_1
((
t
), (
h
), (
o
), (
v
))

	)

1057 
	#bus_•a˚_wrôe_°ªam_2
(
t
, 
h
, 
o
, 
v
) \

1058 
	`bus_•a˚_wrôe_2
((
t
), (
h
), (
o
), (
v
))

	)

1059 
	#bus_•a˚_wrôe_°ªam_4
(
t
, 
h
, 
o
, 
v
) \

1060 
	`bus_•a˚_wrôe_4
((
t
), (
h
), (
o
), (
v
))

	)

1062 
	#bus_•a˚_wrôe_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1063 
	`bus_•a˚_wrôe_mu…i_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1064 
	#bus_•a˚_wrôe_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1065 
	`bus_•a˚_wrôe_mu…i_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1066 
	#bus_•a˚_wrôe_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1067 
	`bus_•a˚_wrôe_mu…i_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1069 
	#bus_•a˚_£t_mu…i_°ªam_1
(
t
, 
h
, 
o
, 
v
, 
c
) \

1070 
	`bus_•a˚_£t_mu…i_1
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1071 
	#bus_•a˚_£t_mu…i_°ªam_2
(
t
, 
h
, 
o
, 
v
, 
c
) \

1072 
	`bus_•a˚_£t_mu…i_2
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1073 
	#bus_•a˚_£t_mu…i_°ªam_4
(
t
, 
h
, 
o
, 
v
, 
c
) \

1074 
	`bus_•a˚_£t_mu…i_4
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1076 
	#bus_•a˚_ªad_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1077 
	`bus_•a˚_ªad_ªgi⁄_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1078 
	#bus_•a˚_ªad_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1079 
	`bus_•a˚_ªad_ªgi⁄_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1080 
	#bus_•a˚_ªad_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1081 
	`bus_•a˚_ªad_ªgi⁄_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1083 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
a
, 
c
) \

1084 
	`bus_•a˚_wrôe_ªgi⁄_1
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1085 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
a
, 
c
) \

1086 
	`bus_•a˚_wrôe_ªgi⁄_2
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1087 
	#bus_•a˚_wrôe_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
a
, 
c
) \

1088 
	`bus_•a˚_wrôe_ªgi⁄_4
((
t
), (
h
), (
o
), (
a
), (
c
))

	)

1090 
	#bus_•a˚_£t_ªgi⁄_°ªam_1
(
t
, 
h
, 
o
, 
v
, 
c
) \

1091 
	`bus_•a˚_£t_ªgi⁄_1
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1092 
	#bus_•a˚_£t_ªgi⁄_°ªam_2
(
t
, 
h
, 
o
, 
v
, 
c
) \

1093 
	`bus_•a˚_£t_ªgi⁄_2
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1094 
	#bus_•a˚_£t_ªgi⁄_°ªam_4
(
t
, 
h
, 
o
, 
v
, 
c
) \

1095 
	`bus_•a˚_£t_ªgi⁄_4
((
t
), (
h
), (
o
), (
v
), (
c
))

	)

1097 
	#bus_•a˚_c›y_ªgi⁄_°ªam_1
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1098 
	`bus_•a˚_c›y_ªgi⁄_1
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

1099 
	#bus_•a˚_c›y_ªgi⁄_°ªam_2
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1100 
	`bus_•a˚_c›y_ªgi⁄_2
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

1101 
	#bus_•a˚_c›y_ªgi⁄_°ªam_4
(
t
, 
h1
, 
o1
, 
h2
, 
o2
, 
c
) \

1102 
	`bus_•a˚_c›y_ªgi⁄_4
((
t
), (
h1
), (
o1
), (
h2
), (
o2
), (
c
))

	)

	@/usr/include/x86/stdarg.h

31 #i‚de‡
_MACHINE_STDARG_H_


32 
	#_MACHINE_STDARG_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 #i‚de‡
_VA_LIST_DECLARED


38 
	#_VA_LIST_DECLARED


	)

39 
__va_li°
 
	tva_li°
;

42 #ifde‡
__GNUCLIKE_BUILTIN_STDARG


44 
	#va_°¨t
(
≠
, 
œ°
) \

45 
	`__buûtö_va_°¨t
((
≠
), (
œ°
))

	)

47 
	#va_¨g
(
≠
, 
ty≥
) \

48 
	`__buûtö_va_¨g
((
≠
), 
ty≥
)

	)

50 
	#__va_c›y
(
de°
, 
§c
) \

51 
	`__buûtö_va_c›y
((
de°
), (
§c
))

	)

53 #i‡
__ISO_C_VISIBLE
 >= 1999

54 
	#va_c›y
(
de°
, 
§c
) \

55 
	`__va_c›y
(
de°
, 
§c
)

	)

58 
	#va_íd
(
≠
) \

59 
	`__buûtö_va_íd
(
≠
)

	)

61 #ñi‡
deföed
(
löt
)

63 
	#__va_size
(
ty≥
) \

64 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

65 
	#va_°¨t
(
≠
, 
œ°
) \

66 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

67 
	#va_c›y
(
d°
, 
§c
) \

68 ((
d°
Ë(
§c
))

	)

69 
	#va_¨g
(
≠
, 
ty≥
) \

70 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

71 
	#va_íd
(
≠
)

	)

74 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@/usr/include/xlocale/_ctype.h

33 #if (
deföed
(
_XLOCALE_WCTYPES
Ë&& !deföed(
_XLOCALE_WCTYPE_H
)) || \

34 (!
deföed
(
_XLOCALE_WCTYPES
Ë&& !
	$deföed
(
_XLOCALE_CTYPE_H
))

36 #ifde‡
_XLOCALE_WCTYPES


37 
	#_XLOCALE_WCTYPE_H


	)

39 
	#_XLOCALE_CTYPE_H


	)

42 #i‚de‡
_LOCALE_T_DEFINED


43 
	#_LOCALE_T_DEFINED


	)

44 
_xloˇÀ
 *
	tloˇÀ_t
;

47 #i‚de‡
_XLOCALE_RUN_FUNCTIONS_DEFINED


48 
	#_XLOCALE_RUN_FUNCTIONS_DEFINED
 1

	)

49 
	$___ru√ty≥_l
(
__˘_ru√_t
, 
loˇÀ_t
Ë
__puª
;

50 
__˘_ru√_t
 
	$___tﬁowî_l
(
__˘_ru√_t
, 
loˇÀ_t
Ë
__puª
;

51 
__˘_ru√_t
 
	$___touµî_l
(
__˘_ru√_t
, 
loˇÀ_t
Ë
__puª
;

52 
_Ru√LoˇÀ
 *
	`__ru√s_f‹_loˇÀ
(
loˇÀ_t
, *);

55 #i‚de‡
_XLOCALE_INLINE


56 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

58 
	#_XLOCALE_INLINE
 
__ölöe


	)

61 #ifde‡
ölöe


62 
	#_XLOCALE_INLINE
 
__ölöe


	)

65 
	#_XLOCALE_INLINE
 
ölöe


	)

70 #ifde‡
_XLOCALE_WCTYPES


71 
_XLOCALE_INLINE
 

72 
	`__maskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

73 
_XLOCALE_INLINE
 

74 
	`__i°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

76 
_XLOCALE_INLINE
 

77 
	$__maskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

79 
__limô
;

80 
_Ru√LoˇÀ
 *
ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__loc
, &
__limô
);

81  ((
__c
 < 0 || __¯>
_CACHED_RUNES
Ë? 
	`___ru√ty≥_l
(__c, 
__loc
) :

82 
ru√s
->
__ru√ty≥
[
__c
]Ë& 
__f
;

83 
	}
}

85 
_XLOCALE_INLINE
 

86 
	$__i°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

88  (!!
	`__maskru√_l
(
__c
, 
__f
, 
__loc
));

89 
	}
}

91 
	#XLOCALE_ISCTYPE
(
‚ame
, 
ˇt
) \

92 
_XLOCALE_INLINE
 
isw
##
‚ame
##
	`_l
(, 
loˇÀ_t
);\

93 
_XLOCALE_INLINE
 
isw
##
‚ame
##
	`_l
(
__c
, 
loˇÀ_t
 
__l
)\

94 {  
	`__i°y≥_l
(
__c
, 
ˇt
, 
__l
); }

	)

96 
_XLOCALE_INLINE
 

97 
__sbmaskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

98 
_XLOCALE_INLINE
 

99 
__sbi°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
);

101 
_XLOCALE_INLINE
 

102 
	$__sbmaskru√_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

104 
__limô
;

105 
_Ru√LoˇÀ
 *
ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__loc
, &
__limô
);

106  (
__c
 < 0 || __¯>
__limô
) ? 0 :

107 
ru√s
->
__ru√ty≥
[
__c
] & 
__f
;

108 
	}
}

110 
_XLOCALE_INLINE
 

111 
	$__sbi°y≥_l
(
__˘_ru√_t
 
__c
, 
__f
, 
loˇÀ_t
 
__loc
)

113  (!!
	`__sbmaskru√_l
(
__c
, 
__f
, 
__loc
));

114 
	}
}

116 
	#XLOCALE_ISCTYPE
(
__‚ame
, 
__ˇt
) \

117 
_XLOCALE_INLINE
 
is
##
__‚ame
##
	`_l
(, 
loˇÀ_t
); \

118 
_XLOCALE_INLINE
 
is
##
__‚ame
##
	`_l
(
__c
, 
loˇÀ_t
 
__l
)\

119 {  
	`__sbi°y≥_l
(
__c
, 
__ˇt
, 
__l
); }

	)

122 
XLOCALE_ISCTYPE
(
Ænum
, 
_CTYPE_A
|
_CTYPE_D
)

123 
	$XLOCALE_ISCTYPE
(
Æpha
, 
_CTYPE_A
)

124 
	$XLOCALE_ISCTYPE
(
bœnk
, 
_CTYPE_B
)

125 
	$XLOCALE_ISCTYPE
(
˙ål
, 
_CTYPE_C
)

126 
	$XLOCALE_ISCTYPE
(
digô
, 
_CTYPE_D
)

127 
	$XLOCALE_ISCTYPE
(
gøph
, 
_CTYPE_G
)

128 
	$XLOCALE_ISCTYPE
(
hexnumbî
, 
_CTYPE_X
)

129 
	$XLOCALE_ISCTYPE
(
ideogøm
, 
_CTYPE_I
)

130 
	$XLOCALE_ISCTYPE
(
lowî
, 
_CTYPE_L
)

131 
	$XLOCALE_ISCTYPE
(
numbî
, 
_CTYPE_D
)

132 
	$XLOCALE_ISCTYPE
(
ph⁄ogøm
, 
_CTYPE_Q
)

133 
	$XLOCALE_ISCTYPE
(
¥öt
, 
_CTYPE_R
)

134 
	$XLOCALE_ISCTYPE
(
pun˘
, 
_CTYPE_P
)

135 
	$XLOCALE_ISCTYPE
(
ru√
, 0xFFFFFF00L)

136 
	$XLOCALE_ISCTYPE
(
•a˚
, 
_CTYPE_S
)

137 
	$XLOCALE_ISCTYPE
(
•ecül
, 
_CTYPE_T
)

138 
	$XLOCALE_ISCTYPE
(
uµî
, 
_CTYPE_U
)

139 
	$XLOCALE_ISCTYPE
(
xdigô
, 
_CTYPE_X
)

140 #unde‡
XLOCALE_ISCTYPE


142 #ifde‡
_XLOCALE_WCTYPES


143 
_XLOCALE_INLINE
 
	`towlowî_l
(, 
loˇÀ_t
);

144 
_XLOCALE_INLINE
 
	`__wcwidth_l
(
__˘_ru√_t
, 
loˇÀ_t
);

145 
_XLOCALE_INLINE
 
	`towuµî_l
(, 
loˇÀ_t
);

147 
_XLOCALE_INLINE
 
	$towlowî_l
(
__c
, 
loˇÀ_t
 
__l
)

149 
__limô
;

150 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

151  (
__c
 < 0 || __¯>
_CACHED_RUNES
Ë? 
	`___tﬁowî_l
(__c, 
__l
) :

152 
__ru√s
->
__m≠lowî
[
__c
];

153 
	}
}

154 
_XLOCALE_INLINE
 
	$towuµî_l
(
__c
, 
loˇÀ_t
 
__l
)

156 
__limô
;

157 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

158  (
__c
 < 0 || __¯>
_CACHED_RUNES
Ë? 
	`___touµî_l
(__c, 
__l
) :

159 
__ru√s
->
__m≠uµî
[
__c
];

160 
	}
}

161 
_XLOCALE_INLINE
 

162 
	$__wcwidth_l
(
__˘_ru√_t
 
_c
, 
loˇÀ_t
 
__l
)

164 
_x
;

166 i‡(
_c
 == 0)

168 
_x
 = ()
	`__maskru√_l
(
_c
, 
_CTYPE_SWM
|
_CTYPE_R
, 
__l
);

169 i‡((
_x
 & 
_CTYPE_SWM
) != 0)

170  ((
_x
 & 
_CTYPE_SWM
Ë>> 
_CTYPE_SWS
);

171  ((
_x
 & 
_CTYPE_R
) != 0 ? 1 : -1);

172 
	}
}

173 
isw˘y≥_l
(
wöt_t
 
__wc
, 
w˘y≥_t
 
__ch¨˛ass
, 
loˇÀ_t
 
__l
);

174 
w˘y≥_t
 
w˘y≥_l
(c⁄° *
¥›îty
, 
loˇÀ_t
 
__l
);

175 
wöt_t
 
tow˘øns_l
(wöt_à
__wc
, 
w˘øns_t
 
desc
, 
loˇÀ_t
 
__l
);

176 
wöt_t
 
√xtw˘y≥_l
(wöt_à
__wc
, 
w˘y≥_t
 
w˘
, 
loˇÀ_t
 
__l
);

177 
w˘øns_t
 
w˘øns_l
(c⁄° *
__ch¨˛ass
, 
loˇÀ_t
 
__l
);

178 #unde‡
_XLOCALE_WCTYPES


180 
_XLOCALE_INLINE
 
digôtoöt_l
(, 
loˇÀ_t
);

181 
_XLOCALE_INLINE
 
tﬁowî_l
(, 
loˇÀ_t
);

182 
_XLOCALE_INLINE
 
touµî_l
(, 
loˇÀ_t
);

184 
_XLOCALE_INLINE
 
	$digôtoöt_l
(
__c
, 
loˇÀ_t
 
__l
)

185 {  
	`__sbmaskru√_l
((
__c
), 0xFF, 
__l
); 
	}
}

187 
_XLOCALE_INLINE
 
	$tﬁowî_l
(
__c
, 
loˇÀ_t
 
__l
)

189 
__limô
;

190 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

191  (
__c
 < 0 || __¯>
__limô
) ? __c :

192 
__ru√s
->
__m≠lowî
[
__c
];

193 
	}
}

194 
_XLOCALE_INLINE
 
	$touµî_l
(
__c
, 
loˇÀ_t
 
__l
)

196 
__limô
;

197 
_Ru√LoˇÀ
 *
__ru√s
 = 
	`__ru√s_f‹_loˇÀ
(
__l
, &
__limô
);

198  (
__c
 < 0 || __¯>
__limô
) ? __c :

199 
__ru√s
->
__m≠uµî
[
__c
];

200 
	}
}

203 (!
deföed
(
_XLOCALE_WCTYPES
Ë&& !deföed(
_XLOCALE_CTYPE_H
)) */

	@/usr/include/xlocale/_stdio.h

32 
	$a•rötf_l
(**, 
loˇÀ_t
, c⁄° *, ...Ë
	`__¥ötÊike
(3, 4);

33 
	$d¥ötf_l
(, 
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...)

34 
	`__¥ötÊike
(3, 4);

35 
	$Ârötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

36 
	`__¥ötÊike
(3, 4);

37 
	$fsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

38 
	`__sˇnÊike
(3, 4);

39 
	$¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...Ë
	`__¥ötÊike
(2, 3);

40 
	$sˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, ...Ë
	`__sˇnÊike
(2, 3);

41 
	$¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
,

42 c⁄° * 
__ª°ri˘
, ...Ë
	`__¥ötÊike
(4, 5);

43 
	$•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict, ...)

44 
	`__¥ötÊike
(3, 4);

45 
	$ssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

46 ...Ë
	`__sˇnÊike
(3, 4);

47 
	$vÂrötf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

48 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

49 
	$v¥ötf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
__va_li°
)

50 
	`__¥ötÊike
(2, 0);

51 
	$v•rötf_l
(* 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

52 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

53 
	$vfsˇnf_l
(
FILE
 * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

54 
__va_li°
Ë
	`__sˇnÊike
(3, 0);

55 
	$vsˇnf_l
(
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
__va_li°
)

56 
	`__sˇnÊike
(2, 0);

57 
	$v¢¥ötf_l
(* 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
,

58 c⁄° * 
__ª°ri˘
, 
__va_li°
Ë
	`__¥ötÊike
(4, 0);

59 
	$vssˇnf_l
(c⁄° * 
__ª°ri˘
, 
loˇÀ_t
, const * __restrict,

60 
__va_li°
Ë
	`__sˇnÊike
(3, 0);

61 
	$vd¥ötf_l
(, 
loˇÀ_t
, c⁄° * 
__ª°ri˘
, 
__va_li°
)

62 
	`__¥ötÊike
(3, 0);

63 
	$va•rötf_l
(**, 
loˇÀ_t
, c⁄° *, 
__va_li°
)

64 
	`__¥ötÊike
(3, 0);

	@/usr/include/xlocale/_stdlib.h

37 
©of_l
(c⁄° *, 
loˇÀ_t
);

38 
©oi_l
(c⁄° *, 
loˇÀ_t
);

39 
©ﬁ_l
(c⁄° *, 
loˇÀ_t
);

40 
©ﬁl_l
(c⁄° *, 
loˇÀ_t
);

41 
mbÀn_l
(c⁄° *, 
size_t
, 
loˇÀ_t
);

42 
size_t
 
mb°owcs_l
(
wch¨_t
 * 
__ª°ri˘
,

43 c⁄° * 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
);

44 
mbtowc_l
(
wch¨_t
 * 
__ª°ri˘
,

45 c⁄° * 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
);

46 
°πod_l
(c⁄° *, **, 
loˇÀ_t
);

47 
°πof_l
(c⁄° *, **, 
loˇÀ_t
);

48 
°πﬁ_l
(c⁄° *, **, , 
loˇÀ_t
);

49 
°πﬁd_l
(c⁄° *, **, 
loˇÀ_t
);

50 
°πﬁl_l
(c⁄° *, **, , 
loˇÀ_t
);

51 
°πoul_l
(c⁄° *, **, , 
loˇÀ_t
);

52 
°πouŒ_l
(c⁄° *, **, , 
loˇÀ_t
);

53 
size_t
 
wc°ombs_l
(* 
__ª°ri˘
,

54 c⁄° 
wch¨_t
 * 
__ª°ri˘
, 
size_t
, 
loˇÀ_t
);

55 
w˘omb_l
(*, 
wch¨_t
, 
loˇÀ_t
);

57 
___mb_cur_max_l
(
loˇÀ_t
);

58 
	#MB_CUR_MAX_L
(
x
Ë(
	`___mb_cur_max_l
(x))

	)

	@/usr/include/xlocale/_string.h

29 #i‚de‡
_LOCALE_T_DEFINED


30 
	#_LOCALE_T_DEFINED


	)

31 
_xloˇÀ
 *
	tloˇÀ_t
;

40 #i‚de‡
_XLOCALE_STRING1_H


41 
	#_XLOCALE_STRING1_H


	)

46 
°rcﬁl_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

47 
size_t
 
°rx‰m_l
(*, c⁄° *, size_t, 
loˇÀ_t
);

53 #ifde‡
_XLOCALE_H_


54 #i‚de‡
_XLOCALE_STRING2_H


55 
	#_XLOCALE_STRING2_H


	)

56 *
°rˇ£°r_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

	@/usr/include/xlocale/_strings.h

29 #i‚de‡
_LOCALE_T_DEFINED


30 
	#_LOCALE_T_DEFINED


	)

31 
_xloˇÀ
 *
	tloˇÀ_t
;

40 #i‚de‡
_XLOCALE_STRINGS1_H


41 
	#_XLOCALE_STRINGS1_H


	)

46 
°rˇ£cmp_l
(c⁄° *, c⁄° *, 
loˇÀ_t
);

47 
°∫ˇ£cmp_l
(c⁄° *, c⁄° *, 
size_t
, 
loˇÀ_t
);

	@/usr/include/bsm/audit.h

32 #i‚def 
_BSM_AUDIT_H


33 
	#_BSM_AUDIT_H


	)

35 
	~<sys/∑øm.h
>

36 
	~<sys/ty≥s.h
>

38 
	#AUDIT_RECORD_MAGIC
 0x828a0f1b

	)

39 
	#MAX_AUDIT_RECORDS
 20

	)

40 
	#MAXAUDITDATA
 (0x8000 - 1)

	)

41 
	#MAX_AUDIT_RECORD_SIZE
 
MAXAUDITDATA


	)

42 
	#MIN_AUDIT_FILE_SIZE
 (512 * 1024)

	)

50 
	#AUDIT_HARD_LIMIT_FREE_BLOCKS
 4

	)

55 
	#AUDIT_TRIGGER_MIN
 1

	)

56 
	#AUDIT_TRIGGER_LOW_SPACE
 1

	)

57 
	#AUDIT_TRIGGER_ROTATE_KERNEL
 2

	)

58 
	#AUDIT_TRIGGER_READ_FILE
 3

	)

59 
	#AUDIT_TRIGGER_CLOSE_AND_DIE
 4

	)

60 
	#AUDIT_TRIGGER_NO_SPACE
 5

	)

61 
	#AUDIT_TRIGGER_ROTATE_USER
 6

	)

62 
	#AUDIT_TRIGGER_INITIALIZE
 7

	)

63 
	#AUDIT_TRIGGER_EXPIRE_TRAILS
 8

	)

64 
	#AUDIT_TRIGGER_MAX
 8

	)

69 
	#AUDITDEV_FILENAME
 "audô"

	)

70 
	#AUDIT_TRIGGER_FILE
 ("/dev/" 
AUDITDEV_FILENAME
)

	)

75 
	#AU_DEFAUDITID
 (
uid_t
)(-1)

	)

76 
	#AU_DEFAUDITSID
 0

	)

77 
	#AU_ASSIGN_ASID
 -1

	)

82 
	#AT_IPC_MSG
 ((
u_ch¨
)1Ë

	)

83 
	#AT_IPC_SEM
 ((
u_ch¨
)2Ë

	)

84 
	#AT_IPC_SHM
 ((
u_ch¨
)3Ë

	)

89 
	#AUC_UNSET
 0

	)

90 
	#AUC_AUDITING
 1

	)

91 
	#AUC_NOAUDIT
 2

	)

92 
	#AUC_DISABLED
 -1

	)

97 
	#A_OLDGETPOLICY
 2

	)

98 
	#A_OLDSETPOLICY
 3

	)

99 
	#A_GETKMASK
 4

	)

100 
	#A_SETKMASK
 5

	)

101 
	#A_OLDGETQCTRL
 6

	)

102 
	#A_OLDSETQCTRL
 7

	)

103 
	#A_GETCWD
 8

	)

104 
	#A_GETCAR
 9

	)

105 
	#A_GETSTAT
 12

	)

106 
	#A_SETSTAT
 13

	)

107 
	#A_SETUMASK
 14

	)

108 
	#A_SETSMASK
 15

	)

109 
	#A_OLDGETCOND
 20

	)

110 
	#A_OLDSETCOND
 21

	)

111 
	#A_GETCLASS
 22

	)

112 
	#A_SETCLASS
 23

	)

113 
	#A_GETPINFO
 24

	)

114 
	#A_SETPMASK
 25

	)

115 
	#A_SETFSIZE
 26

	)

116 
	#A_GETFSIZE
 27

	)

117 
	#A_GETPINFO_ADDR
 28

	)

118 
	#A_GETKAUDIT
 29

	)

119 
	#A_SETKAUDIT
 30

	)

120 
	#A_SENDTRIGGER
 31

	)

121 
	#A_GETSINFO_ADDR
 32

	)

122 
	#A_GETPOLICY
 33

	)

123 
	#A_SETPOLICY
 34

	)

124 
	#A_GETQCTRL
 35

	)

125 
	#A_SETQCTRL
 36

	)

126 
	#A_GETCOND
 37

	)

127 
	#A_SETCOND
 38

	)

132 
	#AUDIT_CNT
 0x0001

	)

133 
	#AUDIT_AHLT
 0x0002

	)

134 
	#AUDIT_ARGV
 0x0004

	)

135 
	#AUDIT_ARGE
 0x0008

	)

136 
	#AUDIT_SEQ
 0x0010

	)

137 
	#AUDIT_WINDATA
 0x0020

	)

138 
	#AUDIT_USER
 0x0040

	)

139 
	#AUDIT_GROUP
 0x0080

	)

140 
	#AUDIT_TRAIL
 0x0100

	)

141 
	#AUDIT_PATH
 0x0200

	)

142 
	#AUDIT_SCNT
 0x0400

	)

143 
	#AUDIT_PUBLIC
 0x0800

	)

144 
	#AUDIT_ZONENAME
 0x1000

	)

145 
	#AUDIT_PERZONE
 0x2000

	)

150 
	#AQ_HIWATER
 100

	)

151 
	#AQ_MAXHIGH
 10000

	)

152 
	#AQ_LOWATER
 10

	)

153 
	#AQ_BUFSZ
 
MAXAUDITDATA


	)

154 
	#AQ_MAXBUFSZ
 1048576

	)

159 
	#AU_FS_MINFREE
 20

	)

165 
	#AU_IPv4
 4

	)

166 
	#AU_IPv6
 16

	)

168 
__BEGIN_DECLS


170 
uid_t
 
	tau_id_t
;

171 
pid_t
 
	tau_asid_t
;

172 
u_öt16_t
 
	tau_evít_t
;

173 
u_öt16_t
 
	tau_emod_t
;

174 
u_öt32_t
 
	tau_˛ass_t
;

175 
u_öt64_t
 
	tau_asÊgs_t
 
	t__©åibuã__
 ((
	tÆig√d
 (8)));

177 
	sau_tid
 {

178 
dev_t
 
	mp‹t
;

179 
u_öt32_t
 
	mmachöe
;

181 
au_tid
 
	tau_tid_t
;

183 
	sau_tid_addr
 {

184 
dev_t
 
	m©_p‹t
;

185 
u_öt32_t
 
	m©_ty≥
;

186 
u_öt32_t
 
	m©_addr
[4];

188 
au_tid_addr
 
	tau_tid_addr_t
;

190 
	sau_mask
 {

191 
	mam_suc˚ss
;

192 
	mam_Áûuª
;

194 
au_mask
 
	tau_mask_t
;

196 
	saudôöfo
 {

197 
au_id_t
 
	mai_auid
;

198 
au_mask_t
 
	mai_mask
;

199 
au_tid_t
 
	mai_ãrmid
;

200 
au_asid_t
 
	mai_asid
;

202 
audôöfo
 
	taudôöfo_t
;

204 
	saudôöfo_addr
 {

205 
au_id_t
 
	mai_auid
;

206 
au_mask_t
 
	mai_mask
;

207 
au_tid_addr_t
 
	mai_ãrmid
;

208 
au_asid_t
 
	mai_asid
;

209 
au_asÊgs_t
 
	mai_Êags
;

211 
audôöfo_addr
 
	taudôöfo_addr_t
;

213 
	saudôpöfo
 {

214 
pid_t
 
	m≠_pid
;

215 
au_id_t
 
	m≠_auid
;

216 
au_mask_t
 
	m≠_mask
;

217 
au_tid_t
 
	m≠_ãrmid
;

218 
au_asid_t
 
	m≠_asid
;

220 
audôpöfo
 
	taudôpöfo_t
;

222 
	saudôpöfo_addr
 {

223 
pid_t
 
	m≠_pid
;

224 
au_id_t
 
	m≠_auid
;

225 
au_mask_t
 
	m≠_mask
;

226 
au_tid_addr_t
 
	m≠_ãrmid
;

227 
au_asid_t
 
	m≠_asid
;

228 
au_asÊgs_t
 
	m≠_Êags
;

230 
audôpöfo_addr
 
	taudôpöfo_addr_t
;

232 
	sau_£ssi⁄
 {

233 
audôöfo_addr_t
 *
	mas_aü_p
;

234 
au_mask_t
 
	mas_mask
;

236 
au_£ssi⁄
 
	tau_£ssi⁄_t
;

241 
au_tokí
 
	ttokí_t
;

251 
	sau_q˘æ
 {

252 
	maq_hiw©î
;

255 
	maq_low©î
;

258 
	maq_bufsz
;

259 
	maq_dñay
;

260 
	maq_mö‰ì
;

262 
au_q˘æ
 
	tau_q˘æ_t
;

267 
	saudô_°©
 {

268 
	mas_vîsi⁄
;

269 
	mas_numevít
;

270 
	mas_gíî©ed
;

271 
	mas_n⁄©åib
;

272 
	mas_kî√l
;

273 
	mas_audô
;

274 
	mas_audô˘l
;

275 
	mas_íqueue
;

276 
	mas_wrôãn
;

277 
	mas_wblocked
;

278 
	mas_rblocked
;

279 
	mas_dr›≥d
;

280 
	mas_tŸÆsize
;

281 
	mas_memu£d
;

283 
audô_°©
 
	tau_°©_t
;

288 
	saudô_f°©
 {

289 
u_öt64_t
 
	maf_fûesz
;

290 
u_öt64_t
 
	maf_cuºsz
;

292 
audô_f°©
 
	tau_f°©_t
;

297 
	sau_ev˛ass_m≠
 {

298 
au_evít_t
 
	mec_numbî
;

299 
au_˛ass_t
 
	mec_˛ass
;

301 
au_ev˛ass_m≠
 
	tau_ev˛ass_m≠_t
;

306 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
KERNEL
)

307 
audô
(const *, );

308 
audô⁄
(, *, );

309 
audô˘l
(const *);

310 
gëauid
(
au_id_t
 *);

311 
£èuid
(c⁄° 
au_id_t
 *);

312 
gëaudô
(
audôöfo
 *);

313 
£èudô
(c⁄° 
audôöfo
 *);

314 
gëaudô_addr
(
audôöfo_addr
 *, );

315 
£èudô_addr
(c⁄° 
audôöfo_addr
 *, );

317 #ifde‡
__APPLE_API_PRIVATE


318 
	~<mach/p‹t.h
>

319 
mach_p‹t_«me_t
 
audô_£ssi⁄_£lf
();

320 
au_asid_t
 
audô_£ssi⁄_joö
(
mach_p‹t_«me_t
 
p‹t
);

325 
	g__END_DECLS


	@/usr/include/machine/_bus.h

31 #i‚de‡
AMD64_INCLUDE__BUS_H


32 
	#AMD64_INCLUDE__BUS_H


	)

37 
uöt64_t
 
	tbus_addr_t
;

38 
uöt64_t
 
	tbus_size_t
;

43 
uöt64_t
 
	tbus_•a˚_èg_t
;

44 
uöt64_t
 
	tbus_•a˚_h™dÀ_t
;

	@/usr/include/machine/_stdint.h

6 
	~<x86/_°döt.h
>

	@/usr/include/machine/_types.h

6 
	~<x86/_ty≥s.h
>

	@/usr/include/machine/bus_dma.h

29 #i‚de‡
_AMD64_BUS_DMA_H_


30 
	#_AMD64_BUS_DMA_H_


	)

32 
	~<sys/bus_dma.h
>

	@/usr/include/machine/runq.h

29 #i‚def 
_MACHINE_RUNQ_H_


30 
	#_MACHINE_RUNQ_H_


	)

32 
	#RQB_LEN
 (1Ë

	)

33 
	#RQB_L2BPW
 (6Ë

	)

34 
	#RQB_BPW
 (1<<
RQB_L2BPW
Ë

	)

36 
	#RQB_BIT
(
¥i
Ë(1u»<< (’riË& (
RQB_BPW
 - 1)))

	)

37 
	#RQB_WORD
(
¥i
Ë(’riË>> 
RQB_L2BPW
)

	)

39 
	#RQB_FFS
(
w‹d
Ë(
	`bsfq
(w‹d))

	)

44 
u_öt64_t
 
	trqb_w‹d_t
;

	@/usr/include/machine/segments.h

37 #i‚de‡
_MACHINE_SEGMENTS_H_


38 
	#_MACHINE_SEGMENTS_H_


	)

44 
	~<x86/£gmíts.h
>

49 
	ssy°em_£gmít_des¸ùt‹
 {

50 
u_öt64_t
 
	msd_lﬁimô
:16;

51 
u_öt64_t
 
	msd_loba£
:24;

52 
u_öt64_t
 
	msd_ty≥
:5;

53 
u_öt64_t
 
	msd_d∂
:2;

54 
u_öt64_t
 
	msd_p
:1;

55 
u_öt64_t
 
	msd_hûimô
:4;

56 
u_öt64_t
 
	msd_xx0
:3;

57 
u_öt64_t
 
	msd_gøn
:1;

58 
u_öt64_t
 
	msd_hiba£
:40 
__∑cked
;

59 
u_öt64_t
 
	msd_xx1
:8;

60 
u_öt64_t
 
	msd_mbz
:5;

61 
u_öt64_t
 
	msd_xx2
:19;

62 } 
	g__∑cked
;

70 
	sso·_£gmít_des¸ùt‹
 {

71 
	mssd_ba£
;

72 
	mssd_limô
;

73 
	mssd_ty≥
:5;

74 
	mssd_d∂
:2;

75 
	mssd_p
:1;

76 
	mssd_l⁄g
:1;

77 
	mssd_def32
:1;

78 
	mssd_gøn
:1;

79 } 
	g__∑cked
;

84 
	sªgi⁄_des¸ùt‹
 {

85 
uöt64_t
 
	mrd_limô
:16;

86 
uöt64_t
 
	mrd_ba£
:64 
__∑cked
;

87 } 
	g__∑cked
;

89 #ifde‡
_KERNEL


90 
u£r_£gmít_des¸ùt‹
 
gdt
[];

91 
so·_£gmít_des¸ùt‹
 
gdt_£gs
[];

92 
g©e_des¸ùt‹
 *
idt
;

93 
ªgi⁄_des¸ùt‹
 
r_gdt
, 
r_idt
;

95 
lgdt
(
ªgi⁄_des¸ùt‹
 *
rdp
);

96 
sdtossd
(
u£r_£gmít_des¸ùt‹
 *
sdp
,

97 
so·_£gmít_des¸ùt‹
 *
ssdp
);

98 
ssdtosd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

99 
u£r_£gmít_des¸ùt‹
 *
sdp
);

100 
ssdtosyssd
(
so·_£gmít_des¸ùt‹
 *
ssdp
,

101 
sy°em_£gmít_des¸ùt‹
 *
sdp
);

102 
upd©e_gdt_gsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

103 
upd©e_gdt_fsba£
(
thªad
 *
td
, 
uöt32_t
 
ba£
);

	@/usr/include/machine/signal.h

6 
	~<x86/sig«l.h
>

	@/usr/include/machine/ucontext.h

6 
	~<x86/uc⁄ãxt.h
>

	@/usr/include/runetype.h

36 #i‚def 
_RUNETYPE_H_


37 
	#_RUNETYPE_H_


	)

39 
	~<sys/cdefs.h
>

40 
	~<sys/_ty≥s.h
>

42 
	#_CACHED_RUNES
 (1 <<8 )

	)

43 
	#_CRMASK
 (~(
_CACHED_RUNES
 - 1))

	)

49 
__ru√_t
 
	m__mö
;

50 
__ru√_t
 
	m__max
;

51 
__ru√_t
 
	m__m≠
;

52 *
	m__ty≥s
;

53 } 
	t_Ru√E¡ry
;

56 
	m__ƒ™ges
;

57 
_Ru√E¡ry
 *
	m__ønges
;

58 } 
	t_Ru√R™ge
;

61 
	m__magic
[8];

62 
	m__ícodög
[32];

64 
__ru√_t
 (*
__sgëru√
)(c⁄° *, 
	m__size_t
, const **);

65 (*
	m__•uåu√
)(
	m__ru√_t
, *, 
	m__size_t
, **);

66 
__ru√_t
 
	m__övÆid_ru√
;

68 
	m__ru√ty≥
[
_CACHED_RUNES
];

69 
__ru√_t
 
	m__m≠lowî
[
_CACHED_RUNES
];

70 
__ru√_t
 
	m__m≠uµî
[
_CACHED_RUNES
];

77 
_Ru√R™ge
 
	m__ru√ty≥_ext
;

78 
_Ru√R™ge
 
	m__m≠lowî_ext
;

79 
_Ru√R™ge
 
	m__m≠uµî_ext
;

81 *
	m__v¨übÀ
;

82 
	m__v¨übÀ_Àn
;

83 } 
	t_Ru√LoˇÀ
;

85 
	#_RUNE_MAGIC_1
 "Ru√Magi"

	)

86 
__BEGIN_DECLS


87 c⁄° 
_Ru√LoˇÀ
 
_DeÁu…Ru√LoˇÀ
;

88 c⁄° 
_Ru√LoˇÀ
 *
_CuºítRu√LoˇÀ
;

89 #i‡
deföed
(
__NO_TLS
Ë|| deföed(
__RUNETYPE_INTERNAL
)

90 c⁄° 
_Ru√LoˇÀ
 *
__gëCuºítRu√LoˇÀ
();

92 
_Thªad_loˇl
 c⁄° 
_Ru√LoˇÀ
 *
_ThªadRu√LoˇÀ
;

93 
__ölöe
 c⁄° 
_Ru√LoˇÀ
 *
	$__gëCuºítRu√LoˇÀ
()

96 i‡(
_ThªadRu√LoˇÀ
)

97  
_ThªadRu√LoˇÀ
;

98 i‡(
_CuºítRu√LoˇÀ
)

99  
_CuºítRu√LoˇÀ
;

100  &
_DeÁu…Ru√LoˇÀ
;

101 
	}
}

103 
	#_CuºítRu√LoˇÀ
 (
	`__gëCuºítRu√LoˇÀ
())

	)

104 
	g__END_DECLS


	@/usr/include/sys/_bitset.h

32 #i‚de‡
_SYS__BITSET_H_


33 
	#_SYS__BITSET_H_


	)

39 
	#_BITSET_BITS
 ((Ë* 
NBBY
)

	)

41 
	#__bô£t_w‹ds
(
_s
Ë(
	`howm™y
(_s, 
_BITSET_BITS
))

	)

43 
	#__bô£t_mask
(
_s
, 
n
) \

44 (1L << ((
	`__bô£t_w‹ds
((
_s
)) == 1) ? \

45 (
__size_t
)(
n
Ë: (“Ë% 
_BITSET_BITS
)))

	)

47 
	#__bô£t_w‹d
(
_s
, 
n
) \

48 ((
	`__bô£t_w‹ds
((
_s
)Ë=1Ë? 0 : ((
n
Ë/ 
_BITSET_BITS
))

	)

50 
	#BITSET_DEFINE
(
t
, 
_s
) \

51 
	st
 { \

52 
__bôs
[
	`__bô£t_w‹ds
((
_s
))]; \

53 }

	)

55 
	#BITSET_T_INITIALIZER
(
x
) \

56 { .
__bôs
 = { 
x
 } }

	)

58 
	#BITSET_FSET
(
n
) \

59 [ 0 ... ((
n
Ë- 1Ë] = (-1L)

	)

	@/usr/include/sys/_callout.h

38 #i‚de‡
_SYS__CALLOUT_H


39 
	#_SYS__CALLOUT_H


	)

41 
	~<sys/queue.h
>

43 
	glock_obje˘
;

45 
LIST_HEAD
(
ˇŒout_li°
, 
ˇŒout
);

46 
SLIST_HEAD
(
ˇŒout_¶i°
, 
ˇŒout
);

47 
TAILQ_HEAD
(
ˇŒout_èûq
, 
ˇŒout
);

49 
	sˇŒout
 {

51 
LIST_ENTRY
(
ˇŒout
Ë
	mÀ
;

52 
SLIST_ENTRY
(
ˇŒout
Ë
	m¶e
;

53 
TAILQ_ENTRY
(
ˇŒout
Ë
	mtqe
;

54 } 
	mc_löks
;

55 
sbötime_t
 
	mc_time
;

56 
sbötime_t
 
	mc_¥ecisi⁄
;

57 *
	mc_¨g
;

58 (*
	mc_func
)(*);

59 
lock_obje˘
 *
	mc_lock
;

60 
	mc_Êags
;

61 
	mc_iÊags
;

62 vﬁ©ûê
	mc_˝u
;

	@/usr/include/sys/_lockmgr.h

31 #i‚de‡
_SYS__LOCKMGR_H_


32 
	#_SYS__LOCKMGR_H_


	)

34 #ifde‡
DEBUG_LOCKS


35 
	~<sys/_°ack.h
>

38 
	slock
 {

39 
lock_obje˘
 
	mlock_obje˘
;

40 vﬁ©ûê
uöçå_t
 
	mlk_lock
;

41 
u_öt
 
	mlk_ex¶pÁû
;

42 
	mlk_timo
;

43 
	mlk_¥i
;

44 #ifde‡
DEBUG_LOCKS


45 
°ack
 
	mlk_°ack
;

	@/usr/include/sys/_pctrie.h

31 #i‚de‡
__SYS_PCTRIE_H_


32 
	#__SYS_PCTRIE_H_


	)

37 
	sp˘rõ
 {

38 
uöçå_t
 
	m±_roŸ
;

41 #ifde‡
_KERNEL


43 
__ölöe
 
boﬁón_t


44 
	$p˘rõ_is_em±y
(
p˘rõ
 *
±ªe
)

47  (
±ªe
->
±_roŸ
 == 0);

48 
	}
}

	@/usr/include/sys/_rwlock.h

29 #i‚de‡
_SYS__RWLOCK_H_


30 
	#_SYS__RWLOCK_H_


	)

32 
	~<machöe/∑øm.h
>

43 
	srwlock
 {

44 
lock_obje˘
 
	mlock_obje˘
;

45 vﬁ©ûê
uöçå_t
 
	mrw_lock
;

57 
	srwlock_∑dÆign
 {

58 
lock_obje˘
 
	mlock_obje˘
;

59 vﬁ©ûê
uöçå_t
 
	mrw_lock
;

60 } 
__Æig√d
(
CACHE_LINE_SIZE
);

	@/usr/include/sys/_sigset.h

38 #i‚de‡
_SYS__SIGSET_H_


39 
	#_SYS__SIGSET_H_


	)

44 
	#_SIG_WORDS
 4

	)

45 
	#_SIG_MAXSIG
 128

	)

46 
	#_SIG_IDX
(
sig
Ë((sigË- 1)

	)

47 
	#_SIG_WORD
(
sig
Ë(
	`_SIG_IDX
(sigË>> 5)

	)

48 
	#_SIG_BIT
(
sig
Ë(1 << (
	`_SIG_IDX
(sigË& 31))

	)

49 
	#_SIG_VALID
(
sig
Ë((sigË<
_SIG_MAXSIG
 && (sigË> 0)

	)

51 
	s__sig£t
 {

52 
__uöt32_t
 
	m__bôs
[
_SIG_WORDS
];

53 } 
	t__sig£t_t
;

55 #i‡
deföed
(
_KERNEL
Ë&& deföed(
COMPAT_43
)

56 
	tosig£t_t
;

	@/usr/include/sys/_timeval.h

29 #i‚de‡
_SYS__TIMEVAL_H_


30 
	#_SYS__TIMEVAL_H_


	)

32 
	~<sys/_ty≥s.h
>

34 #i‚de‡
_SUSECONDS_T_DECLARED


35 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

36 
	#_SUSECONDS_T_DECLARED


	)

39 #i‚de‡
_TIME_T_DECLARED


40 
__time_t
 
	ttime_t
;

41 
	#_TIME_T_DECLARED


	)

47 
	stimevÆ
 {

48 
time_t
 
	mtv_£c
;

49 
su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sys/seq.h

28 #i‚de‡
_SYS_SEQ_H_


29 
	#_SYS_SEQ_H_


	)

31 #ifde‡
_KERNEL


32 
	~<sys/sy°m.h
>

34 
	~<sys/ty≥s.h
>

39 
uöt32_t
 
	t£q_t
;

41 #ifde‡
_KERNEL


68 
	~<sys/lock.h
>

70 
	~<machöe/˝u.h
>

81 
__ölöe
 

82 
	$©omic_lﬂd_acq_rmb_öt
(vﬁ©ûê
u_öt
 *
p
)

84 vﬁ©ûê
u_öt
 
v
;

86 
v
 = *
p
;

87 
	`©omic_lﬂd_acq_öt
(&
v
);

88  (
v
);

89 
	}
}

91 
__ölöe
 
boﬁ


92 
	$£q_ö_modify
(
£q_t
 
£qp
)

95  (
£qp
 & 1);

96 
	}
}

98 
__ölöe
 

99 
	$£q_wrôe_begö
(
£q_t
 *
£qp
)

102 
	`MPASS
(!
	`£q_ö_modify
(*
£qp
));

103 
	`©omic_add_acq_öt
(
£qp
, 1);

104 
	}
}

106 
__ölöe
 

107 
	$£q_wrôe_íd
(
£q_t
 *
£qp
)

110 
	`©omic_add_ªl_öt
(
£qp
, 1);

111 
	`MPASS
(!
	`£q_ö_modify
(*
£qp
));

112 
	}
}

114 
__ölöe
 
£q_t


115 
	$£q_ªad
(
£q_t
 *
£qp
)

117 
£q_t
 
ªt
;

120 
ªt
 = 
	`©omic_lﬂd_acq_rmb_öt
(
£qp
);

121 i‡(
	`£q_ö_modify
(
ªt
)) {

122 
	`˝u_•öwaô
();

128  (
ªt
);

129 
	}
}

131 
__ölöe
 
£q_t


132 
	$£q_c⁄si°ít
(
£q_t
 *
£qp
, seq_à
ﬁd£q
)

135  (
	`©omic_lﬂd_acq_rmb_öt
(
£qp
Ë=
ﬁd£q
);

136 
	}
}

138 
__ölöe
 
£q_t


139 
	$£q_c⁄si°ít_nomb
(
£q_t
 *
£qp
, seq_à
ﬁd£q
)

142  (*
£qp
 =
ﬁd£q
);

143 
	}
}

	@/usr/include/sys/timespec.h

34 #i‚de‡
_SYS_TIMESPEC_H_


35 
	#_SYS_TIMESPEC_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_time•ec.h
>

40 #i‡
__BSD_VISIBLE


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 } 0)

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 } 0)

	)

58 
	sôimî•ec
 {

59 
time•ec
 
	mô_öãrvÆ
;

60 
time•ec
 
	mô_vÆue
;

	@/usr/include/time.h

41 #i‚de‡
_TIME_H_


42 
	#_TIME_H_


	)

44 
	~<sys/cdefs.h
>

45 
	~<sys/_nuŒ.h
>

46 
	~<sys/_ty≥s.h
>

48 #i‡
__POSIX_VISIBLE
 > 0 && __POSIX_VISIBLE < 200112 || 
__BSD_VISIBLE


53 
	#CLK_TCK
 128

	)

57 
	#CLOCKS_PER_SEC
 128

	)

59 #i‚de‡
_CLOCK_T_DECLARED


60 
__˛ock_t
 
	t˛ock_t
;

61 
	#_CLOCK_T_DECLARED


	)

64 #i‚de‡
_TIME_T_DECLARED


65 
__time_t
 
	ttime_t
;

66 
	#_TIME_T_DECLARED


	)

69 #i‚de‡
_SIZE_T_DECLARED


70 
__size_t
 
	tsize_t
;

71 
	#_SIZE_T_DECLARED


	)

74 #i‡
__POSIX_VISIBLE
 >= 199309

78 #i‚de‡
_CLOCKID_T_DECLARED


79 
__˛ockid_t
 
	t˛ockid_t
;

80 
	#_CLOCKID_T_DECLARED


	)

83 #i‚de‡
_TIMER_T_DECLARED


84 
__timî_t
 
	ttimî_t
;

85 
	#_TIMER_T_DECLARED


	)

88 
	~<sys/time•ec.h
>

91 #i‡
__POSIX_VISIBLE
 >= 200112

92 #i‚de‡
_PID_T_DECLARED


93 
__pid_t
 
	tpid_t
;

94 
	#_PID_T_DECLARED


	)

99 #i‡!
deföed
(
CLOCK_REALTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

100 
	#CLOCK_REALTIME
 0

	)

101 #ifde‡
__BSD_VISIBLE


102 
	#CLOCK_VIRTUAL
 1

	)

103 
	#CLOCK_PROF
 2

	)

105 
	#CLOCK_MONOTONIC
 4

	)

106 
	#CLOCK_UPTIME
 5

	)

107 
	#CLOCK_UPTIME_PRECISE
 7

	)

108 
	#CLOCK_UPTIME_FAST
 8

	)

109 
	#CLOCK_REALTIME_PRECISE
 9

	)

110 
	#CLOCK_REALTIME_FAST
 10

	)

111 
	#CLOCK_MONOTONIC_PRECISE
 11

	)

112 
	#CLOCK_MONOTONIC_FAST
 12

	)

113 
	#CLOCK_SECOND
 13

	)

114 
	#CLOCK_THREAD_CPUTIME_ID
 14

	)

115 
	#CLOCK_PROCESS_CPUTIME_ID
 15

	)

118 #i‡!
deföed
(
TIMER_ABSTIME
Ë&& 
__POSIX_VISIBLE
 >= 200112

119 #i‡
__BSD_VISIBLE


120 
	#TIMER_RELTIME
 0x0

	)

122 
	#TIMER_ABSTIME
 0x1

	)

125 
	stm
 {

126 
	mtm_£c
;

127 
	mtm_mö
;

128 
	mtm_hour
;

129 
	mtm_mday
;

130 
	mtm_m⁄
;

131 
	mtm_yór
;

132 
	mtm_wday
;

133 
	mtm_yday
;

134 
	mtm_isd°
;

135 
	mtm_gmtoff
;

136 *
	mtm_z⁄e
;

139 #i‡
__POSIX_VISIBLE


140 *
tz«me
[];

143 
__BEGIN_DECLS


144 *
as˘ime
(c⁄° 
tm
 *);

145 
˛ock_t
 
˛ock
();

146 *
˘ime
(c⁄° 
time_t
 *);

147 
dif·ime
(
time_t
,Åime_t);

149 
tm
 *
gmtime
(c⁄° 
time_t
 *);

150 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

151 
time_t
 
mktime
(
tm
 *);

152 
size_t
 
°r·ime
(* 
__ª°ri˘
, size_t, const * __restrict,

153 c⁄° 
tm
 * 
__ª°ri˘
);

154 
time_t
 
time
(time_t *);

155 #i‡
__POSIX_VISIBLE
 >= 200112

156 
	gsigevít
;

157 
timî_¸óã
(
˛ockid_t
, 
sigevít
 *
__ª°ri˘
, 
timî_t
 *__restrict);

158 
timî_dñëe
(
timî_t
);

159 
timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

160 
timî_gëovîrun
(
timî_t
);

161 
timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *
__ª°ri˘
,

162 
ôimî•ec
 *
__ª°ri˘
);

164 #i‡
__POSIX_VISIBLE


165 
tz£t
();

168 #i‡
__POSIX_VISIBLE
 >= 199309

169 
˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

170 
˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

171 
˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

173 
«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

176 #i‡
__POSIX_VISIBLE
 >= 200112

177 
˛ock_gë˝u˛ockid
(
pid_t
, 
˛ockid_t
 *);

180 #i‡
__POSIX_VISIBLE
 >= 199506

181 *
as˘ime_r
(c⁄° 
tm
 *, *);

182 *
˘ime_r
(c⁄° 
time_t
 *, *);

183 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

184 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

187 #i‡
__XSI_VISIBLE


188 *
°Ωtime
(c⁄° * 
__ª°ri˘
, const * __restrict,

189 
tm
 * 
__ª°ri˘
);

192 #i‡
__BSD_VISIBLE


193 *
timez⁄e
(, );

194 
tz£twÆl
();

195 
time_t
 
timñoˇl
(
tm
 * const);

196 
time_t
 
timegm
(
tm
 * const);

199 #i‡
__POSIX_VISIBLE
 >200809 || 
deföed
(
_XLOCALE_H_
)

200 
	~<xloˇÀ/_time.h
>

202 
	g__END_DECLS


	@/usr/include/vm/uma.h

36 #i‚de‡
_VM_UMA_H_


37 
	#_VM_UMA_H_


	)

39 
	~<sys/∑øm.h
>

40 
	~<sys/mÆloc.h
>

43 
	#UMA_SMALLEST_UNIT
 (
PAGE_SIZE
 / 256Ë

	)

47 
	guma_z⁄e
;

49 
uma_z⁄e
 * 
	tuma_z⁄e_t
;

51 
z⁄e_døö
(
uma_z⁄e_t
);

70 (*
	tuma_˘‹
)(*
	tmem
, 
	tsize
, *
	t¨g
, 
	tÊags
);

88 (*
	tuma_dt‹
)(*
	tmem
, 
	tsize
, *
	t¨g
);

107 (*
	tuma_öô
)(*
	tmem
, 
	tsize
, 
	tÊags
);

124 (*
	tuma_föi
)(*
	tmem
, 
	tsize
);

129 (*
	tuma_imp‹t
)(*
	t¨g
, **
	t°‹e
, 
	tcou¡
, 
	tÊags
);

134 (*
	tuma_ªÀa£
)(*
	t¨g
, **
	t°‹e
, 
	tcou¡
);

178 
uma_z⁄e_t
 
	`uma_z¸óã
(c⁄° *
«me
, 
size_t
 
size
, 
uma_˘‹
 
˘‹
,

179 
uma_dt‹
 
dt‹
, 
uma_öô
 
umöô
, 
uma_föi
 
föi
,

180 
Æign
, 
uöt32_t
 
Êags
);

214 
uma_z⁄e_t
 
	`uma_z£c⁄d_¸óã
(*
«me
, 
uma_˘‹
 
˘‹
, 
uma_dt‹
 
dt‹
,

215 
uma_öô
 
zöô
, 
uma_föi
 
zföi
, 
uma_z⁄e_t
 
ma°î
);

226 
	`uma_z£c⁄d_add
(
uma_z⁄e_t
 
z⁄e
, uma_z⁄e_à
ma°î
);

237 
uma_z⁄e_t
 
	`uma_zˇche_¸óã
(*
«me
, 
size
, 
uma_˘‹
 
˘‹
, 
uma_dt‹
 
dt‹
,

238 
uma_öô
 
zöô
, 
uma_föi
 
zföi
, 
uma_imp‹t
 
zimp‹t
,

239 
uma_ªÀa£
 
zªÀa£
, *
¨g
, 
Êags
);

247 
	#UMA_ZONE_PAGEABLE
 0x0001

	)

249 
	#UMA_ZONE_ZINIT
 0x0002

	)

250 
	#UMA_ZONE_STATIC
 0x0004

	)

251 
	#UMA_ZONE_OFFPAGE
 0x0008

	)

253 
	#UMA_ZONE_MALLOC
 0x0010

	)

254 
	#UMA_ZONE_NOFREE
 0x0020

	)

255 
	#UMA_ZONE_MTXCLASS
 0x0040

	)

256 
	#UMA_ZONE_VM
 0x0080

	)

260 
	#UMA_ZONE_HASH
 0x0100

	)

264 
	#UMA_ZONE_SECONDARY
 0x0200

	)

265 
	#UMA_ZONE_REFCNT
 0x0400

	)

266 
	#UMA_ZONE_MAXBUCKET
 0x0800

	)

267 
	#UMA_ZONE_CACHESPREAD
 0x1000

	)

273 
	#UMA_ZONE_VTOSLAB
 0x2000

	)

274 
	#UMA_ZONE_NODUMP
 0x4000

	)

278 
	#UMA_ZONE_PCPU
 0x8000

	)

288 
	#UMA_ZONE_INHERIT
 \

289 (
UMA_ZONE_OFFPAGE
 | 
UMA_ZONE_MALLOC
 | 
UMA_ZONE_NOFREE
 | \

290 
UMA_ZONE_HASH
 | 
UMA_ZONE_REFCNT
 | 
UMA_ZONE_VTOSLAB
 | 
UMA_ZONE_PCPU
)

	)

293 
	#UMA_ALIGN_PTR
 ((*Ë- 1Ë

	)

294 
	#UMA_ALIGN_LONG
 ((Ë- 1Ë

	)

295 
	#UMA_ALIGN_INT
 ((Ë- 1Ë

	)

296 
	#UMA_ALIGN_SHORT
 ((Ë- 1Ë

	)

297 
	#UMA_ALIGN_CHAR
 ((Ë- 1Ë

	)

298 
	#UMA_ALIGN_CACHE
 (0 - 1Ë

	)

307 
	`uma_zde°roy
(
uma_z⁄e_t
 
z⁄e
);

323 *
	`uma_zÆloc_¨g
(
uma_z⁄e_t
 
z⁄e
, *
¨g
, 
Êags
);

331 
__ölöe
 *
	`uma_zÆloc
(
uma_z⁄e_t
 
z⁄e
, 
Êags
);

333 
__ölöe
 *

334 
	$uma_zÆloc
(
uma_z⁄e_t
 
z⁄e
, 
Êags
)

336  
	`uma_zÆloc_¨g
(
z⁄e
, 
NULL
, 
Êags
);

337 
	}
}

351 
uma_z‰ì_¨g
(
uma_z⁄e_t
 
z⁄e
, *
ôem
, *
¨g
);

359 
__ölöe
 
uma_z‰ì
(
uma_z⁄e_t
 
z⁄e
, *
ôem
);

361 
__ölöe
 

362 
	$uma_z‰ì
(
uma_z⁄e_t
 
z⁄e
, *
ôem
)

364 
	`uma_z‰ì_¨g
(
z⁄e
, 
ôem
, 
NULL
);

365 
	}
}

385 *(*
	tuma_Æloc
)(
	tuma_z⁄e_t
 
	tz⁄e
, 
	tvm_size_t
 
	tsize
, 
	tuöt8_t
 *
	tpÊag
,

386 
	twaô
);

399 (*
	tuma_‰ì
)(*
	tôem
, 
	tvm_size_t
 
	tsize
, 
	tuöt8_t
 
	tpÊag
);

419 
	`uma_°¨tup
(*
boŸmem
, 
boŸ_∑ges
);

435 
	`uma_°¨tup2
();

448 
	`uma_ª˛aim
();

460 
	`uma_£t_Æign
(
Æign
);

466 
	`uma_z⁄e_ª£rve
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

485 
	`uma_z⁄e_ª£rve_kva
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

497 
	`uma_z⁄e_£t_max
(
uma_z⁄e_t
 
z⁄e
, 
nôems
);

509 
	`uma_z⁄e_gë_max
(
uma_z⁄e_t
 
z⁄e
);

521 
	`uma_z⁄e_£t_w¨nög
(
uma_z⁄e_t
 
z⁄e
, c⁄° *
w¨nög
);

532 
	`uma_z⁄e_gë_cur
(
uma_z⁄e_t
 
z⁄e
);

542 
	`uma_z⁄e_£t_öô
(
uma_z⁄e_t
 
z⁄e
, 
uma_öô
 
umöô
);

543 
	`uma_z⁄e_£t_föi
(
uma_z⁄e_t
 
z⁄e
, 
uma_föi
 
föi
);

553 
	`uma_z⁄e_£t_zöô
(
uma_z⁄e_t
 
z⁄e
, 
uma_öô
 
zöô
);

554 
	`uma_z⁄e_£t_zföi
(
uma_z⁄e_t
 
z⁄e
, 
uma_föi
 
zföi
);

572 
	`uma_z⁄e_£t_Ælocf
(
uma_z⁄e_t
 
z⁄e
, 
uma_Æloc
 
Ælocf
);

585 
	`uma_z⁄e_£t_‰ìf
(
uma_z⁄e_t
 
z⁄e
, 
uma_‰ì
 
‰ìf
);

590 
	#UMA_SLAB_BOOT
 0x01

	)

591 
	#UMA_SLAB_KMEM
 0x02

	)

592 
	#UMA_SLAB_KERNEL
 0x04

	)

593 
	#UMA_SLAB_PRIV
 0x08

	)

594 
	#UMA_SLAB_OFFP
 0x10

	)

595 
	#UMA_SLAB_MALLOC
 0x20

	)

610 
	`uma_¥óŒoc
(
uma_z⁄e_t
 
z⁄e
, 
ôem˙t
);

625 
uöt32_t
 *
	`uma_föd_ªf˙t
(
uma_z⁄e_t
 
z⁄e
, *
ôem
);

636 
	`uma_z⁄e_exhau°ed
(
uma_z⁄e_t
 
z⁄e
);

637 
	`uma_z⁄e_exhau°ed_nﬁock
(
uma_z⁄e_t
 
z⁄e
);

642 
uma_z⁄e_t
 
p˝u_z⁄e_64
;

643 
uma_z⁄e_t
 
p˝u_z⁄e_±r
;

650 
	#UMA_STREAM_VERSION
 0x00000001

	)

651 
	suma_°ªam_hódî
 {

652 
uöt32_t
 
ush_vîsi⁄
;

653 
uöt32_t
 
ush_max˝us
;

654 
uöt32_t
 
ush_cou¡
;

655 
uöt32_t
 
_ush_∑d
;

658 
	#UTH_MAX_NAME
 32

	)

659 
	#UTH_ZONE_SECONDARY
 0x00000001

	)

660 
	suma_ty≥_hódî
 {

664 
uth_«me
[
UTH_MAX_NAME
];

665 
uöt32_t
 
uth_Æign
;

666 
uöt32_t
 
uth_size
;

667 
uöt32_t
 
uth_rsize
;

668 
uöt32_t
 
uth_max∑ges
;

669 
uöt32_t
 
uth_limô
;

674 
uöt32_t
 
uth_∑ges
;

675 
uöt32_t
 
uth_keg_‰ì
;

676 
uöt32_t
 
uth_z⁄e_‰ì
;

677 
uöt32_t
 
uth_buckësize
;

678 
uöt32_t
 
uth_z⁄e_Êags
;

679 
uöt64_t
 
uth_Ælocs
;

680 
uöt64_t
 
uth_‰ìs
;

681 
uöt64_t
 
uth_Áûs
;

682 
uöt64_t
 
uth_¶ìps
;

683 
uöt64_t
 
_uth_ª£rved1
[2];

686 
	suma_≥r˝u_°©
 {

687 
uöt64_t
 
ups_Ælocs
;

688 
uöt64_t
 
ups_‰ìs
;

689 
uöt64_t
 
ups_ˇche_‰ì
;

690 
uöt64_t
 
_ups_ª£rved
[5];

693 
	`uma_ª˛aim_wakeup
();

694 
	`uma_ª˛aim_w‹kî
(*);

	@/usr/include/x86/_align.h

41 #i‚de‡
_X86_INCLUDE__ALIGN_H_


42 
	#_X86_INCLUDE__ALIGN_H_


	)

49 
	#_ALIGNBYTES
 ((
ªgi°î_t
Ë- 1)

	)

50 
	#_ALIGN
(
p
Ë(((
uöçå_t
)’Ë+ 
_ALIGNBYTES
Ë& ~_ALIGNBYTES)

	)

	@/usr/include/x86/_limits.h

33 #i‚def 
_MACHINE__LIMITS_H_


34 
	#_MACHINE__LIMITS_H_


	)

45 
	#__CHAR_BIT
 8

	)

47 
	#__SCHAR_MAX
 0x7‡

	)

48 
	#__SCHAR_MIN
 (-0x7‡- 1Ë

	)

50 
	#__UCHAR_MAX
 0xf‡

	)

52 
	#__USHRT_MAX
 0xfff‡

	)

53 
	#__SHRT_MAX
 0x7ff‡

	)

54 
	#__SHRT_MIN
 (-0x7ff‡- 1Ë

	)

56 
	#__UINT_MAX
 0xfffffff‡

	)

57 
	#__INT_MAX
 0x7ffffff‡

	)

58 
	#__INT_MIN
 (-0x7ffffff‡- 1Ë

	)

60 #ifdef 
__LP64__


61 
	#__ULONG_MAX
 0xfffffffffffffff‡

	)

62 
	#__LONG_MAX
 0x7ffffffffffffff‡

	)

63 
	#__LONG_MIN
 (-0x7ffffffffffffff‡- 1Ë

	)

65 
	#__ULONG_MAX
 0xffffffffUL

	)

66 
	#__LONG_MAX
 0x7fffffffL

	)

67 
	#__LONG_MIN
 (-0x7fffffffL - 1)

	)

71 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

72 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

73 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL - 1Ë

	)

75 #ifdef 
__LP64__


76 
	#__SSIZE_MAX
 
__LONG_MAX


	)

77 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

78 
	#__OFF_MAX
 
__LONG_MAX


	)

79 
	#__OFF_MIN
 
__LONG_MIN


	)

81 
	#__UQUAD_MAX
 
__ULONG_MAX


	)

82 
	#__QUAD_MAX
 
__LONG_MAX


	)

83 
	#__QUAD_MIN
 
__LONG_MIN


	)

84 
	#__LONG_BIT
 64

	)

86 
	#__SSIZE_MAX
 
__INT_MAX


	)

87 
	#__SIZE_T_MAX
 
__UINT_MAX


	)

88 
	#__OFF_MAX
 
__LLONG_MAX


	)

89 
	#__OFF_MIN
 
__LLONG_MIN


	)

90 
	#__UQUAD_MAX
 
__ULLONG_MAX


	)

91 
	#__QUAD_MAX
 
__LLONG_MAX


	)

92 
	#__QUAD_MIN
 
__LLONG_MIN


	)

93 
	#__LONG_BIT
 32

	)

96 
	#__WORD_BIT
 32

	)

99 
	#__MINSIGSTKSZ
 (512 * 4)

	)

	@/usr/include/x86/elf.h

29 #i‚de‡
_MACHINE_ELF_H_


30 
	#_MACHINE_ELF_H_
 1

	)

32 #i‡
deföed
(
__i386__
Ë|| deföed(
_MACHINE_ELF_WANT_32BIT
)

38 
	~<sys/ñf32.h
>

39 #i‡
deföed
(
__ELF_WORD_SIZE
) && __ELF_WORD_SIZE == 64

40 
	~<sys/ñf64.h
>

43 #i‚de‡
__ELF_WORD_SIZE


44 
	#__ELF_WORD_SIZE
 32

	)

47 
	~<sys/ñf_gíîic.h
>

49 
	#ELF_ARCH
 
EM_386


	)

51 
	#ELF_MACHINE_OK
(
x
Ë((xË=
EM_386
 || (xË=
EM_486
)

	)

61 
	ma_ty≥
;

63 
	ma_vÆ
;

64 *
	ma_±r
;

65 (*
	ma_f˙
)();

66 } 
	ma_un
;

67 } 
	tElf32_Auxöfo
;

69 #i‡
__ELF_WORD_SIZE
 == 64

72 
	mÁke
;

73 } 
	tElf64_Auxöfo
;

76 
__ElfTy≥
(
Auxöfo
);

79 
	#AT_NULL
 0

	)

80 
	#AT_IGNORE
 1

	)

81 
	#AT_EXECFD
 2

	)

82 
	#AT_PHDR
 3

	)

83 
	#AT_PHENT
 4

	)

84 
	#AT_PHNUM
 5

	)

85 
	#AT_PAGESZ
 6

	)

86 
	#AT_BASE
 7

	)

87 
	#AT_FLAGS
 8

	)

88 
	#AT_ENTRY
 9

	)

89 
	#AT_NOTELF
 10

	)

90 
	#AT_UID
 11

	)

91 
	#AT_EUID
 12

	)

92 
	#AT_GID
 13

	)

93 
	#AT_EGID
 14

	)

94 
	#AT_EXECPATH
 15

	)

95 
	#AT_CANARY
 16

	)

96 
	#AT_CANARYLEN
 17

	)

97 
	#AT_OSRELDATE
 18

	)

98 
	#AT_NCPUS
 19

	)

99 
	#AT_PAGESIZES
 20

	)

100 
	#AT_PAGESIZESLEN
 21

	)

101 
	#AT_TIMEKEEP
 22

	)

102 
	#AT_STACKPROT
 23

	)

104 
	#AT_COUNT
 24

	)

110 
	#R_386_COUNT
 38

	)

113 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

114 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

115 
	#ELF_TARG_MACH
 
EM_386


	)

116 
	#ELF_TARG_VER
 1

	)

118 
	#ET_DYN_LOAD_ADDR
 0x01001000

	)

120 #ñi‡
deföed
(
__amd64__
)

126 #i‚de‡
__ELF_WORD_SIZE


127 
	#__ELF_WORD_SIZE
 64

	)

129 
	~<sys/ñf32.h
>

130 
	~<sys/ñf64.h
>

131 
	~<sys/ñf_gíîic.h
>

133 
	#ELF_ARCH
 
EM_X86_64


	)

134 
	#ELF_ARCH32
 
EM_386


	)

136 
	#ELF_MACHINE_OK
(
x
Ë((xË=
EM_X86_64
)

	)

145 
	ma_ty≥
;

147 
	ma_vÆ
;

148 } 
	ma_un
;

149 } 
	tElf32_Auxöfo
;

153 
	ma_ty≥
;

155 
	ma_vÆ
;

156 *
	ma_±r
;

157 (*
	ma_f˙
)();

158 } 
	ma_un
;

159 } 
	tElf64_Auxöfo
;

161 
__ElfTy≥
(
Auxöfo
);

164 
	#AT_NULL
 0

	)

165 
	#AT_IGNORE
 1

	)

166 
	#AT_EXECFD
 2

	)

167 
	#AT_PHDR
 3

	)

168 
	#AT_PHENT
 4

	)

169 
	#AT_PHNUM
 5

	)

170 
	#AT_PAGESZ
 6

	)

171 
	#AT_BASE
 7

	)

172 
	#AT_FLAGS
 8

	)

173 
	#AT_ENTRY
 9

	)

174 
	#AT_NOTELF
 10

	)

175 
	#AT_UID
 11

	)

176 
	#AT_EUID
 12

	)

177 
	#AT_GID
 13

	)

178 
	#AT_EGID
 14

	)

179 
	#AT_EXECPATH
 15

	)

180 
	#AT_CANARY
 16

	)

181 
	#AT_CANARYLEN
 17

	)

182 
	#AT_OSRELDATE
 18

	)

183 
	#AT_NCPUS
 19

	)

184 
	#AT_PAGESIZES
 20

	)

185 
	#AT_PAGESIZESLEN
 21

	)

186 
	#AT_TIMEKEEP
 22

	)

187 
	#AT_STACKPROT
 23

	)

189 
	#AT_COUNT
 24

	)

195 
	#R_X86_64_COUNT
 24

	)

198 #i‡
__ELF_WORD_SIZE
 == 32

199 
	#ELF_TARG_CLASS
 
ELFCLASS32


	)

201 
	#ELF_TARG_CLASS
 
ELFCLASS64


	)

203 
	#ELF_TARG_DATA
 
ELFDATA2LSB


	)

204 
	#ELF_TARG_MACH
 
EM_X86_64


	)

205 
	#ELF_TARG_VER
 1

	)

207 #i‡
__ELF_WORD_SIZE
 == 32

208 
	#ET_DYN_LOAD_ADDR
 0x01001000

	)

210 
	#ET_DYN_LOAD_ADDR
 0x01021000

	)

	@/usr/include/x86/endian.h

33 #i‚de‡
_MACHINE_ENDIAN_H_


34 
	#_MACHINE_ENDIAN_H_


	)

36 
	~<sys/cdefs.h
>

37 
	~<sys/_ty≥s.h
>

42 
	#_QUAD_HIGHWORD
 1

	)

43 
	#_QUAD_LOWWORD
 0

	)

49 
	#_LITTLE_ENDIAN
 1234

	)

50 
	#_BIG_ENDIAN
 4321

	)

51 
	#_PDP_ENDIAN
 3412

	)

53 
	#_BYTE_ORDER
 
_LITTLE_ENDIAN


	)

59 #i‡
__BSD_VISIBLE


60 
	#LITTLE_ENDIAN
 
_LITTLE_ENDIAN


	)

61 
	#BIG_ENDIAN
 
_BIG_ENDIAN


	)

62 
	#PDP_ENDIAN
 
_PDP_ENDIAN


	)

63 
	#BYTE_ORDER
 
_BYTE_ORDER


	)

66 
	#__bsw≠16_gí
(
x
Ë(
__uöt16_t
)((xË<< 8 | (xË>> 8)

	)

67 
	#__bsw≠32_gí
(
x
) \

68 (((
__uöt32_t
)
	`__bsw≠16
((
x
Ë& 0xffffË<< 16Ë| __bsw≠16((xË>> 16))

	)

69 
	#__bsw≠64_gí
(
x
) \

70 (((
__uöt64_t
)
	`__bsw≠32
((
x
Ë& 0xffffffffË<< 32Ë| __bsw≠32((xË>> 32))

	)

72 #ifde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


73 
	#__bsw≠16
(
x
) \

74 ((
__uöt16_t
)(
	`__buûtö_c⁄°™t_p
(
x
) ? \

75 
	`__bsw≠16_gí
((
__uöt16_t
)(
x
)Ë: 
	`__bsw≠16_v¨
(x)))

	)

76 
	#__bsw≠32
(
x
) \

77 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

78 
	`__bsw≠32_gí
((
__uöt32_t
)(
x
)Ë: 
	`__bsw≠32_v¨
(x))

	)

79 
	#__bsw≠64
(
x
) \

80 (
	`__buûtö_c⁄°™t_p
(
x
) ? \

81 
	`__bsw≠64_gí
((
__uöt64_t
)(
x
)Ë: 
	`__bsw≠64_v¨
(x))

	)

84 
	#__bsw≠16
(
x
Ë
	`__bsw≠16_v¨
(x)

	)

85 
	#__bsw≠32
(
x
Ë
	`__bsw≠32_v¨
(x)

	)

86 
	#__bsw≠64
(
x
Ë
	`__bsw≠64_v¨
(x)

	)

91 
__ölöe
 
__uöt16_t


92 
	$__bsw≠16_v¨
(
__uöt16_t
 
_x
)

95  (
	`__bsw≠16_gí
(
_x
));

96 
	}
}

98 
__ölöe
 
__uöt32_t


99 
	$__bsw≠32_v¨
(
__uöt32_t
 
_x
)

102 #ifde‡
__GNUCLIKE_ASM


103 
	`__asm
("bsw≠ %0" : "+r" (
_x
));

104  (
_x
);

106  (
	`__bsw≠32_gí
(
_x
));

108 
	}
}

110 
__ölöe
 
__uöt64_t


111 
	$__bsw≠64_v¨
(
__uöt64_t
 
_x
)

114 #i‡
	`deföed
(
__amd64__
Ë&& deföed(
__GNUCLIKE_ASM
)

115 
	`__asm
("bsw≠ %0" : "+r" (
_x
));

116  (
_x
);

122  (
	`__bsw≠64_gí
(
_x
));

124 
	}
}

126 
	#__ht⁄l
(
x
Ë
	`__bsw≠32
(x)

	)

127 
	#__ht⁄s
(
x
Ë
	`__bsw≠16
(x)

	)

128 
	#__¡ohl
(
x
Ë
	`__bsw≠32
(x)

	)

129 
	#__¡ohs
(
x
Ë
	`__bsw≠16
(x)

	)

	@/usr/include/machine/cpu.h

36 #i‚de‡
_MACHINE_CPU_H_


37 
	#_MACHINE_CPU_H_


	)

42 
	~<machöe/p¶.h
>

43 
	~<machöe/‰ame.h
>

44 
	~<machöe/£gmíts.h
>

46 
	#˝u_exec
(
p
Ë

	)

47 
	#˝u_sw≠ö
(
p
Ë

	)

48 
	#˝u_gë°ack
(
td
Ë(—d)->
td_‰ame
->
tf_r•
)

	)

49 
	#˝u_£t°ack
(
td
, 
≠
Ë(—d)->
td_‰ame
->
tf_r•
 = (≠))

	)

50 
	#˝u_•öwaô
(Ë
	`ü32_∑u£
()

	)

52 
	#TRAPF_USERMODE
(
‰amï
) \

53 (
	`ISPL
((
‰amï
)->
tf_cs
Ë=
SEL_UPL
)

	)

54 
	#TRAPF_PC
(
‰amï
Ë((‰amï)->
tf_rù
)

	)

56 #ifde‡
_KERNEL


63 
	s˝u_›s
 {

64 (*
	m˝u_öô
)();

65 (*
	m˝u_ªsume
)();

66 (*
	mùi_ve˘‹ed
)(
	mu_öt
, );

69 
˝u_›s
 cpu_ops;

70 
bãxt
[];

71 
ëext
[];

74 (*
vmm_ªsume_p
)();

76 
	`˝u_hÆt
();

77 
	`˝u_ª£t
();

78 
	`f‹k_åampﬁöe
();

79 
	`swi_vm
(*);

85 
__ölöe
 
u_öt64_t


86 
	$gë_cy˛ecou¡
()

89  (
	`rdtsc
());

90 
	}
}

	@/usr/include/sys/_stack.h

29 #i‚de‡
_SYS__STACK_H_


30 
	#_SYS__STACK_H_


	)

32 
	#STACK_MAX
 18

	)

34 
	s°ack
 {

35 
	mdïth
;

36 
vm_off£t_t
 
	mpcs
[
STACK_MAX
];

	@/usr/include/sys/bus_dma.h

65 #i‚de‡
_BUS_DMA_H_


66 
	#_BUS_DMA_H_


	)

68 
	~<sys/_bus_dma.h
>

81 
	#BUS_DMA_WAITOK
 0x00

	)

82 
	#BUS_DMA_NOWAIT
 0x01

	)

83 
	#BUS_DMA_ALLOCNOW
 0x02

	)

84 
	#BUS_DMA_COHERENT
 0x04

	)

85 
	#BUS_DMA_ZERO
 0x08

	)

86 
	#BUS_DMA_BUS1
 0x10

	)

87 
	#BUS_DMA_BUS2
 0x20

	)

88 
	#BUS_DMA_BUS3
 0x40

	)

89 
	#BUS_DMA_BUS4
 0x80

	)

95 
	#BUS_DMA_NOWRITE
 0x100

	)

96 
	#BUS_DMA_NOCACHE
 0x200

	)

103 
	#BUS_DMA_KEEP_PG_OFFSET
 0x400

	)

105 
	#BUS_DMA_LOAD_MBUF
 0x800

	)

108 
	gccb
;

109 
	gbio
;

110 
	gmbuf
;

111 
	gmemdesc
;

112 
	gpm≠
;

113 
	guio
;

118 
	#BUS_DMASYNC_PREREAD
 1

	)

119 
	#BUS_DMASYNC_POSTREAD
 2

	)

120 
	#BUS_DMASYNC_PREWRITE
 4

	)

121 
	#BUS_DMASYNC_POSTWRITE
 8

	)

129 
	sbus_dma_£gmít
 {

130 
bus_addr_t
 
	mds_addr
;

131 
bus_size_t
 
	mds_Àn
;

132 } 
	tbus_dma_£gmít_t
;

138 
	tbus_dma_fûãr_t
(*, 
	tbus_addr_t
);

143 
busdma_lock_muãx
(*
¨g
, 
bus_dma_lock_›_t
 
›
);

170 
bus_dma_èg_¸óã
(
bus_dma_èg_t
 
∑ª¡
, 
bus_size_t
 
Æignmít
,

171 
bus_addr_t
 
bound¨y
, bus_addr_à
lowaddr
,

172 
bus_addr_t
 
highaddr
, 
bus_dma_fûãr_t
 *
fûtfunc
,

173 *
fûtfunˇrg
, 
bus_size_t
 
maxsize
, 
n£gmíts
,

174 
bus_size_t
 
max£gsz
, 
Êags
, 
bus_dma_lock_t
 *
lockfunc
,

175 *
lockfunˇrg
, 
bus_dma_èg_t
 *
dm©
);

177 
bus_dma_èg_de°roy
(
bus_dma_èg_t
 
dm©
);

183 
	tbus_dmam≠_ˇŒback_t
(*, 
	tbus_dma_£gmít_t
 *, , );

190 
	tbus_dmam≠_ˇŒback2_t
(*, 
	tbus_dma_£gmít_t
 *, , 
	tbus_size_t
, );

195 
bus_dmam≠_lﬂd
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, *
buf
,

196 
bus_size_t
 
buÊí
, 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
,

197 *
ˇŒback_¨g
, 
Êags
);

203 
bus_dmam≠_lﬂd_mbuf
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

204 
mbuf
 *mbuf,

205 
bus_dmam≠_ˇŒback2_t
 *
ˇŒback
, *
ˇŒback_¨g
,

206 
Êags
);

208 
bus_dmam≠_lﬂd_mbuf_sg
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

209 
mbuf
 *mbuf, 
bus_dma_£gmít_t
 *
£gs
,

210 *
n£gs
, 
Êags
);

216 
bus_dmam≠_lﬂd_uio
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

217 
uio
 *
ui
,

218 
bus_dmam≠_ˇŒback2_t
 *
ˇŒback
, *
ˇŒback_¨g
,

219 
Êags
);

224 
bus_dmam≠_lﬂd_ccb
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
ccb
 *ccb,

225 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
, *
ˇŒback_¨g
,

226 
Êags
);

231 
bus_dmam≠_lﬂd_bio
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
, 
bio
 *bio,

232 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
, *
ˇŒback_¨g
,

233 
Êags
);

238 
bus_dmam≠_lﬂd_mem
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

239 
memdesc
 *
mem
, 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
,

240 *
ˇŒback_¨g
, 
Êags
);

247 
bus_dmam≠_lﬂd_ma_åiv
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

248 
vm_∑ge
 **
ma
, 
bus_size_t
 
éí
, 
ma_offs
, 
Êags
,

249 
bus_dma_£gmít_t
 *
£gs
, *
£gp
);

256 #i‡!
deföed
(
__•¨c64__
)

262 
bus_dmam≠_¸óã
(
bus_dma_èg_t
 
dm©
, 
Êags
, 
bus_dmam≠_t
 *
m≠p
);

268 
bus_dmam≠_de°roy
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
);

275 
bus_dmamem_Æloc
(
bus_dma_èg_t
 
dm©
, ** 
vaddr
, 
Êags
,

276 
bus_dmam≠_t
 *
m≠p
);

282 
bus_dmamem_‰ì
(
bus_dma_èg_t
 
dm©
, *
vaddr
, 
bus_dmam≠_t
 
m≠
);

287 
_bus_dmam≠_sync
(
bus_dma_èg_t
, 
bus_dmam≠_t
, 
bus_dmasync_›_t
);

288 
	#bus_dmam≠_sync
(
dm©
, 
dmam≠
, 
›
) \

290 i‡((
dmam≠
Ë!
NULL
) \

291 
	`_bus_dmam≠_sync
(
dm©
, 
dmam≠
, 
›
); \

292 } 0)

	)

297 
_bus_dmam≠_u∆ﬂd
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
);

298 
	#bus_dmam≠_u∆ﬂd
(
dm©
, 
dmam≠
) \

300 i‡((
dmam≠
Ë!
NULL
) \

301 
	`_bus_dmam≠_u∆ﬂd
(
dm©
, 
dmam≠
); \

302 } 0)

	)

309 
__bus_dmam≠_waôok
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

310 
memdesc
 *
mem
,

311 
bus_dmam≠_ˇŒback_t
 *
ˇŒback
,

312 *
ˇŒback_¨g
);

314 
	#_bus_dmam≠_waôok
(
dm©
, 
m≠
, 
mem
, 
ˇŒback
, 
ˇŒback_¨g
) \

316 i‡((
m≠
Ë!
NULL
) \

317 
	`__bus_dmam≠_waôok
(
dm©
, 
m≠
, 
mem
, 
ˇŒback
, \

318 
ˇŒback_¨g
); \

319 } 0);

	)

321 
_bus_dmam≠_lﬂd_buf„r
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

322 *
buf
, 
bus_size_t
 
buÊí
, 
pm≠
 *pmap,

323 
Êags
, 
bus_dma_£gmít_t
 *
£gs
, *
£gp
);

325 
_bus_dmam≠_lﬂd_phys
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

326 
vm_∑ddr_t
 
∑ddr
, 
bus_size_t
 
buÊí
,

327 
Êags
, 
bus_dma_£gmít_t
 *
£gs
, *
£gp
);

329 
_bus_dmam≠_lﬂd_ma
(
bus_dma_èg_t
 
dm©
, 
bus_dmam≠_t
 
m≠
,

330 
vm_∑ge
 **
ma
, 
bus_size_t
 
éí
, 
ma_offs
, 
Êags
,

331 
bus_dma_£gmít_t
 *
£gs
, *
£gp
);

333 
bus_dma_£gmít_t
 *
_bus_dmam≠_com∂ëe
(
bus_dma_èg_t
 
dm©
,

334 
bus_dmam≠_t
 
m≠
,

335 
bus_dma_£gmít_t
 *
£gs
,

336 
n£gs
, 
îr‹
);

	@/usr/include/sys/elf32.h

29 #i‚de‡
_SYS_ELF32_H_


30 
	#_SYS_ELF32_H_
 1

	)

32 
	~<sys/ñf_comm⁄.h
>

38 
uöt32_t
 
	tElf32_Addr
;

39 
uöt16_t
 
	tElf32_HÆf
;

40 
uöt32_t
 
	tElf32_Off
;

41 
öt32_t
 
	tElf32_Sw‹d
;

42 
uöt32_t
 
	tElf32_W‹d
;

43 
uöt64_t
 
	tElf32_Lw‹d
;

45 
Elf32_W‹d
 
	tElf32_Hashñt
;

48 
Elf32_W‹d
 
	tElf32_Size
;

49 
Elf32_Sw‹d
 
	tElf32_Ssize
;

56 
	me_idít
[
EI_NIDENT
];

57 
Elf32_HÆf
 
	me_ty≥
;

58 
Elf32_HÆf
 
	me_machöe
;

59 
Elf32_W‹d
 
	me_vîsi⁄
;

60 
Elf32_Addr
 
	me_íåy
;

61 
Elf32_Off
 
	me_phoff
;

62 
Elf32_Off
 
	me_shoff
;

63 
Elf32_W‹d
 
	me_Êags
;

64 
Elf32_HÆf
 
	me_ehsize
;

65 
Elf32_HÆf
 
	me_phítsize
;

66 
Elf32_HÆf
 
	me_phnum
;

67 
Elf32_HÆf
 
	me_shítsize
;

68 
Elf32_HÆf
 
	me_shnum
;

69 
Elf32_HÆf
 
	me_sh°∫dx
;

70 } 
	tElf32_Ehdr
;

77 
Elf32_W‹d
 
	ml_«me
;

78 
Elf32_W‹d
 
	ml_time_°amp
;

79 
Elf32_W‹d
 
	ml_checksum
;

80 
Elf32_W‹d
 
	ml_vîsi⁄
;

81 
Elf32_W‹d
 
	ml_Êags
;

82 } 
	tElf32_Lib
;

89 
Elf32_W‹d
 
	msh_«me
;

91 
Elf32_W‹d
 
	msh_ty≥
;

92 
Elf32_W‹d
 
	msh_Êags
;

93 
Elf32_Addr
 
	msh_addr
;

94 
Elf32_Off
 
	msh_off£t
;

95 
Elf32_W‹d
 
	msh_size
;

96 
Elf32_W‹d
 
	msh_lök
;

97 
Elf32_W‹d
 
	msh_öfo
;

98 
Elf32_W‹d
 
	msh_addølign
;

99 
Elf32_W‹d
 
	msh_ítsize
;

100 } 
	tElf32_Shdr
;

107 
Elf32_W‹d
 
	mp_ty≥
;

108 
Elf32_Off
 
	mp_off£t
;

109 
Elf32_Addr
 
	mp_vaddr
;

110 
Elf32_Addr
 
	mp_∑ddr
;

111 
Elf32_W‹d
 
	mp_fûesz
;

112 
Elf32_W‹d
 
	mp_memsz
;

113 
Elf32_W‹d
 
	mp_Êags
;

114 
Elf32_W‹d
 
	mp_Æign
;

115 } 
	tElf32_Phdr
;

122 
Elf32_Sw‹d
 
	md_èg
;

124 
Elf32_W‹d
 
	md_vÆ
;

125 
Elf32_Addr
 
	md_±r
;

126 } 
	md_un
;

127 } 
	tElf32_Dyn
;

135 
Elf32_Addr
 
	mr_off£t
;

136 
Elf32_W‹d
 
	mr_öfo
;

137 } 
	tElf32_Rñ
;

141 
Elf32_Addr
 
	mr_off£t
;

142 
Elf32_W‹d
 
	mr_öfo
;

143 
Elf32_Sw‹d
 
	mr_addíd
;

144 } 
	tElf32_Rña
;

147 
	#ELF32_R_SYM
(
öfo
Ë((öfoË>> 8)

	)

148 
	#ELF32_R_TYPE
(
öfo
Ë(()(öfo))

	)

151 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ ()—y≥))

	)

156 
Elf_NŸe
 
	tElf32_Nhdr
;

162 
Elf32_Lw‹d
 
	mm_vÆue
;

163 
Elf32_W‹d
 
	mm_öfo
;

164 
Elf32_W‹d
 
	mm_poff£t
;

165 
Elf32_HÆf
 
	mm_ª≥©
;

166 
Elf32_HÆf
 
	mm_°ride
;

167 } 
	tElf32_Move
;

176 
	#ELF32_M_SYM
(
öfo
Ë((öfo)>>8)

	)

177 
	#ELF32_M_SIZE
(
öfo
Ë(()(öfo))

	)

178 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((sym)<<8)+()(size))

	)

184 
Elf32_W‹d
 
	mc_èg
;

186 
Elf32_W‹d
 
	mc_vÆ
;

187 
Elf32_Addr
 
	mc_±r
;

188 } 
	mc_un
;

189 } 
	tElf32_C≠
;

196 
Elf32_W‹d
 
	m°_«me
;

197 
Elf32_Addr
 
	m°_vÆue
;

198 
Elf32_W‹d
 
	m°_size
;

199 
	m°_öfo
;

200 
	m°_Ÿhî
;

201 
Elf32_HÆf
 
	m°_shndx
;

202 } 
	tElf32_Sym
;

205 
	#ELF32_ST_BIND
(
öfo
Ë((öfoË>> 4)

	)

206 
	#ELF32_ST_TYPE
(
öfo
Ë((öfoË& 0xf)

	)

209 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

212 
	#ELF32_ST_VISIBILITY
(
Ÿh
Ë((ŸhË& 0x3)

	)

217 
Elf32_HÆf
 
	mvd_vîsi⁄
;

218 
Elf32_HÆf
 
	mvd_Êags
;

219 
Elf32_HÆf
 
	mvd_ndx
;

220 
Elf32_HÆf
 
	mvd_˙t
;

221 
Elf32_W‹d
 
	mvd_hash
;

222 
Elf32_W‹d
 
	mvd_aux
;

223 
Elf32_W‹d
 
	mvd_√xt
;

224 } 
	tElf32_Vîdef
;

228 
Elf32_W‹d
 
	mvda_«me
;

229 
Elf32_W‹d
 
	mvda_√xt
;

230 } 
	tElf32_Vîdaux
;

234 
Elf32_HÆf
 
	mvn_vîsi⁄
;

235 
Elf32_HÆf
 
	mvn_˙t
;

236 
Elf32_W‹d
 
	mvn_fûe
;

237 
Elf32_W‹d
 
	mvn_aux
;

238 
Elf32_W‹d
 
	mvn_√xt
;

239 } 
	tElf32_Vî√ed
;

243 
Elf32_W‹d
 
	mv«_hash
;

244 
Elf32_HÆf
 
	mv«_Êags
;

245 
Elf32_HÆf
 
	mv«_Ÿhî
;

246 
Elf32_W‹d
 
	mv«_«me
;

247 
Elf32_W‹d
 
	mv«_√xt
;

248 } 
	tElf32_Vî«ux
;

250 
Elf32_HÆf
 
	tElf32_Vîsym
;

253 
Elf32_HÆf
 
	msi_boundto
;

254 
Elf32_HÆf
 
	msi_Êags
;

255 } 
	tElf32_Symöfo
;

	@/usr/include/sys/elf64.h

29 #i‚de‡
_SYS_ELF64_H_


30 
	#_SYS_ELF64_H_
 1

	)

32 
	~<sys/ñf_comm⁄.h
>

38 
uöt64_t
 
	tElf64_Addr
;

39 
uöt16_t
 
	tElf64_HÆf
;

40 
uöt64_t
 
	tElf64_Off
;

41 
öt32_t
 
	tElf64_Sw‹d
;

42 
öt64_t
 
	tElf64_Sxw‹d
;

43 
uöt32_t
 
	tElf64_W‹d
;

44 
uöt64_t
 
	tElf64_Lw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

54 
Elf64_W‹d
 
	tElf64_Hashñt
;

57 
Elf64_Xw‹d
 
	tElf64_Size
;

58 
Elf64_Sxw‹d
 
	tElf64_Ssize
;

65 
	me_idít
[
EI_NIDENT
];

66 
Elf64_HÆf
 
	me_ty≥
;

67 
Elf64_HÆf
 
	me_machöe
;

68 
Elf64_W‹d
 
	me_vîsi⁄
;

69 
Elf64_Addr
 
	me_íåy
;

70 
Elf64_Off
 
	me_phoff
;

71 
Elf64_Off
 
	me_shoff
;

72 
Elf64_W‹d
 
	me_Êags
;

73 
Elf64_HÆf
 
	me_ehsize
;

74 
Elf64_HÆf
 
	me_phítsize
;

75 
Elf64_HÆf
 
	me_phnum
;

76 
Elf64_HÆf
 
	me_shítsize
;

77 
Elf64_HÆf
 
	me_shnum
;

78 
Elf64_HÆf
 
	me_sh°∫dx
;

79 } 
	tElf64_Ehdr
;

86 
Elf64_W‹d
 
	ml_«me
;

87 
Elf64_W‹d
 
	ml_time_°amp
;

88 
Elf64_W‹d
 
	ml_checksum
;

89 
Elf64_W‹d
 
	ml_vîsi⁄
;

90 
Elf64_W‹d
 
	ml_Êags
;

91 } 
	tElf64_Lib
;

98 
Elf64_W‹d
 
	msh_«me
;

100 
Elf64_W‹d
 
	msh_ty≥
;

101 
Elf64_Xw‹d
 
	msh_Êags
;

102 
Elf64_Addr
 
	msh_addr
;

103 
Elf64_Off
 
	msh_off£t
;

104 
Elf64_Xw‹d
 
	msh_size
;

105 
Elf64_W‹d
 
	msh_lök
;

106 
Elf64_W‹d
 
	msh_öfo
;

107 
Elf64_Xw‹d
 
	msh_addølign
;

108 
Elf64_Xw‹d
 
	msh_ítsize
;

109 } 
	tElf64_Shdr
;

116 
Elf64_W‹d
 
	mp_ty≥
;

117 
Elf64_W‹d
 
	mp_Êags
;

118 
Elf64_Off
 
	mp_off£t
;

119 
Elf64_Addr
 
	mp_vaddr
;

120 
Elf64_Addr
 
	mp_∑ddr
;

121 
Elf64_Xw‹d
 
	mp_fûesz
;

122 
Elf64_Xw‹d
 
	mp_memsz
;

123 
Elf64_Xw‹d
 
	mp_Æign
;

124 } 
	tElf64_Phdr
;

131 
Elf64_Sxw‹d
 
	md_èg
;

133 
Elf64_Xw‹d
 
	md_vÆ
;

134 
Elf64_Addr
 
	md_±r
;

135 } 
	md_un
;

136 } 
	tElf64_Dyn
;

144 
Elf64_Addr
 
	mr_off£t
;

145 
Elf64_Xw‹d
 
	mr_öfo
;

146 } 
	tElf64_Rñ
;

150 
Elf64_Addr
 
	mr_off£t
;

151 
Elf64_Xw‹d
 
	mr_öfo
;

152 
Elf64_Sxw‹d
 
	mr_addíd
;

153 } 
	tElf64_Rña
;

156 
	#ELF64_R_SYM
(
öfo
Ë((öfoË>> 32)

	)

157 
	#ELF64_R_TYPE
(
öfo
Ë((öfoË& 0xffffffffL)

	)

160 
	#ELF64_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 32Ë+ (—y≥Ë& 0xffffffffL))

	)

162 
	#ELF64_R_TYPE_DATA
(
öfo
Ë(((
Elf64_Xw‹d
)(öfo)<<32)>>40)

	)

163 
	#ELF64_R_TYPE_ID
(
öfo
Ë(((
Elf64_Xw‹d
)(öfo)<<56)>>56)

	)

164 
	#ELF64_R_TYPE_INFO
(
d©a
, 
ty≥
) \

165 (((
Elf64_Xw‹d
)(
d©a
)<<8)+(Elf64_Xw‹d)(
ty≥
))

	)

170 
Elf_NŸe
 
	tElf64_Nhdr
;

176 
Elf64_Lw‹d
 
	mm_vÆue
;

177 
Elf64_Xw‹d
 
	mm_öfo
;

178 
Elf64_Xw‹d
 
	mm_poff£t
;

179 
Elf64_HÆf
 
	mm_ª≥©
;

180 
Elf64_HÆf
 
	mm_°ride
;

181 } 
	tElf64_Move
;

183 
	#ELF64_M_SYM
(
öfo
Ë((öfo)>>8)

	)

184 
	#ELF64_M_SIZE
(
öfo
Ë(()(öfo))

	)

185 
	#ELF64_M_INFO
(
sym
, 
size
Ë(((sym)<<8)+()(size))

	)

191 
Elf64_Xw‹d
 
	mc_èg
;

193 
Elf64_Xw‹d
 
	mc_vÆ
;

194 
Elf64_Addr
 
	mc_±r
;

195 } 
	mc_un
;

196 } 
	tElf64_C≠
;

203 
Elf64_W‹d
 
	m°_«me
;

204 
	m°_öfo
;

205 
	m°_Ÿhî
;

206 
Elf64_HÆf
 
	m°_shndx
;

207 
Elf64_Addr
 
	m°_vÆue
;

208 
Elf64_Xw‹d
 
	m°_size
;

209 } 
	tElf64_Sym
;

212 
	#ELF64_ST_BIND
(
öfo
Ë((öfoË>> 4)

	)

213 
	#ELF64_ST_TYPE
(
öfo
Ë((öfoË& 0xf)

	)

216 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

219 
	#ELF64_ST_VISIBILITY
(
Ÿh
Ë((ŸhË& 0x3)

	)

223 
Elf64_HÆf
 
	mvd_vîsi⁄
;

224 
Elf64_HÆf
 
	mvd_Êags
;

225 
Elf64_HÆf
 
	mvd_ndx
;

226 
Elf64_HÆf
 
	mvd_˙t
;

227 
Elf64_W‹d
 
	mvd_hash
;

228 
Elf64_W‹d
 
	mvd_aux
;

229 
Elf64_W‹d
 
	mvd_√xt
;

230 } 
	tElf64_Vîdef
;

233 
Elf64_W‹d
 
	mvda_«me
;

234 
Elf64_W‹d
 
	mvda_√xt
;

235 } 
	tElf64_Vîdaux
;

238 
Elf64_HÆf
 
	mvn_vîsi⁄
;

239 
Elf64_HÆf
 
	mvn_˙t
;

240 
Elf64_W‹d
 
	mvn_fûe
;

241 
Elf64_W‹d
 
	mvn_aux
;

242 
Elf64_W‹d
 
	mvn_√xt
;

243 } 
	tElf64_Vî√ed
;

246 
Elf64_W‹d
 
	mv«_hash
;

247 
Elf64_HÆf
 
	mv«_Êags
;

248 
Elf64_HÆf
 
	mv«_Ÿhî
;

249 
Elf64_W‹d
 
	mv«_«me
;

250 
Elf64_W‹d
 
	mv«_√xt
;

251 } 
	tElf64_Vî«ux
;

253 
Elf64_HÆf
 
	tElf64_Vîsym
;

256 
Elf64_HÆf
 
	msi_boundto
;

257 
Elf64_HÆf
 
	msi_Êags
;

258 } 
	tElf64_Symöfo
;

	@/usr/include/sys/elf_generic.h

29 #i‚de‡
_SYS_ELF_GENERIC_H_


30 
	#_SYS_ELF_GENERIC_H_
 1

	)

32 
	~<sys/cdefs.h
>

39 #i‡
__ELF_WORD_SIZE
 != 32 && __ELF_WORD_SIZE != 64

43 
	#ELF_CLASS
 
	`__CONCAT
(
ELFCLASS
,
__ELF_WORD_SIZE
)

	)

45 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


46 
	#ELF_DATA
 
ELFDATA2LSB


	)

47 #ñi‡
BYTE_ORDER
 =
BIG_ENDIAN


48 
	#ELF_DATA
 
ELFDATA2MSB


	)

53 
	#__ñfN
(
x
Ë
	`__CONCAT
(__CONCAT(__CONCAT(
ñf
,
__ELF_WORD_SIZE
),
_
),x)

	)

54 
	#__ElfN
(
x
Ë
	`__CONCAT
(__CONCAT(__CONCAT(
Elf
,
__ELF_WORD_SIZE
),
_
),x)

	)

55 
	#__ELFN
(
x
Ë
	`__CONCAT
(__CONCAT(__CONCAT(
ELF
,
__ELF_WORD_SIZE
),
_
),x)

	)

56 
	#__ElfTy≥
(
x
Ë
	`__ElfN
(
	tx
Ë
	t__CONCAT
(
	tElf_
,x)

	)

58 
	t__ElfTy≥
(
	tAddr
);

59 
__ElfTy≥
(
HÆf
);

60 
__ElfTy≥
(
Off
);

61 
__ElfTy≥
(
Sw‹d
);

62 
__ElfTy≥
(
W‹d
);

63 
__ElfTy≥
(
Ehdr
);

64 
__ElfTy≥
(
Shdr
);

65 
__ElfTy≥
(
Phdr
);

66 
__ElfTy≥
(
Dyn
);

67 
__ElfTy≥
(
Rñ
);

68 
__ElfTy≥
(
Rña
);

69 
__ElfTy≥
(
Sym
);

70 
__ElfTy≥
(
Vîdef
);

71 
__ElfTy≥
(
Vîdaux
);

72 
__ElfTy≥
(
Vî√ed
);

73 
__ElfTy≥
(
Vî«ux
);

74 
__ElfTy≥
(
Vîsym
);

77 
__ElfTy≥
(
Hashñt
);

78 
__ElfTy≥
(
Size
);

79 
__ElfTy≥
(
Ssize
);

81 
	#ELF_R_SYM
 
	`__ELFN
(
R_SYM
)

	)

82 
	#ELF_R_TYPE
 
	`__ELFN
(
R_TYPE
)

	)

83 
	#ELF_R_INFO
 
	`__ELFN
(
R_INFO
)

	)

84 
	#ELF_ST_BIND
 
	`__ELFN
(
ST_BIND
)

	)

85 
	#ELF_ST_TYPE
 
	`__ELFN
(
ST_TYPE
)

	)

86 
	#ELF_ST_INFO
 
	`__ELFN
(
ST_INFO
)

	)

	@/usr/include/x86/_stdint.h

40 #i‚de‡
_MACHINE__STDINT_H_


41 
	#_MACHINE__STDINT_H_


	)

43 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

45 
	#INT8_C
(
c
Ë(c)

	)

46 
	#INT16_C
(
c
Ë(c)

	)

47 
	#INT32_C
(
c
Ë(c)

	)

49 
	#UINT8_C
(
c
Ë(c)

	)

50 
	#UINT16_C
(
c
Ë(c)

	)

51 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

53 #ifdef 
__LP64__


54 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

55 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

57 
	#INT64_C
(
c
Ë(¯## 
LL
)

	)

58 
	#UINT64_C
(
c
Ë(¯## 
ULL
)

	)

61 
	#INTMAX_C
(
c
Ë
	`INT64_C
(c)

	)

62 
	#UINTMAX_C
(
c
Ë
	`UINT64_C
(c)

	)

66 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

72 
	#INT8_MIN
 (-0x7f-1)

	)

73 
	#INT16_MIN
 (-0x7fff-1)

	)

74 
	#INT32_MIN
 (-0x7fffffff-1)

	)

76 
	#INT8_MAX
 0x7f

	)

77 
	#INT16_MAX
 0x7fff

	)

78 
	#INT32_MAX
 0x7fffffff

	)

80 
	#UINT8_MAX
 0xff

	)

81 
	#UINT16_MAX
 0xffff

	)

82 
	#UINT32_MAX
 0xffffffffU

	)

84 #ifde‡
__LP64__


85 
	#INT64_MIN
 (-0x7fffffffffffffff-1)

	)

86 
	#INT64_MAX
 0x7fffffffffffffff

	)

87 
	#UINT64_MAX
 0xffffffffffffffff

	)

89 
	#INT64_MIN
 (-0x7fffffffffffffffLL-1)

	)

90 
	#INT64_MAX
 0x7fffffffffffffffLL

	)

91 
	#UINT64_MAX
 0xffffffffffffffffULL

	)

99 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

100 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

101 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

102 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

105 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

106 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

107 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

108 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

111 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

112 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

113 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

114 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

121 
	#INT_FAST8_MIN
 
INT32_MIN


	)

122 
	#INT_FAST16_MIN
 
INT32_MIN


	)

123 
	#INT_FAST32_MIN
 
INT32_MIN


	)

124 
	#INT_FAST64_MIN
 
INT64_MIN


	)

127 
	#INT_FAST8_MAX
 
INT32_MAX


	)

128 
	#INT_FAST16_MAX
 
INT32_MAX


	)

129 
	#INT_FAST32_MAX
 
INT32_MAX


	)

130 
	#INT_FAST64_MAX
 
INT64_MAX


	)

133 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

134 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

135 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

136 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

142 #ifdef 
__LP64__


143 
	#INTPTR_MIN
 
INT64_MIN


	)

144 
	#INTPTR_MAX
 
INT64_MAX


	)

145 
	#UINTPTR_MAX
 
UINT64_MAX


	)

147 
	#INTPTR_MIN
 
INT32_MIN


	)

148 
	#INTPTR_MAX
 
INT32_MAX


	)

149 
	#UINTPTR_MAX
 
UINT32_MAX


	)

156 
	#INTMAX_MIN
 
INT64_MIN


	)

157 
	#INTMAX_MAX
 
INT64_MAX


	)

158 
	#UINTMAX_MAX
 
UINT64_MAX


	)

164 #ifdef 
__LP64__


166 
	#PTRDIFF_MIN
 
INT64_MIN


	)

167 
	#PTRDIFF_MAX
 
INT64_MAX


	)

170 
	#SIG_ATOMIC_MIN
 
LONG_MIN


	)

171 
	#SIG_ATOMIC_MAX
 
LONG_MAX


	)

174 
	#SIZE_MAX
 
UINT64_MAX


	)

176 
	#PTRDIFF_MIN
 
INT32_MIN


	)

177 
	#PTRDIFF_MAX
 
INT32_MAX


	)

178 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

179 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

180 
	#SIZE_MAX
 
UINT32_MAX


	)

184 
	#WINT_MIN
 
INT32_MIN


	)

185 
	#WINT_MAX
 
INT32_MAX


	)

	@/usr/include/x86/_types.h

39 #i‚de‡
_MACHINE__TYPES_H_


40 
	#_MACHINE__TYPES_H_


	)

42 #i‚de‡
_SYS_CDEFS_H_


43 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


46 
	#__NO_STRICT_ALIGNMENT


	)

51 sig√d 
	t__öt8_t
;

52 
	t__uöt8_t
;

53 
	t__öt16_t
;

54 
	t__uöt16_t
;

55 
	t__öt32_t
;

56 
	t__uöt32_t
;

57 #ifdef 
__LP64__


58 
	t__öt64_t
;

59 
	t__uöt64_t
;

61 #i‚de‡
löt


62 
	g__exãnsi⁄__


65 
	t__öt64_t
;

66 #i‚de‡
löt


67 
	g__exãnsi⁄__


70 
	t__uöt64_t
;

76 #ifdef 
__LP64__


77 
__öt32_t
 
	t__˛ock_t
;

78 
__öt64_t
 
	t__¸ôiˇl_t
;

79 
	t__doubÀ_t
;

80 
	t__Êﬂt_t
;

81 
__öt64_t
 
	t__ötÂå_t
;

82 
__öt64_t
 
	t__öçå_t
;

84 
	t__˛ock_t
;

85 
__öt32_t
 
	t__¸ôiˇl_t
;

86 
	t__doubÀ_t
;

87 
	t__Êﬂt_t
;

88 
__öt32_t
 
	t__ötÂå_t
;

89 
__öt32_t
 
	t__öçå_t
;

91 
__öt64_t
 
	t__ötmax_t
;

92 
__öt32_t
 
	t__öt_Á°8_t
;

93 
__öt32_t
 
	t__öt_Á°16_t
;

94 
__öt32_t
 
	t__öt_Á°32_t
;

95 
__öt64_t
 
	t__öt_Á°64_t
;

96 
__öt8_t
 
	t__öt_Àa°8_t
;

97 
__öt16_t
 
	t__öt_Àa°16_t
;

98 
__öt32_t
 
	t__öt_Àa°32_t
;

99 
__öt64_t
 
	t__öt_Àa°64_t
;

100 #ifdef 
__LP64__


101 
__öt64_t
 
	t__±rdiff_t
;

102 
__öt64_t
 
	t__ªgi°î_t
;

103 
__öt64_t
 
	t__£gsz_t
;

104 
__uöt64_t
 
	t__size_t
;

105 
__öt64_t
 
	t__ssize_t
;

106 
__öt64_t
 
	t__time_t
;

107 
__uöt64_t
 
	t__uötÂå_t
;

108 
__uöt64_t
 
	t__uöçå_t
;

110 
__öt32_t
 
	t__±rdiff_t
;

111 
__öt32_t
 
	t__ªgi°î_t
;

112 
__öt32_t
 
	t__£gsz_t
;

113 
__uöt32_t
 
	t__size_t
;

114 
__öt32_t
 
	t__ssize_t
;

115 
__öt32_t
 
	t__time_t
;

116 
__uöt32_t
 
	t__uötÂå_t
;

117 
__uöt32_t
 
	t__uöçå_t
;

119 
__uöt64_t
 
	t__uötmax_t
;

120 
__uöt32_t
 
	t__uöt_Á°8_t
;

121 
__uöt32_t
 
	t__uöt_Á°16_t
;

122 
__uöt32_t
 
	t__uöt_Á°32_t
;

123 
__uöt64_t
 
	t__uöt_Á°64_t
;

124 
__uöt8_t
 
	t__uöt_Àa°8_t
;

125 
__uöt16_t
 
	t__uöt_Àa°16_t
;

126 
__uöt32_t
 
	t__uöt_Àa°32_t
;

127 
__uöt64_t
 
	t__uöt_Àa°64_t
;

128 #ifdef 
__LP64__


129 
__uöt64_t
 
	t__u_ªgi°î_t
;

130 
__uöt64_t
 
	t__vm_off£t_t
;

131 
__uöt64_t
 
	t__vm_∑ddr_t
;

132 
__uöt64_t
 
	t__vm_size_t
;

134 
__uöt32_t
 
	t__u_ªgi°î_t
;

135 
__uöt32_t
 
	t__vm_off£t_t
;

136 #ifde‡
PAE


137 
__uöt64_t
 
	t__vm_∑ddr_t
;

139 
__uöt32_t
 
	t__vm_∑ddr_t
;

141 
__uöt32_t
 
	t__vm_size_t
;

143 
__öt64_t
 
	t__vm_ooff£t_t
;

144 
__uöt64_t
 
	t__vm_pödex_t
;

145 
	t___wch¨_t
;

147 
	#__WCHAR_MIN
 
__INT_MIN


	)

148 
	#__WCHAR_MAX
 
__INT_MAX


	)

153 #ifde‡
__GNUCLIKE_BUILTIN_VARARGS


154 
__buûtö_va_li°
 
	t__va_li°
;

156 #ifde‡
__LP64__


157 
	s__s_va_li°
 {

158 
__uöt32_t
 
	m_∑d1
[2];

159 
__uöt64_t
 
	m_∑d2
[2];

161 
__s_va_li°
 
	t__va_li°
;

163 * 
	t__va_li°
;

166 #i‡
deföed
(
__GNUC_VA_LIST_COMPATIBILITY
Ë&& !deföed(
__GNUC_VA_LIST
) \

167 && !
	$deföed
(
__NO_GNUC_VA_LIST
)

168 
	#__GNUC_VA_LIST


	)

169 
__va_li°
 
	t__gnuc_va_li°
;

	@/usr/include/x86/segments.h

37 #i‚de‡
_X86_SEGMENTS_H_


38 
	#_X86_SEGMENTS_H_


	)

47 
	#SEL_RPL_MASK
 3

	)

48 
	#ISPL
(
s
Ë((s)&3Ë

	)

49 #ifde‡
XEN


50 
	#SEL_KPL
 1

	)

52 
	#SEL_KPL
 0

	)

54 
	#SEL_UPL
 3

	)

55 
	#ISLDT
(
s
Ë((s)&
SEL_LDT
Ë

	)

56 
	#SEL_LDT
 4

	)

57 
	#IDXSEL
(
s
Ë(((s)>>3Ë& 0x1fffË

	)

58 
	#LSEL
(
s
,
r
Ë(((s)<<3Ë| 
SEL_LDT
 |ÑË

	)

59 
	#GSEL
(
s
,
r
Ë(((s)<<3Ë|ÑË

	)

66 
	s£gmít_des¸ùt‹
 {

67 
	msd_lﬁimô
:16;

68 
	msd_loba£
:24;

69 
	msd_ty≥
:5;

70 
	msd_d∂
:2;

71 
	msd_p
:1;

72 
	msd_hûimô
:4;

73 
	msd_xx
:2;

74 
	msd_def32
:1;

75 
	msd_gøn
:1;

76 
	msd_hiba£
:8;

77 } 
	g__∑cked
;

79 
	su£r_£gmít_des¸ùt‹
 {

80 
	msd_lﬁimô
:16;

81 
	msd_loba£
:24;

82 
	msd_ty≥
:5;

83 
	msd_d∂
:2;

84 
	msd_p
:1;

85 
	msd_hûimô
:4;

86 
	msd_xx
:1;

87 
	msd_l⁄g
:1;

88 
	msd_def32
:1;

89 
	msd_gøn
:1;

90 
	msd_hiba£
:8;

91 } 
	g__∑cked
;

93 
	#USD_GETBASE
(
sd
Ë(((sd)->
sd_loba£
Ë| (sd)->
sd_hiba£
 << 24)

	)

94 
	#USD_SETBASE
(
sd
, 
b
Ë(sd)->
sd_loba£
 = (b); \

95 (
sd
)->
sd_hiba£
 = ((
b
Ë>> 24);

	)

96 
	#USD_GETLIMIT
(
sd
Ë(((sd)->
sd_lﬁimô
Ë| (sd)->
sd_hûimô
 << 16)

	)

97 
	#USD_SETLIMIT
(
sd
, 
l
Ë(sd)->
sd_lﬁimô
 = (l); \

98 (
sd
)->
sd_hûimô
 = ((
l
Ë>> 16);

	)

100 #ifde‡
__i386__


104 
	sg©e_des¸ùt‹
 {

105 
	mgd_looff£t
:16;

106 
	mgd_£À˘‹
:16;

107 
	mgd_°k˝y
:5;

108 
	mgd_xx
:3;

109 
	mgd_ty≥
:5;

110 
	mgd_d∂
:2;

111 
	mgd_p
:1;

112 
	mgd_hioff£t
:16;

113 } 
	g__∑cked
;

118 
	udes¸ùt‹
 {

119 
£gmít_des¸ùt‹
 
	msd
;

120 
g©e_des¸ùt‹
 
	mgd
;

127 
	sg©e_des¸ùt‹
 {

128 
uöt64_t
 
	mgd_looff£t
:16;

129 
uöt64_t
 
	mgd_£À˘‹
:16;

130 
uöt64_t
 
	mgd_i°
:3;

131 
uöt64_t
 
	mgd_xx
:5;

132 
uöt64_t
 
	mgd_ty≥
:5;

133 
uöt64_t
 
	mgd_d∂
:2;

134 
uöt64_t
 
	mgd_p
:1;

135 
uöt64_t
 
	mgd_hioff£t
:48;

136 
uöt64_t
 
	msd_xx1
:32;

137 } 
	g__∑cked
;

142 
	udes¸ùt‹
 {

143 
u£r_£gmít_des¸ùt‹
 
	msd
;

144 
g©e_des¸ùt‹
 
	mgd
;

149 
	#SDT_SYSNULL
 0

	)

150 
	#SDT_SYS286TSS
 1

	)

151 
	#SDT_SYSLDT
 2

	)

152 
	#SDT_SYS286BSY
 3

	)

153 
	#SDT_SYS286CGT
 4

	)

154 
	#SDT_SYSTASKGT
 5

	)

155 
	#SDT_SYS286IGT
 6

	)

156 
	#SDT_SYS286TGT
 7

	)

157 
	#SDT_SYSNULL2
 8

	)

158 
	#SDT_SYS386TSS
 9

	)

159 
	#SDT_SYSTSS
 9

	)

160 
	#SDT_SYSNULL3
 10

	)

161 
	#SDT_SYS386BSY
 11

	)

162 
	#SDT_SYSBSY
 11

	)

163 
	#SDT_SYS386CGT
 12

	)

164 
	#SDT_SYSCGT
 12

	)

165 
	#SDT_SYSNULL4
 13

	)

166 
	#SDT_SYS386IGT
 14

	)

167 
	#SDT_SYSIGT
 14

	)

168 
	#SDT_SYS386TGT
 15

	)

169 
	#SDT_SYSTGT
 15

	)

172 
	#SDT_MEMRO
 16

	)

173 
	#SDT_MEMROA
 17

	)

174 
	#SDT_MEMRW
 18

	)

175 
	#SDT_MEMRWA
 19

	)

176 
	#SDT_MEMROD
 20

	)

177 
	#SDT_MEMRODA
 21

	)

178 
	#SDT_MEMRWD
 22

	)

179 
	#SDT_MEMRWDA
 23

	)

180 
	#SDT_MEME
 24

	)

181 
	#SDT_MEMEA
 25

	)

182 
	#SDT_MEMER
 26

	)

183 
	#SDT_MEMERA
 27

	)

184 
	#SDT_MEMEC
 28

	)

185 
	#SDT_MEMEAC
 29

	)

186 
	#SDT_MEMERC
 30

	)

187 
	#SDT_MEMERAC
 31

	)

192 
	#NIDT
 256

	)

193 
	#NRSVIDT
 32

	)

198 
	#IDT_DE
 0

	)

199 
	#IDT_DB
 1

	)

200 
	#IDT_NMI
 2

	)

201 
	#IDT_BP
 3

	)

202 
	#IDT_OF
 4

	)

203 
	#IDT_BR
 5

	)

204 
	#IDT_UD
 6

	)

205 
	#IDT_NM
 7

	)

206 
	#IDT_DF
 8

	)

207 
	#IDT_FPUGP
 9

	)

208 
	#IDT_TS
 10

	)

209 
	#IDT_NP
 11

	)

210 
	#IDT_SS
 12

	)

211 
	#IDT_GP
 13

	)

212 
	#IDT_PF
 14

	)

213 
	#IDT_MF
 16

	)

214 
	#IDT_AC
 17

	)

215 
	#IDT_MC
 18

	)

216 
	#IDT_XF
 19

	)

217 
	#IDT_IO_INTS
 
NRSVIDT


	)

218 
	#IDT_SYSCALL
 0x80

	)

219 
	#IDT_DTRACE_RET
 0x92

	)

220 
	#IDT_EVTCHN
 0x93

	)

222 #i‡
deföed
(
__i386__
Ë|| deföed(
__ü64__
)

228 
	#GNULL_SEL
 0

	)

229 
	#GPRIV_SEL
 1

	)

230 
	#GUFS_SEL
 2

	)

231 
	#GUGS_SEL
 3

	)

232 
	#GCODE_SEL
 4

	)

233 
	#GDATA_SEL
 5

	)

234 
	#GUCODE_SEL
 6

	)

235 
	#GUDATA_SEL
 7

	)

236 
	#GBIOSLOWMEM_SEL
 8

	)

237 
	#GPROC0_SEL
 9

	)

238 
	#GLDT_SEL
 10

	)

239 
	#GUSERLDT_SEL
 11

	)

240 
	#GPANIC_SEL
 12

	)

241 
	#GBIOSCODE32_SEL
 13

	)

242 
	#GBIOSCODE16_SEL
 14

	)

243 
	#GBIOSDATA_SEL
 15

	)

244 
	#GBIOSUTIL_SEL
 16

	)

245 
	#GBIOSARGS_SEL
 17

	)

246 
	#GNDIS_SEL
 18

	)

247 #ifde‡
XEN


248 
	#NGDT
 9

	)

250 
	#NGDT
 19

	)

256 
	#LSYS5CALLS_SEL
 0

	)

257 
	#LSYS5SIGR_SEL
 1

	)

258 
	#L43BSDCALLS_SEL
 2

	)

259 
	#LUCODE_SEL
 3

	)

260 
	#LSOL26CALLS_SEL
 4

	)

261 
	#LUDATA_SEL
 5

	)

264 
	#LBSDICALLS_SEL
 16

	)

265 
	#NLDT
 (
LBSDICALLS_SEL
 + 1)

	)

271 
	#GNULL_SEL
 0

	)

272 
	#GNULL2_SEL
 1

	)

273 
	#GUFS32_SEL
 2

	)

274 
	#GUGS32_SEL
 3

	)

275 
	#GCODE_SEL
 4

	)

276 
	#GDATA_SEL
 5

	)

277 
	#GUCODE32_SEL
 6

	)

278 
	#GUDATA_SEL
 7

	)

279 
	#GUCODE_SEL
 8

	)

280 
	#GPROC0_SEL
 9

	)

282 
	#GUSERLDT_SEL
 11

	)

284 
	#NGDT
 13

	)

	@/usr/include/x86/signal.h

34 #i‚de‡
_X86_SIGNAL_H


35 
	#_X86_SIGNAL_H
 1

	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_sig£t.h
>

44 #i‡
__BSD_VISIBLE


45 
	~<machöe/å≠.h
>

48 #ifde‡
__i386__


49 
	tsig_©omic_t
;

51 #i‡
__BSD_VISIBLE


52 
	ssigc⁄ãxt
 {

53 
__sig£t
 
	msc_mask
;

54 
	msc_⁄°ack
;

55 
	msc_gs
;

56 
	msc_fs
;

57 
	msc_es
;

58 
	msc_ds
;

59 
	msc_edi
;

60 
	msc_esi
;

61 
	msc_ebp
;

62 
	msc_i•
;

63 
	msc_ebx
;

64 
	msc_edx
;

65 
	msc_ecx
;

66 
	msc_óx
;

67 
	msc_å≠no
;

68 
	msc_îr
;

69 
	msc_eù
;

70 
	msc_cs
;

71 
	msc_eÊ
;

72 
	msc_e•
;

73 
	msc_ss
;

74 
	msc_Àn
;

79 
	msc_Âf‹m©
;

80 
	msc_ow√dÂ
;

81 
	msc_Êags
;

82 
	msc_Â°©e
[128] 
__Æig√d
(16);

84 
	msc_fsba£
;

85 
	msc_gsba£
;

87 
	msc_xÂu°©e
;

88 
	msc_xÂu°©e_Àn
;

90 
	msc_•¨e2
[4];

93 
	#sc_•
 
sc_e•


	)

94 
	#sc_Â
 
sc_ebp


	)

95 
	#sc_pc
 
sc_eù


	)

96 
	#sc_ps
 
sc_eÊ


	)

97 
	#sc_eÊags
 
sc_eÊ


	)

102 #ifde‡
__amd64__


103 
	tsig_©omic_t
;

105 #i‡
__BSD_VISIBLE


116 
	ssigc⁄ãxt
 {

117 
__sig£t
 
	msc_mask
;

118 
	msc_⁄°ack
;

119 
	msc_rdi
;

120 
	msc_rsi
;

121 
	msc_rdx
;

122 
	msc_rcx
;

123 
	msc_r8
;

124 
	msc_r9
;

125 
	msc_øx
;

126 
	msc_rbx
;

127 
	msc_rbp
;

128 
	msc_r10
;

129 
	msc_r11
;

130 
	msc_r12
;

131 
	msc_r13
;

132 
	msc_r14
;

133 
	msc_r15
;

134 
	msc_å≠no
;

135 
	msc_fs
;

136 
	msc_gs
;

137 
	msc_addr
;

138 
	msc_Êags
;

139 
	msc_es
;

140 
	msc_ds
;

141 
	msc_îr
;

142 
	msc_rù
;

143 
	msc_cs
;

144 
	msc_rÊags
;

145 
	msc_r•
;

146 
	msc_ss
;

147 
	msc_Àn
;

152 
	msc_Âf‹m©
;

153 
	msc_ow√dÂ
;

154 
	msc_Â°©e
[64] 
__Æig√d
(16);

156 
	msc_fsba£
;

157 
	msc_gsba£
;

159 
	msc_xÂu°©e
;

160 
	msc_xÂu°©e_Àn
;

162 
	msc_•¨e
[4];

	@/usr/include/x86/ucontext.h

32 #i‚de‡
_X86_UCONTEXT_H_


33 
	#_X86_UCONTEXT_H_


	)

35 #ifde‡
__i386__


37 
	#_MC_HASSEGS
 0x1

	)

38 
	#_MC_HASBASES
 0x2

	)

39 
	#_MC_HASFPXSTATE
 0x4

	)

40 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
 | 
_MC_HASFPXSTATE
)

	)

42 
	s__mc⁄ãxt
 {

49 
__ªgi°î_t
 
	mmc_⁄°ack
;

50 
__ªgi°î_t
 
	mmc_gs
;

51 
__ªgi°î_t
 
	mmc_fs
;

52 
__ªgi°î_t
 
	mmc_es
;

53 
__ªgi°î_t
 
	mmc_ds
;

54 
__ªgi°î_t
 
	mmc_edi
;

55 
__ªgi°î_t
 
	mmc_esi
;

56 
__ªgi°î_t
 
	mmc_ebp
;

57 
__ªgi°î_t
 
	mmc_i•
;

58 
__ªgi°î_t
 
	mmc_ebx
;

59 
__ªgi°î_t
 
	mmc_edx
;

60 
__ªgi°î_t
 
	mmc_ecx
;

61 
__ªgi°î_t
 
	mmc_óx
;

62 
__ªgi°î_t
 
	mmc_å≠no
;

63 
__ªgi°î_t
 
	mmc_îr
;

64 
__ªgi°î_t
 
	mmc_eù
;

65 
__ªgi°î_t
 
	mmc_cs
;

66 
__ªgi°î_t
 
	mmc_eÊags
;

67 
__ªgi°î_t
 
	mmc_e•
;

68 
__ªgi°î_t
 
	mmc_ss
;

70 
	mmc_Àn
;

71 
	#_MC_FPFMT_NODEV
 0x10000

	)

72 
	#_MC_FPFMT_387
 0x10001

	)

73 
	#_MC_FPFMT_XMM
 0x10002

	)

74 
	mmc_Âf‹m©
;

75 
	#_MC_FPOWNED_NONE
 0x20000

	)

76 
	#_MC_FPOWNED_FPU
 0x20001

	)

77 
	#_MC_FPOWNED_PCB
 0x20002

	)

78 
	mmc_ow√dÂ
;

79 
__ªgi°î_t
 
	mmc_Êags
;

83 
	mmc_Â°©e
[128] 
__Æig√d
(16);

85 
__ªgi°î_t
 
	mmc_fsba£
;

86 
__ªgi°î_t
 
	mmc_gsba£
;

88 
__ªgi°î_t
 
	mmc_xÂu°©e
;

89 
__ªgi°î_t
 
	mmc_xÂu°©e_Àn
;

91 
	mmc_•¨e2
[4];

92 } 
	tmc⁄ãxt_t
;

95 #ifde‡
__amd64__


99 
	#_MC_HASSEGS
 0x1

	)

100 
	#_MC_HASBASES
 0x2

	)

101 
	#_MC_HASFPXSTATE
 0x4

	)

102 
	#_MC_FLAG_MASK
 (
_MC_HASSEGS
 | 
_MC_HASBASES
 | 
_MC_HASFPXSTATE
)

	)

104 
	s__mc⁄ãxt
 {

111 
__ªgi°î_t
 
	mmc_⁄°ack
;

112 
__ªgi°î_t
 
	mmc_rdi
;

113 
__ªgi°î_t
 
	mmc_rsi
;

114 
__ªgi°î_t
 
	mmc_rdx
;

115 
__ªgi°î_t
 
	mmc_rcx
;

116 
__ªgi°î_t
 
	mmc_r8
;

117 
__ªgi°î_t
 
	mmc_r9
;

118 
__ªgi°î_t
 
	mmc_øx
;

119 
__ªgi°î_t
 
	mmc_rbx
;

120 
__ªgi°î_t
 
	mmc_rbp
;

121 
__ªgi°î_t
 
	mmc_r10
;

122 
__ªgi°î_t
 
	mmc_r11
;

123 
__ªgi°î_t
 
	mmc_r12
;

124 
__ªgi°î_t
 
	mmc_r13
;

125 
__ªgi°î_t
 
	mmc_r14
;

126 
__ªgi°î_t
 
	mmc_r15
;

127 
__uöt32_t
 
	mmc_å≠no
;

128 
__uöt16_t
 
	mmc_fs
;

129 
__uöt16_t
 
	mmc_gs
;

130 
__ªgi°î_t
 
	mmc_addr
;

131 
__uöt32_t
 
	mmc_Êags
;

132 
__uöt16_t
 
	mmc_es
;

133 
__uöt16_t
 
	mmc_ds
;

134 
__ªgi°î_t
 
	mmc_îr
;

135 
__ªgi°î_t
 
	mmc_rù
;

136 
__ªgi°î_t
 
	mmc_cs
;

137 
__ªgi°î_t
 
	mmc_rÊags
;

138 
__ªgi°î_t
 
	mmc_r•
;

139 
__ªgi°î_t
 
	mmc_ss
;

141 
	mmc_Àn
;

143 
	#_MC_FPFMT_NODEV
 0x10000

	)

144 
	#_MC_FPFMT_XMM
 0x10002

	)

145 
	mmc_Âf‹m©
;

146 
	#_MC_FPOWNED_NONE
 0x20000

	)

147 
	#_MC_FPOWNED_FPU
 0x20001

	)

148 
	#_MC_FPOWNED_PCB
 0x20002

	)

149 
	mmc_ow√dÂ
;

153 
	mmc_Â°©e
[64] 
__Æig√d
(16);

155 
__ªgi°î_t
 
	mmc_fsba£
;

156 
__ªgi°î_t
 
	mmc_gsba£
;

158 
__ªgi°î_t
 
	mmc_xÂu°©e
;

159 
__ªgi°î_t
 
	mmc_xÂu°©e_Àn
;

161 
	mmc_•¨e
[4];

162 } 
	tmc⁄ãxt_t
;

	@/usr/include/xlocale/_time.h

32 #i‚de‡
_LOCALE_T_DEFINED


33 
	#_LOCALE_T_DEFINED


	)

34 
_xloˇÀ
 *
	tloˇÀ_t
;

42 #i‚de‡
_XLOCALE_LOCALE1_H


43 
	#_XLOCALE_LOCALE1_H


	)

45 
size_t
 
	$°r·ime_l
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

46 c⁄° 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
Ë
	`__°r·imñike
(3, 0);

50 #ifde‡
_XLOCALE_H_


51 #i‚de‡
_XLOCALE_LOCALE2_H


52 
	#_XLOCALE_LOCALE2_H


	)

54 *
	`°Ωtime_l
(c⁄° * 
__ª°ri˘
, const * __restrict,

55 
tm
 * 
__ª°ri˘
, 
loˇÀ_t
);

	@/usr/include/machine/frame.h

6 
	~<x86/‰ame.h
>

	@/usr/include/machine/psl.h

6 
	~<x86/p¶.h
>

	@/usr/include/machine/trap.h

6 
	~<x86/å≠.h
>

	@/usr/include/sys/elf_common.h

30 #i‚de‡
_SYS_ELF_COMMON_H_


31 
	#_SYS_ELF_COMMON_H_
 1

	)

47 
u_öt32_t
 
	mn_«mesz
;

48 
u_öt32_t
 
	mn_descsz
;

49 
u_öt32_t
 
	mn_ty≥
;

50 } 
	tElf_NŸe
;

55 
	#ODK_NULL
 0

	)

56 
	#ODK_REGINFO
 1

	)

57 
	#ODK_EXCEPTIONS
 2

	)

58 
	#ODK_PAD
 3

	)

59 
	#ODK_HWPATCH
 4

	)

60 
	#ODK_FILL
 5

	)

61 
	#ODK_TAGS
 6

	)

62 
	#ODK_HWAND
 7

	)

63 
	#ODK_HWOR
 8

	)

64 
	#ODK_GP_GROUP
 9

	)

65 
	#ODK_IDENT
 10

	)

66 
	#ODK_PAGESIZE
 11

	)

71 
	#OEX_FPU_MIN
 0x0000001‡

	)

72 
	#OEX_FPU_MAX
 0x00001f00

	)

73 
	#OEX_PAGE0
 0x00010000

	)

74 
	#OEX_SMM
 0x00020000

	)

75 
	#OEX_PRECISEFP
 0x00040000

	)

76 
	#OEX_DISMISS
 0x00080000

	)

81 
	#OPAD_PREFIX
 0x0001

	)

82 
	#OPAD_POSTFIX
 0x0002

	)

83 
	#OPAD_SYMBOL
 0x0004

	)

88 
	#OHW_R4KEOP
 0x00000001

	)

89 
	#OHW_R8KPFETCH
 0x00000002

	)

90 
	#OHW_R5KEOP
 0x00000004

	)

91 
	#OHW_R5KCVTL
 0x00000008

	)

92 
	#OHW_R10KLDL
 0x00000010UL

	)

97 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

98 
	#OHWA0_R4KEOP_CLEAN
 0x00000002

	)

99 
	#OHWO0_FIXADE
 0x00000001

	)

104 
	#OGP_GROUP
 0x0000fff‡

	)

105 
	#OGP_SELF
 0x00010000

	)

112 
u_öt32_t
 
	mgh_nbuckës
;

113 
u_öt32_t
 
	mgh_symndx
;

114 
u_öt32_t
 
	mgh_maskw‹ds
;

115 
u_öt32_t
 
	mgh_shi·2
;

116 } 
	tElf_GNU_Hash_Hódî
;

120 
	#EI_MAG0
 0

	)

121 
	#EI_MAG1
 1

	)

122 
	#EI_MAG2
 2

	)

123 
	#EI_MAG3
 3

	)

124 
	#EI_CLASS
 4

	)

125 
	#EI_DATA
 5

	)

126 
	#EI_VERSION
 6

	)

127 
	#EI_OSABI
 7

	)

128 
	#EI_ABIVERSION
 8

	)

129 
	#OLD_EI_BRAND
 8

	)

130 
	#EI_PAD
 9

	)

131 
	#EI_NIDENT
 16

	)

134 
	#ELFMAG0
 0x7f

	)

135 
	#ELFMAG1
 'E'

	)

136 
	#ELFMAG2
 'L'

	)

137 
	#ELFMAG3
 'F'

	)

138 
	#ELFMAG
 "\177ELF"

	)

139 
	#SELFMAG
 4

	)

142 
	#EV_NONE
 0

	)

143 
	#EV_CURRENT
 1

	)

146 
	#ELFCLASSNONE
 0

	)

147 
	#ELFCLASS32
 1

	)

148 
	#ELFCLASS64
 2

	)

151 
	#ELFDATANONE
 0

	)

152 
	#ELFDATA2LSB
 1

	)

153 
	#ELFDATA2MSB
 2

	)

156 
	#ELFOSABI_NONE
 0

	)

157 
	#ELFOSABI_HPUX
 1

	)

158 
	#ELFOSABI_NETBSD
 2

	)

159 
	#ELFOSABI_LINUX
 3

	)

160 
	#ELFOSABI_HURD
 4

	)

161 
	#ELFOSABI_86OPEN
 5

	)

162 
	#ELFOSABI_SOLARIS
 6

	)

163 
	#ELFOSABI_AIX
 7

	)

164 
	#ELFOSABI_IRIX
 8

	)

165 
	#ELFOSABI_FREEBSD
 9

	)

166 
	#ELFOSABI_TRU64
 10

	)

167 
	#ELFOSABI_MODESTO
 11

	)

168 
	#ELFOSABI_OPENBSD
 12

	)

169 
	#ELFOSABI_OPENVMS
 13

	)

170 
	#ELFOSABI_NSK
 14

	)

171 
	#ELFOSABI_AROS
 15

	)

172 
	#ELFOSABI_FENIXOS
 16

	)

173 
	#ELFOSABI_CLOUDABI
 17

	)

174 
	#ELFOSABI_ARM
 97

	)

175 
	#ELFOSABI_STANDALONE
 255

	)

177 
	#ELFOSABI_SYSV
 
ELFOSABI_NONE


	)

178 
	#ELFOSABI_MONTEREY
 
ELFOSABI_AIX


	)

179 
	#ELFOSABI_GNU
 
ELFOSABI_LINUX


	)

182 
	#IS_ELF
(
ehdr
Ë(”hdr).
e_idít
[
EI_MAG0
] =
ELFMAG0
 && \

183 (
ehdr
).
e_idít
[
EI_MAG1
] =
ELFMAG1
 && \

184 (
ehdr
).
e_idít
[
EI_MAG2
] =
ELFMAG2
 && \

185 (
ehdr
).
e_idít
[
EI_MAG3
] =
ELFMAG3
)

	)

188 
	#ET_NONE
 0

	)

189 
	#ET_REL
 1

	)

190 
	#ET_EXEC
 2

	)

191 
	#ET_DYN
 3

	)

192 
	#ET_CORE
 4

	)

193 
	#ET_LOOS
 0x„00

	)

194 
	#ET_HIOS
 0x„f‡

	)

195 
	#ET_LOPROC
 0xff00

	)

196 
	#ET_HIPROC
 0xfff‡

	)

199 
	#EM_NONE
 0

	)

200 
	#EM_M32
 1

	)

201 
	#EM_SPARC
 2

	)

202 
	#EM_386
 3

	)

203 
	#EM_68K
 4

	)

204 
	#EM_88K
 5

	)

205 
	#EM_IAMCU
 6

	)

206 
	#EM_860
 7

	)

207 
	#EM_MIPS
 8

	)

208 
	#EM_S370
 9

	)

209 
	#EM_MIPS_RS3_LE
 10

	)

210 
	#EM_PARISC
 15

	)

211 
	#EM_VPP500
 17

	)

212 
	#EM_SPARC32PLUS
 18

	)

213 
	#EM_960
 19

	)

214 
	#EM_PPC
 20

	)

215 
	#EM_PPC64
 21

	)

216 
	#EM_S390
 22

	)

217 
	#EM_V800
 36

	)

218 
	#EM_FR20
 37

	)

219 
	#EM_RH32
 38

	)

220 
	#EM_RCE
 39

	)

221 
	#EM_ARM
 40

	)

222 
	#EM_SH
 42

	)

223 
	#EM_SPARCV9
 43

	)

224 
	#EM_TRICORE
 44

	)

225 
	#EM_ARC
 45

	)

226 
	#EM_H8_300
 46

	)

227 
	#EM_H8_300H
 47

	)

228 
	#EM_H8S
 48

	)

229 
	#EM_H8_500
 49

	)

230 
	#EM_IA_64
 50

	)

231 
	#EM_MIPS_X
 51

	)

232 
	#EM_COLDFIRE
 52

	)

233 
	#EM_68HC12
 53

	)

234 
	#EM_MMA
 54

	)

235 
	#EM_PCP
 55

	)

236 
	#EM_NCPU
 56

	)

237 
	#EM_NDR1
 57

	)

238 
	#EM_STARCORE
 58

	)

239 
	#EM_ME16
 59

	)

240 
	#EM_ST100
 60

	)

241 
	#EM_TINYJ
 61

	)

242 
	#EM_X86_64
 62

	)

243 
	#EM_AMD64
 
EM_X86_64


	)

244 
	#EM_PDSP
 63

	)

245 
	#EM_FX66
 66

	)

246 
	#EM_ST9PLUS
 67

	)

248 
	#EM_ST7
 68

	)

250 
	#EM_68HC16
 69

	)

251 
	#EM_68HC11
 70

	)

252 
	#EM_68HC08
 71

	)

253 
	#EM_68HC05
 72

	)

254 
	#EM_SVX
 73

	)

255 
	#EM_ST19
 74

	)

256 
	#EM_VAX
 75

	)

257 
	#EM_CRIS
 76

	)

259 
	#EM_JAVELIN
 77

	)

261 
	#EM_FIREPATH
 78

	)

262 
	#EM_ZSP
 79

	)

263 
	#EM_MMIX
 80

	)

264 
	#EM_HUANY
 81

	)

266 
	#EM_PRISM
 82

	)

267 
	#EM_AVR
 83

	)

268 
	#EM_FR30
 84

	)

269 
	#EM_D10V
 85

	)

270 
	#EM_D30V
 86

	)

271 
	#EM_V850
 87

	)

272 
	#EM_M32R
 88

	)

273 
	#EM_MN10300
 89

	)

274 
	#EM_MN10200
 90

	)

275 
	#EM_PJ
 91

	)

276 
	#EM_OPENRISC
 92

	)

277 
	#EM_ARC_A5
 93

	)

278 
	#EM_XTENSA
 94

	)

279 
	#EM_VIDEOCORE
 95

	)

280 
	#EM_TMM_GPP
 96

	)

282 
	#EM_NS32K
 97

	)

283 
	#EM_TPC
 98

	)

284 
	#EM_SNP1K
 99

	)

285 
	#EM_ST200
 100

	)

286 
	#EM_IP2K
 101

	)

287 
	#EM_MAX
 102

	)

288 
	#EM_CR
 103

	)

290 
	#EM_F2MC16
 104

	)

291 
	#EM_MSP430
 105

	)

293 
	#EM_BLACKFIN
 106

	)

294 
	#EM_SE_C33
 107

	)

295 
	#EM_SEP
 108

	)

296 
	#EM_ARCA
 109

	)

297 
	#EM_UNICORE
 110

	)

299 
	#EM_AARCH64
 183

	)

300 
	#EM_RISCV
 243

	)

303 
	#EM_486
 6

	)

304 
	#EM_MIPS_RS4_BE
 10

	)

305 
	#EM_ALPHA_STD
 41

	)

306 
	#EM_ALPHA
 0x9026

	)

311 
	#EF_ARM_RELEXEC
 0x1

	)

312 
	#EF_ARM_HASENTRY
 0x2

	)

313 
	#EF_ARM_SYMSARESORTED
 0x4

	)

314 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x8

	)

315 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

316 
	#EF_ARM_LE8
 0x00400000

	)

317 
	#EF_ARM_BE8
 0x00800000

	)

318 
	#EF_ARM_EABIMASK
 0xFF000000

	)

319 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

320 
	#EF_ARM_EABI_VER1
 0x01000000

	)

321 
	#EF_ARM_EABI_VER2
 0x02000000

	)

322 
	#EF_ARM_EABI_VER3
 0x03000000

	)

323 
	#EF_ARM_EABI_VER4
 0x04000000

	)

324 
	#EF_ARM_EABI_VER5
 0x05000000

	)

325 
	#EF_ARM_INTERWORK
 0x00000004

	)

326 
	#EF_ARM_APCS_26
 0x00000008

	)

327 
	#EF_ARM_APCS_FLOAT
 0x00000010

	)

328 
	#EF_ARM_PIC
 0x00000020

	)

329 
	#EF_ARM_ALIGN8
 0x00000040

	)

330 
	#EF_ARM_NEW_ABI
 0x00000080

	)

331 
	#EF_ARM_OLD_ABI
 0x00000100

	)

332 
	#EF_ARM_SOFT_FLOAT
 0x00000200

	)

333 
	#EF_ARM_VFP_FLOAT
 0x00000400

	)

334 
	#EF_ARM_MAVERICK_FLOAT
 0x00000800

	)

336 
	#EF_MIPS_NOREORDER
 0x00000001

	)

337 
	#EF_MIPS_PIC
 0x00000002

	)

338 
	#EF_MIPS_CPIC
 0x00000004

	)

339 
	#EF_MIPS_UCODE
 0x00000010

	)

340 
	#EF_MIPS_ABI2
 0x00000020

	)

341 
	#EF_MIPS_OPTIONS_FIRST
 0x00000080

	)

342 
	#EF_MIPS_ARCH_ASE
 0x0F000000

	)

343 
	#EF_MIPS_ARCH_ASE_MDMX
 0x08000000

	)

344 
	#EF_MIPS_ARCH_ASE_M16
 0x04000000

	)

345 
	#EF_MIPS_ARCH
 0xF0000000

	)

347 
	#EF_PPC_EMB
 0x80000000

	)

348 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

349 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

351 
	#EF_SPARC_EXT_MASK
 0x00ffff00

	)

352 
	#EF_SPARC_32PLUS
 0x00000100

	)

353 
	#EF_SPARC_SUN_US1
 0x00000200

	)

354 
	#EF_SPARC_HAL_R1
 0x00000200

	)

355 
	#EF_SPARC_SUN_US3
 0x00000800

	)

357 
	#EF_SPARCV9_MM
 0x00000003

	)

358 
	#EF_SPARCV9_TSO
 0x00000000

	)

359 
	#EF_SPARCV9_PSO
 0x00000001

	)

360 
	#EF_SPARCV9_RMO
 0x00000002

	)

363 
	#SHN_UNDEF
 0

	)

364 
	#SHN_LORESERVE
 0xff00

	)

365 
	#SHN_LOPROC
 0xff00

	)

366 
	#SHN_HIPROC
 0xff1‡

	)

367 
	#SHN_LOOS
 0xff20

	)

368 
	#SHN_FBSD_CACHED
 
SHN_LOOS


	)

371 
	#SHN_HIOS
 0xff3‡

	)

372 
	#SHN_ABS
 0xfff1

	)

373 
	#SHN_COMMON
 0xfff2

	)

374 
	#SHN_XINDEX
 0xfff‡

	)

375 
	#SHN_HIRESERVE
 0xfff‡

	)

378 
	#SHT_NULL
 0

	)

379 
	#SHT_PROGBITS
 1

	)

380 
	#SHT_SYMTAB
 2

	)

381 
	#SHT_STRTAB
 3

	)

382 
	#SHT_RELA
 4

	)

383 
	#SHT_HASH
 5

	)

384 
	#SHT_DYNAMIC
 6

	)

385 
	#SHT_NOTE
 7

	)

386 
	#SHT_NOBITS
 8

	)

387 
	#SHT_REL
 9

	)

388 
	#SHT_SHLIB
 10

	)

389 
	#SHT_DYNSYM
 11

	)

390 
	#SHT_INIT_ARRAY
 14

	)

391 
	#SHT_FINI_ARRAY
 15

	)

392 
	#SHT_PREINIT_ARRAY
 16

	)

393 
	#SHT_GROUP
 17

	)

394 
	#SHT_SYMTAB_SHNDX
 18

	)

395 
	#SHT_LOOS
 0x60000000

	)

396 
	#SHT_LOSUNW
 0x6ffffff4

	)

397 
	#SHT_SUNW_dof
 0x6ffffff4

	)

398 
	#SHT_SUNW_ˇp
 0x6ffffff5

	)

399 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

400 
	#SHT_SUNW_SIGNATURE
 0x6ffffff6

	)

401 
	#SHT_GNU_HASH
 0x6ffffff6

	)

402 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

403 
	#SHT_SUNW_ANNOTATE
 0x6ffffff7

	)

404 
	#SHT_SUNW_DEBUGSTR
 0x6ffffff8

	)

405 
	#SHT_SUNW_DEBUG
 0x6ffffff9

	)

406 
	#SHT_SUNW_move
 0x6fffffÁ

	)

407 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

408 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

409 
	#SHT_SUNW_vîdef
 0x6ffffffd

	)

410 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

411 
	#SHT_SUNW_vî√ed
 0x6fffff„

	)

412 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

413 
	#SHT_SUNW_vîsym
 0x6fffffff

	)

414 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

415 
	#SHT_HISUNW
 0x6fffffff

	)

416 
	#SHT_HIOS
 0x6ffffff‡

	)

417 
	#SHT_LOPROC
 0x70000000

	)

418 
	#SHT_AMD64_UNWIND
 0x70000001

	)

420 
	#SHT_ARM_EXIDX
 0x70000001

	)

421 
	#SHT_ARM_PREEMPTMAP
 0x70000002

	)

423 
	#SHT_ARM_ATTRIBUTES
 0x70000003

	)

425 
	#SHT_ARM_DEBUGOVERLAY
 0x70000004

	)

426 
	#SHT_ARM_OVERLAYSECTION
 0x70000005

	)

427 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

428 
	#SHT_MIPS_MSYM
 0x70000001

	)

429 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

430 
	#SHT_MIPS_GPTAB
 0x70000003

	)

431 
	#SHT_MIPS_UCODE
 0x70000004

	)

432 
	#SHT_MIPS_DEBUG
 0x70000005

	)

433 
	#SHT_MIPS_REGINFO
 0x70000006

	)

434 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

435 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

436 
	#SHT_MIPS_RELD
 0x70000009

	)

437 
	#SHT_MIPS_IFACE
 0x7000000b

	)

438 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

439 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

440 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

441 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

442 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

443 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

444 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

445 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

446 
	#SHT_MIPS_EVENTS
 0x70000021

	)

447 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

448 
	#SHT_MIPS_PIXIE
 0x70000023

	)

449 
	#SHT_MIPS_XLATE
 0x70000024

	)

450 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

451 
	#SHT_MIPS_WHIRL
 0x70000026

	)

452 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

453 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

454 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

455 
	#SHT_MIPS_ABIFLAGS
 0x7000002a

	)

457 
	#SHT_SPARC_GOTDATA
 0x70000000

	)

459 
	#SHTORDERED


	)

460 
	#SHT_HIPROC
 0x7ffffff‡

	)

461 
	#SHT_LOUSER
 0x80000000

	)

462 
	#SHT_HIUSER
 0xfffffff‡

	)

465 
	#SHF_WRITE
 0x1

	)

466 
	#SHF_ALLOC
 0x2

	)

467 
	#SHF_EXECINSTR
 0x4

	)

468 
	#SHF_MERGE
 0x10

	)

469 
	#SHF_STRINGS
 0x20

	)

470 
	#SHF_INFO_LINK
 0x40

	)

471 
	#SHF_LINK_ORDER
 0x80

	)

472 
	#SHF_OS_NONCONFORMING
 0x100

	)

473 
	#SHF_GROUP
 0x200

	)

474 
	#SHF_TLS
 0x400

	)

475 
	#SHF_COMPRESSED
 0x800

	)

476 
	#SHF_MASKOS
 0x0ff00000

	)

477 
	#SHF_MASKPROC
 0xf0000000

	)

480 
	#GRP_COMDAT
 0x1

	)

485 
	#VERSYM_VERSION
 0x7fff

	)

486 
	#VERSYM_HIDDEN
 0x8000

	)

489 
	#PT_NULL
 0

	)

490 
	#PT_LOAD
 1

	)

491 
	#PT_DYNAMIC
 2

	)

492 
	#PT_INTERP
 3

	)

493 
	#PT_NOTE
 4

	)

494 
	#PT_SHLIB
 5

	)

495 
	#PT_PHDR
 6

	)

496 
	#PT_TLS
 7

	)

497 
	#PT_LOOS
 0x60000000

	)

498 
	#PT_SUNW_UNWIND
 0x6464e550

	)

499 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

500 
	#PT_GNU_STACK
 0x6474e551

	)

501 
	#PT_GNU_RELRO
 0x6474e552

	)

502 
	#PT_DUMP_DELTA
 0x6fb5d000

	)

504 
	#PT_LOSUNW
 0x6fffffÁ

	)

505 
	#PT_SUNWBSS
 0x6fffffÁ

	)

506 
	#PT_SUNWSTACK
 0x6ffffffb

	)

507 
	#PT_SUNWDTRACE
 0x6ffffff¯

	)

508 
	#PT_SUNWCAP
 0x6ffffffd

	)

509 
	#PT_HISUNW
 0x6fffffff

	)

510 
	#PT_HIOS
 0x6ffffff‡

	)

511 
	#PT_LOPROC
 0x70000000

	)

512 
	#PT_HIPROC
 0x7ffffff‡

	)

515 
	#PF_X
 0x1

	)

516 
	#PF_W
 0x2

	)

517 
	#PF_R
 0x4

	)

518 
	#PF_MASKOS
 0x0ff00000

	)

519 
	#PF_MASKPROC
 0xf0000000

	)

522 
	#PN_XNUM
 0xffff

	)

525 
	#DT_NULL
 0

	)

526 
	#DT_NEEDED
 1

	)

528 
	#DT_PLTRELSZ
 2

	)

529 
	#DT_PLTGOT
 3

	)

530 
	#DT_HASH
 4

	)

531 
	#DT_STRTAB
 5

	)

532 
	#DT_SYMTAB
 6

	)

533 
	#DT_RELA
 7

	)

534 
	#DT_RELASZ
 8

	)

535 
	#DT_RELAENT
 9

	)

536 
	#DT_STRSZ
 10

	)

537 
	#DT_SYMENT
 11

	)

538 
	#DT_INIT
 12

	)

539 
	#DT_FINI
 13

	)

540 
	#DT_SONAME
 14

	)

542 
	#DT_RPATH
 15

	)

543 
	#DT_SYMBOLIC
 16

	)

544 
	#DT_REL
 17

	)

545 
	#DT_RELSZ
 18

	)

546 
	#DT_RELENT
 19

	)

547 
	#DT_PLTREL
 20

	)

548 
	#DT_DEBUG
 21

	)

549 
	#DT_TEXTREL
 22

	)

551 
	#DT_JMPREL
 23

	)

552 
	#DT_BIND_NOW
 24

	)

553 
	#DT_INIT_ARRAY
 25

	)

555 
	#DT_FINI_ARRAY
 26

	)

557 
	#DT_INIT_ARRAYSZ
 27

	)

559 
	#DT_FINI_ARRAYSZ
 28

	)

561 
	#DT_RUNPATH
 29

	)

563 
	#DT_FLAGS
 30

	)

564 
	#DT_ENCODING
 32

	)

569 
	#DT_PREINIT_ARRAY
 32

	)

571 
	#DT_PREINIT_ARRAYSZ
 33

	)

573 
	#DT_MAXPOSTAGS
 34

	)

574 
	#DT_LOOS
 0x6000000d

	)

575 
	#DT_SUNW_AUXILIARY
 0x6000000d

	)

576 
	#DT_SUNW_RTLDINF
 0x6000000ê

	)

577 
	#DT_SUNW_FILTER
 0x6000000‡

	)

578 
	#DT_SUNW_CAP
 0x60000010

	)

579 
	#DT_HIOS
 0x6ffff000

	)

585 
	#DT_VALRNGLO
 0x6ffffd00

	)

586 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

587 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

588 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

589 
	#DT_CHECKSUM
 0x6ffffdf8

	)

590 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

591 
	#DT_MOVEENT
 0x6ffffdÁ

	)

592 
	#DT_MOVESZ
 0x6ffffdfb

	)

593 
	#DT_FEATURE
 0x6ffffdf¯

	)

594 
	#DT_FEATURE_1
 
DT_FEATURE


	)

595 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

598 
	#DT_SYMINSZ
 0x6ffffd„

	)

599 
	#DT_SYMINENT
 0x6ffffdf‡

	)

600 
	#DT_VALRNGHI
 0x6ffffdff

	)

609 
	#DT_ADDRRNGLO
 0x6fff„00

	)

610 
	#DT_GNU_HASH
 0x6fff„f5

	)

611 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

612 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

613 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

614 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

615 
	#DT_CONFIG
 0x6fff„Á

	)

616 
	#DT_DEPAUDIT
 0x6fff„fb

	)

617 
	#DT_AUDIT
 0x6fff„f¯

	)

618 
	#DT_PLTPAD
 0x6fff„fd

	)

619 
	#DT_MOVETAB
 0x6fff„„

	)

620 
	#DT_SYMINFO
 0x6fff„f‡

	)

621 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

623 
	#DT_VERSYM
 0x6ffffff0

	)

624 
	#DT_RELACOUNT
 0x6ffffff9

	)

625 
	#DT_RELCOUNT
 0x6fffffÁ

	)

626 
	#DT_FLAGS_1
 0x6ffffffb

	)

627 
	#DT_VERDEF
 0x6ffffff¯

	)

628 
	#DT_VERDEFNUM
 0x6ffffffd

	)

629 
	#DT_VERNEED
 0x6fffff„

	)

630 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

632 
	#DT_LOPROC
 0x70000000

	)

634 
	#DT_ARM_SYMTABSZ
 0x70000001

	)

635 
	#DT_ARM_PREEMPTMAP
 0x70000002

	)

637 
	#DT_SPARC_REGISTER
 0x70000001

	)

638 
	#DT_DEPRECATED_SPARC_REGISTER
 0x7000001

	)

640 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

641 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

642 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

643 
	#DT_MIPS_IVERSION
 0x70000004

	)

644 
	#DT_MIPS_FLAGS
 0x70000005

	)

645 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

646 
	#DT_MIPS_CONFLICT
 0x70000008

	)

647 
	#DT_MIPS_LIBLIST
 0x70000009

	)

648 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000a

	)

649 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

650 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

651 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

652 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

653 
	#DT_MIPS_GOTSYM
 0x70000013

	)

654 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

655 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

656 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

657 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

658 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

659 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001A

	)

660 
	#DT_MIPS_DELTA_RELOC
 0x7000001B

	)

661 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001C

	)

662 
	#DT_MIPS_DELTA_SYM
 0x7000001D

	)

663 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001E

	)

664 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

665 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

666 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

667 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

668 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

669 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

670 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

671 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

672 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

673 
	#DT_MIPS_OPTIONS
 0x70000029

	)

674 
	#DT_MIPS_INTERFACE
 0x7000002A

	)

675 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002B

	)

676 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002C

	)

677 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002D

	)

678 
	#DT_MIPS_PERF_SUFFIX
 0x7000002E

	)

679 
	#DT_MIPS_COMPACT_SIZE
 0x7000002F

	)

680 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

681 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

682 
	#DT_MIPS_PLTGOT
 0x70000032

	)

683 
	#DT_MIPS_RLD_OBJ_UPDATE
 0x70000033

	)

684 
	#DT_MIPS_RWPLT
 0x70000034

	)

686 
	#DT_PPC_GOT
 0x70000000

	)

687 
	#DT_PPC_TLSOPT
 0x70000001

	)

689 
	#DT_PPC64_GLINK
 0x70000000

	)

690 
	#DT_PPC64_OPD
 0x70000001

	)

691 
	#DT_PPC64_OPDSZ
 0x70000002

	)

692 
	#DT_PPC64_TLSOPT
 0x70000003

	)

694 
	#DT_AUXILIARY
 0x7ffffffd

	)

695 
	#DT_USED
 0x7fffff„

	)

696 
	#DT_FILTER
 0x7ffffff‡

	)

697 
	#DT_HIPROC
 0x7ffffff‡

	)

700 
	#DF_ORIGIN
 0x0001

	)

703 
	#DF_SYMBOLIC
 0x0002

	)

704 
	#DF_TEXTREL
 0x0004

	)

706 
	#DF_BIND_NOW
 0x0008

	)

710 
	#DF_STATIC_TLS
 0x0010

	)

715 
	#DF_1_BIND_NOW
 0x00000001

	)

716 
	#DF_1_GLOBAL
 0x00000002

	)

717 
	#DF_1_NODELETE
 0x00000008

	)

718 
	#DF_1_LOADFLTR
 0x00000010

	)

719 
	#DF_1_NOOPEN
 0x00000040

	)

720 
	#DF_1_ORIGIN
 0x00000080

	)

721 
	#DF_1_INTERPOSE
 0x00000400

	)

722 
	#DF_1_NODEFLIB
 0x00000800

	)

725 
	#LL_NONE
 0x0

	)

726 
	#LL_EXACT_MATCH
 0x1

	)

727 
	#LL_IGNORE_INT_VER
 0x2

	)

728 
	#LL_REQUIRE_MINOR
 0x4

	)

729 
	#LL_EXPORTS
 0x8

	)

730 
	#LL_DELAY_LOAD
 0x10

	)

731 
	#LL_DELTA
 0x20

	)

734 
	#NT_PRSTATUS
 1

	)

735 
	#NT_FPREGSET
 2

	)

736 
	#NT_PRPSINFO
 3

	)

737 
	#NT_THRMISC
 7

	)

738 
	#NT_PROCSTAT_PROC
 8

	)

739 
	#NT_PROCSTAT_FILES
 9

	)

740 
	#NT_PROCSTAT_VMMAP
 10

	)

741 
	#NT_PROCSTAT_GROUPS
 11

	)

742 
	#NT_PROCSTAT_UMASK
 12

	)

743 
	#NT_PROCSTAT_RLIMIT
 13

	)

744 
	#NT_PROCSTAT_OSREL
 14

	)

745 
	#NT_PROCSTAT_PSSTRINGS
 15

	)

746 
	#NT_PROCSTAT_AUXV
 16

	)

747 
	#NT_PPC_VMX
 0x100

	)

748 
	#NT_X86_XSTATE
 0x202

	)

751 
	#STB_LOCAL
 0

	)

752 
	#STB_GLOBAL
 1

	)

753 
	#STB_WEAK
 2

	)

754 
	#STB_LOOS
 10

	)

755 
	#STB_GNU_UNIQUE
 10

	)

756 
	#STB_HIOS
 12

	)

757 
	#STB_LOPROC
 13

	)

758 
	#STB_HIPROC
 15

	)

761 
	#STT_NOTYPE
 0

	)

762 
	#STT_OBJECT
 1

	)

763 
	#STT_FUNC
 2

	)

764 
	#STT_SECTION
 3

	)

765 
	#STT_FILE
 4

	)

766 
	#STT_COMMON
 5

	)

767 
	#STT_TLS
 6

	)

768 
	#STT_NUM
 7

	)

769 
	#STT_LOOS
 10

	)

770 
	#STT_GNU_IFUNC
 10

	)

771 
	#STT_HIOS
 12

	)

772 
	#STT_LOPROC
 13

	)

773 
	#STT_HIPROC
 15

	)

776 
	#STV_DEFAULT
 0x0

	)

777 
	#STV_INTERNAL
 0x1

	)

778 
	#STV_HIDDEN
 0x2

	)

779 
	#STV_PROTECTED
 0x3

	)

780 
	#STV_EXPORTED
 0x4

	)

781 
	#STV_SINGLETON
 0x5

	)

782 
	#STV_ELIMINATE
 0x6

	)

785 
	#STN_UNDEF
 0

	)

788 
	#VER_DEF_CURRENT
 1

	)

789 
	#VER_DEF_IDX
(
x
Ë
	`VER_NDX
(x)

	)

791 
	#VER_FLG_BASE
 0x01

	)

792 
	#VER_FLG_WEAK
 0x02

	)

794 
	#VER_NEED_CURRENT
 1

	)

795 
	#VER_NEED_WEAK
 (1u << 15)

	)

796 
	#VER_NEED_HIDDEN
 
VER_NDX_HIDDEN


	)

797 
	#VER_NEED_IDX
(
x
Ë
	`VER_NDX
(x)

	)

799 
	#VER_NDX_LOCAL
 0

	)

800 
	#VER_NDX_GLOBAL
 1

	)

801 
	#VER_NDX_GIVEN
 2

	)

803 
	#VER_NDX_HIDDEN
 (1u << 15)

	)

804 
	#VER_NDX
(
x
Ë((xË& ~(1u << 15))

	)

806 
	#CA_SUNW_NULL
 0

	)

807 
	#CA_SUNW_HW_1
 1

	)

808 
	#CA_SUNW_SF_1
 2

	)

813 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

815 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

816 
	#SYMINFO_FLG_COPY
 0x0004

	)

817 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

819 
	#SYMINFO_FLG_DIRECTBIND
 0x0010

	)

821 
	#SYMINFO_FLG_NOEXTDIRECT
 0x0020

	)

823 
	#SYMINFO_FLG_FILTER
 0x0002

	)

824 
	#SYMINFO_FLG_AUXILIARY
 0x0040

	)

829 
	#SYMINFO_BT_SELF
 0xfff‡

	)

830 
	#SYMINFO_BT_PARENT
 0xff„

	)

831 
	#SYMINFO_BT_NONE
 0xfffd

	)

832 
	#SYMINFO_BT_EXTERN
 0xfff¯

	)

833 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

838 
	#SYMINFO_NONE
 0

	)

839 
	#SYMINFO_CURRENT
 1

	)

840 
	#SYMINFO_NUM
 2

	)

849 
	#R_386_NONE
 0

	)

850 
	#R_386_32
 1

	)

851 
	#R_386_PC32
 2

	)

852 
	#R_386_GOT32
 3

	)

853 
	#R_386_PLT32
 4

	)

854 
	#R_386_COPY
 5

	)

855 
	#R_386_GLOB_DAT
 6

	)

856 
	#R_386_JMP_SLOT
 7

	)

857 
	#R_386_RELATIVE
 8

	)

858 
	#R_386_GOTOFF
 9

	)

859 
	#R_386_GOTPC
 10

	)

860 
	#R_386_TLS_TPOFF
 14

	)

861 
	#R_386_TLS_IE
 15

	)

862 
	#R_386_TLS_GOTIE
 16

	)

863 
	#R_386_TLS_LE
 17

	)

864 
	#R_386_TLS_GD
 18

	)

865 
	#R_386_TLS_LDM
 19

	)

866 
	#R_386_TLS_GD_32
 24

	)

867 
	#R_386_TLS_GD_PUSH
 25

	)

868 
	#R_386_TLS_GD_CALL
 26

	)

869 
	#R_386_TLS_GD_POP
 27

	)

870 
	#R_386_TLS_LDM_32
 28

	)

871 
	#R_386_TLS_LDM_PUSH
 29

	)

872 
	#R_386_TLS_LDM_CALL
 30

	)

873 
	#R_386_TLS_LDM_POP
 31

	)

874 
	#R_386_TLS_LDO_32
 32

	)

875 
	#R_386_TLS_IE_32
 33

	)

876 
	#R_386_TLS_LE_32
 34

	)

877 
	#R_386_TLS_DTPMOD32
 35

	)

878 
	#R_386_TLS_DTPOFF32
 36

	)

879 
	#R_386_TLS_TPOFF32
 37

	)

880 
	#R_386_IRELATIVE
 42

	)

882 
	#R_AARCH64_NONE
 0

	)

883 
	#R_AARCH64_ABS64
 257

	)

884 
	#R_AARCH64_ABS32
 258

	)

885 
	#R_AARCH64_ABS16
 259

	)

886 
	#R_AARCH64_PREL64
 260

	)

887 
	#R_AARCH64_PREL32
 261

	)

888 
	#R_AARCH64_PREL16
 262

	)

889 
	#R_AARCH64_COPY
 1024

	)

890 
	#R_AARCH64_GLOB_DAT
 1025

	)

891 
	#R_AARCH64_JUMP_SLOT
 1026

	)

892 
	#R_AARCH64_RELATIVE
 1027

	)

893 
	#R_AARCH64_TLS_DTPREL64
 1028

	)

894 
	#R_AARCH64_TLS_DTPMOD64
 1029

	)

895 
	#R_AARCH64_TLS_TPREL64
 1030

	)

896 
	#R_AARCH64_TLSDESC
 1031

	)

897 
	#R_AARCH64_IRELATIVE
 1032

	)

899 
	#R_ARM_NONE
 0

	)

900 
	#R_ARM_PC24
 1

	)

901 
	#R_ARM_ABS32
 2

	)

902 
	#R_ARM_REL32
 3

	)

903 
	#R_ARM_PC13
 4

	)

904 
	#R_ARM_ABS16
 5

	)

905 
	#R_ARM_ABS12
 6

	)

906 
	#R_ARM_THM_ABS5
 7

	)

907 
	#R_ARM_ABS8
 8

	)

908 
	#R_ARM_SBREL32
 9

	)

909 
	#R_ARM_THM_PC22
 10

	)

910 
	#R_ARM_THM_PC8
 11

	)

911 
	#R_ARM_AMP_VCALL9
 12

	)

912 
	#R_ARM_SWI24
 13

	)

913 
	#R_ARM_THM_SWI8
 14

	)

914 
	#R_ARM_XPC25
 15

	)

915 
	#R_ARM_THM_XPC22
 16

	)

917 
	#R_ARM_TLS_DTPMOD32
 17

	)

918 
	#R_ARM_TLS_DTPOFF32
 18

	)

919 
	#R_ARM_TLS_TPOFF32
 19

	)

920 
	#R_ARM_COPY
 20

	)

921 
	#R_ARM_GLOB_DAT
 21

	)

922 
	#R_ARM_JUMP_SLOT
 22

	)

923 
	#R_ARM_RELATIVE
 23

	)

924 
	#R_ARM_GOTOFF
 24

	)

925 
	#R_ARM_GOTPC
 25

	)

926 
	#R_ARM_GOT32
 26

	)

927 
	#R_ARM_PLT32
 27

	)

928 
	#R_ARM_GNU_VTENTRY
 100

	)

929 
	#R_ARM_GNU_VTINHERIT
 101

	)

930 
	#R_ARM_RSBREL32
 250

	)

931 
	#R_ARM_THM_RPC22
 251

	)

932 
	#R_ARM_RREL32
 252

	)

933 
	#R_ARM_RABS32
 253

	)

934 
	#R_ARM_RPC24
 254

	)

935 
	#R_ARM_RBASE
 255

	)

938 
	#R_IA_64_NONE
 0

	)

939 
	#R_IA_64_IMM14
 0x21

	)

940 
	#R_IA_64_IMM22
 0x22

	)

941 
	#R_IA_64_IMM64
 0x23

	)

942 
	#R_IA_64_DIR32MSB
 0x24

	)

943 
	#R_IA_64_DIR32LSB
 0x25

	)

944 
	#R_IA_64_DIR64MSB
 0x26

	)

945 
	#R_IA_64_DIR64LSB
 0x27

	)

946 
	#R_IA_64_GPREL22
 0x2®

	)

947 
	#R_IA_64_GPREL64I
 0x2b

	)

948 
	#R_IA_64_GPREL32MSB
 0x2¯

	)

949 
	#R_IA_64_GPREL32LSB
 0x2d

	)

950 
	#R_IA_64_GPREL64MSB
 0x2ê

	)

951 
	#R_IA_64_GPREL64LSB
 0x2‡

	)

952 
	#R_IA_64_LTOFF22
 0x32

	)

953 
	#R_IA_64_LTOFF64I
 0x33

	)

954 
	#R_IA_64_PLTOFF22
 0x3®

	)

955 
	#R_IA_64_PLTOFF64I
 0x3b

	)

956 
	#R_IA_64_PLTOFF64MSB
 0x3ê

	)

957 
	#R_IA_64_PLTOFF64LSB
 0x3‡

	)

958 
	#R_IA_64_FPTR64I
 0x43

	)

959 
	#R_IA_64_FPTR32MSB
 0x44

	)

960 
	#R_IA_64_FPTR32LSB
 0x45

	)

961 
	#R_IA_64_FPTR64MSB
 0x46

	)

962 
	#R_IA_64_FPTR64LSB
 0x47

	)

963 
	#R_IA_64_PCREL60B
 0x48

	)

964 
	#R_IA_64_PCREL21B
 0x49

	)

965 
	#R_IA_64_PCREL21M
 0x4®

	)

966 
	#R_IA_64_PCREL21F
 0x4b

	)

967 
	#R_IA_64_PCREL32MSB
 0x4¯

	)

968 
	#R_IA_64_PCREL32LSB
 0x4d

	)

969 
	#R_IA_64_PCREL64MSB
 0x4ê

	)

970 
	#R_IA_64_PCREL64LSB
 0x4‡

	)

971 
	#R_IA_64_LTOFF_FPTR22
 0x52

	)

972 
	#R_IA_64_LTOFF_FPTR64I
 0x53

	)

973 
	#R_IA_64_LTOFF_FPTR32MSB
 0x54

	)

974 
	#R_IA_64_LTOFF_FPTR32LSB
 0x55

	)

975 
	#R_IA_64_LTOFF_FPTR64MSB
 0x56

	)

976 
	#R_IA_64_LTOFF_FPTR64LSB
 0x57

	)

977 
	#R_IA_64_SEGREL32MSB
 0x5¯

	)

978 
	#R_IA_64_SEGREL32LSB
 0x5d

	)

979 
	#R_IA_64_SEGREL64MSB
 0x5ê

	)

980 
	#R_IA_64_SEGREL64LSB
 0x5‡

	)

981 
	#R_IA_64_SECREL32MSB
 0x64

	)

982 
	#R_IA_64_SECREL32LSB
 0x65

	)

983 
	#R_IA_64_SECREL64MSB
 0x66

	)

984 
	#R_IA_64_SECREL64LSB
 0x67

	)

985 
	#R_IA_64_REL32MSB
 0x6¯

	)

986 
	#R_IA_64_REL32LSB
 0x6d

	)

987 
	#R_IA_64_REL64MSB
 0x6ê

	)

988 
	#R_IA_64_REL64LSB
 0x6‡

	)

989 
	#R_IA_64_LTV32MSB
 0x74

	)

990 
	#R_IA_64_LTV32LSB
 0x75

	)

991 
	#R_IA_64_LTV64MSB
 0x76

	)

992 
	#R_IA_64_LTV64LSB
 0x77

	)

993 
	#R_IA_64_PCREL21BI
 0x79

	)

994 
	#R_IA_64_PCREL22
 0x7®

	)

995 
	#R_IA_64_PCREL64I
 0x7b

	)

996 
	#R_IA_64_IPLTMSB
 0x80

	)

997 
	#R_IA_64_IPLTLSB
 0x81

	)

998 
	#R_IA_64_SUB
 0x85

	)

999 
	#R_IA_64_LTOFF22X
 0x86

	)

1000 
	#R_IA_64_LDXMOV
 0x87

	)

1001 
	#R_IA_64_TPREL14
 0x91

	)

1002 
	#R_IA_64_TPREL22
 0x92

	)

1003 
	#R_IA_64_TPREL64I
 0x93

	)

1004 
	#R_IA_64_TPREL64MSB
 0x96

	)

1005 
	#R_IA_64_TPREL64LSB
 0x97

	)

1006 
	#R_IA_64_LTOFF_TPREL22
 0x9®

	)

1007 
	#R_IA_64_DTPMOD64MSB
 0xa6

	)

1008 
	#R_IA_64_DTPMOD64LSB
 0xa7

	)

1009 
	#R_IA_64_LTOFF_DTPMOD22
 0xØ

	)

1010 
	#R_IA_64_DTPREL14
 0xb1

	)

1011 
	#R_IA_64_DTPREL22
 0xb2

	)

1012 
	#R_IA_64_DTPREL64I
 0xb3

	)

1013 
	#R_IA_64_DTPREL32MSB
 0xb4

	)

1014 
	#R_IA_64_DTPREL32LSB
 0xb5

	)

1015 
	#R_IA_64_DTPREL64MSB
 0xb6

	)

1016 
	#R_IA_64_DTPREL64LSB
 0xb7

	)

1017 
	#R_IA_64_LTOFF_DTPREL22
 0xb®

	)

1019 
	#R_MIPS_NONE
 0

	)

1020 
	#R_MIPS_16
 1

	)

1021 
	#R_MIPS_32
 2

	)

1022 
	#R_MIPS_REL32
 3

	)

1023 
	#R_MIPS_26
 4

	)

1024 
	#R_MIPS_HI16
 5

	)

1025 
	#R_MIPS_LO16
 6

	)

1026 
	#R_MIPS_GPREL16
 7

	)

1027 
	#R_MIPS_LITERAL
 8

	)

1028 
	#R_MIPS_GOT16
 9

	)

1029 
	#R_MIPS_PC16
 10

	)

1030 
	#R_MIPS_CALL16
 11

	)

1031 
	#R_MIPS_GPREL32
 12

	)

1032 
	#R_MIPS_64
 18

	)

1033 
	#R_MIPS_GOTHI16
 21

	)

1034 
	#R_MIPS_GOTLO16
 22

	)

1035 
	#R_MIPS_CALLHI16
 30

	)

1036 
	#R_MIPS_CALLLO16
 31

	)

1038 
	#R_PPC_NONE
 0

	)

1039 
	#R_PPC_ADDR32
 1

	)

1040 
	#R_PPC_ADDR24
 2

	)

1041 
	#R_PPC_ADDR16
 3

	)

1042 
	#R_PPC_ADDR16_LO
 4

	)

1043 
	#R_PPC_ADDR16_HI
 5

	)

1044 
	#R_PPC_ADDR16_HA
 6

	)

1045 
	#R_PPC_ADDR14
 7

	)

1046 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1047 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1048 
	#R_PPC_REL24
 10

	)

1049 
	#R_PPC_REL14
 11

	)

1050 
	#R_PPC_REL14_BRTAKEN
 12

	)

1051 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1052 
	#R_PPC_GOT16
 14

	)

1053 
	#R_PPC_GOT16_LO
 15

	)

1054 
	#R_PPC_GOT16_HI
 16

	)

1055 
	#R_PPC_GOT16_HA
 17

	)

1056 
	#R_PPC_PLTREL24
 18

	)

1057 
	#R_PPC_COPY
 19

	)

1058 
	#R_PPC_GLOB_DAT
 20

	)

1059 
	#R_PPC_JMP_SLOT
 21

	)

1060 
	#R_PPC_RELATIVE
 22

	)

1061 
	#R_PPC_LOCAL24PC
 23

	)

1062 
	#R_PPC_UADDR32
 24

	)

1063 
	#R_PPC_UADDR16
 25

	)

1064 
	#R_PPC_REL32
 26

	)

1065 
	#R_PPC_PLT32
 27

	)

1066 
	#R_PPC_PLTREL32
 28

	)

1067 
	#R_PPC_PLT16_LO
 29

	)

1068 
	#R_PPC_PLT16_HI
 30

	)

1069 
	#R_PPC_PLT16_HA
 31

	)

1070 
	#R_PPC_SDAREL16
 32

	)

1071 
	#R_PPC_SECTOFF
 33

	)

1072 
	#R_PPC_SECTOFF_LO
 34

	)

1073 
	#R_PPC_SECTOFF_HI
 35

	)

1074 
	#R_PPC_SECTOFF_HA
 36

	)

1079 
	#R_PPC64_ADDR64
 38

	)

1080 
	#R_PPC64_ADDR16_HIGHER
 39

	)

1081 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

1082 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

1083 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

1084 
	#R_PPC64_UADDR64
 43

	)

1085 
	#R_PPC64_REL64
 44

	)

1086 
	#R_PPC64_PLT64
 45

	)

1087 
	#R_PPC64_PLTREL64
 46

	)

1088 
	#R_PPC64_TOC16
 47

	)

1089 
	#R_PPC64_TOC16_LO
 48

	)

1090 
	#R_PPC64_TOC16_HI
 49

	)

1091 
	#R_PPC64_TOC16_HA
 50

	)

1092 
	#R_PPC64_TOC
 51

	)

1093 
	#R_PPC64_DTPMOD64
 68

	)

1094 
	#R_PPC64_TPREL64
 73

	)

1095 
	#R_PPC64_DTPREL64
 78

	)

1100 
	#R_PPC_TLS
 67

	)

1101 
	#R_PPC_DTPMOD32
 68

	)

1102 
	#R_PPC_TPREL16
 69

	)

1103 
	#R_PPC_TPREL16_LO
 70

	)

1104 
	#R_PPC_TPREL16_HI
 71

	)

1105 
	#R_PPC_TPREL16_HA
 72

	)

1106 
	#R_PPC_TPREL32
 73

	)

1107 
	#R_PPC_DTPREL16
 74

	)

1108 
	#R_PPC_DTPREL16_LO
 75

	)

1109 
	#R_PPC_DTPREL16_HI
 76

	)

1110 
	#R_PPC_DTPREL16_HA
 77

	)

1111 
	#R_PPC_DTPREL32
 78

	)

1112 
	#R_PPC_GOT_TLSGD16
 79

	)

1113 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1114 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1115 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1116 
	#R_PPC_GOT_TLSLD16
 83

	)

1117 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1118 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1119 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1120 
	#R_PPC_GOT_TPREL16
 87

	)

1121 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1122 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1123 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1130 
	#R_PPC_EMB_NADDR32
 101

	)

1131 
	#R_PPC_EMB_NADDR16
 102

	)

1132 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1133 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1134 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1135 
	#R_PPC_EMB_SDAI16
 106

	)

1136 
	#R_PPC_EMB_SDA2I16
 107

	)

1137 
	#R_PPC_EMB_SDA2REL
 108

	)

1138 
	#R_PPC_EMB_SDA21
 109

	)

1139 
	#R_PPC_EMB_MRKREF
 110

	)

1140 
	#R_PPC_EMB_RELSEC16
 111

	)

1141 
	#R_PPC_EMB_RELST_LO
 112

	)

1142 
	#R_PPC_EMB_RELST_HI
 113

	)

1143 
	#R_PPC_EMB_RELST_HA
 114

	)

1144 
	#R_PPC_EMB_BIT_FLD
 115

	)

1145 
	#R_PPC_EMB_RELSDA
 116

	)

1147 
	#R_SPARC_NONE
 0

	)

1148 
	#R_SPARC_8
 1

	)

1149 
	#R_SPARC_16
 2

	)

1150 
	#R_SPARC_32
 3

	)

1151 
	#R_SPARC_DISP8
 4

	)

1152 
	#R_SPARC_DISP16
 5

	)

1153 
	#R_SPARC_DISP32
 6

	)

1154 
	#R_SPARC_WDISP30
 7

	)

1155 
	#R_SPARC_WDISP22
 8

	)

1156 
	#R_SPARC_HI22
 9

	)

1157 
	#R_SPARC_22
 10

	)

1158 
	#R_SPARC_13
 11

	)

1159 
	#R_SPARC_LO10
 12

	)

1160 
	#R_SPARC_GOT10
 13

	)

1161 
	#R_SPARC_GOT13
 14

	)

1162 
	#R_SPARC_GOT22
 15

	)

1163 
	#R_SPARC_PC10
 16

	)

1164 
	#R_SPARC_PC22
 17

	)

1165 
	#R_SPARC_WPLT30
 18

	)

1166 
	#R_SPARC_COPY
 19

	)

1167 
	#R_SPARC_GLOB_DAT
 20

	)

1168 
	#R_SPARC_JMP_SLOT
 21

	)

1169 
	#R_SPARC_RELATIVE
 22

	)

1170 
	#R_SPARC_UA32
 23

	)

1171 
	#R_SPARC_PLT32
 24

	)

1172 
	#R_SPARC_HIPLT22
 25

	)

1173 
	#R_SPARC_LOPLT10
 26

	)

1174 
	#R_SPARC_PCPLT32
 27

	)

1175 
	#R_SPARC_PCPLT22
 28

	)

1176 
	#R_SPARC_PCPLT10
 29

	)

1177 
	#R_SPARC_10
 30

	)

1178 
	#R_SPARC_11
 31

	)

1179 
	#R_SPARC_64
 32

	)

1180 
	#R_SPARC_OLO10
 33

	)

1181 
	#R_SPARC_HH22
 34

	)

1182 
	#R_SPARC_HM10
 35

	)

1183 
	#R_SPARC_LM22
 36

	)

1184 
	#R_SPARC_PC_HH22
 37

	)

1185 
	#R_SPARC_PC_HM10
 38

	)

1186 
	#R_SPARC_PC_LM22
 39

	)

1187 
	#R_SPARC_WDISP16
 40

	)

1188 
	#R_SPARC_WDISP19
 41

	)

1189 
	#R_SPARC_GLOB_JMP
 42

	)

1190 
	#R_SPARC_7
 43

	)

1191 
	#R_SPARC_5
 44

	)

1192 
	#R_SPARC_6
 45

	)

1193 
	#R_SPARC_DISP64
 46

	)

1194 
	#R_SPARC_PLT64
 47

	)

1195 
	#R_SPARC_HIX22
 48

	)

1196 
	#R_SPARC_LOX10
 49

	)

1197 
	#R_SPARC_H44
 50

	)

1198 
	#R_SPARC_M44
 51

	)

1199 
	#R_SPARC_L44
 52

	)

1200 
	#R_SPARC_REGISTER
 53

	)

1201 
	#R_SPARC_UA64
 54

	)

1202 
	#R_SPARC_UA16
 55

	)

1203 
	#R_SPARC_TLS_GD_HI22
 56

	)

1204 
	#R_SPARC_TLS_GD_LO10
 57

	)

1205 
	#R_SPARC_TLS_GD_ADD
 58

	)

1206 
	#R_SPARC_TLS_GD_CALL
 59

	)

1207 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1208 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1209 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1210 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1211 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1212 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1213 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1214 
	#R_SPARC_TLS_IE_HI22
 67

	)

1215 
	#R_SPARC_TLS_IE_LO10
 68

	)

1216 
	#R_SPARC_TLS_IE_LD
 69

	)

1217 
	#R_SPARC_TLS_IE_LDX
 70

	)

1218 
	#R_SPARC_TLS_IE_ADD
 71

	)

1219 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1220 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1221 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1222 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1223 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1224 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1225 
	#R_SPARC_TLS_TPOFF32
 78

	)

1226 
	#R_SPARC_TLS_TPOFF64
 79

	)

1228 
	#R_X86_64_NONE
 0

	)

1229 
	#R_X86_64_64
 1

	)

1230 
	#R_X86_64_PC32
 2

	)

1231 
	#R_X86_64_GOT32
 3

	)

1232 
	#R_X86_64_PLT32
 4

	)

1233 
	#R_X86_64_COPY
 5

	)

1234 
	#R_X86_64_GLOB_DAT
 6

	)

1235 
	#R_X86_64_JMP_SLOT
 7

	)

1236 
	#R_X86_64_RELATIVE
 8

	)

1237 
	#R_X86_64_GOTPCREL
 9

	)

1238 
	#R_X86_64_32
 10

	)

1239 
	#R_X86_64_32S
 11

	)

1240 
	#R_X86_64_16
 12

	)

1241 
	#R_X86_64_PC16
 13

	)

1242 
	#R_X86_64_8
 14

	)

1243 
	#R_X86_64_PC8
 15

	)

1244 
	#R_X86_64_DTPMOD64
 16

	)

1245 
	#R_X86_64_DTPOFF64
 17

	)

1246 
	#R_X86_64_TPOFF64
 18

	)

1247 
	#R_X86_64_TLSGD
 19

	)

1248 
	#R_X86_64_TLSLD
 20

	)

1249 
	#R_X86_64_DTPOFF32
 21

	)

1250 
	#R_X86_64_GOTTPOFF
 22

	)

1251 
	#R_X86_64_TPOFF32
 23

	)

1252 
	#R_X86_64_PC64
 24

	)

1253 
	#R_X86_64_GOTOFF64
 25

	)

1254 
	#R_X86_64_GOTPC32
 26

	)

1255 
	#R_X86_64_GOT64
 27

	)

1256 
	#R_X86_64_GOTPCREL64
 28

	)

1257 
	#R_X86_64_GOTPC64
 29

	)

1258 
	#R_X86_64_GOTPLT64
 30

	)

1259 
	#R_X86_64_PLTOFF64
 31

	)

1260 
	#R_X86_64_SIZE32
 32

	)

1261 
	#R_X86_64_SIZE64
 33

	)

1262 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

1263 
	#R_X86_64_TLSDESC_CALL
 35

	)

1264 
	#R_X86_64_TLSDESC
 36

	)

1265 
	#R_X86_64_IRELATIVE
 37

	)

	@/usr/include/x86/frame.h

37 #i‚de‡
_MACHINE_FRAME_H_


38 
	#_MACHINE_FRAME_H_
 1

	)

44 #ifde‡
__i386__


49 
	så≠‰ame
 {

50 
	mtf_fs
;

51 
	mtf_es
;

52 
	mtf_ds
;

53 
	mtf_edi
;

54 
	mtf_esi
;

55 
	mtf_ebp
;

56 
	mtf_i•
;

57 
	mtf_ebx
;

58 
	mtf_edx
;

59 
	mtf_ecx
;

60 
	mtf_óx
;

61 
	mtf_å≠no
;

63 
	mtf_îr
;

64 
	mtf_eù
;

65 
	mtf_cs
;

66 
	mtf_eÊags
;

68 
	mtf_e•
;

69 
	mtf_ss
;

74 
	så≠‰ame_vm86
 {

75 
	mtf_fs
;

76 
	mtf_es
;

77 
	mtf_ds
;

78 
	mtf_edi
;

79 
	mtf_esi
;

80 
	mtf_ebp
;

81 
	mtf_i•
;

82 
	mtf_ebx
;

83 
	mtf_edx
;

84 
	mtf_ecx
;

85 
	mtf_óx
;

86 
	mtf_å≠no
;

88 
	mtf_îr
;

89 
	mtf_eù
;

90 
	mtf_cs
;

91 
	mtf_eÊags
;

93 
	mtf_e•
;

94 
	mtf_ss
;

96 
	mtf_vm86_es
;

97 
	mtf_vm86_ds
;

98 
	mtf_vm86_fs
;

99 
	mtf_vm86_gs
;

103 #ifde‡
__amd64__


111 
	så≠‰ame
 {

112 
ªgi°î_t
 
	mtf_rdi
;

113 
ªgi°î_t
 
	mtf_rsi
;

114 
ªgi°î_t
 
	mtf_rdx
;

115 
ªgi°î_t
 
	mtf_rcx
;

116 
ªgi°î_t
 
	mtf_r8
;

117 
ªgi°î_t
 
	mtf_r9
;

118 
ªgi°î_t
 
	mtf_øx
;

119 
ªgi°î_t
 
	mtf_rbx
;

120 
ªgi°î_t
 
	mtf_rbp
;

121 
ªgi°î_t
 
	mtf_r10
;

122 
ªgi°î_t
 
	mtf_r11
;

123 
ªgi°î_t
 
	mtf_r12
;

124 
ªgi°î_t
 
	mtf_r13
;

125 
ªgi°î_t
 
	mtf_r14
;

126 
ªgi°î_t
 
	mtf_r15
;

127 
uöt32_t
 
	mtf_å≠no
;

128 
uöt16_t
 
	mtf_fs
;

129 
uöt16_t
 
	mtf_gs
;

130 
ªgi°î_t
 
	mtf_addr
;

131 
uöt32_t
 
	mtf_Êags
;

132 
uöt16_t
 
	mtf_es
;

133 
uöt16_t
 
	mtf_ds
;

135 
ªgi°î_t
 
	mtf_îr
;

136 
ªgi°î_t
 
	mtf_rù
;

137 
ªgi°î_t
 
	mtf_cs
;

138 
ªgi°î_t
 
	mtf_rÊags
;

139 
ªgi°î_t
 
	mtf_r•
;

140 
ªgi°î_t
 
	mtf_ss
;

143 
	#TF_HASSEGS
 0x1

	)

144 
	#TF_HASBASES
 0x2

	)

145 
	#TF_HASFPXSTATE
 0x4

	)

	@/usr/include/x86/psl.h

36 #i‚de‡
_MACHINE_PSL_H_


37 
	#_MACHINE_PSL_H_


	)

42 
	#PSL_C
 0x00000001

	)

43 
	#PSL_PF
 0x00000004

	)

44 
	#PSL_AF
 0x00000010

	)

45 
	#PSL_Z
 0x00000040

	)

46 
	#PSL_N
 0x00000080

	)

47 
	#PSL_T
 0x00000100

	)

48 
	#PSL_I
 0x00000200

	)

49 
	#PSL_D
 0x00000400

	)

50 
	#PSL_V
 0x00000800

	)

51 
	#PSL_IOPL
 0x00003000

	)

52 
	#PSL_NT
 0x00004000

	)

53 
	#PSL_RF
 0x00010000

	)

54 
	#PSL_VM
 0x00020000

	)

55 
	#PSL_AC
 0x00040000

	)

56 
	#PSL_VIF
 0x00080000

	)

57 
	#PSL_VIP
 0x00100000

	)

58 
	#PSL_ID
 0x00200000

	)

65 
	#PSL_RESERVED_DEFAULT
 0x00000002

	)

71 
	#PSL_KERNEL
 
PSL_RESERVED_DEFAULT


	)

72 
	#PSL_USER
 (
PSL_RESERVED_DEFAULT
 | 
PSL_I
)

	)

89 
	#PSL_USERCHANGE
 (
PSL_C
 | 
PSL_PF
 | 
PSL_AF
 | 
PSL_Z
 | 
PSL_N
 | 
PSL_T
 \

90 | 
PSL_D
 | 
PSL_V
 | 
PSL_NT
 | 
PSL_RF
 | 
PSL_AC
 | 
PSL_ID
)

	)

	@/usr/include/x86/trap.h

36 #i‚de‡
_MACHINE_TRAP_H_


37 
	#_MACHINE_TRAP_H_


	)

44 
	#T_PRIVINFLT
 1

	)

45 
	#T_BPTFLT
 3

	)

46 
	#T_ARITHTRAP
 6

	)

47 
	#T_PROTFLT
 9

	)

48 
	#T_TRCTRAP
 10

	)

49 
	#T_PAGEFLT
 12

	)

50 
	#T_ALIGNFLT
 14

	)

52 
	#T_DIVIDE
 18

	)

53 
	#T_NMI
 19

	)

54 
	#T_OFLOW
 20

	)

55 
	#T_BOUND
 21

	)

56 
	#T_DNA
 22

	)

57 
	#T_DOUBLEFLT
 23

	)

58 
	#T_FPOPFLT
 24

	)

59 
	#T_TSSFLT
 25

	)

60 
	#T_SEGNPFLT
 26

	)

61 
	#T_STKFLT
 27

	)

62 
	#T_MCHK
 28

	)

63 
	#T_XMMFLT
 29

	)

64 
	#T_RESERVED
 30

	)

65 
	#T_DTRACE_RET
 32

	)

70 
	#ILL_RESAD_FAULT
 
T_RESADFLT


	)

71 
	#ILL_PRIVIN_FAULT
 
T_PRIVINFLT


	)

72 
	#ILL_RESOP_FAULT
 
T_RESOPFLT


	)

73 
	#ILL_ALIGN_FAULT
 
T_ALIGNFLT


	)

74 
	#ILL_FPOP_FAULT
 
T_FPOPFLT


	)

77 
	#FPE_INTOVF_TRAP
 0x1

	)

78 
	#FPE_INTDIV_TRAP
 0x2

	)

79 
	#FPE_FLTDIV_TRAP
 0x3

	)

80 
	#FPE_FLTOVF_TRAP
 0x4

	)

81 
	#FPE_FLTUND_TRAP
 0x5

	)

82 
	#FPE_FPU_NP_TRAP
 0x6

	)

83 
	#FPE_SUBRNG_TRAP
 0x7

	)

86 
	#BUS_PAGE_FAULT
 
T_PAGEFLT


	)

87 
	#BUS_SEGNP_FAULT
 
T_SEGNPFLT


	)

88 
	#BUS_STK_FAULT
 
T_STKFLT


	)

89 
	#BUS_SEGM_FAULT
 
T_RESERVED


	)

92 
	#T_USER
 0x100

	)

	@
1
.
1
/usr/include
183
4734
9p.h
9p_fs/mount_p9fs/mount_p9fs.c
9p_fs/p9fs.ko/virtfs.h
9p_fs/p9fs.ko/virtfs_proto.h
9p_fs/p9fs.ko/virtfs_subr.c
9p_fs/p9fs.ko/virtfs_vfops.c
9p_fs/p9fs.ko/virtfs_vnops.c
9p_fs/p9fs.ko/vnode_if.h
9p_fs/p9fs.ko/vnode_if_newproto.h
9p_fs/p9fs.ko/vnode_if_typedef.h
9p_net/bus_if.h
9p_net/client.c
9p_net/device_if.h
9p_net/opt_cam.h
9p_net/protocol.c
9p_net/protocol.h
9p_net/test_cases.c
9p_net/trans_virtio.c
client.h
protocol.h
transport.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/err.h
/usr/include/fcntl.h
/usr/include/geom/geom.h
/usr/include/geom/geom_vfs.h
/usr/include/machine/bus.h
/usr/include/machine/stdarg.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/stdarg.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/bus.h
/usr/include/sys/cdefs.h
/usr/include/sys/condvar.h
/usr/include/sys/dirent.h
/usr/include/sys/errno.h
/usr/include/sys/fcntl.h
/usr/include/sys/fnv_hash.h
/usr/include/sys/kernel.h
/usr/include/sys/limits.h
/usr/include/sys/linker.h
/usr/include/sys/lock.h
/usr/include/sys/malloc.h
/usr/include/sys/module.h
/usr/include/sys/mount.h
/usr/include/sys/mutex.h
/usr/include/sys/namei.h
/usr/include/sys/param.h
/usr/include/sys/pcpu.h
/usr/include/sys/priv.h
/usr/include/sys/proc.h
/usr/include/sys/protosw.h
/usr/include/sys/queue.h
/usr/include/sys/sglist.h
/usr/include/sys/socket.h
/usr/include/sys/socketvar.h
/usr/include/sys/sockopt.h
/usr/include/sys/stat.h
/usr/include/sys/syslog.h
/usr/include/sys/systm.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/vnode.h
/usr/include/sysexits.h
/usr/include/unistd.h
/usr/include/_ctype.h
/usr/include/machine/_align.h
/usr/include/machine/_limits.h
/usr/include/machine/atomic.h
/usr/include/machine/cpufunc.h
/usr/include/machine/elf.h
/usr/include/machine/endian.h
/usr/include/machine/param.h
/usr/include/machine/pcpu.h
/usr/include/machine/proc.h
/usr/include/netinet6/in6.h
/usr/include/sys/_bus_dma.h
/usr/include/sys/_cpuset.h
/usr/include/sys/_iovec.h
/usr/include/sys/_lock.h
/usr/include/sys/_mutex.h
/usr/include/sys/_null.h
/usr/include/sys/_pthreadtypes.h
/usr/include/sys/_rmlock.h
/usr/include/sys/_sockaddr_storage.h
/usr/include/sys/_stdint.h
/usr/include/sys/_sx.h
/usr/include/sys/_timespec.h
/usr/include/sys/_types.h
/usr/include/sys/acl.h
/usr/include/sys/bufobj.h
/usr/include/sys/callout.h
/usr/include/sys/caprights.h
/usr/include/sys/conf.h
/usr/include/sys/event.h
/usr/include/sys/eventhandler.h
/usr/include/sys/filedesc.h
/usr/include/sys/ioccom.h
/usr/include/sys/kobj.h
/usr/include/sys/ktr.h
/usr/include/sys/libkern.h
/usr/include/sys/linker_set.h
/usr/include/sys/lock_profile.h
/usr/include/sys/lockmgr.h
/usr/include/sys/lockstat.h
/usr/include/sys/osd.h
/usr/include/sys/priority.h
/usr/include/sys/rangelock.h
/usr/include/sys/refcount.h
/usr/include/sys/resource.h
/usr/include/sys/rtprio.h
/usr/include/sys/runq.h
/usr/include/sys/select.h
/usr/include/sys/selinfo.h
/usr/include/sys/sigio.h
/usr/include/sys/signal.h
/usr/include/sys/signalvar.h
/usr/include/sys/sockbuf.h
/usr/include/sys/sockstate.h
/usr/include/sys/stdint.h
/usr/include/sys/sx.h
/usr/include/sys/syslimits.h
/usr/include/sys/time.h
/usr/include/sys/ucontext.h
/usr/include/sys/ucred.h
/usr/include/sys/unistd.h
/usr/include/sys/vmmeter.h
/usr/include/x86/bus.h
/usr/include/x86/stdarg.h
/usr/include/xlocale/_ctype.h
/usr/include/xlocale/_stdio.h
/usr/include/xlocale/_stdlib.h
/usr/include/xlocale/_string.h
/usr/include/xlocale/_strings.h
/usr/include/bsm/audit.h
/usr/include/machine/_bus.h
/usr/include/machine/_stdint.h
/usr/include/machine/_types.h
/usr/include/machine/bus_dma.h
/usr/include/machine/runq.h
/usr/include/machine/segments.h
/usr/include/machine/signal.h
/usr/include/machine/ucontext.h
/usr/include/runetype.h
/usr/include/sys/_bitset.h
/usr/include/sys/_callout.h
/usr/include/sys/_lockmgr.h
/usr/include/sys/_pctrie.h
/usr/include/sys/_rwlock.h
/usr/include/sys/_sigset.h
/usr/include/sys/_timeval.h
/usr/include/sys/seq.h
/usr/include/sys/timespec.h
/usr/include/time.h
/usr/include/vm/uma.h
/usr/include/x86/_align.h
/usr/include/x86/_limits.h
/usr/include/x86/elf.h
/usr/include/x86/endian.h
/usr/include/machine/cpu.h
/usr/include/sys/_stack.h
/usr/include/sys/bus_dma.h
/usr/include/sys/elf32.h
/usr/include/sys/elf64.h
/usr/include/sys/elf_generic.h
/usr/include/x86/_stdint.h
/usr/include/x86/_types.h
/usr/include/x86/segments.h
/usr/include/x86/signal.h
/usr/include/x86/ucontext.h
/usr/include/xlocale/_time.h
/usr/include/machine/frame.h
/usr/include/machine/psl.h
/usr/include/machine/trap.h
/usr/include/sys/elf_common.h
/usr/include/x86/frame.h
/usr/include/x86/psl.h
/usr/include/x86/trap.h
